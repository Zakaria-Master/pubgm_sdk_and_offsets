Class: World.Object
	Level* PersistentLevel;//[Offset: 0x20, Size: 4]
	NetDriver* NetDriver;//[Offset: 0x24, Size: 4]
	LineBatchComponent* LineBatcher;//[Offset: 0x28, Size: 4]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x2c, Size: 4]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x30, Size: 4]
	GameNetworkManager* NetworkManager;//[Offset: 0x34, Size: 4]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x38, Size: 4]
	Object*[] ExtraReferencedObjects;//[Offset: 0x3c, Size: 12]
	Object*[] PerModuleDataObjects;//[Offset: 0x48, Size: 12]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x54, Size: 12]
	FString StreamingLevelsPrefix;//[Offset: 0x60, Size: 12]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x6c, Size: 4]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x70, Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x74, Size: 4]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x78, Size: 4]
	ObjectPoolManager ObjectPoolManager;//[Offset: 0x7c, Size: 128]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x100, Size: 4]
	NavigationSystem* NavigationSystem;//[Offset: 0x120, Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x124, Size: 4]
	GameStateBase* GameState;//[Offset: 0x128, Size: 4]
	AISystemBase* AISystem;//[Offset: 0x12c, Size: 4]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x130, Size: 4]
	Level*[] Levels;//[Offset: 0x134, Size: 12]
	LevelCollection[] LevelCollections;//[Offset: 0x140, Size: 12]
	Level* CurrentLevel;//[Offset: 0x150, Size: 4]
	GameInstance* OwningGameInstance;//[Offset: 0x154, Size: 4]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x158, Size: 12]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x164, Size: 4]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x168, Size: 4]
	WorldComposition* WorldComposition;//[Offset: 0x6cc, Size: 4]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x712, Size: 1]

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x2bb69b8

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0x88, Size: 4]
	Model* Model;//[Offset: 0x8c, Size: 4]
	ModelComponent*[] ModelComponents;//[Offset: 0x90, Size: 12]
	LevelActorContainer* ActorCluster;//[Offset: 0x9c, Size: 4]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xa0, Size: 4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xa4, Size: 4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xa8, Size: 4]
	NavigationObjectBase* NavListStart;//[Offset: 0xac, Size: 4]
	NavigationObjectBase* NavListEnd;//[Offset: 0xb0, Size: 4]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0xb4, Size: 12]
	float LightmapTotalSize;//[Offset: 0xc0, Size: 4]
	float ShadowmapTotalSize;//[Offset: 0xc4, Size: 4]
	Vector[] StaticNavigableGeometry;//[Offset: 0xc8, Size: 12]
	Guid[] StreamingTextureGuids;//[Offset: 0xd4, Size: 12]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x180, Size: 16]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x190, Size: 4]
	IntVector LightBuildLevelOffset;//[Offset: 0x194, Size: 12]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a0, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a0, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a0, Size: 1]
	int HighDeviceMemoryTotalSize;//[Offset: 0x1b4, Size: 4]
	int LowDeviceMemoryTotalSize;//[Offset: 0x1b8, Size: 4]
	WorldSettings* WorldSettings;//[Offset: 0x1f4, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x1fc, Size: 12]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x5c0, Size: 4]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CullingScreenSize;//[Offset: 0x264, Size: 4]
	float MinDrawDistance;//[Offset: 0x268, Size: 4]
	float LDMaxDrawDistance;//[Offset: 0x26c, Size: 4]
	float MaxDrawDistanceOffset;//[Offset: 0x270, Size: 4]
	float CachedMaxDrawDistance;//[Offset: 0x274, Size: 4]
	bool UseScopeDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 1]
	byte DepthPriorityGroup;//[Offset: 0x279, Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x27a, Size: 1]
	enum LightmapType;//[Offset: 0x27b, Size: 1]
	bool bBulletCanBreakThrough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27c, Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27c, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27c, Size: 1]
	bool bAsyncGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27c, Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27d, Size: 1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27d, Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27d, Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27d, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27d, Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27d, Size: 1]
	bool bAllowCullDistanceVolumeMovable;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27d, Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27d, Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27e, Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27e, Size: 1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27e, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27e, Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27e, Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27e, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27e, Size: 1]
	bool bDrawIdeaOutline;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27e, Size: 1]
	bool bIdeaOutlineUseNormalInVertexColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27f, Size: 1]
	bool bOverrideIdeaOutlineColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27f, Size: 1]
	LinearColor IdeaOutlineColor;//[Offset: 0x280, Size: 16]
	bool bOverrideIdeaOutlineThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 1]
	float IdeaOutlineThickness;//[Offset: 0x294, Size: 4]
	bool bDrawDyeing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 1]
	enum DrawDyeingMode;//[Offset: 0x299, Size: 1]
	LinearColor VisibleDyeingColor;//[Offset: 0x29c, Size: 16]
	LinearColor OccludedDyeingColor;//[Offset: 0x2ac, Size: 16]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bc, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2bc, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2bc, Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2bc, Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2bc, Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2bc, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2bc, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2bc, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bd, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2bd, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2bd, Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2bd, Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2bd, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2bd, Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2bd, Size: 1]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2bd, Size: 1]
	bool bNearCascade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2be, Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2be, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2be, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2be, Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2be, Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2be, Size: 1]
	bool bReceiveCombinedCSMAndStaticShadowsFromStationaryLights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2be, Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2be, Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bf, Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2bf, Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2bf, Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2bf, Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2bf, Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2bf, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2bf, Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x2c0, Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x2c2, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x2c3, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x2c4, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x2c8, Size: 4]
	int TranslucencySortPriority;//[Offset: 0x2cc, Size: 4]
	int TranslucencySortGroupPriority;//[Offset: 0x2d0, Size: 4]
	int VisibilityId;//[Offset: 0x2d4, Size: 4]
	bool bUseAsyncCompilePSO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc, Size: 1]
	byte PrimitiveShadingStrategy;//[Offset: 0x2dd, Size: 1]
	byte ShadingRate;//[Offset: 0x2de, Size: 1]
	float FOVAdaptiveShadingFactor;//[Offset: 0x2e0, Size: 4]
	bool bUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e4, Size: 1]
	float OverrideCylinderMaxDrawHeight;//[Offset: 0x2ec, Size: 4]
	float BoundsScale;//[Offset: 0x2f4, Size: 4]
	float OCBoundsScale;//[Offset: 0x2f8, Size: 4]
	int OCBoundsExtent;//[Offset: 0x2fc, Size: 4]
	float LastSubmitTime;//[Offset: 0x300, Size: 4]
	float LastRenderTime;//[Offset: 0x304, Size: 4]
	float LastRenderTimeOnScreen;//[Offset: 0x308, Size: 4]
	float ShadowLastRenderTime;//[Offset: 0x30c, Size: 4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x310, Size: 12]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x31c, Size: 12]
	MaterialInterface*[] LODDefault;//[Offset: 0x330, Size: 12]
	BodyInstance BodyInstance;//[Offset: 0x380, Size: 320]
	delegate OnComponentHit;//[Offset: 0x4c0, Size: 12]
	delegate OnComponentBeginOverlap;//[Offset: 0x4cc, Size: 12]
	delegate OnComponentEndOverlap;//[Offset: 0x4d8, Size: 12]
	delegate OnComponentWake;//[Offset: 0x4e4, Size: 12]
	delegate OnComponentSleep;//[Offset: 0x4f0, Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x508, Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x514, Size: 12]
	delegate OnClicked;//[Offset: 0x520, Size: 12]
	delegate OnReleased;//[Offset: 0x52c, Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x538, Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x544, Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x550, Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x55c, Size: 12]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x574, Size: 4]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x578, Size: 60]
	void WakeRigidBody(FName BoneName);// 0x450d4b0
	void WakeAllRigidBodies();// 0x450d494
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x450d3fc
	void SetVisibleDyeingColor(out const LinearColor InColor);// 0x450d378
	void SetUnderWater(bool bNewUnderWater);// 0x450d2f8
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x450d280
	void SetTranslucentSortGroupPriority(int NewTranslucentSortGroupPriority);// 0x450d208
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x450d188
	void SetSimulatePhysics(bool bSimulate);// 0x450d100
	void SetRenderInMono(bool bValue);// 0x450d080
	void SetRenderInMainPass(bool bValue);// 0x450d000
	void SetRenderCustomDepth(bool bValue);// 0x450cf80
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x450cf00
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x2238c30
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x450cdec
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x450ccc8
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x450ccc8
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x450cbb4
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x450caa0
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x450c968
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x450c968
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x450c8e8
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x450c868
	void SetOccludedDyeingColor(out const LinearColor InColor);// 0x450c7e4
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x450c75c
	void SetMaterialByNameAsyncCallBack(FName MaterialSlotName, MaterialInterface* AssetPtr);// 0x450c58c
	void SetMaterialByNameAsync(FName MaterialSlotName, FString MaterialPath);// 0x450c3e0
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x450c31c
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x20ffb7c
	void SetMassScale(FName BoneName, float InMassScale);// 0x450c250
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x450c134
	void SetMaskFilter(int InMaskFilter);// 0x450c0bc
	void SetLODDefault(int LODIndex, MaterialInterface* LODMat);// 0x450c000
	void SetLockedAxis(byte LockedAxis);// 0x450bf80
	void SetLinearDamping(float InDamping);// 0x1eb9344
	void SetIdeaOutlineUseNormalInVertexColor(bool bNewUseNormalInVertexColor);// 0x1f5da78
	void SetEnableGravity(bool bGravityEnabled);// 0x4418c10
	void SetDrawIdeaOutline(bool bNewDrawOutline);// 0x450bf00
	void SetDrawDyeingMode(enum InDrawDyeingMode);// 0x450be88
	void SetDrawDyeing(bool bNewDrawOutline);// 0x450be08
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x450bd90
	void SetCustomDepthStencilValue(int Value);// 0x450bd18
	void SetCullDistance(float NewCullDistance);// 0x450bca0
	void SetConstraintMode(byte ConstraintMode);// 0x450bc20
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x450bb5c
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x450badc
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x450ba5c
	void SetCollisionObjectType(byte Channel);// 0x450b9dc
	void SetCollisionEnabled(byte NewType);// 0x450b95c
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x450b89c
	void SetCastShadow(bool NewCastShadow);// 0x44ca8cc
	void SetBoundsScale(float NewBoundsScale);// 0x450b824
	void SetAngularDamping(float InDamping);// 0x223798c
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x450b758
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x450b67c
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x450b574
	void SetAllPhysicsAngularVelocity(out const Vector NewAngVel, bool bAddToCurrent);// 0x450b498
	void SetAllMassScale(float InMassScale);// 0x2239df8
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x450b3ac
	void PutRigidBodyToSleep(FName BoneName);// 0x450b334
	void OverrideIdeaOutlineThickness(bool bOverride, const float InThickness);// 0x450b26c
	void OverrideIdeaOutlineColor(bool bOverride, out const LinearColor InOutlineColor);// 0x450b198
	void K2_SetMoveIgnoreMask(int InIgnoreMask);// 0x450b124
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x450ae34
	bool K2_IsQueryCollisionEnabled();// 0x450adf4
	bool K2_IsPhysicsCollisionEnabled();// 0x450adb4
	bool K2_IsCollisionEnabled();// 0x450ad7c
	int K2_GetMoveIgnoreMask();// 0x450ad60
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x450ace0
	bool IsOverlappingActor(const Actor* Other);// 0x450ac60
	bool IsGravityEnabled();// 0x450ac30
	bool IsAnyRigidBodyAwake();// 0x450ac00
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x450ab3c
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x450aa78
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x450aa3c
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x450a958
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x450a8c4
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x450a830
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x450a784
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x450a784
	void GetOverlappingComponents(out PrimitiveComponent*[] InOverlappingComponents);// 0x450a6b8
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x450a5a4
	int GetNumMaterials();// 0x44115f8
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x450a4c8
	MaterialInterface* GetMaterial(int ElementIndex);// 0x450a440
	float GetMassScale(FName BoneName);// 0x450a3b8
	float GetMass();// 0x450a388
	int GetMaskFilter();// 0x450a36c
	float GetLinearDamping();// 0x450a33c
	Vector GetInertiaTensor(FName BoneName);// 0x450a2a0
	byte GetCollisionResponseToChannel(byte Channel);// 0x450a218
	FName GetCollisionProfileName();// 0x450a1d8
	byte GetCollisionObjectType();// 0x450a1a8
	byte GetCollisionEnabled();// 0x209e474
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x450a078
	Vector GetCenterOfMass(FName BoneName);// 0x4509fe4
	float GetAngularDamping();// 0x4509fb4
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial);// 0x4509ee8
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x4509e1c
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x4509d94
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x4509cd4
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x4509c14
	void ClearMoveIgnoreComponents();// 0x4509be4
	void ClearMoveIgnoreActors();// 0x4509bd0
	bool CanCharacterStepUp(Pawn* Pawn);// 0x4509b48
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x4509904
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x4509a14
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x4509904
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x4509760
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x45095bc
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x45094a4
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x450938c
	void AddForceAtLocationLocal(Vector force, Vector Location, FName BoneName);// 0x4509274
	void AddForceAtLocation(Vector force, Vector Location, FName BoneName);// 0x450915c
	void AddForce(Vector force, FName BoneName, bool bAccelChange);// 0x4509044
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x4508f2c
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x4508df0
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x4508cd8

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xc0, Size: 8]
	SceneComponent* AttachParent;//[Offset: 0xc8, Size: 4]
	FName AttachSocketName;//[Offset: 0xd0, Size: 8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd8, Size: 12]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe4, Size: 12]
	Vector RelativeLocation;//[Offset: 0x118, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x124, Size: 12]
	Vector RelativeScale3D;//[Offset: 0x130, Size: 12]
	Vector ComponentVelocity;//[Offset: 0x1a0, Size: 12]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ac, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ac, Size: 1]
	int AntiCheatRandValue0;//[Offset: 0x1b0, Size: 4]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b4, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b4, Size: 1]
	int AntiCheatRandValue1;//[Offset: 0x1b8, Size: 4]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bc, Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1bc, Size: 1]
	int AntiCheatRandValue2;//[Offset: 0x1c0, Size: 4]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 1]
	int AntiCheatRandValue3;//[Offset: 0x1c8, Size: 4]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1cc, Size: 1]
	int AntiCheatRandValue4;//[Offset: 0x1d0, Size: 4]
	int AntiCheatRandValue5;//[Offset: 0x1d8, Size: 4]
	bool bAbsoluteTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1dc, Size: 1]
	byte Mobility;//[Offset: 0x1dd, Size: 1]
	int AntiCheatRandValue6;//[Offset: 0x1e0, Size: 4]
	byte DetailMode;//[Offset: 0x1e4, Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x230, Size: 12]
	void ToggleVisibility(bool bPropagateToChildren);// 0x451e3b4
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x451e2f0
	void SetWorldScale3D(Vector NewScale);// 0x451e280
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x451e1a8
	void SetSkipUpdateChildTransforms(bool EnableSkipUpdateChildTransforms);// 0x451e12c
	void SetRelativeScale3D(Vector NewScale3D);// 0x451e0b4
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x451dfe0
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x451dec0
	void ResetRelativeTransform();// 0x451deac
	void OnRep_Visibility(bool OldValue);// 0x451de2c
	void OnRep_Transform();// 0x451de18
	void OnRep_AttachSocketName();// 0x451de04
	void OnRep_AttachParent();// 0x451de04
	void OnRep_AttachChildren();// 0x451ddf0
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x451dc10
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x451da88
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x451d8cc
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x451d750
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x451d570
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x451d3f4
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x451d238
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x451d0bc
	Transform K2_GetComponentToWorld();// 0x451d05c
	Vector K2_GetComponentScale();// 0x451d014
	Rotator K2_GetComponentRotation();// 0x451cfcc
	Vector K2_GetComponentLocation();// 0x451cf84
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x451ce34
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x451cc4c
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x451caf0
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x451c910
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x451c794
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x451c618
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x451c49c
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x451c320
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x451c140
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x451bfbc
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x451be40
	bool IsVisible();// 0x1eb8ec4
	bool IsSimulatingPhysics(FName BoneName);// 0x451bdb8
	bool IsAnySimulatingPhysics();// 0x22d2de4
	Vector GetUpVector();// 0x451bd70
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x451bc74
	Rotator GetSocketRotation(FName InSocketName);// 0x451bbd8
	Quat GetSocketQuaternion(FName InSocketName);// 0x451bb3c
	Vector GetSocketLocation(FName InSocketName);// 0x451baa0
	Vector GetRightVector();// 0x451ba58
	Transform GetRelativeTransform();// 0x451b9f8
	PhysicsVolume* GetPhysicsVolume();// 0x451b9d0
	void GetParentComponents(out SceneComponent*[] Parents);// 0x451b904
	int GetNumChildrenComponents();// 0x451b8dc
	Vector GetForwardVector();// 0x44f3214
	Vector GetComponentVelocity();// 0x451b88c
	Transform GetComponentTransformViewTranslatedBP();// 0x451b850
	Transform GetComponentLocal(out const Transform LocalTransform);// 0x451b750
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x451b634
	SceneComponent* GetChildComponent(int ChildIndex);// 0x451b5b4
	FName GetAttachSocketName();// 0x451b598
	SceneComponent* GetAttachParent();// 0x451b57c
	FName[] GetAllSocketNames();// 0x451b4bc
	bool DoesSocketExist(FName InSocketName);// 0x451b434
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x451b35c

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x20, Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	FName[] ComponentTags;//[Offset: 0x60, Size: 12]
	bool bDestroyIfOnClientNoLocalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	float NetUpdateFrequency;//[Offset: 0x70, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x78, Size: 12]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x84, Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x84, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86, Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86, Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x86, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x86, Size: 1]
	bool bIsClientOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x87, Size: 1]
	enum CreationMethod;//[Offset: 0x89, Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x8c, Size: 12]
	delegate OnComponentActivated;//[Offset: 0x9c, Size: 12]
	delegate OnComponentDeactivated;//[Offset: 0xa8, Size: 12]
	void ToggleActive();// 0x2087384
	void SetTickGroup(byte NewTickGroup);// 0x43df0c8
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x43df048
	void SetIsReplicated(bool ShouldReplicate);// 0x43defc8
	void SetComponentTickInterval(float TickInterval);// 0x43def50
	void SetComponentTickEnabled(bool bEnabled);// 0x2147390
	void SetAutoActivate(bool bNewAutoActivate);// 0x1ef53c0
	void SetActive(bool bNewActive, bool bReset);// 0x43dee78
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x43dedf8
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x43ded78
	void ReceiveTick(float DeltaSeconds);// 0x2bb69b8
	void ReceiveEndPlay(byte EndPlayReason);// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void OnRep_Replicates();// 0x43ded64
	void OnRep_IsActive();// 0x43ded50
	void K2_DestroyComponent(Object* Object);// 0x43decd8
	bool IsComponentTickEnabled();// 0x43decb0
	bool IsBeingDestroyed();// 0x43dec90
	bool IsActive();// 0x23bdee4
	Actor* GetOwner();// 0x43dec74
	float GetComponentTickInterval();// 0x43dec4c
	void ForceNetUpdate();// 0x208d7e0
	void Deactivate();// 0x208734c
	bool ComponentHasTag(FName Tag);// 0x43debcc
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x43deb4c
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x43deacc
	void Activate(bool bReset);// 0x1ef5338

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x324, Size: 4]
	int Priority;//[Offset: 0x328, Size: 4]
	float FluidFriction;//[Offset: 0x32c, Size: 4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x2fc, Size: 1]
	Color BrushColor;//[Offset: 0x300, Size: 4]
	int PolyFlags;//[Offset: 0x304, Size: 4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x308, Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x308, Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x308, Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x308, Size: 1]
	Model* Brush;//[Offset: 0x30c, Size: 4]
	BrushComponent* BrushComponent;//[Offset: 0x310, Size: 4]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x318, Size: 12]

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x1c, Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	float CustomTimeDilation;//[Offset: 0x5c, Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 1]
	bool bOnlyRelevantToConnection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60, Size: 1]
	bool bRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x60, Size: 1]
	bool bFastDistBasedRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 1]
	bool bFastCustomOwnersRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61, Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x61, Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x61, Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x61, Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x61, Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x61, Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62, Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x62, Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x62, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63, Size: 1]
	byte RemoteRole;//[Offset: 0x64, Size: 1]
	Actor* Owner;//[Offset: 0x68, Size: 4]
	byte WorldParallelismID;//[Offset: 0x6c, Size: 1]
	FName NetDriverName;//[Offset: 0x78, Size: 8]
	RepMovement ReplicatedMovement;//[Offset: 0x80, Size: 72]
	float InitialLifeSpan;//[Offset: 0xc8, Size: 4]
	RepAttachment AttachmentReplication;//[Offset: 0xd0, Size: 56]
	byte Role;//[Offset: 0x108, Size: 1]
	byte NetDormancy;//[Offset: 0x109, Size: 1]
	byte AutoReceiveInput;//[Offset: 0x10a, Size: 1]
	int InputPriority;//[Offset: 0x10c, Size: 4]
	InputComponent* InputComponent;//[Offset: 0x110, Size: 4]
	float NetCullDistanceSquared;//[Offset: 0x114, Size: 4]
	int NetTag;//[Offset: 0x118, Size: 4]
	float NetConsiderFrequency;//[Offset: 0x120, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x124, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0x128, Size: 4]
	bool bActorReplicateFreqLODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12c, Size: 1]
	bool bActorReplicateFreqLODDistEnhancedOnBack;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12c, Size: 1]
	ActorReplicateFreqLODConfig[] ActorReplicateFreqLODConfigs;//[Offset: 0x130, Size: 12]
	int NetUpdateGroupID;//[Offset: 0x140, Size: 4]
	float NetPriority;//[Offset: 0x144, Size: 4]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14c, Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 1]
	bool bLowUpdateRateForReplay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14d, Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14d, Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14d, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x14e, Size: 1]
	Pawn* Instigator;//[Offset: 0x15c, Size: 4]
	Actor*[] Children;//[Offset: 0x160, Size: 12]
	SceneComponent* RootComponent;//[Offset: 0x16c, Size: 4]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x170, Size: 12]
	FName[] Layers;//[Offset: 0x188, Size: 12]
	ChildActorComponent* ParentComponent;//[Offset: 0x194, Size: 8]
	FName[] Tags;//[Offset: 0x19c, Size: 12]
	uint64 HiddenEditorViews;//[Offset: 0x1a8, Size: 8]
	delegate OnTakeAnyDamage;//[Offset: 0x1b0, Size: 12]
	delegate OnTakePointDamage;//[Offset: 0x1bc, Size: 12]
	delegate OnActorBeginOverlap;//[Offset: 0x1c8, Size: 12]
	delegate OnActorEndOverlap;//[Offset: 0x1d4, Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x1e0, Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x1ec, Size: 12]
	delegate OnClicked;//[Offset: 0x1f8, Size: 12]
	delegate OnReleased;//[Offset: 0x204, Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x210, Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x21c, Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x228, Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x234, Size: 12]
	delegate OnActorHit;//[Offset: 0x240, Size: 12]
	delegate OnDestroyed;//[Offset: 0x24c, Size: 12]
	delegate OnEndPlay;//[Offset: 0x258, Size: 12]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x2dc, Size: 12]
	ActorComponent*[] InstanceComponents;//[Offset: 0x2e8, Size: 12]
	bool WasRecentlyRendered(float Tolerance);// 0x43dbcd8
	void UserConstructionScript();// 0x2bb69b8
	void TearOff();// 0x1f1ee34
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x43dbc1c
	void SetTickGroup(byte NewTickGroup);// 0x43dbba4
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x43dbb24
	void SetReplicates(bool bInReplicates);// 0x43dbaa4
	void SetReplicateMovement(bool bInReplicateMovement);// 0x43dba1c
	void SetOwner(Actor* NewOwner);// 0x1f61750
	void SetNetUpdateGroupID(int InGroupID);// 0x2100348
	void SetNetUpdateGroup(Actor* InConnectionActor);// 0x43db99c
	void SetNetDormancy(byte NewDormancy);// 0x43db924
	void SetLifeSpan(float InLifespan);// 0x43db8a4
	void SetActorTickInterval(float TickInterval);// 0x43db82c
	void SetActorTickEnabled(bool bEnabled);// 0x43db7ac
	void SetActorScale3D(Vector NewScale3D);// 0x43db73c
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x43db6cc
	void SetActorHiddenInGame(bool bNewHidden);// 0x43db644
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x43db5c4
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x1f6bee0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x1f6bf60
	void ReceiveTick(float DeltaSeconds);// 0x2bb69b8
	void ReceiveReInitForReplay();// 0x2bb69b8
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x2bb69b8
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x2bb69b8
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x2bb69b8
	void ReceiveEndPlay(byte EndPlayReason);// 0x2bb69b8
	void ReceiveDestroyed();// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x2bb69b8
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x2bb69b8
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x2bb69b8
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x2bb69b8
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x2bb69b8
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x2bb69b8
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x2bb69b8
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x2bb69b8
	void ReceiveActorEndCursorOver();// 0x2bb69b8
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x2bb69b8
	void ReceiveActorBeginCursorOver();// 0x2bb69b8
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x43db4b0
	void OnRep_ReplicateMovement();// 0x2047094
	void OnRep_ReplicatedMovement();// 0x1eed16c
	void OnRep_Owner();// 0x2087384
	void OnRep_Instigator();// 0x43db494
	void OnRep_AttachmentReplication();// 0x1ff4a28
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x43db2f8
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x23c169c
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x43db230
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x43db040
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x43daf70
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x43dad90
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x43dac0c
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x43daa90
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x43da8c0
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x43da740
	void K2_OnReset();// 0x2bb69b8
	void K2_OnEndViewTarget(PlayerController* PC);// 0x2bb69b8
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x2bb69b8
	SceneComponent* K2_GetRootComponent();// 0x43da724
	Rotator K2_GetActorRotation();// 0x43da630
	Vector K2_GetActorLocation();// 0x43da5f0
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x43da4f0
	void K2_DestroyComponent(ActorComponent* Component);// 0x43da478
	void K2_DestroyActor();// 0x1ef1934
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x43da298
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x43da0b8
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x43d9f64
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x43d9e10
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x43d9c30
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x43d9aac
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x43d9930
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x43d9750
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x43d95d4
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x43d9458
	bool IsOverlappingActor(const Actor* Other);// 0x43d93d8
	bool IsChildActor();// 0x43d93b0
	bool IsActorTickEnabled();// 0x43d9388
	bool IsActorBeingDestroyed();// 0x43d9364
	bool HasAuthority();// 0x43d933c
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x43d92bc
	Vector GetVelocity();// 0x22232fc
	Transform GetTransform();// 0x43d9270
	bool GetTickableWhenPaused();// 0x43d9248
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x43d91c8
	byte GetRole();// 0x43d91a0
	byte GetRemoteRole();// 0x43d9184
	ChildActorComponent* GetParentComponent();// 0x43d915c
	Actor* GetParentActor();// 0x43d9134
	Actor* GetOwner();// 0x43d9118
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x43d904c
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x43d8f38
	float GetLifeSpan();// 0x43d8f08
	Controller* GetInstigatorController();// 0x43d8ee0
	Pawn* GetInstigator();// 0x43d8eb8
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x43d8bb4
	float GetInputAxisValue(const FName InputAxisName);// 0x43d8b34
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x43d883c
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x43d87bc
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x43d873c
	float GetGameTimeSinceCreation();// 0x43d8714
	float GetDotProductTo(const Actor* OtherActor);// 0x43d8694
	float GetDistanceTo(const Actor* OtherActor);// 0x43d8614
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x43d84c0
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x43d83b8
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x43d8338
	FName GetAttachParentSocketName();// 0x43d82f8
	Actor* GetAttachParentActor();// 0x43d82d0
	void GetAttachedActors(out Actor*[] OutActors);// 0x43d8204
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x43d80e8
	Vector GetActorUpVector();// 0x43d8074
	float GetActorTimeDilation();// 0x43d804c
	float GetActorTickInterval();// 0x43d8024
	Vector GetActorScale3D();// 0x43d7fdc
	Vector GetActorRightVector();// 0x43d7f68
	Vector GetActorRelativeScale3D();// 0x43d7f20
	Vector GetActorForwardVector();// 0x43d7eac
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x43d7dcc
	bool GetActorEnableCollision();// 0x43d7dac
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x43d7c84
	void ForceNetUpdate();// 0x208d7e0
	void ForceNetConsider();// 0x1eb8e00
	void FlushNetDormancy();// 0x43d7c70
	void EnableInput(PlayerController* PlayerController);// 0x43d7bf0
	void DisableInput(PlayerController* PlayerController);// 0x43d7b70
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x43d7af0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x22f61b8
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x43d7a70
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x43d78b0
	bool ActorHasTag(FName Tag);// 0x43d782c

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 1]
	byte G;//[Offset: 0x1, Size: 1]
	byte R;//[Offset: 0x2, Size: 1]
	byte A;//[Offset: 0x3, Size: 1]

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x5b4, Size: 4]
	BodySetup* BrushBodySetup;//[Offset: 0x5b8, Size: 4]
	Vector PrePivot;//[Offset: 0x5bc, Size: 12]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x1c, Size: 52]
	FName BoneName;//[Offset: 0x50, Size: 8]
	byte PhysicsType;//[Offset: 0x58, Size: 1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 4]
	StaticMesh*[] PhysSimpleStaticMeshList;//[Offset: 0x60, Size: 12]
	byte CollisionReponse;//[Offset: 0x6c, Size: 1]
	bool bCollisionPerShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 1]
	byte[] SphereCollisionEnabledList;//[Offset: 0x70, Size: 12]
	byte[] CapsuleCollisionEnabledList;//[Offset: 0x7c, Size: 12]
	byte[] BoxCollisionEnabledList;//[Offset: 0x88, Size: 12]
	byte[] ConvexCollisionEnabledList;//[Offset: 0x94, Size: 12]
	byte[] TriMeshesCollisionEnabledList;//[Offset: 0xa0, Size: 12]
	byte CollisionTraceFlag;//[Offset: 0xac, Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0xb0, Size: 320]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x1f0, Size: 16]
	float BuildScale;//[Offset: 0x200, Size: 4]
	Vector BuildScale3D;//[Offset: 0x204, Size: 12]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 12]
	KBoxElem[] BoxElems;//[Offset: 0xc, Size: 12]
	KSphylElem[] SphylElems;//[Offset: 0x18, Size: 12]
	KConvexElem[] ConvexElems;//[Offset: 0x24, Size: 12]

--------------------------------
Class: KSphereElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Vector Center;//[Offset: 0x50, Size: 12]
	float Radius;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: KShapeElem

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 16]
	Plane YPlane;//[Offset: 0x10, Size: 16]
	Plane ZPlane;//[Offset: 0x20, Size: 16]
	Plane WPlane;//[Offset: 0x30, Size: 16]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: KBoxElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Quat Orientation;//[Offset: 0x50, Size: 16]
	Vector Center;//[Offset: 0x60, Size: 12]
	Rotator Rotation;//[Offset: 0x6c, Size: 12]
	float X;//[Offset: 0x78, Size: 4]
	float Y;//[Offset: 0x7c, Size: 4]
	float Z;//[Offset: 0x80, Size: 4]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 4]
	float Yaw;//[Offset: 0x4, Size: 4]
	float Roll;//[Offset: 0x8, Size: 4]

--------------------------------
Class: KSphylElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Quat Orientation;//[Offset: 0x50, Size: 16]
	Vector Center;//[Offset: 0x60, Size: 12]
	Rotator Rotation;//[Offset: 0x6c, Size: 12]
	float Radius;//[Offset: 0x78, Size: 4]
	float Length;//[Offset: 0x7c, Size: 4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x10, Size: 12]
	Box ElemBox;//[Offset: 0x1c, Size: 28]
	Transform Transform;//[Offset: 0x40, Size: 48]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 12]
	Vector Max;//[Offset: 0xc, Size: 12]
	byte IsValid;//[Offset: 0x18, Size: 1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 16]
	Vector Translation;//[Offset: 0x10, Size: 12]
	Vector Scale3D;//[Offset: 0x20, Size: 12]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x1c, Size: 4]
	byte FrictionCombineMode;//[Offset: 0x20, Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	float Restitution;//[Offset: 0x24, Size: 4]
	byte RestitutionCombineMode;//[Offset: 0x28, Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	Color MaterialColor;//[Offset: 0x2c, Size: 4]
	float Density;//[Offset: 0x30, Size: 4]
	float RaiseMassToPower;//[Offset: 0x34, Size: 4]
	float DestructibleDamageThresholdScale;//[Offset: 0x38, Size: 4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x3c, Size: 4]
	byte SurfaceType;//[Offset: 0x40, Size: 1]
	float TireFrictionScale;//[Offset: 0x44, Size: 4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x48, Size: 12]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 4]
	float FrictionScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x20, Size: 4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: StaticMesh.Object
	MaterialInterface* ReplaceMaterial;//[Offset: 0x28, Size: 4]
	int MinLOD;//[Offset: 0x2c, Size: 4]
	MaterialInterface*[] Materials;//[Offset: 0x30, Size: 12]
	StaticMaterial[] StaticMaterials;//[Offset: 0x3c, Size: 12]
	float LightmapUVDensity;//[Offset: 0x48, Size: 4]
	int LightMapResolution;//[Offset: 0x4c, Size: 4]
	int LightMapCoordinateIndex;//[Offset: 0x50, Size: 4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x54, Size: 4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x5c, Size: 4]
	int LODForCollision;//[Offset: 0x60, Size: 4]
	float CullingScreenSize;//[Offset: 0x64, Size: 4]
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	bool bIsGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 1]
	bool bIsTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b, Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6b, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0xa4, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd4, Size: 12]
	Vector PositiveBoundsExtension;//[Offset: 0xe8, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0xf4, Size: 12]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x100, Size: 28]
	Vector4[] OcclusionCullingVertex;//[Offset: 0x11c, Size: 12]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0x128, Size: 12]
	bool bUseQuantization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	int ElementToIgnoreForTexFactor;//[Offset: 0x138, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x13c, Size: 12]
	NavCollision* NavCollision;//[Offset: 0x148, Size: 4]
	int GetNumSections(int InLOD);// 0x453c924
	int GetNumLODs();// 0x453c8fc
	int GetMaterialIndex(FName MaterialSlotName);// 0x453c87c
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x453c7fc
	BoxSphereBounds GetBounds();// 0x453c7a8
	Box GetBoundingBox();// 0x453c754

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x20, Size: 4]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x2c, Size: 20]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x40, Size: 12]
	void SetStreamingTextureMipOffset(int NewMipOffset, bool SizeLimited);// 0x44c7ab0
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x44c7948
	PhysicalMaterial* GetPhysicalMaterial();// 0x262b1e8
	Material* GetBaseMaterial();// 0x44c7920

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x1c, Size: 36]

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 4]
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 16]
	LinearColor FalloffColor;//[Offset: 0x14, Size: 16]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 4]
	float G;//[Offset: 0x4, Size: 4]
	float B;//[Offset: 0x8, Size: 4]
	float A;//[Offset: 0xc, Size: 4]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float EmissiveBoost;//[Offset: 0x4, Size: 4]
	float DiffuseBoost;//[Offset: 0x8, Size: 4]
	float ExportResolutionScale;//[Offset: 0xc, Size: 4]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 4]
	int UVChannelIndex;//[Offset: 0x4, Size: 4]
	FName TextureName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x50, Size: 4]
	ColorMaterialInput DiffuseColor;//[Offset: 0x58, Size: 56]
	ColorMaterialInput SpecularColor;//[Offset: 0x90, Size: 56]
	ColorMaterialInput BaseColor;//[Offset: 0xc8, Size: 56]
	ScalarMaterialInput Metallic;//[Offset: 0x100, Size: 56]
	ScalarMaterialInput Specular;//[Offset: 0x138, Size: 56]
	ScalarMaterialInput Roughness;//[Offset: 0x170, Size: 56]
	VectorMaterialInput Normal;//[Offset: 0x1a8, Size: 64]
	ColorMaterialInput EmissiveColor;//[Offset: 0x1e8, Size: 56]
	ScalarMaterialInput Opacity;//[Offset: 0x220, Size: 56]
	ScalarMaterialInput OpacityMask;//[Offset: 0x258, Size: 56]
	byte MaterialDomain;//[Offset: 0x290, Size: 1]
	byte BlendMode;//[Offset: 0x291, Size: 1]
	byte DecalBlendMode;//[Offset: 0x292, Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x293, Size: 1]
	byte ShadingModel;//[Offset: 0x294, Size: 1]
	byte ShadingRate;//[Offset: 0x295, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x298, Size: 4]
	float VertexOffsetAlongNormal;//[Offset: 0x29c, Size: 4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 1]
	byte OITBlendMode;//[Offset: 0x2a1, Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x2a8, Size: 64]
	VectorMaterialInput WorldDisplacement;//[Offset: 0x2e8, Size: 64]
	ScalarMaterialInput TessellationMultiplier;//[Offset: 0x328, Size: 56]
	ColorMaterialInput SubsurfaceColor;//[Offset: 0x360, Size: 56]
	ScalarMaterialInput ClearCoat;//[Offset: 0x398, Size: 56]
	ScalarMaterialInput ClearCoatRoughness;//[Offset: 0x3d0, Size: 56]
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x408, Size: 56]
	ScalarMaterialInput Refraction;//[Offset: 0x440, Size: 56]
	Vector2MaterialInput CustomizedUVs;//[Offset: 0x478, Size: 64]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x678, Size: 56]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x6b0, Size: 56]
	Vector4MaterialInput CustomizedVertexColor;//[Offset: 0x6f0, Size: 80]
	Vector4MaterialInput PlanarReflectionOffsetScale;//[Offset: 0x740, Size: 80]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x790, Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x790, Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x790, Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x790, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x790, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x790, Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x790, Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x790, Size: 1]
	int NumCustomizedUVs;//[Offset: 0x794, Size: 4]
	byte TranslucencyLightingMode;//[Offset: 0x798, Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x79c, Size: 4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a0, Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x7a4, Size: 4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x7a8, Size: 4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x7ac, Size: 4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x7b0, Size: 4]
	float TranslucentBackscatteringExponent;//[Offset: 0x7b4, Size: 4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x7b8, Size: 16]
	float TranslucentShadowStartOffset;//[Offset: 0x7c8, Size: 4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc, Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cc, Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cc, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cc, Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cc, Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cc, Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cc, Size: 1]
	bool bUsedWithGFur;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cc, Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cd, Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cd, Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cd, Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cd, Size: 1]
	bool bUsedWithIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cd, Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ce, Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ce, Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7ce, Size: 1]
	bool bUsedWithQuantizedMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7ce, Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7ce, Size: 1]
	bool bUsedWithInstancedPDSurface;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7ce, Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7ce, Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7ce, Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cf, Size: 1]
	bool bUsedWithPPRBackgroud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cf, Size: 1]
	bool bUsedWithSurfelInjectColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cf, Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cf, Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cf, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cf, Size: 1]
	bool bForceMaterialFloat;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cf, Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cf, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 1]
	bool bUseSimplestShader;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d0, Size: 1]
	bool bBypassSystemMaterialQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d0, Size: 1]
	bool bBypassMobilePointLight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d0, Size: 1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d0, Size: 1]
	bool bForceOutputLinearSpace;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d0, Size: 1]
	bool bUseAsDrawToRenderTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d0, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d0, Size: 1]
	bool bUseLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d1, Size: 1]
	bool bUseIndirectLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d1, Size: 1]
	bool bShadowOnEmissiveColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d1, Size: 1]
	bool bUsedGrassInstnaceColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d1, Size: 1]
	bool bUsedVertexPointLight;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d1, Size: 1]
	bool bUsedWithPhotonShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d1, Size: 1]
	bool bUsedWithPhotonShadowPCSS;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d1, Size: 1]
	bool bUsedDynamicObjectVertexLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d1, Size: 1]
	byte ShadowOverride;//[Offset: 0x7d2, Size: 1]
	byte SimpleVertexNormalSituation;//[Offset: 0x7d3, Size: 1]
	bool bZForceFar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d4, Size: 1]
	bool bWettable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d4, Size: 1]
	bool bUseLegacySpecular;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d4, Size: 1]
	bool bCorrectBlendingColorInHDR;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d4, Size: 1]
	bool bUseAsTranslucentEarlyZ;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d4, Size: 1]
	bool bLiteRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d4, Size: 1]
	bool bUseSimpleSkyLight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d4, Size: 1]
	bool bACESOff;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d4, Size: 1]
	bool bEmissionOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d5, Size: 1]
	bool bInstL2WOnlyTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d5, Size: 1]
	bool bUseLiteFog;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d5, Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d5, Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d5, Size: 1]
	bool bApplyVertexFog;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d5, Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d5, Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x7d6, Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d7, Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d7, Size: 1]
	float MaxDisplacement;//[Offset: 0x7d8, Size: 4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7dc, Size: 1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7dc, Size: 1]
	bool bUnlitOutputAllMTOnBasePass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7dc, Size: 1]
	int EditorX;//[Offset: 0x7e0, Size: 4]
	int EditorY;//[Offset: 0x7e4, Size: 4]
	int EditorPitch;//[Offset: 0x7e8, Size: 4]
	int EditorYaw;//[Offset: 0x7ec, Size: 4]
	MaterialExpression*[] Expressions;//[Offset: 0x7f0, Size: 12]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x7fc, Size: 12]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x808, Size: 12]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x814, Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x814, Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x814, Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x814, Size: 1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x814, Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x814, Size: 1]
	bool bDisableDirectionalLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x814, Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x814, Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x815, Size: 1]
	bool bUseLandscapeVertexAO;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x815, Size: 1]
	bool bUseLandscapeVertexHole;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x815, Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x818, Size: 4]
	byte BlendableLocation;//[Offset: 0x81c, Size: 1]
	int BlendablePriority;//[Offset: 0x820, Size: 4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 1]
	byte RefractionMode;//[Offset: 0x825, Size: 1]
	float RefractionDepthBias;//[Offset: 0x828, Size: 4]
	bool bOceanFoam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x82c, Size: 1]
	bool bEnableMeshClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x82c, Size: 1]
	bool bIsEnhancedUImage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x82c, Size: 1]
	Guid stateID;//[Offset: 0x830, Size: 16]
	Texture*[] ExpressionTextureReferences;//[Offset: 0x8d8, Size: 12]

--------------------------------
Class: ColorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Color Constant;//[Offset: 0x34, Size: 4]

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x4, Size: 12]
	int Mask;//[Offset: 0x10, Size: 4]
	int MaskR;//[Offset: 0x14, Size: 4]
	int MaskG;//[Offset: 0x18, Size: 4]
	int MaskB;//[Offset: 0x1c, Size: 4]
	int MaskA;//[Offset: 0x20, Size: 4]
	FName ExpressionName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ScalarMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float Constant;//[Offset: 0x34, Size: 4]

--------------------------------
Class: VectorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Vector Constant;//[Offset: 0x34, Size: 12]

--------------------------------
Class: Vector2MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float ConstantX;//[Offset: 0x34, Size: 4]
	float ConstantY;//[Offset: 0x38, Size: 4]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x30, Size: 4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x4, Size: 12]
	int Mask;//[Offset: 0x10, Size: 4]
	int MaskR;//[Offset: 0x14, Size: 4]
	int MaskG;//[Offset: 0x18, Size: 4]
	int MaskB;//[Offset: 0x1c, Size: 4]
	int MaskA;//[Offset: 0x20, Size: 4]
	FName ExpressionName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: Vector4MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Vector4 Constant;//[Offset: 0x40, Size: 16]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x1c, Size: 4]
	MaterialFunction* Function;//[Offset: 0x20, Size: 4]
	FString Desc;//[Offset: 0x24, Size: 12]
	Color BorderColor;//[Offset: 0x30, Size: 4]
	bool bRealtimePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bNeedToUpdatePreview;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 1]
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34, Size: 1]
	bool bShowOutputNameOnPin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34, Size: 1]
	bool bShowMaskColorsOnPin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34, Size: 1]
	bool bHidePreviewWindow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x34, Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x34, Size: 1]
	bool bShaderInputData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 1]
	bool bShowInputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35, Size: 1]
	bool bShowOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x35, Size: 1]
	ExpressionOutput[] Outputs;//[Offset: 0x38, Size: 12]

--------------------------------
Class: MaterialFunction.Object
	Guid stateID;//[Offset: 0x1c, Size: 16]
	FString Description;//[Offset: 0x2c, Size: 12]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x3c, Size: 12]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 4]
	int B;//[Offset: 0x4, Size: 4]
	int C;//[Offset: 0x8, Size: 4]
	int D;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ExpressionOutput
	FString OutputName;//[Offset: 0x0, Size: 12]
	int Mask;//[Offset: 0xc, Size: 4]
	int MaskR;//[Offset: 0x10, Size: 4]
	int MaskG;//[Offset: 0x14, Size: 4]
	int MaskB;//[Offset: 0x18, Size: 4]
	int MaskA;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: MaterialFunctionInfo
	Guid stateID;//[Offset: 0x0, Size: 16]
	MaterialFunction* Function;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid stateID;//[Offset: 0x0, Size: 16]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid stateID;//[Offset: 0x1c, Size: 16]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x2c, Size: 12]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x38, Size: 12]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Guid ID;//[Offset: 0x8, Size: 16]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 16]

--------------------------------
Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x20, Size: 16]
	int LODBias;//[Offset: 0x30, Size: 4]
	int NumCinematicMipLevels;//[Offset: 0x34, Size: 4]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x3c, Size: 12]
	int CachedCombinedLODBias;//[Offset: 0x48, Size: 4]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	byte CompressionSettings;//[Offset: 0x4d, Size: 1]
	byte Filter;//[Offset: 0x4e, Size: 1]
	byte LODGroup;//[Offset: 0x4f, Size: 1]
	byte CrunchSetting;//[Offset: 0x50, Size: 1]
	bool bOverrideCrunchCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 1]
	float CrunchCompressionAmount;//[Offset: 0x54, Size: 4]
	byte BasisSetting;//[Offset: 0x58, Size: 1]
	bool bOverrideBasisCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	float BasisCompressionAmount;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 4]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 24]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float LocalUVDensities;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 8]
	FString SubPathString;//[Offset: 0x8, Size: 12]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x20, Size: 8]
	Vector RelativeLocation;//[Offset: 0x28, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x34, Size: 12]
	Vector RelativeScale;//[Offset: 0x40, Size: 12]
	FString Tag;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 12]
	Vector BoxExtent;//[Offset: 0xc, Size: 12]
	float SphereRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: NavCollision.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x58, Size: 12]
	NavCollisionBox[] BoxCollision;//[Offset: 0x64, Size: 12]
	class NavArea* AreaClass;//[Offset: 0x70, Size: 4]
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 1]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74, Size: 1]

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float Height;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 12]
	Vector Extent;//[Offset: 0xc, Size: 12]

--------------------------------
Class: NavArea.Object
	float DefaultCost;//[Offset: 0x1c, Size: 4]
	float FixedAreaEnteringCost;//[Offset: 0x20, Size: 4]
	Color DrawColor;//[Offset: 0x24, Size: 4]
	NavAgentSelector SupportedAgents;//[Offset: 0x28, Size: 4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d, Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: BodyInstance
	enum SleepFamily;//[Offset: 0x19, Size: 1]
	byte DOFMode;//[Offset: 0x1a, Size: 1]
	byte CollisionEnabled;//[Offset: 0x1b, Size: 1]
	FName CollisionProfileName;//[Offset: 0x20, Size: 8]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 44]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55, Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x55, Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x55, Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x55, Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56, Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56, Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56, Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56, Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56, Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x56, Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x56, Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56, Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57, Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57, Size: 1]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57, Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x57, Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x57, Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 4]
	float MassInKgOverride;//[Offset: 0x64, Size: 4]
	float LinearDamping;//[Offset: 0x68, Size: 4]
	float AngularDamping;//[Offset: 0x6c, Size: 4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 12]
	Vector COMNudge;//[Offset: 0x7c, Size: 12]
	float MassScale;//[Offset: 0x88, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 12]
	byte ObjectType;//[Offset: 0x98, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa4, Size: 16]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb4, Size: 4]
	float MaxAngularVelocity;//[Offset: 0xb8, Size: 4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xbc, Size: 4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc0, Size: 4]
	float PhysicsBlendWeight;//[Offset: 0xc4, Size: 4]
	int PositionSolverIterationCount;//[Offset: 0xc8, Size: 4]
	uint64 RigidActorSyncId;//[Offset: 0xe0, Size: 8]
	uint64 RigidActorAsyncId;//[Offset: 0xe8, Size: 8]
	int VelocitySolverIterationCount;//[Offset: 0xf0, Size: 4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 32]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 12]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 1]
	byte WorldDynamic;//[Offset: 0x1, Size: 1]
	byte Pawn;//[Offset: 0x2, Size: 1]
	byte Visibility;//[Offset: 0x3, Size: 1]
	byte Camera;//[Offset: 0x4, Size: 1]
	byte PhysicsBody;//[Offset: 0x5, Size: 1]
	byte Vehicle;//[Offset: 0x6, Size: 1]
	byte Destructible;//[Offset: 0x7, Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 8]
	byte Response;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x4, Size: 1]
	byte EndTickGroup;//[Offset: 0x5, Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	float TickInterval;//[Offset: 0x30, Size: 4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 12]
	Vector AngularVelocity;//[Offset: 0xc, Size: 12]
	Vector Location;//[Offset: 0x18, Size: 12]
	Rotator Rotation;//[Offset: 0x24, Size: 12]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 1]
	bool LocationQuantizationLODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	FName LocationQuantizationLODGroup;//[Offset: 0x38, Size: 8]
	byte ForcedLocationQuantizationLOD;//[Offset: 0x40, Size: 1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x4, Size: 12]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x10, Size: 12]
	Rotator RotationOffset;//[Offset: 0x1c, Size: 12]
	FName AttachSocket;//[Offset: 0x28, Size: 8]
	SceneComponent* AttachComponent;//[Offset: 0x30, Size: 4]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: InputComponent.ActorComponent.Object
	bool WasControllerKeyJustReleased(Key Key);// 0x44531d0
	bool WasControllerKeyJustPressed(Key Key);// 0x44531d0
	bool IsControllerKeyDown(Key Key);// 0x44531d0
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x4453050
	Vector GetControllerVectorKeyState(Key Key);// 0x4452d4c
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x4452c6c
	float GetControllerKeyTimeDown(Key Key);// 0x4452850
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x4452b48
	float GetControllerAnalogKeyState(Key Key);// 0x4452850

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: ActorReplicateFreqLODConfig
	float DistSquared;//[Offset: 0x0, Size: 4]
	float NetUpdateFreq;//[Offset: 0x4, Size: 4]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x300, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x300, Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x300, Size: 1]
	bool bUseViewTranslatedTransform;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x300, Size: 1]
	float BaseEyeHeight;//[Offset: 0x304, Size: 4]
	byte AutoPossessPlayer;//[Offset: 0x308, Size: 1]
	enum AutoPossessAI;//[Offset: 0x309, Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x30c, Size: 4]
	PlayerState* PlayerState;//[Offset: 0x310, Size: 4]
	byte RemoteViewPitch;//[Offset: 0x314, Size: 1]
	Controller* LastHitBy;//[Offset: 0x318, Size: 4]
	Controller* Controller;//[Offset: 0x31c, Size: 4]
	Vector ControlInputVector;//[Offset: 0x328, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x334, Size: 12]
	void SpawnDefaultController();// 0x220eb04
	void SetUseViewTranslatedTransform(bool bNewUseViewTranslatedTransform);// 0x2111228
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x44ecc60
	void ReceiveUnpossessed(Controller* OldController);// 0x2bb69b8
	void ReceivePossessed(Controller* NewController);// 0x2bb69b8
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x44ecb0c
	void OnRep_PlayerState();// 0x20b6e64
	void OnRep_Controller();// 0x1f7d404
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x44ec9f8
	Vector K2_GetMovementInputVector();// 0x44ec958
	bool IsPlayerControlled();// 0x208d7fc
	bool IsMoveInputIgnored();// 0x1f66078
	bool IsLocallyControlled();// 0x44ec9c8
	bool IsControlled();// 0x44ec9a0
	Vector GetPendingMovementInputVector();// 0x44ec958
	Vector GetNavAgentLocation();// 0x441894c
	PawnMovementComponent* GetMovementComponent();// 0x2314fdc
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x44ec8e0
	Vector GetLastMovementInputVector();// 0x44ec898
	Rotator GetControlRotation();// 0x44ec848
	Controller* GetController();// 0x44ec82c
	Rotator GetBaseAimRotation();// 0x44ec7dc
	void DetachFromControllerPendingDestroy();// 0x27e35c8
	Vector ConsumeMovementInputVector();// 0x44ec78c
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x44ec678
	void AddControllerYawInput(float Val);// 0x44ec5f8
	void AddControllerRollInput(float Val);// 0x1eb9b50
	void AddControllerPitchInput(float Val);// 0x44ec578

--------------------------------
Class: Controller.Actor.Object
	Pawn* Pawn;//[Offset: 0x300, Size: 4]
	Character* Character;//[Offset: 0x30c, Size: 4]
	PlayerState* PlayerState;//[Offset: 0x310, Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x314, Size: 4]
	Rotator ControlRotation;//[Offset: 0x318, Size: 12]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 1]
	FName StateName;//[Offset: 0x330, Size: 8]
	Actor* ObservedActor;//[Offset: 0x338, Size: 4]
	delegate OnInstigatedAnyDamage;//[Offset: 0x33c, Size: 12]
	void UnPossess();// 0x21fa994
	void StopMovement();// 0x27e35ac
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x4418c98
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x21f5d48
	void SetIgnoreLookInput(bool bNewLookInput);// 0x4418c10
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x21f5298
	void ResetIgnoreMoveInput();// 0x21e8534
	void ResetIgnoreLookInput();// 0x1f67eb8
	void ResetIgnoreInputFlags();// 0x4418bf4
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x2bb69b8
	void Possess(Pawn* InPawn);// 0x4418b74
	void OnRep_PlayerState();// 0x20b6e64
	void OnRep_Pawn();// 0x1f7d404
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x4418a58
	Pawn* K2_GetPawn();// 0x4418a30
	bool IsPlayerController();// 0x4418a10
	bool IsMoveInputIgnored();// 0x44189e0
	bool IsLookInputIgnored();// 0x1f66078
	bool IsLocalPlayerController();// 0x441899c
	bool IsLocalController();// 0x1f8c084
	Actor* GetViewTarget();// 0x4411568
	Rotator GetDesiredRotation();// 0x441894c
	Rotator GetControlRotation();// 0x44188fc
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x4418830
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x4418768
	PlayerController* CastToPlayerController();// 0x4418740

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x340, Size: 4]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x344, Size: 4]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x348, Size: 4]
	BasedMovementInfo BasedMovement;//[Offset: 0x350, Size: 48]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x380, Size: 48]
	float AnimRootMotionTranslationScale;//[Offset: 0x3b0, Size: 4]
	Vector BaseTranslationOffset;//[Offset: 0x3b4, Size: 12]
	Quat BaseRotationOffset;//[Offset: 0x3c0, Size: 16]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x3d0, Size: 4]
	byte ReplicatedMovementMode;//[Offset: 0x3e0, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 1]
	int MiddleDeviceAllowedParticleNum;//[Offset: 0x3e4, Size: 4]
	float MiddleDeviceAllowedParticleDistance;//[Offset: 0x3e8, Size: 4]
	int LowDeviceAllowedParticleNum;//[Offset: 0x3ec, Size: 4]
	float LowDeviceAllowedParticleDistance;//[Offset: 0x3f0, Size: 4]
	float CrouchedEyeHeight;//[Offset: 0x3f8, Size: 4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3fc, Size: 1]
	byte Ping;//[Offset: 0x3fd, Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3fe, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3fe, Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3fe, Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3fe, Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3fe, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3fe, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3fe, Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3fe, Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x400, Size: 4]
	float JumpMaxHoldTime;//[Offset: 0x404, Size: 4]
	int JumpMaxCount;//[Offset: 0x408, Size: 4]
	int JumpCurrentCount;//[Offset: 0x40c, Size: 4]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x410, Size: 1]
	delegate OnReachedJumpApex;//[Offset: 0x414, Size: 12]
	delegate MovementModeChangedDelegate;//[Offset: 0x42c, Size: 12]
	delegate OnCharacterMovementUpdated;//[Offset: 0x438, Size: 12]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x444, Size: 144]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x4e0, Size: 64]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x520, Size: 12]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x530, Size: 224]
	void UnCrouch(bool bClientSimulation);// 0x440ef44
	void StopJumping();// 0x440ef28
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x440eea8
	void SetReplicateMovement(bool bInReplicateMovement);// 0x43dba1c
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x440ede4
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x440eccc
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x440eb4c
	void OnRep_ServerLastTransformUpdateTimeStamp();// 0x440eb38
	void OnRep_RootMotion();// 0x440eb24
	void OnRep_ReplicatedBasedMovement();// 0x220ebac
	void OnRep_IsCrouched();// 0x2132334
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x2bb69b8
	void OnLanded(out const HitResult Hit);// 0x2bb69b8
	void OnJumped();// 0x440eb08
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x440e9ec
	void K2_UpdateCustomMovement(float DeltaTime);// 0x2bb69b8
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x2bb69b8
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x2bb69b8
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x2bb69b8
	void Jump();// 0x220d014
	bool IsPlayingRootMotion();// 0x440e9c4
	bool IsPlayingNetworkedRootMotionMontage();// 0x440e99c
	bool IsJumpProvidingForce();// 0x440e96c
	AnimMontage* GetCurrentMontage();// 0x440e944
	Vector GetBaseTranslationOffset();// 0x440e920
	Rotator GetBaseRotationOffsetRotator();// 0x440e8bc
	float GetAnimRootMotionTranslationScale();// 0x440e894
	void Crouch(bool bClientSimulation);// 0x440e80c
	void ClientCheatWalk();// 0x1f3e950
	void ClientCheatGhost();// 0x1f3e8fc
	void ClientCheatFly();// 0x1f3e918
	bool CanJumpInternal();// 0x440e7dc
	bool CanJump();// 0x440e7b4
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x440e6ec

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimationMode;//[Offset: 0x6f4, Size: 1]
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x6f8, Size: 4]
	class AnimInstance* AnimClass;//[Offset: 0x6fc, Size: 4]
	AnimInstance* AnimScriptInstance;//[Offset: 0x700, Size: 4]
	AnimInstance*[] SubInstances;//[Offset: 0x704, Size: 12]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x710, Size: 4]
	SingleAnimationPlayData AnimationData;//[Offset: 0x714, Size: 16]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x748, Size: 12]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x754, Size: 12]
	float GlobalAnimRateScale;//[Offset: 0x774, Size: 4]
	enum UseAsyncScene;//[Offset: 0x778, Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x779, Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x77a, Size: 1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x77b, Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x77c, Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x77c, Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x77c, Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x77c, Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x77c, Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x77c, Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x780, Size: 12]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78c, Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78c, Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78c, Size: 1]
	bool bClothMorphTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x78c, Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78c, Size: 1]
	float ClothBlendWeight;//[Offset: 0x790, Size: 4]
	Vector RootBoneTranslation;//[Offset: 0x798, Size: 12]
	bool bDeferMovementFromSceneQueries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a4, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7a4, Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7a4, Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a5, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a6, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x7a8, Size: 4]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ac, Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ad, Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ad, Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7ad, Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7ad, Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7ad, Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7ad, Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7ad, Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7ad, Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x7ae, Size: 2]
	Vector LineCheckBoundsScale;//[Offset: 0x7b0, Size: 12]
	delegate OnConstraintBroken;//[Offset: 0x7c0, Size: 12]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x888, Size: 4]
	float TeleportDistanceThreshold;//[Offset: 0x88c, Size: 4]
	float TeleportRotationThreshold;//[Offset: 0x890, Size: 4]
	delegate OnAnimInitialized;//[Offset: 0x980, Size: 12]
	AnimSequence* SequenceToPlay;//[Offset: 0xa14, Size: 4]
	AnimationAsset* AnimToPlay;//[Offset: 0xa18, Size: 4]
	bool bDefaultLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa1c, Size: 1]
	bool bDefaultPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa1c, Size: 1]
	float DefaultPosition;//[Offset: 0xa20, Size: 4]
	float DefaultPlayRate;//[Offset: 0xa24, Size: 4]
	uint32 LastPoseTickFrame;//[Offset: 0xa28, Size: 4]
	float LastPoseTickTime;//[Offset: 0xa2c, Size: 4]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa58, Size: 1]
	bool bIsNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5a, Size: 1]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x452538c
	void SuspendClothingSimulation();// 0x4525378
	void Stop();// 0x4525364
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x4525254
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x1f5da78
	void SetTeleportRotationThreshold(float Threshold);// 0x45251dc
	void SetTeleportDistanceThreshold(float Threshold);// 0x4525164
	void SetPosition(float InPos, bool bFireNotifies);// 0x45250a0
	void SetPlayRate(float Rate);// 0x4525028
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x4524fb0
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x4524e8c
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x4524d78
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x4524cf8
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x4524bdc
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x4524b14
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x4524a94
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x45249c8
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x45248ac
	void SetClothMaxDistanceScale(float Scale);// 0x4524834
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x4524764
	void SetAnimInstanceClass(class Object NewClass);// 0x45246ec
	void SetAnimationMode(byte InAnimationMode);// 0x4524674
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x45245fc
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x45244a8
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x452438c
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x452430c
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x45241ec
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x45240cc
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x4523f7c
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x4523efc
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x4523e38
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x4523d0c
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x4523b98
	void ResumeClothingSimulation();// 0x4523b84
	void ResetClothTeleportMode();// 0x4523b70
	void ResetAllowedAnimCurveEvaluation();// 0x4523b5c
	void ResetAllBodiesSimulatePhysics();// 0x4523b48
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x4523a84
	void Play(bool bLooping);// 0x4523a04
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x452385c
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x4523670
	bool IsPlaying();// 0x4523648
	bool IsClothingSimulationSuspended();// 0x4523620
	bool IsBodyGravityEnabled(FName BoneName);// 0x45235a0
	float GetTeleportRotationThreshold();// 0x4523578
	float GetTeleportDistanceThreshold();// 0x4523578
	AnimInstance*[] GetSubAnimInstances();// 0x45234b8
	Vector GetSkeletalCenterOfMass();// 0x4523470
	AnimInstance* GetPostProcessInstance();// 0x213e6a4
	float GetPosition();// 0x4523448
	float GetPlayRate();// 0x4523420
	float GetMorphTarget(FName MorphTargetName);// 0x45233a0
	bool GetDisableAnimCurves();// 0x452337c
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x45231fc
	float GetClothMaxDistanceScale();// 0x45231d4
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x4523100
	AnimInstance* GetAnimInstance();// 0x45230d8
	byte GetAnimationMode();// 0x45230b0
	bool GetAllowedAnimCurveEvaluate();// 0x4523090
	void ForceClothNextUpdateTeleportAndReset();// 0x452307c
	void ForceClothNextUpdateTeleport();// 0x4523068
	FName FindConstraintBoneName(int ConstraintIndex);// 0x4522fe0
	void ClearMorphTargets();// 0x4522fcc
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x4522ebc
	void BindClothToMasterPoseComponent();// 0x4522ea8
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x4522ddc
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x4522c74
	void AddForceToAllBodiesBelow(Vector force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x4522b0c
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x45229ec

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x5d4, Size: 4]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x5d8, Size: 8]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x624, Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x640, Size: 4]
	int ForcedLodModel;//[Offset: 0x644, Size: 4]
	int MinLodModel;//[Offset: 0x648, Size: 4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x658, Size: 12]
	float StreamingDistanceMultiplier;//[Offset: 0x664, Size: 4]
	Color WireframeColor;//[Offset: 0x668, Size: 4]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x66c, Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x66c, Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x66c, Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x66c, Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x67c, Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x67c, Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x67c, Size: 1]
	byte MeshComponentUpdateFlag;//[Offset: 0x67d, Size: 1]
	bool NeedUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67e, Size: 1]
	bool bDisableAnimOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x67f, Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x67f, Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68c, Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68c, Size: 1]
	byte CustomSortAlternateIndexMode;//[Offset: 0x68d, Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68e, Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68e, Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x690, Size: 4]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x694, Size: 1]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x6ac, Size: 28]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c9, Size: 1]
	bool bEnableUpdateRateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ca, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cb, Size: 1]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x45292f0
	void UnHideBoneByName(FName BoneName);// 0x4529278
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x45290b4
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x4528ef0
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x4528de0
	bool SetSkinWeightProfile(FName InProfileName);// 0x4528d60
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x4528c50
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x4528b84
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReinit);// 0x4528ab8
	void SetMinLOD(int InNewMinLOD);// 0x4528a40
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent);// 0x45289c8
	void SetForcedLOD(int InNewForcedLOD);// 0x4528950
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x45288d0
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x4528850
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x45287d8
	void ResetAnimUROParams(float[] DistanceFactors, int MaxEvalRateForInterpolation);// 0x452863c
	bool IsUsingSkinWeightProfile();// 0x452861c
	bool IsBoneHiddenByName(FName BoneName);// 0x452859c
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x45284d8
	FName GetSocketBoneName(FName InSocketName);// 0x452844c
	FName GetParentBone(FName BoneName);// 0x45283c0
	int GetNumLODs();// 0x4528398
	int GetNumBones();// 0x4528370
	FName GetCurrentSkinWeightProfileName();// 0x452834c
	FName GetBoneName(int BoneIndex);// 0x45282c4
	int GetBoneIndex(FName BoneName);// 0x4528244
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x45280cc
	void EnableMeshClipPlane(out const Plane ClipPlane);// 0x4528044
	void DisableMeshClipPlane();// 0x4528030
	void ClearVertexColorOverride(int LODIndex);// 0x4527fb8
	void ClearSkinWeightProfile();// 0x1ee1bb4
	void ClearSkinWeightOverride(int LODIndex);// 0x4527f40
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x4527e74

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x5b4, Size: 12]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x44cad60
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x44cac9c
	void SetLayerVisibilityValue(byte Layer, bool Visible, bool bPropagateToChildren);// 0x44cab80
	void SetLayerVisibilityEnable(bool Enable, bool bPropagateToChildren);// 0x44caaa8
	void SetLayerCastShadowValue(byte Layer, bool NewCastShadow);// 0x44ca9dc
	void SetLayerCastShadowEnable(bool Enable);// 0x44ca954
	void SetCastShadow(bool NewCastShadow);// 0x44ca8cc
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x44ca7b8
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x44ca730
	FName[] GetMaterialSlotNames();// 0x44ca668
	MaterialInterface*[] GetMaterials();// 0x44ca5a0
	int GetMaterialIndex(FName MaterialSlotName);// 0x44ca518
	bool GetLayerVisibilityValue(byte Layer);// 0x44ca490
	bool GetLayerCastShadowValue(byte Layer);// 0x44ca408

--------------------------------
Class: AnimInstance.Object
	float DeltaTime;//[Offset: 0x1c, Size: 4]
	Skeleton* CurrentSkeleton;//[Offset: 0x20, Size: 4]
	byte RootMotionMode;//[Offset: 0x24, Size: 1]
	bool bRunUpdatesInWorkerThreads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bCanUseParallelUpdateAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	delegate OnMontageBlendingOut;//[Offset: 0x2c, Size: 12]
	delegate OnMontageStarted;//[Offset: 0x38, Size: 12]
	delegate OnMontageEnded;//[Offset: 0x44, Size: 12]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x50, Size: 12]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x118, Size: 12]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x43e7c58
	Pawn* TryGetPawnOwner();// 0x22319bc
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x43e7b9c
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x43e7a84
	bool SetSubAnimNodeAnimInstance(FName SubInstanceSlotName, AnimInstance* AnimInstance);// 0x43e79c0
	void SetRootMotionMode(byte Value);// 0x43e7940
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x43e787c
	void SavePoseSnapshot(FName SnapshotName);// 0x43e77fc
	bool ResetSubAnimNodeAnimInstance(FName SubInstanceSlotName);// 0x43e777c
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x43e7504
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x43e731c
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x43e7260
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x43e71a4
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x43e70e8
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x43e6fe0
	void Montage_Resume(const AnimMontage* Montage);// 0x43e6f68
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt);// 0x2234c08
	void Montage_Pause(const AnimMontage* Montage);// 0x43e6ef0
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x43e6e34
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x43e6d78
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x43e6cf8
	bool Montage_IsActive(const AnimMontage* Montage);// 0x43e6c78
	float Montage_GetPosition(const AnimMontage* Montage);// 0x43e6bf8
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x43e6b78
	FName Montage_GetNextSection(const AnimMontage* Montage, FName SectionName);// 0x43e6aa0
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x43e6a20
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x43e6998
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x43e6918
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x43e6848
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x43e66d8
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x43e6614
	bool IsAnyMontagePlaying();// 0x43e65ec
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x43e6520
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x43e63f0
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x43e6358
	AnimInstance* GetSubAnimNodeAnimInstance(FName SubInstanceSlotName);// 0x43e62d8
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x43e6214
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x43e6150
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x43e608c
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x43e5fc8
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x43e5f04
	SkeletalMeshComponent* GetOwningComponent();// 0x43e5edc
	Actor* GetOwningActor();// 0x43e5eb4
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x43e5df0
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x43e5d2c
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x43e5c68
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x43e5ba4
	float GetInstanceMachineWeight(int MachineIndex);// 0x43e5b24
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x43e5aa4
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x43e5a24
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x43e59a4
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x43e5924
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x43e58a4
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x43e5824
	float GetCurveValue(FName CurveName);// 0x43e57a4
	FName GetCurrentStateName(int MachineIndex);// 0x43e571c
	AnimMontage* GetCurrentActiveMontage();// 0x43e56f4
	bool DestroySubAnimInstance(AnimInstance* AnimInstance);// 0x43e5674
	void DestroyAllSubAnimInstances();// 0x43e5660
	AnimInstance* CreateSubAnimInstance(class AnimInstance InstanceClass, FName InstanceName);// 0x43e559c
	void ClearMorphTargets();// 0x43e5588
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x43e54a8
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x2bb69b8
	void BlueprintPostEvaluateAnimation();// 0x2bb69b8
	void BlueprintInitializeAnimation();// 0x2bb69b8
	void BlueprintBeginPlay();// 0x2bb69b8

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x20, Size: 12]
	Transform[] RefLocalPoses;//[Offset: 0x2c, Size: 12]
	Guid VirtualBoneGuid;//[Offset: 0x108, Size: 16]
	VirtualBone[] VirtualBones;//[Offset: 0x118, Size: 12]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x124, Size: 12]
	SmartNameContainer SmartNames;//[Offset: 0x16c, Size: 60]
	BlendProfile*[] BlendProfiles;//[Offset: 0x1b8, Size: 12]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x1c4, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x268, Size: 12]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 8]
	int ParentIndex;//[Offset: 0x8, Size: 4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 8]
	FName TargetBoneName;//[Offset: 0x8, Size: 8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x20, Size: 8]
	FName BoneName;//[Offset: 0x28, Size: 8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 12]
	Vector RelativeScale;//[Offset: 0x48, Size: 12]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x4526e58
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x4526dc8

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x20, Size: 4]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x24, Size: 12]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float BlendScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 8]
	FName[] SlotNames;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x24, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x28, Size: 4]
	float EndTriggerTimeOffset;//[Offset: 0x2c, Size: 4]
	float TriggerWeightThreshold;//[Offset: 0x30, Size: 4]
	FName NotifyName;//[Offset: 0x38, Size: 8]
	AnimNotify* Notify;//[Offset: 0x40, Size: 4]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x44, Size: 4]
	float Duration;//[Offset: 0x48, Size: 4]
	AnimLinkableElement EndLink;//[Offset: 0x4c, Size: 36]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	byte MontageTickType;//[Offset: 0x71, Size: 1]
	float NotifyTriggerChance;//[Offset: 0x74, Size: 4]
	byte NotifyFilterType;//[Offset: 0x78, Size: 1]
	int NotifyFilterLOD;//[Offset: 0x7c, Size: 4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	int TrackIndex;//[Offset: 0x84, Size: 4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x4, Size: 4]
	int SlotIndex;//[Offset: 0x8, Size: 4]
	int SegmentIndex;//[Offset: 0xc, Size: 4]
	byte LinkMethod;//[Offset: 0x10, Size: 1]
	byte CachedLinkMethod;//[Offset: 0x11, Size: 1]
	float SegmentBeginTime;//[Offset: 0x14, Size: 4]
	float SegmentLength;//[Offset: 0x18, Size: 4]
	float LinkValue;//[Offset: 0x1c, Size: 4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x20, Size: 4]

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0x7c, Size: 44]
	float BlendInTime;//[Offset: 0xa8, Size: 4]
	AlphaBlend BlendOut;//[Offset: 0xac, Size: 44]
	float BlendOutTime;//[Offset: 0xd8, Size: 4]
	float BlendOutTriggerTime;//[Offset: 0xdc, Size: 4]
	FName SyncGroup;//[Offset: 0xe0, Size: 8]
	int SyncSlotIndex;//[Offset: 0xe8, Size: 4]
	MarkerSyncData MarkerData;//[Offset: 0xec, Size: 24]
	CompositeSection[] CompositeSections;//[Offset: 0x104, Size: 12]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x110, Size: 12]
	BranchingPoint[] BranchingPoints;//[Offset: 0x11c, Size: 12]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x12a, Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x12c, Size: 12]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x138, Size: 12]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x144, Size: 32]
	FName TimeStretchCurveName;//[Offset: 0x168, Size: 8]

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x5c, Size: 12]
	float SequenceLength;//[Offset: 0x68, Size: 4]
	float RateScale;//[Offset: 0x6c, Size: 4]
	RawCurveTracks RawCurveData;//[Offset: 0x70, Size: 12]
	float GetPlayLength();// 0x43ef6b4

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x20, Size: 4]
	AnimMetaData*[] MetaData;//[Offset: 0x44, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x50, Size: 12]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0, Size: 1]
	CurveFloat* CustomCurve;//[Offset: 0x4, Size: 4]
	float blendTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x20, Size: 84]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	float GetFloatValue(float InTime);// 0x441af60

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x441a99c
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x441a8bc

--------------------------------
Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x40, Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x41, Size: 1]
	float DefaultValue;//[Offset: 0x44, Size: 4]
	RichCurveKey[] Keys;//[Offset: 0x48, Size: 12]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x4, Size: 60]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 1]
	byte TangentMode;//[Offset: 0x1, Size: 1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Value;//[Offset: 0x8, Size: 4]
	float ArriveTangent;//[Offset: 0xc, Size: 4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 4]
	float LeaveTangent;//[Offset: 0x14, Size: 4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 4]

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 12]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x1c, Size: 84]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 8]
	SmartName Name;//[Offset: 0x8, Size: 16]
	int CurveTypeFlags;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x28, Size: 8]
	float StartTime;//[Offset: 0x30, Size: 4]
	FName NextSectionName;//[Offset: 0x38, Size: 8]
	AnimMetaData*[] MetaData;//[Offset: 0x40, Size: 12]

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 4]
	float StartPos;//[Offset: 0x4, Size: 4]
	float AnimStartTime;//[Offset: 0x8, Size: 4]
	float AnimEndTime;//[Offset: 0xc, Size: 4]
	float AnimPlayRate;//[Offset: 0x10, Size: 4]
	int LoopingCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x28, Size: 8]
	float DisplayTime;//[Offset: 0x30, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 4]
	float TriggerTime;//[Offset: 0x4, Size: 4]
	byte NotifyEventType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 12]
	float Sum_dT_i_by_C_i;//[Offset: 0x14, Size: 4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 4]
	float Alpha;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x2bb69b8
	FString GetNotifyName();// 0x43ed6f0

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x2bb69b8
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x2bb69b8
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x2bb69b8
	FString GetNotifyName();// 0x43ed6f0

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 12]
	FName[] BoneNames;//[Offset: 0xc, Size: 12]
	FName SkeletalMeshName;//[Offset: 0x18, Size: 8]
	FName SnapshotName;//[Offset: 0x20, Size: 8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 8]
	FName NextMarkerName;//[Offset: 0x8, Size: 8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x2c, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	BoxSphereBounds ImportedBounds;//[Offset: 0x34, Size: 28]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x50, Size: 28]
	Vector PositiveBoundsExtension;//[Offset: 0x6c, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0x78, Size: 12]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0x84, Size: 12]
	SkeletalMaterial[] Materials;//[Offset: 0x90, Size: 12]
	MaterialInterface* ReplaceMaterialInterface;//[Offset: 0x9c, Size: 4]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xa0, Size: 12]
	byte SkelMirrorAxis;//[Offset: 0xac, Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0xad, Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xb0, Size: 12]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbc, Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbc, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xbc, Size: 1]
	bool bEnableSelfCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xbc, Size: 1]
	BodySetup* BodySetup;//[Offset: 0xc0, Size: 4]
	PhysicsAsset* PhysicsAsset;//[Offset: 0xc4, Size: 4]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0xc8, Size: 4]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0xcc, Size: 12]
	MorphTarget*[] MorphTargets;//[Offset: 0xd8, Size: 12]
	ClothingAssetData_Legacy[] ClothingAssets;//[Offset: 0x1f4, Size: 12]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x200, Size: 4]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x204, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x210, Size: 12]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x220, Size: 12]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x238, Size: 12]
	int NumSockets();// 0x45211fc
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x4521130
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x45210b0
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x4521030
	BoxSphereBounds GetImportedBounds();// 0x4520fdc
	BoxSphereBounds GetBounds();// 0x4520f88
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x4520eac
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x4520e2c

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 4]
	bool bEnableShadowCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bRecomputeTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 24]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SkeletalMeshLODInfo
	float ScreenSize;//[Offset: 0x0, Size: 4]
	float LODHysteresis;//[Offset: 0x4, Size: 4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 12]
	bool[] bEnableShadowCasting;//[Offset: 0x14, Size: 12]
	TriangleSortSettings[] TriangleSortSettings;//[Offset: 0x20, Size: 12]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x30, Size: 328]
	SimplygonRemeshingSettings RemeshingSettings;//[Offset: 0x178, Size: 140]
	GroupedSkeletalOptimizationSettings OptimizationSettings;//[Offset: 0x204, Size: 532]
	FName[] RemovedBones;//[Offset: 0x418, Size: 12]
	BoneReference[] BonesToRemove;//[Offset: 0x424, Size: 12]
	AnimSequence* BakePose;//[Offset: 0x430, Size: 4]
	FString SourceImportFilename;//[Offset: 0x434, Size: 12]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x440, Size: 1]

--------------------------------
Class: TriangleSortSettings
	byte TriangleSorting;//[Offset: 0x0, Size: 1]
	byte CustomLeftRightAxis;//[Offset: 0x1, Size: 1]
	FName CustomLeftRightBoneName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte ReductionMethod;//[Offset: 0x0, Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 4]
	float MaxDeviationPercentage;//[Offset: 0x8, Size: 4]
	int ScreenSize;//[Offset: 0xc, Size: 4]
	float WeldingThreshold;//[Offset: 0x10, Size: 4]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float NormalsThreshold;//[Offset: 0x18, Size: 4]
	byte SilhouetteImportance;//[Offset: 0x1c, Size: 1]
	byte TextureImportance;//[Offset: 0x1d, Size: 1]
	byte ShadingImportance;//[Offset: 0x1e, Size: 1]
	byte SkinningImportance;//[Offset: 0x1f, Size: 1]
	float BoneReductionRatio;//[Offset: 0x20, Size: 4]
	int MaxBonesPerVertex;//[Offset: 0x24, Size: 4]
	bool bTransferMorphTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	BoneReference[] BonesToRemove;//[Offset: 0x2c, Size: 12]
	int BaseLOD;//[Offset: 0x38, Size: 4]
	int LODChainLastIndex;//[Offset: 0x3c, Size: 4]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bUseVertexWeightsForMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bSimplifyMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x44, Size: 104]
	MaterialProxySettings MaterialSettings;//[Offset: 0xac, Size: 148]
	bool bForceRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x144, Size: 4]

--------------------------------
Class: SimplygonMaterialLODSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte MaterialLODType;//[Offset: 0x1, Size: 1]
	bool bUseAutomaticSizes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte TextureWidth;//[Offset: 0x3, Size: 1]
	byte TextureHeight;//[Offset: 0x4, Size: 1]
	byte SamplingQuality;//[Offset: 0x5, Size: 1]
	int GutterSpace;//[Offset: 0x8, Size: 4]
	byte TextureStrech;//[Offset: 0xc, Size: 1]
	bool bReuseExistingCharts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	SimplygonChannelCastingSettings[] ChannelsToCast;//[Offset: 0x10, Size: 12]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bBakeActorData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bAllowMultiMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool bPreferTwoSideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	OutputMaterialInfo OutputMaterialInfo;//[Offset: 0x24, Size: 68]

--------------------------------
Class: SimplygonChannelCastingSettings
	byte MaterialChannel;//[Offset: 0x0, Size: 1]
	byte Caster;//[Offset: 0x1, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte ColorChannels;//[Offset: 0x3, Size: 1]
	int BitsPerChannel;//[Offset: 0x4, Size: 4]
	bool bUseSRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bBakeVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bFlipBackfacingNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	bool bUseTangentSpaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 1]
	bool bFlipGreenChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: OutputMaterialInfo

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0, Size: 8]
	byte TextureSizingType;//[Offset: 0x8, Size: 1]
	float GutterSpace;//[Offset: 0xc, Size: 4]
	enum SamplingQuality;//[Offset: 0x10, Size: 1]
	enum UVStrech;//[Offset: 0x11, Size: 1]
	bool bSplitProxyMaterialBasedOnType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	float MetallicConstant;//[Offset: 0x18, Size: 4]
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float RoughnessConstant;//[Offset: 0x20, Size: 4]
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float SpecularConstant;//[Offset: 0x28, Size: 4]
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float OpacityConstant;//[Offset: 0x30, Size: 4]
	float AOConstant;//[Offset: 0x34, Size: 4]
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float OpacityMaskConstant;//[Offset: 0x3c, Size: 4]
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	float AmbientOcclusionConstant;//[Offset: 0x44, Size: 4]
	IntPoint DiffuseTextureSize;//[Offset: 0x48, Size: 8]
	IntPoint NormalTextureSize;//[Offset: 0x50, Size: 8]
	IntPoint MetallicTextureSize;//[Offset: 0x58, Size: 8]
	IntPoint RoughnessTextureSize;//[Offset: 0x60, Size: 8]
	IntPoint SpecularTextureSize;//[Offset: 0x68, Size: 8]
	IntPoint EmissiveTextureSize;//[Offset: 0x70, Size: 8]
	IntPoint OpacityTextureSize;//[Offset: 0x78, Size: 8]
	IntPoint OpacityMaskTextureSize;//[Offset: 0x80, Size: 8]
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x88, Size: 8]
	byte MaterialMergeType;//[Offset: 0x90, Size: 1]
	byte BlendMode;//[Offset: 0x91, Size: 1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0x7c, Size: 4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0x80, Size: 12]
	float StreamableFirstChunkSecond;//[Offset: 0x98, Size: 4]
	float StreamableFollowingChunkSecond;//[Offset: 0x9c, Size: 4]
	bool bUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	byte AdditiveAnimType;//[Offset: 0x108, Size: 1]
	byte RefPoseType;//[Offset: 0x109, Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0x10c, Size: 4]
	int RefFrameIndex;//[Offset: 0x110, Size: 4]
	int EncodingPkgVersion;//[Offset: 0x114, Size: 4]
	FName RetargetSource;//[Offset: 0x118, Size: 8]
	enum Interpolation;//[Offset: 0x120, Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x122, Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x128, Size: 12]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 4]

--------------------------------
Class: SimplygonRemeshingSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int ScreenSize;//[Offset: 0x4, Size: 4]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float HardAngleThreshold;//[Offset: 0xc, Size: 4]
	int MergeDistance;//[Offset: 0x10, Size: 4]
	bool bUseClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float ClippingLevel;//[Offset: 0x18, Size: 4]
	int AxisIndex;//[Offset: 0x1c, Size: 4]
	bool bPlaneNegativeHalfspace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bUseMassiveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bUseAggregateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x24, Size: 104]

--------------------------------
Class: GroupedSkeletalOptimizationSettings
	bool bAutoComputeLODDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum LevelOfDetailType;//[Offset: 0x1, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x4, Size: 328]
	MeshProxySettings ProxySettings;//[Offset: 0x14c, Size: 196]
	bool bForceLODRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 4]
	MaterialProxySettings MaterialSettings;//[Offset: 0x4, Size: 148]
	int TextureWidth;//[Offset: 0x98, Size: 4]
	int TextureHeight;//[Offset: 0x9c, Size: 4]
	bool bExportNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bExportMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	bool bExportRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	bool bExportSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 1]
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float MergeDistance;//[Offset: 0xa8, Size: 4]
	float HardAngleThreshold;//[Offset: 0xac, Size: 4]
	int LightMapResolution;//[Offset: 0xb0, Size: 4]
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 1]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7, Size: 1]
	byte LandscapeCullingPrecision;//[Offset: 0xb8, Size: 1]
	bool bAssignLODGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	int LODGroupIndex;//[Offset: 0xbc, Size: 4]
	bool bAggregateMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	enum AggregatorMode;//[Offset: 0xc1, Size: 1]
	bool bUseCustomHemisphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x1c, Size: 12]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x28, Size: 12]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x34, Size: 12]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0xbc, Size: 4]
	BodySetup*[] BodySetup;//[Offset: 0xc0, Size: 12]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2a0, Size: 12]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 40]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float OrientationStrength;//[Offset: 0xc, Size: 4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 4]
	float PositionStrength;//[Offset: 0x14, Size: 4]
	float VelocityStrength;//[Offset: 0x18, Size: 4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 4]
	float MaxAngularForce;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x20, Size: 416]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1c0, Size: 12]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1cc, Size: 260]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x10, Size: 8]
	FName ConstraintBone1;//[Offset: 0x18, Size: 8]
	FName ConstraintBone2;//[Offset: 0x20, Size: 8]
	Vector Pos1;//[Offset: 0x28, Size: 12]
	Vector PriAxis1;//[Offset: 0x34, Size: 12]
	Vector SecAxis1;//[Offset: 0x40, Size: 12]
	Vector Pos2;//[Offset: 0x4c, Size: 12]
	Vector PriAxis2;//[Offset: 0x58, Size: 12]
	Vector SecAxis2;//[Offset: 0x64, Size: 12]
	Rotator AngularRotationOffset;//[Offset: 0x70, Size: 12]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x84, Size: 260]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 28]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 32]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 28]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 76]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 76]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 4]
	byte XMotion;//[Offset: 0x18, Size: 1]
	byte YMotion;//[Offset: 0x19, Size: 1]
	byte ZMotion;//[Offset: 0x1a, Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float Restitution;//[Offset: 0x8, Size: 4]
	float ContactDistance;//[Offset: 0xc, Size: 4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 4]
	byte TwistMotion;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 12]
	Vector VelocityTarget;//[Offset: 0xc, Size: 12]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 16]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 16]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 16]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float MaxForce;//[Offset: 0x8, Size: 4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 16]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 16]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 16]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 12]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 12]
	byte AngularDriveMode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 260]
	FName ProfileName;//[Offset: 0x108, Size: 8]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeMap> NodeMapping;//[Offset: 0x1c, Size: 60]
	Blueprint* SourceAsset;//[Offset: 0x58, Size: 40]

--------------------------------
Class: NodeMap
	FName TargetNodeName;//[Offset: 0x0, Size: 8]
	Transform SourceToTargetTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	class Object* ParentClass;//[Offset: 0x3c, Size: 4]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x40, Size: 4]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x48, Size: 4]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x4c, Size: 12]
	TimelineTemplate*[] Timelines;//[Offset: 0x58, Size: 12]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x64, Size: 4]
	byte BlueprintType;//[Offset: 0x68, Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x6c, Size: 4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x1c, Size: 4]
	class Object* GeneratedClass;//[Offset: 0x20, Size: 4]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	Guid BlueprintGuid;//[Offset: 0x28, Size: 16]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x1c, Size: 12]
	SCS_Node*[] AllNodes;//[Offset: 0x28, Size: 12]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x34, Size: 4]
	SCS_Node* RootNode;//[Offset: 0x38, Size: 4]
	SCS_Node*[] ActorComponentNodes;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x1c, Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x20, Size: 4]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 56]
	FName VariableName;//[Offset: 0x60, Size: 8]
	FName AttachToName;//[Offset: 0x68, Size: 8]
	FName ParentComponentOrVariableName;//[Offset: 0x70, Size: 8]
	FName ParentComponentOwnerClassName;//[Offset: 0x78, Size: 8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0x84, Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x90, Size: 12]
	Guid VariableGuid;//[Offset: 0x9c, Size: 16]
	bool bIsFalseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	bool bIsNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 1]
	FName NativeComponentName;//[Offset: 0xb0, Size: 8]
	bool bVariableNameAutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	FName InternalVariableName;//[Offset: 0xc0, Size: 8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* PropertyScope;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 8]
	FString DataValue;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x1c, Size: 4]
	byte LengthMode;//[Offset: 0x20, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21, Size: 1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21, Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x24, Size: 12]
	TTFloatTrack[] FloatTracks;//[Offset: 0x30, Size: 12]
	TTVectorTrack[] VectorTracks;//[Offset: 0x3c, Size: 12]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x48, Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x54, Size: 12]
	Guid TimelineGuid;//[Offset: 0x60, Size: 16]

--------------------------------
Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x0, Size: 8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 84]
	Vector GetVectorValue(float InTime);// 0x441c1d0

--------------------------------
Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 84]
	LinearColor GetLinearColorValue(float InTime);// 0x441b348

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x1c, Size: 12]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x28, Size: 12]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x4, Size: 4]
	ComponentKey ComponentKey;//[Offset: 0x8, Size: 32]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 56]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 4]
	FName SCSVariableName;//[Offset: 0x8, Size: 8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ClothingAssetData_Legacy
	FName AssetName;//[Offset: 0x0, Size: 8]
	FString ApexFileName;//[Offset: 0x8, Size: 12]
	bool bClothPropertiesChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	ClothPhysicsProperties_Legacy PhysicsProperties;//[Offset: 0x18, Size: 80]

--------------------------------
Class: ClothPhysicsProperties_Legacy
	float VerticalResistance;//[Offset: 0x0, Size: 4]
	float HorizontalResistance;//[Offset: 0x4, Size: 4]
	float BendResistance;//[Offset: 0x8, Size: 4]
	float ShearResistance;//[Offset: 0xc, Size: 4]
	float Friction;//[Offset: 0x10, Size: 4]
	float Damping;//[Offset: 0x14, Size: 4]
	float TetherStiffness;//[Offset: 0x18, Size: 4]
	float TetherLimit;//[Offset: 0x1c, Size: 4]
	float Drag;//[Offset: 0x20, Size: 4]
	float StiffnessFrequency;//[Offset: 0x24, Size: 4]
	float GravityScale;//[Offset: 0x28, Size: 4]
	float MassScale;//[Offset: 0x2c, Size: 4]
	float InertiaBlend;//[Offset: 0x30, Size: 4]
	float SelfCollisionThickness;//[Offset: 0x34, Size: 4]
	float SelfCollisionSquashScale;//[Offset: 0x38, Size: 4]
	float SelfCollisionStiffness;//[Offset: 0x3c, Size: 4]
	float SolverFrequency;//[Offset: 0x40, Size: 4]
	float FiberCompression;//[Offset: 0x44, Size: 4]
	float FiberExpansion;//[Offset: 0x48, Size: 4]
	float FiberResistance;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x1c, Size: 12]
	Guid AssetGuid;//[Offset: 0x28, Size: 16]

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 8]
	bool DefaultProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 4]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	float SavedPosition;//[Offset: 0x8, Size: 4]
	float SavedPlayRate;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 4]
	byte Weights;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x12c, Size: 4]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 1]
	float GravityScale;//[Offset: 0x134, Size: 4]
	float MaxStepHeight;//[Offset: 0x138, Size: 4]
	float JumpZVelocity;//[Offset: 0x13c, Size: 4]
	float JumpOffJumpZFactor;//[Offset: 0x140, Size: 4]
	float WalkableFloorAngle;//[Offset: 0x144, Size: 4]
	float WalkableFloorZ;//[Offset: 0x148, Size: 4]
	byte MovementMode;//[Offset: 0x14c, Size: 1]
	byte CustomMovementMode;//[Offset: 0x14d, Size: 1]
	float GroundFriction;//[Offset: 0x170, Size: 4]
	float MaxWalkSpeed;//[Offset: 0x174, Size: 4]
	float MaxWalkSpeedCrouched;//[Offset: 0x178, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x17c, Size: 4]
	float MaxFlySpeed;//[Offset: 0x180, Size: 4]
	float MaxCustomMovementSpeed;//[Offset: 0x184, Size: 4]
	float MaxAcceleration;//[Offset: 0x188, Size: 4]
	float MinAnalogWalkSpeed;//[Offset: 0x18c, Size: 4]
	float BrakingFrictionFactor;//[Offset: 0x190, Size: 4]
	float BrakingFriction;//[Offset: 0x194, Size: 4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x198, Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x19c, Size: 4]
	float BrakingDecelerationFalling;//[Offset: 0x1a0, Size: 4]
	float BrakingDecelerationSwimming;//[Offset: 0x1a4, Size: 4]
	float BrakingDecelerationFlying;//[Offset: 0x1a8, Size: 4]
	float AirControl;//[Offset: 0x1ac, Size: 4]
	float AirControlBoostMultiplier;//[Offset: 0x1b0, Size: 4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1b4, Size: 4]
	float FallingLateralFriction;//[Offset: 0x1b8, Size: 4]
	float CrouchedHalfHeight;//[Offset: 0x1bc, Size: 4]
	float Buoyancy;//[Offset: 0x1c0, Size: 4]
	float PerchRadiusThreshold;//[Offset: 0x1c4, Size: 4]
	float PerchAdditionalHeight;//[Offset: 0x1c8, Size: 4]
	Rotator RotationRate;//[Offset: 0x1cc, Size: 12]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d8, Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d8, Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d8, Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d8, Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d8, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d8, Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d8, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d9, Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d9, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d9, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d9, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d9, Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d9, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1dc, Size: 4]
	float MaxOutOfWaterStepHeight;//[Offset: 0x1e0, Size: 4]
	float OutofWaterZ;//[Offset: 0x1e4, Size: 4]
	float Mass;//[Offset: 0x1e8, Size: 4]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee, Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef, Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x1f4, Size: 4]
	float InitialPushForceFactor;//[Offset: 0x1f8, Size: 4]
	float PushForceFactor;//[Offset: 0x1fc, Size: 4]
	float PushForcePointZOffsetFactor;//[Offset: 0x200, Size: 4]
	float TouchForceFactor;//[Offset: 0x204, Size: 4]
	float MinTouchForce;//[Offset: 0x208, Size: 4]
	float MaxTouchForce;//[Offset: 0x20c, Size: 4]
	float RepulsionForce;//[Offset: 0x210, Size: 4]
	bool bForceBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 1]
	float CrouchedSpeedMultiplier;//[Offset: 0x218, Size: 4]
	float UpperImpactNormalScale;//[Offset: 0x21c, Size: 4]
	Vector Acceleration;//[Offset: 0x220, Size: 12]
	Vector LastUpdateLocation;//[Offset: 0x22c, Size: 12]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 16]
	Vector LastUpdateVelocity;//[Offset: 0x250, Size: 12]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x25c, Size: 4]
	Vector PendingImpulseToApply;//[Offset: 0x260, Size: 12]
	Vector PendingForceToApply;//[Offset: 0x26c, Size: 12]
	float AnalogInputModifier;//[Offset: 0x278, Size: 4]
	float MaxSimulationTimeStep;//[Offset: 0x284, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x288, Size: 4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x28c, Size: 4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x290, Size: 4]
	float MaxDepenetrationWithPawn;//[Offset: 0x294, Size: 4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x298, Size: 4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x29c, Size: 4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2a0, Size: 4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2a4, Size: 4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2a8, Size: 4]
	float NetProxyShrinkRadius;//[Offset: 0x2ac, Size: 4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2b0, Size: 4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2b4, Size: 4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2b8, Size: 4]
	bool bReplaySmoothUseInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x2bd, Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x2c0, Size: 4]
	float JumpOutOfWaterPitch;//[Offset: 0x2c4, Size: 4]
	FindFloorResult CurrentFloor;//[Offset: 0x2c8, Size: 152]
	byte DefaultLandMovementMode;//[Offset: 0x360, Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x361, Size: 1]
	byte GroundMovementMode;//[Offset: 0x362, Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x363, Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x363, Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x363, Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x363, Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x363, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x363, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x363, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x363, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x364, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x364, Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x364, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x364, Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x364, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x364, Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x364, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x364, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x365, Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x365, Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x365, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x365, Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x365, Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x365, Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x365, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x366, Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x366, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x366, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x378, Size: 4]
	Vector RequestedVelocity;//[Offset: 0x37c, Size: 12]
	int AvoidanceUID;//[Offset: 0x388, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x38c, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x390, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x394, Size: 4]
	float AvoidanceWeight;//[Offset: 0x398, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x39c, Size: 12]
	float NavMeshProjectionInterval;//[Offset: 0x448, Size: 4]
	float NavMeshProjectionTimer;//[Offset: 0x44c, Size: 4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x450, Size: 4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x454, Size: 4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x458, Size: 4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x45c, Size: 4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x460, Size: 60]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4a4, Size: 4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4a8, Size: 144]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5d0, Size: 64]
	Vector AnimRootMotionVelocity;//[Offset: 0x610, Size: 12]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61d, Size: 1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x4412df8
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x4412d80
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x4412cbc
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x4412c38
	void SetGroupsToIgnore(int GroupFlags);// 0x4412bc0
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x4412b3c
	void SetGroupsToAvoid(int GroupFlags);// 0x4412ac4
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x4412a40
	void SetAvoidanceGroup(int GroupFlags);// 0x44129c8
	void SetAvoidanceEnabled(bool bEnable);// 0x4412948
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x44127f4
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x44122bc
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x4411d84
	void ServerMove(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x44119f8
	float K2_GetWalkableFloorZ();// 0x44119d0
	float K2_GetWalkableFloorAngle();// 0x44119a8
	float K2_GetModifiedMaxAcceleration();// 0x4411978
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x4411890
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x44116d0
	bool IsWalking();// 0x44116a0
	bool IsWalkable(out const HitResult Hit);// 0x2138d78
	float GetValidPerchRadius();// 0x4411678
	float GetPerchRadiusThreshold();// 0x4411650
	PrimitiveComponent* GetMovementBase();// 0x4411628
	float GetMinAnalogSpeed();// 0x44115f8
	float GetMaxJumpHeightWithJumpTime();// 0x27e5c64
	float GetMaxJumpHeight();// 0x44115c8
	float GetMaxBrakingDeceleration();// 0x4411598
	float GetMaxAcceleration();// 0x4411568
	Vector GetImpartedMovementBaseVelocity();// 0x4411518
	Vector GetCurrentAcceleration();// 0x2138a54
	Character* GetCharacterOwner();// 0x213b48c
	float GetAnalogInputModifier();// 0x44114f0
	void DisableMovement();// 0x1f67e9c
	void ClientVeryShortAdjustPosition(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x44112b0
	void ClientAdjustRootMotionSourcePosition(float TimeStamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x4410ea8
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x4410b84
	void ClientAdjustPosition(float TimeStamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x44108dc
	void ClientAckGoodMove(float TimeStamp);// 0x441085c
	void ClearAccumulatedForces();// 0x4410840
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x441063c
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x44104e0
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x4410414
	void AddForce(Vector force);// 0x441039c

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x120, Size: 4]
	Vector K2_GetInputVector();// 0x44eda00
	bool IsMoveInputIgnored();// 0x44eda48
	Vector GetPendingInputVector();// 0x44eda00
	Pawn* GetPawnOwner();// 0x44ed9d8
	Vector GetLastInputVector();// 0x44ed990
	Vector ConsumeInputVector();// 0x44ed940
	void AddInputVector(Vector WorldVector, bool bForce);// 0x1fdcb94

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf4, Size: 24]
	float FixedPathBrakingDistance;//[Offset: 0x10c, Size: 4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110, Size: 1]
	MovementProperties MovementState;//[Offset: 0x114, Size: 4]
	void StopMovementKeepPathing();// 0x44d651c
	void StopActiveMovement();// 0x1f87580
	bool IsSwimming();// 0x44d64ec
	bool IsMovingOnGround();// 0x44116a0
	bool IsFlying();// 0x44d64bc
	bool IsFalling();// 0x43f7950
	bool IsCrouching();// 0x27c792c

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xbc, Size: 4]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xc0, Size: 4]
	Vector Velocity;//[Offset: 0xc8, Size: 12]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd4, Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xd5, Size: 1]
	Vector PlaneConstraintNormal;//[Offset: 0xd8, Size: 12]
	Vector PlaneConstraintOrigin;//[Offset: 0xe4, Size: 12]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 1]
	void StopMovementImmediately();// 0x21355ec
	void SnapUpdatedComponentToPlane();// 0x44cd248
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x2024f64
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x44cd1d0
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x44cd158
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x44cd090
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x44cd008
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x44ccf88
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x1eed25c
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x44ccdc4
	float K2_GetModifiedMaxSpeed();// 0x2033248
	float K2_GetMaxSpeedModifier();// 0x44ccd94
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x20254e8
	Vector GetPlaneConstraintOrigin();// 0x44ccd60
	Vector GetPlaneConstraintNormal();// 0x44ccd2c
	enum GetPlaneConstraintAxisSetting();// 0x44ccd10
	PhysicsVolume* GetPhysicsVolume();// 0x1eed038
	float GetMaxSpeed();// 0x44ccce0
	float GetGravityZ();// 0x44cccb0
	Vector ConstrainNormalToPlane(Vector Normal);// 0x44ccc14
	Vector ConstrainLocationToPlane(Vector Location);// 0x44ccb78
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x44ccadc

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Distance;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 12]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 12]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 12]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 12]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 12]
	float PenetrationDepth;//[Offset: 0x54, Size: 4]
	int Item;//[Offset: 0x58, Size: 4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 8]
	Actor* Actor;//[Offset: 0x64, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x6c, Size: 8]
	FName BoneName;//[Offset: 0x78, Size: 8]
	int FaceIndex;//[Offset: 0x80, Size: 4]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 4]
	float AgentHeight;//[Offset: 0x8, Size: 4]
	float AgentStepHeight;//[Offset: 0xc, Size: 4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 4]
	class NavigationData* PreferredNavData;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x2fc, Size: 4]
	NavDataConfig NavDataConfig;//[Offset: 0x300, Size: 80]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x350, Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x350, Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x350, Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x350, Size: 1]
	enum RuntimeGeneration;//[Offset: 0x351, Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x354, Size: 4]
	uint32 DataVersion;//[Offset: 0x358, Size: 4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3e4, Size: 12]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x18, Size: 8]
	Color Color;//[Offset: 0x20, Size: 4]
	Vector DefaultQueryExtent;//[Offset: 0x24, Size: 12]
	class NavigationData* NavigationDataClass;//[Offset: 0x30, Size: 4]
	SoftClassPath NavigationDataClassName;//[Offset: 0x38, Size: 24]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 12]
	int AreaID;//[Offset: 0xc, Size: 4]
	class Object* AreaClass;//[Offset: 0x10, Size: 4]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	float FloorDist;//[Offset: 0x4, Size: 4]
	float LineDist;//[Offset: 0x8, Size: 4]
	HitResult HitResult;//[Offset: 0x10, Size: 136]

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x80, Size: 12]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x8d, Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlendWeight;//[Offset: 0x4, Size: 4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x5c4, Size: 4]
	float CapsuleRadius;//[Offset: 0x5c8, Size: 4]
	float CapsuleHeight;//[Offset: 0x5cc, Size: 4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x440d69c
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x440d5d4
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x440d50c
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x440d420
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x440d33c
	float GetUnscaledCapsuleRadius();// 0x440d320
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x440d2ec
	float GetUnscaledCapsuleHalfHeight();// 0x440d2d0
	float GetShapeScale();// 0x440d260
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x440d108
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x440cfb8
	float GetScaledCapsuleRadius();// 0x440cf38
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x440cea8
	float GetScaledCapsuleHalfHeight();// 0x440ce28

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x5b4, Size: 4]
	BodySetup* ShapeBodySetup;//[Offset: 0x5b8, Size: 4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5bc, Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5bc, Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5bc, Size: 1]
	class NavArea* AreaClass;//[Offset: 0x5c0, Size: 4]

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x8, Size: 8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 12]
	Rotator Rotation;//[Offset: 0x1c, Size: 12]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 224]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x4, Size: 4]
	float Position;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize100 Location;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	PrimitiveComponent* MovementBase;//[Offset: 0x24, Size: 4]
	FName MovementBaseBoneName;//[Offset: 0x28, Size: 8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x34, Size: 144]
	Vector_NetQuantize10 Acceleration;//[Offset: 0xc4, Size: 12]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0xd0, Size: 12]

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x2fc, Size: 4]
	byte Ping;//[Offset: 0x300, Size: 1]
	FString PlayerName;//[Offset: 0x304, Size: 12]
	int PlayerID;//[Offset: 0x31c, Size: 4]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320, Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x320, Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x320, Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x320, Size: 1]
	int StartTime;//[Offset: 0x324, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x328, Size: 4]
	FString SavedNetworkAddress;//[Offset: 0x330, Size: 12]
	UniqueNetIdRepl UniqueId;//[Offset: 0x33c, Size: 12]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x2bb69b8
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x2bb69b8
	void OnRep_UniqueId();// 0x1f3ed9c
	void OnRep_Score();// 0x1ed11c0
	void OnRep_PlayerName();// 0x1f3cb34
	void OnRep_bIsInactive();// 0x1edac58

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	float DamageImpulse;//[Offset: 0x20, Size: 4]
	float DestructibleImpulse;//[Offset: 0x24, Size: 4]
	float DestructibleDamageSpreadScale;//[Offset: 0x28, Size: 4]
	float DamageFalloff;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x348, Size: 4]
	Pawn* AcknowledgedPawn;//[Offset: 0x350, Size: 4]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x354, Size: 4]
	HUD* MyHUD;//[Offset: 0x35c, Size: 4]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x360, Size: 4]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x364, Size: 4]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x36c, Size: 12]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x384, Size: 4]
	Actor*[] HiddenActors;//[Offset: 0x388, Size: 12]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x394, Size: 12]
	float LastSpectatorStateSynchTime;//[Offset: 0x3a4, Size: 4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x3a8, Size: 12]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x3b4, Size: 12]
	int ClientCap;//[Offset: 0x3c0, Size: 4]
	CheatManager* CheatManager;//[Offset: 0x3c4, Size: 4]
	class CheatManager* CheatClass;//[Offset: 0x3c8, Size: 4]
	PlayerInput* PlayerInput;//[Offset: 0x3cc, Size: 4]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x3d0, Size: 12]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43e, Size: 1]
	byte NetPlayerIndex;//[Offset: 0x43f, Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x46c, Size: 4]
	NetConnection* NetConnection;//[Offset: 0x470, Size: 4]
	float InputYawScale;//[Offset: 0x480, Size: 4]
	float InputPitchScale;//[Offset: 0x484, Size: 4]
	float InputRollScale;//[Offset: 0x488, Size: 4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48c, Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48c, Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48c, Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48c, Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48c, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x48c, Size: 1]
	float ForceFeedbackScale;//[Offset: 0x490, Size: 4]
	Key[] ClickEventKeys;//[Offset: 0x494, Size: 12]
	byte DefaultMouseCursor;//[Offset: 0x4a0, Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x4a1, Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x4a2, Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x4a3, Size: 1]
	float HitResultTraceDistance;//[Offset: 0x4a4, Size: 4]
	bool bPauseUpdateStreamingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4b8, Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x528, Size: 4]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x52c, Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x538, Size: 4]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x57c, Size: 4]
	Vector SpawnLocation;//[Offset: 0x580, Size: 12]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x592, Size: 2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x594, Size: 2]
	bool bOpenReconnectViewPointFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 1]
	bool WasInputKeyJustReleased(Key Key);// 0x4500cc4
	bool WasInputKeyJustPressed(Key Key);// 0x45009d0
	void ToggleSpeaking(bool bInSpeaking);// 0x4500948
	void SwitchLevel(FString URL);// 0x27d46bc
	void StopHapticEffect(enum Hand);// 0x45008d0
	void StartFire(byte FireModeNum);// 0x4500850
	void SetVirtualJoystickVisibility(bool bVisible);// 0x45007c8
	void SetViewTargetWithBlend(Actor* NewViewTarget, float blendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x4500628
	void SetName(FString S);// 0x4500564
	void SetMouseLocation(const int X, const int Y);// 0x45004a8
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x45003ec
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x45002ec
	void SetControllerLightColor(Color Color);// 0x450027c
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x45000b0
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x44fffa4
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x44ffe94
	void ServerViewPrevPlayer();// 0x44ffe38
	void ServerViewNextPlayer();// 0x44ffddc
	void ServerVerifyViewTarget();// 0x44ffd80
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0x44ffc74
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x44ffb70
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x44ff654
	void ServerToggleAILogging();// 0x44ff5f8
	void ServerShortTimeout();// 0x44ff59c
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x44ff4d4
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x44ff3bc
	void ServerRestartPlayer();// 0x44ff360
	void ServerPause();// 0x44ff304
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x44ff260
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0x44fed44
	void ServerCheckClientPossessionReliable();// 0x44fece8
	void ServerCheckClientPossession();// 0x44fec8c
	void ServerChangeName(FString S);// 0x44feb98
	void ServerCamera(FName NewMode);// 0x44feae4
	void ServerAcknowledgePossession(Pawn* P);// 0x44fea30
	void SendToConsole(FString Command);// 0x44fe96c
	void RestartLevel();// 0x44fe950
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x44fe830
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x44fe6e0
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x44fe400
	void Pause();// 0x44fe3e4
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x44fe35c
	void LocalTravel(FString URL);// 0x44fe298
	bool IsInputKeyDown(Key Key);// 0x44fdfa4
	void GetViewportSize(out int SizeX, out int SizeY);// 0x44fdec4
	SpectatorPawn* GetSpectatorPawn();// 0x44fdea8
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x44fddc0
	Vector GetInputVectorKeyState(Key Key);// 0x44fdabc
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x44fd93c
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x44fd85c
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x44fd6d8
	float GetInputKeyTimeDown(Key Key);// 0x44fd3e0
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x44fd2bc
	float GetInputAnalogKeyState(Key Key);// 0x44fcfc4
	HUD* GetHUD();// 0x44fcf9c
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x44fcdc8
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x44fcc4c
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x44fcad0
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x44fc940
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x44fc808
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x44fc6d0
	Vector GetFocalLocation();// 0x21e13a4
	void FOV(float NewFOV);// 0x27d2f08
	void EnableCheats();// 0x44fc6b4
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x44fc548
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x44fc468
	void ConsoleKey(Key Key);// 0x44fc174
	void ClientWasKicked(const FText KickReason);// 0x44fbfe0
	void ClientVoiceHandshakeComplete();// 0x223bc74
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x44fbe28
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x44fbabc
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x44fb90c
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x44fb76c
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x44fb5d0
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x44fb50c
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x44fb440
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x44fb3c0
	void ClientStartOnlineSession();// 0x21b98ec
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x21422c0
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x44fb2b8
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x44fb230
	void ClientSetHUD(class HUD NewHUDClass);// 0x44fb1b0
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x44fb0a8
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x44faf2c
	void ClientSetCameraMode(FName NewCamMode);// 0x44faeac
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x44fad08
	void ClientSetBlockOnAsyncLoading();// 0x2314260
	void ClientReturnToMainMenu(FString ReturnReason);// 0x44fac44
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x20c35a8
	void ClientRestart(Pawn* NewPawn);// 0x44fabc4
	void ClientReset();// 0x213e544
	void ClientRepObjRef(Object* Object);// 0x44fab44
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x44fa9ac
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x44fa850
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x44fa72c
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x44fa5d8
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x44fa4d0
	void ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x44fa364
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x44fa210
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x44f9f40
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0x44f9bd4
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x44f9a80
	void ClientIgnoreMoveInput(bool bIgnore);// 0x44f99f8
	void ClientIgnoreLookInput(bool bIgnore);// 0x44f9970
	void ClientGotoState(FName NewState);// 0x44f98f0
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x44f9824
	void ClientForceGarbageCollection();// 0x27d2ed0
	void ClientFlushLevelStreaming();// 0x44f9810
	void ClientEndOnlineSession();// 0x20c3948
	void ClientEnableNetworkVoice(bool bEnable);// 0x44f9788
	void ClientCommitMapChange();// 0x27d2eec
	void ClientClearCameraLensEffects();// 0x223bd30
	void ClientCapBandwidth(int Cap);// 0x44f9708
	void ClientCancelPendingMapChange();// 0x44f96ec
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x44f95e0
	void ClearAudioListenerOverride();// 0x44f95cc
	void Camera(FName NewMode);// 0x44f954c
	void AddYawInput(float Val);// 0x44f94cc
	void AddRollInput(float Val);// 0x44f944c
	void AddPitchInput(float Val);// 0x44f93cc
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x21da208

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x20, Size: 4]
	int CurrentNetSpeed;//[Offset: 0x24, Size: 4]
	int ConfiguredInternetSpeed;//[Offset: 0x28, Size: 4]
	int ConfiguredLanSpeed;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x2fc, Size: 4]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x300, Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x300, Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x300, Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x300, Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x300, Size: 1]
	bool bDebugInfoUseModifiedActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x300, Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x304, Size: 12]
	FName[] DebugDisplay;//[Offset: 0x318, Size: 12]
	FName[] ToggledDebugCategories;//[Offset: 0x324, Size: 12]
	Canvas* Canvas;//[Offset: 0x330, Size: 4]
	Canvas* DebugCanvas;//[Offset: 0x334, Size: 4]
	DebugTextInfo[] DebugTextList;//[Offset: 0x338, Size: 12]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x344, Size: 4]
	Actor* ShowDebugTargetActor;//[Offset: 0x348, Size: 4]
	Actor* UpdateShowDebugTargetActor();// 0x2bb69b8
	void ShowHUD();// 0x1ed11c0
	void ShowDebugToggleSubCategory(FName Category);// 0x444e980
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x444e908
	void ShowDebugForMoifiedTargetActor();// 0x444e8f4
	void ShowDebug(FName DebugType);// 0x444e874
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x444e7b0
	void RemoveAllDebugStrings();// 0x444e79c
	void ReceiveHitBoxRelease(const FName BoxName);// 0x2bb69b8
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x2bb69b8
	void ReceiveHitBoxClick(const FName BoxName);// 0x2bb69b8
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x2bb69b8
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x2bb69b8
	Vector Project(Vector Location);// 0x444e708
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x444e50c
	PlayerController* GetOwningPlayerController();// 0x1fa6450
	Pawn* GetOwningPawn();// 0x444e4e4
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x444e28c
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x444e0f4
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x444dc7c
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x444da04
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x444d868
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x444d4e4
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x444d2bc
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x444cee4
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x444cd00
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x444cb9c
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x444ca00
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x444c610

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x1c, Size: 4]
	float OrgY;//[Offset: 0x20, Size: 4]
	float ClipX;//[Offset: 0x24, Size: 4]
	float ClipY;//[Offset: 0x28, Size: 4]
	Color DrawColor;//[Offset: 0x2c, Size: 4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	int SizeX;//[Offset: 0x34, Size: 4]
	int SizeY;//[Offset: 0x38, Size: 4]
	Plane ColorModulate;//[Offset: 0x40, Size: 16]
	Texture2D* DefaultTexture;//[Offset: 0x50, Size: 4]
	Texture2D* GradientTexture0;//[Offset: 0x54, Size: 4]
	ReporterGraph* ReporterGraph;//[Offset: 0x58, Size: 4]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x440befc
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x440bdec
	Vector K2_Project(Vector WorldLocation);// 0x440bd58
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x440bbb4
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x440b8e0
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x440b4d8
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x440b344
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x440b1a0
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x440af88
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x440ae30
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness);// 0x440ad30
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x440a810
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x440a6f4

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0xa0, Size: 4]
	int LevelIndex;//[Offset: 0xa4, Size: 4]
	int FirstResourceMemMip;//[Offset: 0xa8, Size: 4]
	IntPoint ImportedSize;//[Offset: 0xac, Size: 8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xb8, Size: 8]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc2, Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc2, Size: 1]
	byte AddressX;//[Offset: 0xc3, Size: 1]
	byte AddressY;//[Offset: 0xc4, Size: 1]
	int Blueprint_GetSizeY();// 0x454277c
	int Blueprint_GetSizeX();// 0x4542754

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x20, Size: 1]
	FontCharacter[] Characters;//[Offset: 0x24, Size: 12]
	Texture2D*[] Textures;//[Offset: 0x30, Size: 12]
	int IsRemapped;//[Offset: 0x3c, Size: 4]
	float EmScale;//[Offset: 0x40, Size: 4]
	float Ascent;//[Offset: 0x44, Size: 4]
	float Descent;//[Offset: 0x48, Size: 4]
	float Leading;//[Offset: 0x4c, Size: 4]
	int Kerning;//[Offset: 0x50, Size: 4]
	FontImportOptionsData ImportOptions;//[Offset: 0x54, Size: 144]
	int NumCharacters;//[Offset: 0xe4, Size: 4]
	int[] MaxCharHeight;//[Offset: 0xe8, Size: 12]
	float ScalingFactor;//[Offset: 0xf4, Size: 4]
	int LegacyFontSize;//[Offset: 0xf8, Size: 4]
	FName LegacyFontName;//[Offset: 0x100, Size: 8]
	CompositeFont CompositeFont;//[Offset: 0x108, Size: 24]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 4]
	int StartV;//[Offset: 0x4, Size: 4]
	int USize;//[Offset: 0x8, Size: 4]
	int VSize;//[Offset: 0xc, Size: 4]
	byte TextureIndex;//[Offset: 0x10, Size: 1]
	int VerticalOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 12]
	float Height;//[Offset: 0xc, Size: 4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	byte CharacterSet;//[Offset: 0x11, Size: 1]
	FString Chars;//[Offset: 0x14, Size: 12]
	FString UnicodeRange;//[Offset: 0x20, Size: 12]
	FString CharsFilePath;//[Offset: 0x2c, Size: 12]
	FString CharsFileWildcard;//[Offset: 0x38, Size: 12]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x48, Size: 16]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	int TexturePageWidth;//[Offset: 0x5c, Size: 4]
	int TexturePageMaxHeight;//[Offset: 0x60, Size: 4]
	int XPadding;//[Offset: 0x64, Size: 4]
	int YPadding;//[Offset: 0x68, Size: 4]
	int ExtendBoxTop;//[Offset: 0x6c, Size: 4]
	int ExtendBoxBottom;//[Offset: 0x70, Size: 4]
	int ExtendBoxRight;//[Offset: 0x74, Size: 4]
	int ExtendBoxLeft;//[Offset: 0x78, Size: 4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	int Kerning;//[Offset: 0x80, Size: 4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0x88, Size: 4]
	float DistanceFieldScanRadiusScale;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 12]
	CompositeSubFont[] SubTypefaces;//[Offset: 0xc, Size: 12]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 12]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 8]
	FontData Font;//[Offset: 0x8, Size: 20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 12]
	enum Hinting;//[Offset: 0xc, Size: 1]
	enum LoadingPolicy;//[Offset: 0xd, Size: 1]
	Object* FontFaceAsset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CompositeSubFont
	Typeface Typeface;//[Offset: 0x0, Size: 12]
	Int32Range[] CharacterRanges;//[Offset: 0xc, Size: 12]
	float ScalingFactor;//[Offset: 0x18, Size: 4]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 16]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 16]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 16]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 4]
	Vector SrcActorOffset;//[Offset: 0x4, Size: 12]
	Vector SrcActorDesiredOffset;//[Offset: 0x10, Size: 12]
	FString DebugText;//[Offset: 0x1c, Size: 12]
	float TimeRemaining;//[Offset: 0x28, Size: 4]
	float Duration;//[Offset: 0x2c, Size: 4]
	Color TextColor;//[Offset: 0x30, Size: 4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 1]
	Vector OrigActorLocation;//[Offset: 0x38, Size: 12]
	Font* Font;//[Offset: 0x44, Size: 4]
	float FontScale;//[Offset: 0x48, Size: 4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x2fc, Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x300, Size: 4]
	float DefaultFOV;//[Offset: 0x310, Size: 4]
	float DefaultOrthoWidth;//[Offset: 0x318, Size: 4]
	float DefaultAspectRatio;//[Offset: 0x320, Size: 4]
	CameraCacheEntry CameraCache;//[Offset: 0x370, Size: 1424]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x900, Size: 1424]
	TViewTarget ViewTarget;//[Offset: 0xe90, Size: 1440]
	TViewTarget PendingViewTarget;//[Offset: 0x1430, Size: 1440]
	CameraModifier*[] ModifierList;//[Offset: 0x19e4, Size: 12]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x19f0, Size: 12]
	float FreeCamDistance;//[Offset: 0x19fc, Size: 4]
	Vector FreeCamOffset;//[Offset: 0x1a00, Size: 12]
	Vector ViewTargetOffset;//[Offset: 0x1a0c, Size: 12]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x1a28, Size: 12]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x1a34, Size: 4]
	CameraAnimInst* AnimInstPool;//[Offset: 0x1a38, Size: 4]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x1a58, Size: 12]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x1a70, Size: 12]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x1a7c, Size: 12]
	CameraActor* AnimCameraActor;//[Offset: 0x1a88, Size: 4]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a8c, Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a8c, Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a8c, Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a8d, Size: 1]
	float ViewPitchMin;//[Offset: 0x1a90, Size: 4]
	float ViewPitchMax;//[Offset: 0x1a94, Size: 4]
	float ViewYawMin;//[Offset: 0x1a98, Size: 4]
	float ViewYawMax;//[Offset: 0x1a9c, Size: 4]
	float ViewRollMin;//[Offset: 0x1aa0, Size: 4]
	float ViewRollMax;//[Offset: 0x1aa4, Size: 4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x44f6c34
	void StopCameraFade();// 0x1f67ed4
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x44f6b68
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x44f6a9c
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x44f69d0
	void StopAllCameraShakes(bool bImmediately);// 0x44f6948
	void StopAllCameraAnims(bool bImmediate);// 0x44f68c0
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x44f66d4
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x44f65c0
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x4437edc
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x1f647ec
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x44f6464
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x44f6140
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x44f5fd8
	void OnPhotographySessionStart();// 0x1f3ed9c
	void OnPhotographySessionEnd();// 0x1edac58
	void OnPhotographyMultiPartCaptureStart();// 0x1f3cb34
	void OnPhotographyMultiPartCaptureEnd();// 0x1ed11c0
	PlayerController* GetOwningPlayerController();// 0x44f5fa8
	float GetFOVAngle();// 0x44f5f78
	Rotator GetCameraRotation();// 0x44f5f30
	Vector GetCameraLocation();// 0x44f5ee8
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x44f5e60
	void ClearCameraLensEffects();// 0x44f5e44
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x2bb69b8
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x44f5dbc
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x44f5d34

--------------------------------
Class: CameraCacheEntry
	float TimeStamp;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1408]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector LocationLocalSpace;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	float FOV;//[Offset: 0x24, Size: 4]
	float OrthoWidth;//[Offset: 0x28, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2c, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x30, Size: 4]
	float AspectRatio;//[Offset: 0x34, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	byte ProjectionMode;//[Offset: 0x39, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x3c, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1328]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x570, Size: 8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bOverride_RadialBlurCenterPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMaxOcclusionDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 1]
	bool bOverride_SRTOcclusionContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 1]
	bool bOverride_SRTOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMinOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 1]
	bool bOverride_SRTSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverride_SRTSpecularMinOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverride_SRTOcclusionTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverride_SRTFilterSmoothness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeSharpness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThresholdMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 1]
	float WhiteTemp;//[Offset: 0x18, Size: 4]
	float WhiteTint;//[Offset: 0x1c, Size: 4]
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 16]
	Vector4 ColorContrast;//[Offset: 0x30, Size: 16]
	Vector4 ColorGamma;//[Offset: 0x40, Size: 16]
	Vector4 ColorGain;//[Offset: 0x50, Size: 16]
	Vector4 ColorOffset;//[Offset: 0x60, Size: 16]
	Vector4 ColorSaturationShadows;//[Offset: 0x70, Size: 16]
	Vector4 ColorContrastShadows;//[Offset: 0x80, Size: 16]
	Vector4 ColorGammaShadows;//[Offset: 0x90, Size: 16]
	Vector4 ColorGainShadows;//[Offset: 0xa0, Size: 16]
	Vector4 ColorOffsetShadows;//[Offset: 0xb0, Size: 16]
	float ColorCorrectionShadowsMax;//[Offset: 0xc0, Size: 4]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 16]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 16]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 16]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 16]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 16]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 16]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 16]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 16]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 16]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 16]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 4]
	float FilmSlope;//[Offset: 0x174, Size: 4]
	float FilmToe;//[Offset: 0x178, Size: 4]
	float FilmShoulder;//[Offset: 0x17c, Size: 4]
	float FilmBlackClip;//[Offset: 0x180, Size: 4]
	float FilmWhiteClip;//[Offset: 0x184, Size: 4]
	LinearColor FilmWhitePoint;//[Offset: 0x188, Size: 16]
	LinearColor FilmShadowTint;//[Offset: 0x198, Size: 16]
	float FilmShadowTintBlend;//[Offset: 0x1a8, Size: 4]
	float FilmShadowTintAmount;//[Offset: 0x1ac, Size: 4]
	float FilmSaturation;//[Offset: 0x1b0, Size: 4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1b4, Size: 16]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1c4, Size: 16]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1d4, Size: 16]
	float FilmContrast;//[Offset: 0x1e4, Size: 4]
	float FilmToeAmount;//[Offset: 0x1e8, Size: 4]
	float FilmHealAmount;//[Offset: 0x1ec, Size: 4]
	float FilmDynamicRange;//[Offset: 0x1f0, Size: 4]
	LinearColor SceneColorTint;//[Offset: 0x1f4, Size: 16]
	float SceneFringeIntensity;//[Offset: 0x204, Size: 4]
	byte BloomMethod;//[Offset: 0x208, Size: 1]
	float BloomIntensity;//[Offset: 0x20c, Size: 4]
	float BloomThreshold;//[Offset: 0x210, Size: 4]
	float BloomSizeScale;//[Offset: 0x214, Size: 4]
	float Bloom1Size;//[Offset: 0x218, Size: 4]
	float Bloom2Size;//[Offset: 0x21c, Size: 4]
	float Bloom3Size;//[Offset: 0x220, Size: 4]
	float Bloom4Size;//[Offset: 0x224, Size: 4]
	float Bloom5Size;//[Offset: 0x228, Size: 4]
	float Bloom6Size;//[Offset: 0x22c, Size: 4]
	LinearColor Bloom1Tint;//[Offset: 0x230, Size: 16]
	LinearColor Bloom2Tint;//[Offset: 0x240, Size: 16]
	LinearColor Bloom3Tint;//[Offset: 0x250, Size: 16]
	LinearColor Bloom4Tint;//[Offset: 0x260, Size: 16]
	LinearColor Bloom5Tint;//[Offset: 0x270, Size: 16]
	LinearColor Bloom6Tint;//[Offset: 0x280, Size: 16]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x290, Size: 4]
	float BloomConvolutionSize;//[Offset: 0x294, Size: 4]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x298, Size: 8]
	Vector BloomConvolutionPreFilter;//[Offset: 0x2a0, Size: 12]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2ac, Size: 4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b0, Size: 4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b4, Size: 4]
	float BloomConvolutionBufferScale;//[Offset: 0x2b8, Size: 4]
	Texture* BloomDirtMask;//[Offset: 0x2bc, Size: 4]
	float BloomDirtMaskIntensity;//[Offset: 0x2c0, Size: 4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2c4, Size: 16]
	Vector2D RadialBlurCenterPos;//[Offset: 0x2d4, Size: 8]
	float RadialBlurIntensity;//[Offset: 0x2dc, Size: 4]
	float RadialBlurDistance;//[Offset: 0x2e0, Size: 4]
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 16]
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 4]
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 4]
	byte AutoExposureMethod;//[Offset: 0x2fc, Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x300, Size: 4]
	float AutoExposureHighPercent;//[Offset: 0x304, Size: 4]
	float AutoExposureMinBrightness;//[Offset: 0x308, Size: 4]
	float AutoExposureMaxBrightness;//[Offset: 0x30c, Size: 4]
	float AutoExposureSpeedUp;//[Offset: 0x310, Size: 4]
	float AutoExposureSpeedDown;//[Offset: 0x314, Size: 4]
	float AutoExposureBias;//[Offset: 0x318, Size: 4]
	float HistogramLogMin;//[Offset: 0x31c, Size: 4]
	float HistogramLogMax;//[Offset: 0x320, Size: 4]
	float LensFlareIntensity;//[Offset: 0x324, Size: 4]
	LinearColor LensFlareTint;//[Offset: 0x328, Size: 16]
	float LensFlareBokehSize;//[Offset: 0x338, Size: 4]
	int LensFlareCount;//[Offset: 0x33c, Size: 4]
	float LensFlareThreshold;//[Offset: 0x340, Size: 4]
	Texture* LensFlareBokehShape;//[Offset: 0x344, Size: 4]
	LinearColor LensFlareTints;//[Offset: 0x348, Size: 16]
	float VignetteIntensity;//[Offset: 0x3c8, Size: 4]
	float GrainJitter;//[Offset: 0x3cc, Size: 4]
	float GrainIntensity;//[Offset: 0x3d0, Size: 4]
	float AmbientOcclusionIntensity;//[Offset: 0x3d4, Size: 4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x3d8, Size: 4]
	float AmbientOcclusionRadius;//[Offset: 0x3dc, Size: 4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e0, Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x3e4, Size: 4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x3e8, Size: 4]
	float AmbientOcclusionDistance;//[Offset: 0x3ec, Size: 4]
	float AmbientOcclusionPower;//[Offset: 0x3f0, Size: 4]
	float AmbientOcclusionBias;//[Offset: 0x3f4, Size: 4]
	float AmbientOcclusionQuality;//[Offset: 0x3f8, Size: 4]
	float AmbientOcclusionMipBlend;//[Offset: 0x3fc, Size: 4]
	float AmbientOcclusionMipScale;//[Offset: 0x400, Size: 4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x404, Size: 4]
	LinearColor SRTIndirectLightingColor;//[Offset: 0x408, Size: 16]
	float SRTIndirectLightingIntensity;//[Offset: 0x418, Size: 4]
	float SRTMaxOcclusionDistance;//[Offset: 0x41c, Size: 4]
	float SRTOcclusionContrast;//[Offset: 0x420, Size: 4]
	float SRTOcclusionExponent;//[Offset: 0x424, Size: 4]
	float SRTMinOcclusion;//[Offset: 0x428, Size: 4]
	float SRTSpecularOcclusionExponent;//[Offset: 0x42c, Size: 4]
	float SRTSpecularMinOcclusion;//[Offset: 0x430, Size: 4]
	LinearColor SRTOcclusionTint;//[Offset: 0x434, Size: 16]
	float SRTFilterSmoothness;//[Offset: 0x444, Size: 4]
	LinearColor IndirectLightingColor;//[Offset: 0x448, Size: 16]
	float IndirectLightingIntensity;//[Offset: 0x458, Size: 4]
	float ColorGradingIntensity;//[Offset: 0x45c, Size: 4]
	Texture* ColorGradingLUT;//[Offset: 0x460, Size: 4]
	byte DepthOfFieldMethod;//[Offset: 0x464, Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x465, Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x468, Size: 4]
	float DepthOfFieldSensorWidth;//[Offset: 0x46c, Size: 4]
	float DepthOfFieldFocalDistance;//[Offset: 0x470, Size: 4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x474, Size: 4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x478, Size: 4]
	float DepthOfFieldFocalRegion;//[Offset: 0x47c, Size: 4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x480, Size: 4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x484, Size: 4]
	float DepthOfFieldScale;//[Offset: 0x488, Size: 4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x48c, Size: 4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x490, Size: 4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x494, Size: 4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x498, Size: 4]
	float DepthOfFieldOcclusion;//[Offset: 0x49c, Size: 4]
	float DepthOfFieldColorThreshold;//[Offset: 0x4a0, Size: 4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x4a4, Size: 4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4a8, Size: 4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4ac, Size: 4]
	float MotionBlurAmount;//[Offset: 0x4b0, Size: 4]
	float MotionBlurMax;//[Offset: 0x4b4, Size: 4]
	float MotionBlurPerObjectSize;//[Offset: 0x4b8, Size: 4]
	float LPVIntensity;//[Offset: 0x4bc, Size: 4]
	float LPVVplInjectionBias;//[Offset: 0x4c0, Size: 4]
	float LPVSize;//[Offset: 0x4c4, Size: 4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4c8, Size: 4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4cc, Size: 4]
	float LPVGeometryVolumeBias;//[Offset: 0x4d0, Size: 4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4d4, Size: 4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4d8, Size: 4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4dc, Size: 4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4e0, Size: 4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4e4, Size: 4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4e8, Size: 4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4ec, Size: 4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4f0, Size: 4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x4f4, Size: 4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4f8, Size: 4]
	float LPVFadeRange;//[Offset: 0x4fc, Size: 4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x500, Size: 4]
	float ScreenPercentage;//[Offset: 0x504, Size: 4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x508, Size: 12]
	float FxaaConsoleEdgeSharpness;//[Offset: 0x514, Size: 4]
	float FxaaConsoleEdgeThreshold;//[Offset: 0x518, Size: 4]
	float FxaaConsoleEdgeThresholdMin;//[Offset: 0x51c, Size: 4]
	Object*[] Blendables;//[Offset: 0x520, Size: 12]

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 12]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 4]
	Object* Object;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1408]
	PlayerState* PlayerState;//[Offset: 0x590, Size: 4]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	byte Priority;//[Offset: 0x1d, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x20, Size: 4]
	float AlphaInTime;//[Offset: 0x24, Size: 4]
	float AlphaOutTime;//[Offset: 0x28, Size: 4]
	float Alpha;//[Offset: 0x2c, Size: 4]
	bool IsDisabled();// 0x1ff7440
	Actor* GetViewTarget();// 0x1ed3ca4
	void EnableModifier();// 0x2117930
	void DisableModifier(bool bImmediate);// 0x44088ec
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x2bb69b8
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x2bb69b8

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x340, Size: 4]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x344, Size: 4]
	PlayerCameraManager* BaseCamera;//[Offset: 0x348, Size: 4]
	Transform RelativeTransform;//[Offset: 0x350, Size: 48]
	float BaseFOV;//[Offset: 0x380, Size: 4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x384, Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x384, Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x388, Size: 12]
	float DistFromCamera;//[Offset: 0x394, Size: 4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x2fc, Size: 4]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x300, Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x300, Size: 1]
	delegate OnParticleSpawn;//[Offset: 0x304, Size: 12]
	delegate OnParticleBurst;//[Offset: 0x310, Size: 12]
	delegate OnParticleDeath;//[Offset: 0x31c, Size: 12]
	delegate OnParticleCollide;//[Offset: 0x328, Size: 12]
	delegate OnParticleCollideMoreInfo;//[Offset: 0x334, Size: 12]
	void ToggleActive();// 0x442856c
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x44284ac
	void SetTemplate(ParticleSystem* NewTemplate);// 0x1ecc424
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x44283f0
	void SetFloatParameter(FName ParameterName, float Param);// 0x442832c
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x4428264
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x44281a8
	void OnRep_bCurrentlyActive();// 0x1f3cb34
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x1edac74
	bool IsActive();// 0x4428180
	void Deactivate();// 0x442816c
	void Activate();// 0x4428158

--------------------------------
Class: ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x5b4, Size: 4]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x5b8, Size: 12]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x5c4, Size: 12]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5d0, Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d1, Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5d1, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5d1, Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5d1, Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d2, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d2, Size: 1]
	byte LODMethod;//[Offset: 0x5d4, Size: 1]
	enum RequiredSignificance;//[Offset: 0x5d5, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x5d8, Size: 12]
	delegate OnParticleSpawn;//[Offset: 0x5e4, Size: 12]
	delegate OnParticleBurst;//[Offset: 0x5f0, Size: 12]
	delegate OnParticleDeath;//[Offset: 0x5fc, Size: 12]
	delegate OnParticleCollide;//[Offset: 0x608, Size: 12]
	delegate OnParticleCollideMoreInfo;//[Offset: 0x614, Size: 12]
	Vector OldPosition;//[Offset: 0x620, Size: 12]
	Vector PartSysVelocity;//[Offset: 0x62c, Size: 12]
	float WarmupTime;//[Offset: 0x638, Size: 4]
	float WarmupTickRate;//[Offset: 0x63c, Size: 4]
	float SecondsBeforeInactive;//[Offset: 0x644, Size: 4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x64c, Size: 4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x66c, Size: 12]
	float CustomTimeDilation;//[Offset: 0x680, Size: 4]
	SceneComponent* AutoAttachParent;//[Offset: 0x6c4, Size: 8]
	FName AutoAttachSocketName;//[Offset: 0x6d0, Size: 8]
	enum AutoAttachLocationRule;//[Offset: 0x6d8, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x6d9, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x6da, Size: 1]
	delegate OnSystemFinished;//[Offset: 0x704, Size: 12]
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x44eb610
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x44eb4b8
	void SetTemplate(ParticleSystem* NewTemplate);// 0x44eb440
	void SetSocketName(FName InSocketName);// 0x44eb3c8
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x44eb30c
	void SetLODLevel(int InLODLevel);// 0x44eb28c
	void SetFloatParameter(FName ParameterName, float Param);// 0x44eb1c8
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x44eb0f4
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x44eb02c
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x44eaf20
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x44eae18
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x44ead0c
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x44eac00
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x44eaaf8
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x44ea9ec
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x44ea928
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x44ea7f8
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x44ea654
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x44ea598
	int GetNumActiveParticles();// 0x44ea570
	MaterialInterface* GetNamedMaterial(FName InName);// 0x44ea4e8
	int GetLODLevel();// 0x44ea4b8
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x44ea39c
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x44ea27c
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x44ea160
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x44ea044
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x44e9f24
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x44e9e08
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x44e9d30
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x44e9b90
	void EndTrails();// 0x44e9b7c
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x44e9ab0
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x44e9958

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x1c, Size: 1]
	float UpdateTime_FPS;//[Offset: 0x20, Size: 4]
	float UpdateTime_Delta;//[Offset: 0x24, Size: 4]
	float WarmupTime;//[Offset: 0x28, Size: 4]
	float WarmupTickRate;//[Offset: 0x2c, Size: 4]
	ParticleEmitter*[] Emitters;//[Offset: 0x30, Size: 12]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x3c, Size: 4]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x48, Size: 4]
	bool bUseDeviceConstBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	byte LODMethod;//[Offset: 0x4d, Size: 1]
	float[] LODDistances;//[Offset: 0x50, Size: 12]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x60, Size: 12]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x70, Size: 28]
	float SecondsBeforeInactive;//[Offset: 0x8c, Size: 4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 1]
	float Delay;//[Offset: 0x94, Size: 4]
	float DelayLow;//[Offset: 0x98, Size: 4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xa0, Size: 4]
	enum InsignificantReaction;//[Offset: 0xa4, Size: 1]
	float InsignificanceDelay;//[Offset: 0xa8, Size: 4]
	enum MaxSignificanceLevel;//[Offset: 0xac, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xb0, Size: 12]
	float MacroUVRadius;//[Offset: 0xbc, Size: 4]
	byte OcclusionBoundsMethod;//[Offset: 0xc0, Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xc4, Size: 28]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe0, Size: 12]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xec, Size: 12]
	bool ContainsEmitterType(class Object TypeData);// 0x44e8cc0

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x20, Size: 8]
	int SubUVDataOffset;//[Offset: 0x28, Size: 4]
	byte EmitterRenderMode;//[Offset: 0x2c, Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x30, Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	int PeakActiveParticles;//[Offset: 0x40, Size: 4]
	int InitialAllocationCount;//[Offset: 0x44, Size: 4]
	float MediumDetailSpawnRateScale;//[Offset: 0x48, Size: 4]
	float QualityLevelSpawnRateScale;//[Offset: 0x4c, Size: 4]
	float GPUToCPUEmitterSpawnRateScale;//[Offset: 0x50, Size: 4]
	byte DetailMode;//[Offset: 0x54, Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 1]
	enum SignificanceLevel;//[Offset: 0x56, Size: 1]
	bool bSupportParticleDynamicInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57, Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x1c, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x24, Size: 4]
	ParticleModule*[] Modules;//[Offset: 0x28, Size: 12]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x34, Size: 4]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x38, Size: 4]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x3c, Size: 4]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x40, Size: 12]
	ParticleModule*[] SpawnModules;//[Offset: 0x4c, Size: 12]
	ParticleModule*[] UpdateModules;//[Offset: 0x58, Size: 12]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x64, Size: 12]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0x70, Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	int PeakActiveParticles;//[Offset: 0x80, Size: 4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x20, Size: 4]
	Vector EmitterOrigin;//[Offset: 0x24, Size: 12]
	Rotator EmitterRotation;//[Offset: 0x30, Size: 12]
	byte ScreenAlignment;//[Offset: 0x3c, Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x40, Size: 4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x44, Size: 4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 1]
	byte SortMode;//[Offset: 0x49, Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a, Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a, Size: 1]
	float EmitterDuration;//[Offset: 0x4c, Size: 4]
	float EmitterDurationLow;//[Offset: 0x50, Size: 4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 1]
	int EmitterLoops;//[Offset: 0x58, Size: 4]
	RawDistributionFloat SpawnRate;//[Offset: 0x5c, Size: 40]
	byte ParticleBurstMethod;//[Offset: 0x84, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x88, Size: 12]
	float EmitterDelay;//[Offset: 0x94, Size: 4]
	float EmitterDelayLow;//[Offset: 0x98, Size: 4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 1]
	byte InterpolationMethod;//[Offset: 0x9d, Size: 1]
	int SubImages_Horizontal;//[Offset: 0xa0, Size: 4]
	int SubImages_Vertical;//[Offset: 0xa4, Size: 4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	float RandomImageTime;//[Offset: 0xac, Size: 4]
	int RandomImageChanges;//[Offset: 0xb0, Size: 4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xb8, Size: 12]
	float MacroUVRadius;//[Offset: 0xc4, Size: 4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 1]
	int MaxDrawCount;//[Offset: 0xcc, Size: 4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0xd4, Size: 4]
	byte BoundingMode;//[Offset: 0xd8, Size: 1]
	byte OpacitySourceMode;//[Offset: 0xd9, Size: 1]
	float AlphaThreshold;//[Offset: 0xdc, Size: 4]
	int CutoutSubImagesX;//[Offset: 0xe0, Size: 4]
	int CutoutSubImagesY;//[Offset: 0xe4, Size: 4]
	byte EmitterNormalsMode;//[Offset: 0xe8, Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0xec, Size: 12]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 12]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 12]
	Vector2D[] UBOBoundingGeometry;//[Offset: 0x114, Size: 12]
	bool bUseComputeRaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 1]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 1]
	byte LODValidity;//[Offset: 0x1e, Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 4]
	float MaxValue;//[Offset: 0x20, Size: 4]
	DistributionFloat* Distribution;//[Offset: 0x24, Size: 4]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 28]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 1]
	byte EntryCount;//[Offset: 0x1, Size: 1]
	byte EntryStride;//[Offset: 0x2, Size: 1]
	byte SubEntryStride;//[Offset: 0x3, Size: 1]
	float TimeScale;//[Offset: 0x4, Size: 4]
	float TimeBias;//[Offset: 0x8, Size: 4]
	float[] Values;//[Offset: 0xc, Size: 12]
	byte LockFlag;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 4]
	int CountLow;//[Offset: 0x4, Size: 4]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x20, Size: 40]
	RawDistributionFloat RateScale;//[Offset: 0x48, Size: 40]
	byte ParticleBurstMethod;//[Offset: 0x70, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x74, Size: 12]
	RawDistributionFloat BurstScale;//[Offset: 0x80, Size: 40]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f, Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f, Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x20, Size: 12]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 1]
	int Frequency;//[Offset: 0x4, Size: 4]
	int ParticleFrequency;//[Offset: 0x8, Size: 4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	FName CustomName;//[Offset: 0x10, Size: 8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x20, Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x24, Size: 64]
	OrbitOptions OffsetOptions;//[Offset: 0x64, Size: 4]
	RawDistributionVector RotationAmount;//[Offset: 0x68, Size: 64]
	OrbitOptions RotationOptions;//[Offset: 0xa8, Size: 4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xac, Size: 64]
	OrbitOptions RotationRateOptions;//[Offset: 0xec, Size: 4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f, Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 4]
	float MaxValue;//[Offset: 0x20, Size: 4]
	Vector MinValueVec;//[Offset: 0x24, Size: 12]
	Vector MaxValueVec;//[Offset: 0x30, Size: 12]
	DistributionVector* Distribution;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x1f, Size: 1]
	FName EventName;//[Offset: 0x20, Size: 8]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x1c, Size: 12]
	int ActiveTab;//[Offset: 0x28, Size: 4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 12]
	CurveEdEntry[] Curves;//[Offset: 0xc, Size: 12]
	float ViewStartInput;//[Offset: 0x18, Size: 4]
	float ViewEndInput;//[Offset: 0x1c, Size: 4]
	float ViewStartOutput;//[Offset: 0x20, Size: 4]
	float ViewEndOutput;//[Offset: 0x24, Size: 4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 4]
	Color CurveColor;//[Offset: 0x4, Size: 4]
	FString CurveName;//[Offset: 0x8, Size: 12]
	int bHideCurve;//[Offset: 0x14, Size: 4]
	int bColorCurve;//[Offset: 0x18, Size: 4]
	int bFloatingPointColorCurve;//[Offset: 0x1c, Size: 4]
	int bClamp;//[Offset: 0x20, Size: 4]
	float ClampLow;//[Offset: 0x24, Size: 4]
	float ClampHigh;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 8]
	byte ParamType;//[Offset: 0x8, Size: 1]
	float Scalar;//[Offset: 0xc, Size: 4]
	float Scalar_Low;//[Offset: 0x10, Size: 4]
	Vector Vector;//[Offset: 0x14, Size: 12]
	Vector Vector_Low;//[Offset: 0x20, Size: 12]
	Color Color;//[Offset: 0x2c, Size: 4]
	Actor* Actor;//[Offset: 0x30, Size: 4]
	MaterialInterface* Material;//[Offset: 0x34, Size: 4]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x44c71e0
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x44c7124
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x44c7060
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x44c6f60
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x44c6ed0
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x44c6e50
	float K2_GetScalarParameterValue(FName ParameterName);// 0x44c6dd0
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source);// 0x44c6d58
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x44c6ce0
	void CopyInterpParameters(MaterialInstance* Source);// 0x44c6c68

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x50, Size: 4]
	MaterialInterface* Parent;//[Offset: 0x54, Size: 4]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x5c, Size: 12]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x68, Size: 12]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x74, Size: 12]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x80, Size: 12]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x8c, Size: 60]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0xcc, Size: 16]
	Texture*[] PermutationTextureReferences;//[Offset: 0xf0, Size: 12]

--------------------------------
Class: FontParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Font* FontValue;//[Offset: 0x8, Size: 4]
	int FontPage;//[Offset: 0xc, Size: 4]
	Guid ExpressionGUID;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ScalarParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	float ParameterValue;//[Offset: 0x8, Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 16]

--------------------------------
Class: TextureParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Texture* ParameterValue;//[Offset: 0x8, Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 16]

--------------------------------
Class: VectorParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 16]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 16]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bOverride_ShadingRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 4]
	byte BlendMode;//[Offset: 0xc, Size: 1]
	byte ShadingModel;//[Offset: 0xd, Size: 1]
	byte ShadingRate;//[Offset: 0xe, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 1]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake*[] ActiveShakes;//[Offset: 0x30, Size: 12]
	float SplitScreenShakeScale;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float OscillationDuration;//[Offset: 0x20, Size: 4]
	float OscillationBlendInTime;//[Offset: 0x24, Size: 4]
	float OscillationBlendOutTime;//[Offset: 0x28, Size: 4]
	ROscillator RotOscillation;//[Offset: 0x2c, Size: 36]
	VOscillator LocOscillation;//[Offset: 0x50, Size: 36]
	FOscillator FOVOscillation;//[Offset: 0x74, Size: 12]
	float AnimPlayRate;//[Offset: 0x80, Size: 4]
	float AnimScale;//[Offset: 0x84, Size: 4]
	float AnimBlendInTime;//[Offset: 0x88, Size: 4]
	float AnimBlendOutTime;//[Offset: 0x8c, Size: 4]
	float RandomAnimSegmentDuration;//[Offset: 0x90, Size: 4]
	CameraAnim* Anim;//[Offset: 0x94, Size: 4]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xa8, Size: 4]
	float ShakeScale;//[Offset: 0x134, Size: 4]
	float OscillatorTimeRemaining;//[Offset: 0x138, Size: 4]
	CameraAnimInst* AnimInst;//[Offset: 0x13c, Size: 4]
	void ReceiveStopShake(bool bImmediately);// 0x2bb69b8
	void ReceivePlayShake(float Scale);// 0x2bb69b8
	bool ReceiveIsFinished();// 0x1f81a70
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x2bb69b8

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 12]
	FOscillator Yaw;//[Offset: 0xc, Size: 12]
	FOscillator Roll;//[Offset: 0x18, Size: 12]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 4]
	float Frequency;//[Offset: 0x4, Size: 4]
	byte InitialOffset;//[Offset: 0x8, Size: 1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 12]
	FOscillator Y;//[Offset: 0xc, Size: 12]
	FOscillator Z;//[Offset: 0x18, Size: 12]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x1c, Size: 4]
	float AnimLength;//[Offset: 0x20, Size: 4]
	Box BoundingBox;//[Offset: 0x24, Size: 28]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	float BaseFOV;//[Offset: 0x44, Size: 4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x50, Size: 1328]
	float BasePostProcessBlendWeight;//[Offset: 0x580, Size: 4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x20, Size: 12]
	FName GroupName;//[Offset: 0x30, Size: 8]
	Color GroupColor;//[Offset: 0x38, Size: 4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x24, Size: 12]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x30, Size: 4]
	byte ActiveCondition;//[Offset: 0x34, Size: 1]
	FString TrackTitle;//[Offset: 0x38, Size: 12]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44, Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x44, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x44, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x44, Size: 1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x1c, Size: 4]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x20, Size: 4]
	float PlayRate;//[Offset: 0x3c, Size: 4]
	InterpTrackMove* MoveTrack;//[Offset: 0x50, Size: 4]
	InterpTrackInstMove* MoveInst;//[Offset: 0x54, Size: 4]
	byte PlaySpace;//[Offset: 0x58, Size: 1]
	void Stop(bool bImmediate);// 0x4407394
	void SetScale(float NewDuration);// 0x2046168
	void SetDuration(float NewDuration);// 0x440731c
	void SetCurrentTime(float NewTime);// 0x44072a4

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x1c, Size: 4]
	Actor* GroupActor;//[Offset: 0x20, Size: 4]
	InterpTrackInst*[] TrackInst;//[Offset: 0x24, Size: 12]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x48, Size: 20]
	InterpCurveVector EulerTrack;//[Offset: 0x5c, Size: 20]
	InterpLookupTrack LookupTrack;//[Offset: 0x70, Size: 12]
	FName LookAtGroupName;//[Offset: 0x80, Size: 8]
	float LinCurveTension;//[Offset: 0x88, Size: 4]
	float AngCurveTension;//[Offset: 0x8c, Size: 4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 1]
	byte RotMode;//[Offset: 0x91, Size: 1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 4]
	Vector OutVal;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	byte InterpMode;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 12]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x1c, Size: 12]
	Rotator ResetRotation;//[Offset: 0x28, Size: 12]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x2fc, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x300, Size: 4]
	SceneComponent* SceneComponent;//[Offset: 0x304, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310, Size: 1]
	float AspectRatio;//[Offset: 0x314, Size: 4]
	float FOVAngle;//[Offset: 0x318, Size: 4]
	float PostProcessBlendWeight;//[Offset: 0x31c, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x320, Size: 1328]
	int GetAutoActivatePlayerIndex();// 0x4406cf4

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x260, Size: 4]
	float OrthoWidth;//[Offset: 0x264, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x268, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x26c, Size: 4]
	float AspectRatio;//[Offset: 0x270, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274, Size: 1]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x274, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x274, Size: 1]
	byte ProjectionMode;//[Offset: 0x275, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x278, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x280, Size: 1328]
	bool bUseControllerViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7fc, Size: 1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x4407d9c
	void SetProjectionMode(byte InProjectionMode);// 0x4407d28
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x4407cb4
	void SetOrthoWidth(float InOrthoWidth);// 0x4407c40
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x4407bcc
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x4407b58
	void SetFieldOfView(float InFieldOfView);// 0x20272b4
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x4407ad0
	void SetAspectRatio(float InAspectRatio);// 0x4407a5c
	void SetActive(bool bNewActive, bool bReset);// 0x43dee78
	void RemoveBlendable(interface classNone InBlendableObject);// 0x440796c
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x2079370
	void ApplyDrawDistanceOffset(float InFieldOfView);// 0x44078f4
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x44077c4

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x1c, Size: 4]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x20, Size: 4]
	void Walk();// 0x2117930
	void ViewSelf();// 0x43db494
	void ViewPlayer(FString S);// 0x4415270
	void ViewClass(class Actor DesiredClass);// 0x21c4ab8
	void ViewActor(FName actorName);// 0x1ef1c90
	void TriggerCrash();// 0x441525c
	void ToggleDebugCamera();// 0x4415240
	void ToggleAILogging();// 0x1ef1358
	void TestCollisionDistance();// 0x4415224
	void Teleport();// 0x2087368
	void Summon(FString ClassName);// 0x4415160
	void StreamLevelOut(FName PackageName);// 0x44150e0
	void StreamLevelIn(FName PackageName);// 0x4415060
	void Slomo(float NewTimeDilation);// 0x4414fe0
	void SetWorldOrigin();// 0x4414fcc
	void SetNavDrawDistance(float DrawDistance);// 0x4414f54
	void SetMouseSensitivityToDefault();// 0x4414f40
	void ServerToggleAILogging();// 0x4414ee4
	void ReceiveInitCheatManager();// 0x2bb69b8
	void ReceiveEndPlay();// 0x2bb69b8
	void RebuildNavigation();// 0x4414ec8
	void PlayersOnly();// 0x1ef569c
	void OnlyLoadLevel(FName PackageName);// 0x2147168
	void LogLoc();// 0x2234e50
	void InvertMouse();// 0x4414eb4
	void God();// 0x1faf048
	void Ghost();// 0x1fb0074
	void FreezeFrame(float Delay);// 0x1ef77a8
	void Fly();// 0x1ef5680
	void FlushLog();// 0x4414e98
	void EnableDebugCamera();// 0x4414e7c
	void DumpVoiceMutingState();// 0x22fbc44
	void DumpPartyState();// 0x4414e60
	void DumpOnlineSessionState();// 0x4414e44
	void DumpChatState();// 0x22fbb78
	void DisableDebugCamera();// 0x4414e28
	void DestroyTarget();// 0x1ef5ac0
	void DestroyPawns(class Pawn aClass);// 0x4414da8
	void DestroyAllPawnsExceptTarget();// 0x4414d8c
	void DestroyAll(class Actor aClass);// 0x388c4b4
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x4414cc8
	void DebugCapsuleSweepPawn();// 0x21454a4
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x4414c40
	void DebugCapsuleSweepClear();// 0x2288d5c
	void DebugCapsuleSweepChannel(byte Channel);// 0x4414bc0
	void DebugCapsuleSweepCapture();// 0x22b9654
	void DebugCapsuleSweep();// 0x1ef1dac
	void DamageTarget(float DamageAmount);// 0x4414b40
	void CheatScript(FString ScriptName);// 0x44149e8
	void ChangeSize(float F);// 0x2116c14
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x44147ec
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x441460c
	void BugIt(FString ScreenShotDescription);// 0x4414548

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59d, Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59d, Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x5a0, Size: 4]
	float SpeedScale;//[Offset: 0x5b4, Size: 4]
	float InitialMaxSpeed;//[Offset: 0x5b8, Size: 4]
	float InitialAccel;//[Offset: 0x5bc, Size: 4]
	float InitialDecel;//[Offset: 0x5c0, Size: 4]
	void ToggleDisplay();// 0x441df70
	void ShowDebugSelectedInfo();// 0x441df54
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x441dedc
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x2bb69b8
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x2bb69b8
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x2bb69b8
	Actor* GetSelectedActor();// 0x441deb4

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x5b4, Size: 4]
	float FrustumAngle;//[Offset: 0x5b8, Size: 4]
	float FrustumAspectRatio;//[Offset: 0x5bc, Size: 4]
	float FrustumStartDist;//[Offset: 0x5c0, Size: 4]
	float FrustumEndDist;//[Offset: 0x5c4, Size: 4]
	Texture* Texture;//[Offset: 0x5c8, Size: 4]

--------------------------------
Class: PlayerInput.Object
	bool bEnableKeyInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 1]
	KeyBind[] DebugExecBindings;//[Offset: 0x160, Size: 12]
	FName[] InvertedAxis;//[Offset: 0x190, Size: 12]
	void SetMouseSensitivity(const float Sensitivity);// 0x45043cc
	void SetBind(FName BindName, FString Command);// 0x45042c4
	void InvertAxisKey(const Key AxisKey);// 0x4503fd8
	void InvertAxis(const FName AxisName);// 0x4503f60
	void ClearSmoothing();// 0x4503f4c

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 16]
	FString Command;//[Offset: 0x10, Size: 12]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 4]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x1c, Size: 12]
	float Duration;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x4, Size: 88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 84]
	CurveFloat* ExternalCurve;//[Offset: 0x54, Size: 4]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x30, Size: 12]
	NetDriver* Driver;//[Offset: 0x3c, Size: 4]
	class PackageMap* PackageMapClass;//[Offset: 0x40, Size: 4]
	PackageMap* PackageMap;//[Offset: 0x44, Size: 4]
	Channel*[] OpenChannels;//[Offset: 0x48, Size: 12]
	Actor*[] SentTemporaries;//[Offset: 0x54, Size: 12]
	Actor* ViewTarget;//[Offset: 0x60, Size: 4]
	Actor* OwningActor;//[Offset: 0x64, Size: 4]
	Actor* ObserveTarget;//[Offset: 0x68, Size: 4]
	int MaxPacket;//[Offset: 0x6c, Size: 4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	UniqueNetIdRepl PlayerID;//[Offset: 0xf0, Size: 12]
	double LastReceiveTime;//[Offset: 0x148, Size: 8]
	bool bOpenClampBandwidthDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x293c0, Size: 1]
	float MaxBandwitdhDeltaTime;//[Offset: 0x293c4, Size: 4]
	Channel*[] ChannelsToTick;//[Offset: 0x29534, Size: 12]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x2956c, Size: 4]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x20, Size: 12]
	int MaxDownloadSize;//[Offset: 0x2c, Size: 4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x34, Size: 4]
	int MaxInternetClientRate;//[Offset: 0x38, Size: 4]
	int MaxClientRate;//[Offset: 0x3c, Size: 4]
	float ServerTravelPause;//[Offset: 0x40, Size: 4]
	float SpawnPrioritySeconds;//[Offset: 0x44, Size: 4]
	float RelevantTimeout;//[Offset: 0x48, Size: 4]
	float KeepAliveTime;//[Offset: 0x4c, Size: 4]
	float InitialConnectTimeout;//[Offset: 0x50, Size: 4]
	float ConnectionTimeout;//[Offset: 0x54, Size: 4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x58, Size: 4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bIgnoreStablyNamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x60, Size: 4]
	NetConnection*[] ClientConnections;//[Offset: 0x64, Size: 12]
	World* World;//[Offset: 0x7c, Size: 4]
	class Object* NetConnectionClass;//[Offset: 0x90, Size: 4]
	Property* RoleProperty;//[Offset: 0x94, Size: 4]
	Property* RemoteRoleProperty;//[Offset: 0x98, Size: 4]
	FName NetDriverName;//[Offset: 0xa0, Size: 8]
	float Time;//[Offset: 0xcc, Size: 4]
	<Object*> PendingForceNetUpdateObjectSet;//[Offset: 0x404, Size: 60]

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x1c, Size: 12]
	float ActiveOpacity;//[Offset: 0x28, Size: 4]
	float InactiveOpacity;//[Offset: 0x2c, Size: 4]
	float TimeUntilDeactive;//[Offset: 0x30, Size: 4]
	float TimeUntilReset;//[Offset: 0x34, Size: 4]
	float ActivationDelay;//[Offset: 0x38, Size: 4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float StartupDelay;//[Offset: 0x40, Size: 4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 4]
	Texture2D* Image2;//[Offset: 0x4, Size: 4]
	Vector2D Center;//[Offset: 0x8, Size: 8]
	Vector2D VisualSize;//[Offset: 0x10, Size: 8]
	Vector2D ThumbSize;//[Offset: 0x18, Size: 8]
	Vector2D InteractionSize;//[Offset: 0x20, Size: 8]
	Vector2D InputScale;//[Offset: 0x28, Size: 8]
	Key MainInputKey;//[Offset: 0x30, Size: 16]
	Key AltInputKey;//[Offset: 0x40, Size: 16]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x340, Size: 4]
	float BaseLookUpRate;//[Offset: 0x344, Size: 4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x348, Size: 4]
	SphereComponent* CollisionComponent;//[Offset: 0x34c, Size: 4]
	StaticMeshComponent* MeshComponent;//[Offset: 0x350, Size: 4]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 1]
	void TurnAtRate(float Rate);// 0x4420984
	void MoveUp_World(float Val);// 0x4420904
	void MoveRight(float Val);// 0x4420884
	void MoveForward(float Val);// 0x223798c
	void LookUpAtRate(float Rate);// 0x442080c

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x5c4, Size: 4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x45322f4
	float GetUnscaledSphereRadius();// 0x440d2d0
	float GetShapeScale();// 0x440d260
	float GetScaledSphereRadius();// 0x440ce28

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x5d4, Size: 4]
	int LowDeviceForcedLodModel;//[Offset: 0x5d8, Size: 4]
	int PreviousLODLevel;//[Offset: 0x5dc, Size: 4]
	int MinLOD;//[Offset: 0x5e0, Size: 4]
	StaticMesh* StaticMesh;//[Offset: 0x5e4, Size: 4]
	byte TileLength;//[Offset: 0x5e8, Size: 1]
	byte TileNum;//[Offset: 0x5e9, Size: 1]
	Texture2D* TileTexture;//[Offset: 0x5ec, Size: 4]
	Vector2D TileLocalMin;//[Offset: 0x5f0, Size: 8]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f8, Size: 1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5f8, Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5f8, Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5f8, Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5f8, Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5f8, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5f8, Size: 1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5f8, Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f9, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5f9, Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5f9, Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5f9, Size: 1]
	bool bForceNotHzbOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5f9, Size: 1]
	bool bUseAsOccluderIgnoreMobility;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5f9, Size: 1]
	bool bCanBeOccludeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5f9, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x5fc, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x600, Size: 4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x604, Size: 12]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x610, Size: 12]
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 1]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x620, Size: 60]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x65c, Size: 24]
	IdeaBakingPrimitiveSettings IdeaBakingSettings;//[Offset: 0x674, Size: 20]
	Actor*[] AffectPointLightBPActors;//[Offset: 0x688, Size: 12]
	StaticMeshPointLightVertexDataBuffer[] PointLightStaticMeshLODResources;//[Offset: 0x694, Size: 12]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x3ac6ccc
	void SetOverrideCullingScreenSizeEnable(bool bEnable);// 0x453d554
	void SetOverrideCullingScreenSize(float ScreenSize);// 0x453d4dc
	void SetLowDeviceForcedLodModel(int NewLowDeviceForcedLodModel);// 0x453d464
	void SetForcedLodModel(int NewForcedLodModel);// 0x453d3ec
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x1fa0fcc
	void SetDirty();// 0x453d3d8
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x453d360
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x453d288

--------------------------------
Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x18, Size: 12]

--------------------------------
Class: PaintedVertex
	Vector Position;//[Offset: 0x0, Size: 12]
	PackedNormal Normal;//[Offset: 0xc, Size: 4]
	Color Color;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PackedNormal
	byte X;//[Offset: 0x0, Size: 1]
	byte Y;//[Offset: 0x1, Size: 1]
	byte Z;//[Offset: 0x2, Size: 1]
	byte W;//[Offset: 0x3, Size: 1]

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 4]
	float TexelFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 4]
	float EmissiveBoost;//[Offset: 0xc, Size: 4]
	float DiffuseBoost;//[Offset: 0x10, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 4]

--------------------------------
Class: IdeaBakingPrimitiveSettings
	float IdeaMaterialDiffuse;//[Offset: 0x0, Size: 4]
	float LightmapBoost;//[Offset: 0x4, Size: 4]
	float DiscardPixelFrontfaceFactor;//[Offset: 0x8, Size: 4]
	float SunIntensity;//[Offset: 0xc, Size: 4]
	float LocalLightsAffectMaxDistance;//[Offset: 0x10, Size: 4]

--------------------------------
Class: StaticMeshPointLightVertexDataBuffer
	byte[] VertexData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0xd0, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0xe0, Size: 16]
	SlateColor ForegroundColor;//[Offset: 0xf0, Size: 28]
	delegate ForegroundColorDelegate;//[Offset: 0x110, Size: 16]
	Margin Padding;//[Offset: 0x120, Size: 16]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x130, Size: 12]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x13c, Size: 12]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x148, Size: 12]
	WidgetTree* WidgetTree;//[Offset: 0x154, Size: 4]
	int Priority;//[Offset: 0x158, Size: 4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15c, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15c, Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15c, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15c, Size: 1]
	bool bCanEverPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15c, Size: 1]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15c, Size: 1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15c, Size: 1]
	bool needAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 1]
	bool isAutoLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e, Size: 1]
	FName[] autoPlayNameList;//[Offset: 0x160, Size: 12]
	InputComponent* InputComponent;//[Offset: 0x16c, Size: 4]
	void UnregisterInputComponent();// 0x38b3790
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2bb69b8
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x38b36c4
	void StopListeningForAllInputActions();// 0x38b36b0
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x38b3638
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x38b3578
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x38b34bc
	void SetPadding(Margin InPadding);// 0x38b3434
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x38b33bc
	void SetOwningLocalPlayer(LocalPlayer* LocalPlayer);// 0x38b3344
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x38b3288
	void SetInputActionPriority(int NewPriority);// 0x38b3210
	void SetInputActionBlocking(bool bShouldBlock);// 0x38b3190
	void SetForegroundColor(SlateColor InForegroundColor);// 0x38b2e70
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x38b2de8
	void SetDesiredSizeInViewport(Vector2D Size);// 0x38b2d78
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x38b2cfc
	void SetAnchorsInViewport(Anchors Anchors);// 0x38b2c74
	void SetAlignmentInViewport(Vector2D Alignment);// 0x38b2c04
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x38b2b8c
	void RemoveFromViewport();// 0x38b2b78
	void RegisterInputComponent();// 0x38b2b64
	void PreConstruct(bool IsDesignTime);// 0x2bb69b8
	void PlaySound(SoundBase* SoundToPlay);// 0x38b2aec
	void PlayAnimationTo(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x38b2918
	void PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x38b2788
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x38b2708
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2bb69b8
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2bb69b8
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x2bb69b8
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2bb69b8
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x2bb69b8
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2bb69b8
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x2bb69b8
	void OnPaint(out PaintContext Context);// 0x2bb69b8
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2bb69b8
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2bb69b8
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x2bb69b8
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2bb69b8
	void OnMouseCaptureLost();// 0x2bb69b8
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2bb69b8
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2bb69b8
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x2bb69b8
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x2bb69b8
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x2bb69b8
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x2bb69b8
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x2bb69b8
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x2bb69b8
	void OnFocusLost(FocusEvent InFocusEvent);// 0x2bb69b8
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2bb69b8
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2bb69b8
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2bb69b8
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2bb69b8
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x2bb69b8
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2bb69b8
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x38b2688
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x1ef1950
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x2bb69b8
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x2bb69b8
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x38b24f8
	bool IsPlayingAnimation();// 0x38b24d0
	bool IsListeningForInputAction(FName ActionName);// 0x38b2450
	bool IsInViewport();// 0x38b221c
	bool IsInteractable();// 0x2bb69b8
	bool IsAnyAnimationPlaying();// 0x38b2428
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x38b23a8
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x38b2328
	Widget* GetWidgetFromName(out const FName Name);// 0x38b2294
	Pawn* GetOwningPlayerPawn();// 0x38b226c
	PlayerController* GetOwningPlayer();// 0x1ed3ca4
	LocalPlayer* GetOwningLocalPlayer();// 0x38b2244
	bool GetIsVisible();// 0x38b221c
	bool GetDontPaintWhenChildEmpty();// 0x38b21f4
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x38b2174
	Anchors GetAnchorsInViewport();// 0x38b2130
	Vector2D GetAlignmentInViewport();// 0x38b20f0
	void Destruct();// 0x2bb69b8
	void Construct();// 0x2bb69b8
	void AddToViewport(int ZOrder);// 0x38b2078
	bool AddToPlayerScreen(int ZOrder);// 0x38b1ff8

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x1c, Size: 4]
	delegate bIsEnabledDelegate;//[Offset: 0x20, Size: 16]
	FText ToolTipText;//[Offset: 0x30, Size: 12]
	delegate ToolTipTextDelegate;//[Offset: 0x40, Size: 16]
	Widget* ToolTipWidget;//[Offset: 0x50, Size: 4]
	delegate ToolTipWidgetDelegate;//[Offset: 0x58, Size: 16]
	delegate VisibilityDelegate;//[Offset: 0x68, Size: 16]
	WidgetTransform RenderTransform;//[Offset: 0x78, Size: 28]
	Vector2D RenderTransformPivot;//[Offset: 0x94, Size: 8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c, Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9c, Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9c, Size: 1]
	bool bWriteSceneZBuffer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9c, Size: 1]
	byte UsedLayerPolicy;//[Offset: 0x9d, Size: 1]
	byte PreservedLayerNum;//[Offset: 0x9e, Size: 1]
	byte Cursor;//[Offset: 0x9f, Size: 1]
	enum Clipping;//[Offset: 0xa0, Size: 1]
	enum Visibility;//[Offset: 0xa1, Size: 1]
	bool bVisiblePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	enum WidgetVisible;//[Offset: 0xa3, Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xa4, Size: 4]
	PropertyBinding*[] NativeBindings;//[Offset: 0xc0, Size: 12]
	void SetWidgetRender(const enum InWidgetVisible);// 0x38b7964
	void SetVisibility(enum InVisibility);// 0x38b78e4
	void SetUserFocus(PlayerController* PlayerController);// 0x38b786c
	void SetToolTipText(out const FText InToolTipText);// 0x38b76c8
	void SetToolTip(Widget* Widget);// 0x38b7650
	void SetRenderTranslation(Vector2D Translation);// 0x38b75e0
	void SetRenderTransformPivot(Vector2D Pivot);// 0x38b7570
	void SetRenderTransform(WidgetTransform InTransform);// 0x38b7498
	void SetRenderShear(Vector2D Shear);// 0x38b7428
	void SetRenderScale(Vector2D Scale);// 0x38b73b8
	void SetRenderAngle(float Angle);// 0x38b7340
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x38b7238
	void SetKeyboardFocus();// 0x38b7224
	void SetIsEnabled(bool bInIsEnabled);// 0x1ef5338
	void SetCursor(byte InCursor);// 0x38b71ac
	void SetClipping(enum InClipping);// 0x38b7134
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x38b7078
	void ResetCursor();// 0x38b7064
	void RemoveFromParent();// 0x2087368
	EventReply OnReply__DelegateSignature();// 0x2bb69b8
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2bb69b8
	bool IsVisible();// 0x38b703c
	bool IsHovered();// 0x38b7014
	void InvalidateLayoutAndVolatility();// 0x38b7000
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x38b6f80
	bool HasUserFocus(PlayerController* PlayerController);// 0x38b6f00
	bool HasMouseCapture();// 0x38b6ed8
	bool HasKeyboardFocus();// 0x38b6eb0
	bool HasFocusedDescendants();// 0x38b6e88
	bool HasAnyUserFocus();// 0x38b6e60
	enum GetWidgetRender();// 0x38b6e38
	Widget* GetWidget__DelegateSignature();// 0x2bb69b8
	enum GetVisibility();// 0x38b6e10
	Widget* GetTheTemplate();// 0x38b6de8
	FText GetText__DelegateSignature();// 0x2bb69b8
	enum GetSlateVisibility__DelegateSignature();// 0x2bb69b8
	SlateColor GetSlateColor__DelegateSignature();// 0x2bb69b8
	SlateBrush GetSlateBrush__DelegateSignature();// 0x2bb69b8
	PanelWidget* GetParent();// 0x38b6dc0
	PlayerController* GetOwningPlayer();// 0x1ed3ca4
	byte GetMouseCursor__DelegateSignature();// 0x2bb69b8
	LinearColor GetLinearColor__DelegateSignature();// 0x2bb69b8
	bool GetIsEnabled();// 0x38b6d98
	int GetInt32__DelegateSignature();// 0x2bb69b8
	float GetFloat__DelegateSignature();// 0x2bb69b8
	Vector2D GetDesiredSize();// 0x38b6d58
	enum GetClipping();// 0x38b6d30
	enum GetCheckBoxState__DelegateSignature();// 0x2bb69b8
	Geometry GetCachedGeometry();// 0x38b6d00
	Geometry GetCachedAllottedGeometry();// 0x38b6cd0
	bool GetBool__DelegateSignature();// 0x2bb69b8
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x2bb69b8
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x2bb69b8
	void ForceVolatile(bool bForce);// 0x38b6c50
	void ForceLayoutPrepass();// 0x38b6c3c
	void AdaptationWidgetSlot(out const Margin InOffset);// 0x38b6bac

--------------------------------
Class: Visual.Object

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x1c, Size: 4]
	Widget* Content;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0xcc, Size: 12]
	bool RemoveChildAt(int Index);// 0x389dc94
	bool RemoveChild(Widget* Content);// 0x389dc14
	bool HasChild(Widget* Content);// 0x389db94
	bool HasAnyChildren();// 0x389db6c
	int GetChildrenCount();// 0x389db44
	int GetChildIndex(Widget* Content);// 0x389dac4
	Widget* GetChildAt(int Index);// 0x389da44
	void ClearChildren();// 0x389da30
	PanelSlot* AddChild(Widget* Content);// 0x389d9b0

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 16]
	byte ColorUseRule;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 4]
	float Top;//[Offset: 0x4, Size: 4]
	float Right;//[Offset: 0x8, Size: 4]
	float Bottom;//[Offset: 0xc, Size: 4]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x2e0, Size: 4]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	delegate OnAnimationStarted;//[Offset: 0x220, Size: 12]
	delegate OnAnimationFinished;//[Offset: 0x22c, Size: 12]
	MovieScene* MovieScene;//[Offset: 0x238, Size: 4]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x23c, Size: 12]
	float GetStartTime();// 0x38b8828
	float GetEndTime();// 0x38b8800

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	CachedMovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x40, Size: 404]
	MovieSceneTrackCompilationParams TemplateParameters;//[Offset: 0x1d4, Size: 2]
	<Object*,CachedMovieSceneEvaluationTemplate> InstancedSubSequenceEvaluationTemplates;//[Offset: 0x1d8, Size: 60]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x1c, Size: 16]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x40, Size: 12]
	MovieScenePossessable[] Possessables;//[Offset: 0x4c, Size: 12]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x58, Size: 12]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x64, Size: 12]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x70, Size: 4]
	FloatRange SelectionRange;//[Offset: 0x74, Size: 16]
	FloatRange PlaybackRange;//[Offset: 0x84, Size: 16]
	bool bForceFixedFrameIntervalPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float FixedFrameInterval;//[Offset: 0x98, Size: 4]
	float InTime;//[Offset: 0x9c, Size: 4]
	float OutTime;//[Offset: 0xa0, Size: 4]
	float StartTime;//[Offset: 0xa4, Size: 4]
	float EndTime;//[Offset: 0xa8, Size: 4]

--------------------------------
Class: MovieSceneSpawnable
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 12]
	Object* ObjectTemplate;//[Offset: 0x1c, Size: 4]
	Guid[] ChildPossessables;//[Offset: 0x20, Size: 12]
	enum Ownership;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: MovieScenePossessable
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 12]
	class Object* PossessedObjectClass;//[Offset: 0x1c, Size: 4]
	Guid ParentGuid;//[Offset: 0x20, Size: 16]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 16]
	FString BindingName;//[Offset: 0x10, Size: 12]
	MovieSceneTrack*[] Tracks;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x40, Size: 4]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CachedMovieSceneEvaluationTemplate.MovieSceneEvaluationTemplate

--------------------------------
Class: MovieSceneEvaluationTemplate
	<uint32,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 60]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0x78, Size: 36]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x9c, Size: 120]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x114, Size: 124]
	bool bHasLegacyTrackInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 1]
	bool bKeepStaleTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x190, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 16]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 1]
	MovieSceneSegment[] Segments;//[Offset: 0x14, Size: 12]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 12]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 56]
	FName EvaluationGroup;//[Offset: 0x68, Size: 8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	FloatRange[] Ranges;//[Offset: 0x0, Size: 12]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0xc, Size: 12]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 12]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 4]
	int NumInitPtrs;//[Offset: 0x4, Size: 4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	int SegmentIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 12]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 12]
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]
	uint32 SectionIdentifier;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<uint32,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 60]
	<uint32,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x3c, Size: 60]

--------------------------------
Class: MovieSceneSubSequenceData
	MovieSceneSequence* Sequence;//[Offset: 0x0, Size: 4]
	Object* SequenceKeyObject;//[Offset: 0x4, Size: 4]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x8, Size: 8]
	Guid SourceSequenceSignature;//[Offset: 0x10, Size: 16]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x20, Size: 4]
	FloatRange PreRollRange;//[Offset: 0x24, Size: 16]
	FloatRange PostRollRange;//[Offset: 0x34, Size: 16]
	int HierarchicalBias;//[Offset: 0x44, Size: 4]

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 4]
	MovieSceneSequenceID[] Children;//[Offset: 0x4, Size: 12]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 4]
	<MovieSceneTrackIdentifier,int> TrackReferenceCounts;//[Offset: 0x4, Size: 60]
	<Guid,MovieSceneTrackIdentifiers> TrackSignatureToTrackIdentifier;//[Offset: 0x40, Size: 60]

--------------------------------
Class: MovieSceneTrackIdentifiers
	MovieSceneTrackIdentifier[] Data;//[Offset: 0x0, Size: 12]

--------------------------------
Class: MovieSceneTrackCompilationParams
	bool bForEditorPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bDuringBlueprintCompile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 16]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 8]
	Vector2D Scale;//[Offset: 0x8, Size: 8]
	Vector2D Shear;//[Offset: 0x10, Size: 8]
	float Angle;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x20, Size: 24]
	WidgetNavigationData Down;//[Offset: 0x38, Size: 24]
	WidgetNavigationData Left;//[Offset: 0x50, Size: 24]
	WidgetNavigationData Right;//[Offset: 0x68, Size: 24]
	WidgetNavigationData Next;//[Offset: 0x80, Size: 24]
	WidgetNavigationData Previous;//[Offset: 0x98, Size: 24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 1]
	FName WidgetToFocus;//[Offset: 0x8, Size: 8]
	Widget* Widget;//[Offset: 0x10, Size: 8]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x1c, Size: 8]
	DynamicPropertyPath SourcePath;//[Offset: 0x24, Size: 12]
	FName DestinationProperty;//[Offset: 0x30, Size: 8]

--------------------------------
Class: DynamicPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 12]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* Struct;//[Offset: 0xc, Size: 4]
	Field* Field;//[Offset: 0x10, Size: 4]

--------------------------------
Class: EventReply

--------------------------------
Class: Geometry

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x4, Size: 8]
	Margin Margin;//[Offset: 0xc, Size: 16]
	SlateColor TintColor;//[Offset: 0x1c, Size: 28]
	bool bAsyncEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bOnlySoftInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	Object* ResourceObject;//[Offset: 0x3c, Size: 4]
	Object* SoftResourceObject;//[Offset: 0x40, Size: 40]
	FName ResourceName;//[Offset: 0x68, Size: 8]
	Box2D UVRegion;//[Offset: 0x70, Size: 20]
	byte DrawAs;//[Offset: 0x84, Size: 1]
	byte Tiling;//[Offset: 0x85, Size: 1]
	byte Mirroring;//[Offset: 0x86, Size: 1]
	byte ImageType;//[Offset: 0x87, Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 8]
	Vector2D Max;//[Offset: 0x8, Size: 8]
	byte bIsValid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 8]
	Widget* Content;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x1c, Size: 4]
	Widget*[] AllWidgets;//[Offset: 0x20, Size: 12]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x38, Size: 4]
	byte AspectRatioAxisConstraint;//[Offset: 0x58, Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x5c, Size: 4]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	int ControllerId;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x24, Size: 4]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x28, Size: 12]
	World* World;//[Offset: 0x58, Size: 4]
	GameInstance* GameInstance;//[Offset: 0x5c, Size: 4]
	void SSSwapControllers();// 0x2047094
	void ShowTitleSafeArea();// 0x1f1ee34
	void SetConsoleTarget(int PlayerIndex);// 0x1ef77a8

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x24, Size: 4]
	Texture2D* DefaultTexture_Black;//[Offset: 0x28, Size: 4]
	Texture2D* DefaultTexture_White;//[Offset: 0x2c, Size: 4]
	FString[] HistoryBuffer;//[Offset: 0x44, Size: 12]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 4]
	class Object* WithinClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameInstance.Object
	int64[] EncryptedLocalPlayers;//[Offset: 0x24, Size: 12]
	LocalPlayer*[] LocalPlayers;//[Offset: 0x30, Size: 12]
	OnlineSession* OnlineSession;//[Offset: 0x3c, Size: 4]
	bool bUseEncryptLocalPlayerPtr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	void ReceiveShutdown();// 0x2bb69b8
	void ReceiveInit();// 0x2bb69b8
	void HandleTravelError(byte FailureType);// 0x2bb69b8
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x2bb69b8
	int GetDeviceLevel();// 0x1f24d20
	void DebugRemovePlayer(int ControllerId);// 0x4414fe0
	void DebugCreatePlayer(int ControllerId);// 0x212043c

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 8]
	Vector2D Maximum;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x1c, Size: 4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]
	bool bIgnoreFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 1]
	SoundConcurrency* SoundConcurrencySettings;//[Offset: 0x24, Size: 4]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x28, Size: 12]
	byte MaxConcurrentResolutionRule;//[Offset: 0x34, Size: 1]
	int MaxConcurrentPlayCount;//[Offset: 0x38, Size: 4]
	float Duration;//[Offset: 0x3c, Size: 4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x40, Size: 4]
	float Priority;//[Offset: 0x44, Size: 4]
	SoundSubmix* SoundSubmixObject;//[Offset: 0x48, Size: 4]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x4c, Size: 12]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x58, Size: 4]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x1c, Size: 40]
	SoundClass*[] ChildClasses;//[Offset: 0x44, Size: 12]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x50, Size: 12]
	SoundClass* ParentClass;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 4]
	float Pitch;//[Offset: 0x4, Size: 4]
	float StereoBleed;//[Offset: 0x8, Size: 4]
	float LFEBleed;//[Offset: 0xc, Size: 4]
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 4]
	float RadioFilterVolume;//[Offset: 0x14, Size: 4]
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 4]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	byte OutputTarget;//[Offset: 0x25, Size: 1]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 4]
	float MinVolumeThreshold;//[Offset: 0x4, Size: 4]
	float MaxVolumeThreshold;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float EQPriority;//[Offset: 0x20, Size: 4]
	AudioEQEffect EQSettings;//[Offset: 0x28, Size: 56]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x60, Size: 12]
	float InitialDelay;//[Offset: 0x6c, Size: 4]
	float FadeInTime;//[Offset: 0x70, Size: 4]
	float Duration;//[Offset: 0x74, Size: 4]
	float FadeOutTime;//[Offset: 0x78, Size: 4]

--------------------------------
Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8, Size: 4]
	float Gain0;//[Offset: 0xc, Size: 4]
	float Bandwidth0;//[Offset: 0x10, Size: 4]
	float FrequencyCenter1;//[Offset: 0x14, Size: 4]
	float Gain1;//[Offset: 0x18, Size: 4]
	float Bandwidth1;//[Offset: 0x1c, Size: 4]
	float FrequencyCenter2;//[Offset: 0x20, Size: 4]
	float Gain2;//[Offset: 0x24, Size: 4]
	float Bandwidth2;//[Offset: 0x28, Size: 4]
	float FrequencyCenter3;//[Offset: 0x2c, Size: 4]
	float Gain3;//[Offset: 0x30, Size: 4]
	float Bandwidth3;//[Offset: 0x34, Size: 4]

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 4]
	float VolumeAdjuster;//[Offset: 0x4, Size: 4]
	float PitchAdjuster;//[Offset: 0x8, Size: 4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	byte ResolutionRule;//[Offset: 0x5, Size: 1]
	float VolumeScale;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x1c, Size: 532]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c, Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c, Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c, Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c, Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7c, Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c, Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7c, Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d, Size: 1]
	byte DistanceType;//[Offset: 0x7e, Size: 1]
	float OmniRadius;//[Offset: 0x80, Size: 4]
	float StereoSpread;//[Offset: 0x84, Size: 4]
	byte SpatializationAlgorithm;//[Offset: 0x88, Size: 1]
	SpatializationPluginSourceSettingsBase* SpatializationPluginSettings;//[Offset: 0x8c, Size: 4]
	float RadiusMin;//[Offset: 0x90, Size: 4]
	float RadiusMax;//[Offset: 0x94, Size: 4]
	float LPFRadiusMin;//[Offset: 0x98, Size: 4]
	float LPFRadiusMax;//[Offset: 0x9c, Size: 4]
	enum AbsorptionMethod;//[Offset: 0xa0, Size: 1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xa4, Size: 88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0xfc, Size: 88]
	float LPFFrequencyAtMin;//[Offset: 0x154, Size: 4]
	float LPFFrequencyAtMax;//[Offset: 0x158, Size: 4]
	float HPFFrequencyAtMin;//[Offset: 0x15c, Size: 4]
	float HPFFrequencyAtMax;//[Offset: 0x160, Size: 4]
	float FocusAzimuth;//[Offset: 0x164, Size: 4]
	float NonFocusAzimuth;//[Offset: 0x168, Size: 4]
	float FocusDistanceScale;//[Offset: 0x16c, Size: 4]
	float NonFocusDistanceScale;//[Offset: 0x170, Size: 4]
	float FocusPriorityScale;//[Offset: 0x174, Size: 4]
	float NonFocusPriorityScale;//[Offset: 0x178, Size: 4]
	float FocusVolumeAttenuation;//[Offset: 0x17c, Size: 4]
	float NonFocusVolumeAttenuation;//[Offset: 0x180, Size: 4]
	float FocusAttackInterpSpeed;//[Offset: 0x184, Size: 4]
	float FocusReleaseInterpSpeed;//[Offset: 0x188, Size: 4]
	byte OcclusionTraceChannel;//[Offset: 0x18c, Size: 1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x190, Size: 4]
	float OcclusionVolumeAttenuation;//[Offset: 0x194, Size: 4]
	float OcclusionInterpolationTime;//[Offset: 0x198, Size: 4]
	OcclusionPluginSourceSettingsBase* OcclusionPluginSettings;//[Offset: 0x19c, Size: 4]
	enum ReverbSendMethod;//[Offset: 0x1a0, Size: 1]
	ReverbPluginSourceSettingsBase* ReverbPluginSettings;//[Offset: 0x1a4, Size: 4]
	float ReverbWetLevelMin;//[Offset: 0x1a8, Size: 4]
	float ReverbWetLevelMax;//[Offset: 0x1ac, Size: 4]
	float ReverbDistanceMin;//[Offset: 0x1b0, Size: 4]
	float ReverbDistanceMax;//[Offset: 0x1b4, Size: 4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x1b8, Size: 88]
	float ManualReverbSendLevel;//[Offset: 0x210, Size: 4]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x4, Size: 1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x8, Size: 88]
	byte AttenuationShape;//[Offset: 0x60, Size: 1]
	float dBAttenuationAtMax;//[Offset: 0x64, Size: 4]
	Vector AttenuationShapeExtents;//[Offset: 0x68, Size: 12]
	float ConeOffset;//[Offset: 0x74, Size: 4]
	float FalloffDistance;//[Offset: 0x78, Size: 4]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x1c, Size: 12]
	SoundSubmix* ParentSubmix;//[Offset: 0x28, Size: 4]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundSubmixSendInfo
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSubmix* SoundSubmix;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x1c, Size: 12]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 4]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x1cc, Size: 1]
	float SourceBusDuration;//[Offset: 0x1d0, Size: 4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4, Size: 1]

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x6c, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	int StreamingPriority;//[Offset: 0x74, Size: 4]
	bool bMature;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x78, Size: 1]
	bool bVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x78, Size: 1]
	byte SoundGroup;//[Offset: 0x7a, Size: 1]
	FString SpokenText;//[Offset: 0x7c, Size: 12]
	float SubtitlePriority;//[Offset: 0x88, Size: 4]
	float Volume;//[Offset: 0x8c, Size: 4]
	float Pitch;//[Offset: 0x90, Size: 4]
	int NumChannels;//[Offset: 0x94, Size: 4]
	int SampleRate;//[Offset: 0x98, Size: 4]
	int RawPCMDataSize;//[Offset: 0x9c, Size: 4]
	SubtitleCue[] Subtitles;//[Offset: 0xa0, Size: 12]
	LocalizedSubtitle[] LocalizedSubtitles;//[Offset: 0xac, Size: 12]
	CurveTable* Curves;//[Offset: 0xb8, Size: 4]
	CurveTable* InternalCurves;//[Offset: 0xbc, Size: 4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 12]
	float Time;//[Offset: 0xc, Size: 4]

--------------------------------
Class: LocalizedSubtitle
	FString LanguageExt;//[Offset: 0x0, Size: 12]
	SubtitleCue[] Subtitles;//[Offset: 0xc, Size: 12]
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 1]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x1c, Size: 12]
	Object* Payload;//[Offset: 0x28, Size: 4]
	Widget* DefaultDragVisual;//[Offset: 0x2c, Size: 4]
	enum Pivot;//[Offset: 0x30, Size: 1]
	Vector2D Offset;//[Offset: 0x34, Size: 8]
	delegate OnDrop;//[Offset: 0x3c, Size: 12]
	delegate OnDragCancelled;//[Offset: 0x48, Size: 12]
	delegate OnDragged;//[Offset: 0x54, Size: 12]
	void Drop(out const PointerEvent PointerEvent);// 0x3893ea0
	void Dragged(out const PointerEvent PointerEvent);// 0x3893c6c
	void DragCancelled(out const PointerEvent PointerEvent);// 0x3893a38

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: ViewTargetTransitionParams
	float blendTime;//[Offset: 0x0, Size: 4]
	byte BlendFunction;//[Offset: 0x4, Size: 1]
	float BlendExp;//[Offset: 0x8, Size: 4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 4]
	int UUID;//[Offset: 0x4, Size: 4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x2fc, Size: 4]
	FName MatineeControllerName;//[Offset: 0x300, Size: 8]
	float PlayRate;//[Offset: 0x308, Size: 4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30c, Size: 1]
	float ForceStartPosition;//[Offset: 0x310, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x314, Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x314, Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x314, Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x314, Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x314, Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x314, Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x314, Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x318, Size: 4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31c, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31c, Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x320, Size: 12]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32c, Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x330, Size: 12]
	CameraCutInfo[] CameraCuts;//[Offset: 0x33c, Size: 12]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x348, Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x348, Size: 1]
	float InterpPosition;//[Offset: 0x34c, Size: 4]
	byte ReplicationForceIsPlaying;//[Offset: 0x354, Size: 1]
	delegate OnPlay;//[Offset: 0x358, Size: 12]
	delegate OnStop;//[Offset: 0x364, Size: 12]
	delegate OnPause;//[Offset: 0x370, Size: 12]
	void Stop();// 0x1edac58
	void SetPosition(float NewPosition, bool bJump);// 0x44c93fc
	void SetLoopingState(bool bNewLooping);// 0x44c9374
	void Reverse();// 0x1f3ed9c
	void Play();// 0x1f3cb34
	void Pause();// 0x1ecd2bc
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x44c91cc
	void ChangePlaybackDirection();// 0x1ecd2d8

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x1c, Size: 4]
	float PathBuildTime;//[Offset: 0x20, Size: 4]
	InterpGroup*[] InterpGroups;//[Offset: 0x24, Size: 12]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x30, Size: 4]
	float EdSectionStart;//[Offset: 0x34, Size: 4]
	float EdSectionEnd;//[Offset: 0x38, Size: 4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x40, Size: 4]
	FName[] AllEventNames;//[Offset: 0x44, Size: 12]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 8]
	Actor*[] Actors;//[Offset: 0x8, Size: 12]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	float TimeStamp;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x260, Size: 4]
	Actor* ChildActor;//[Offset: 0x264, Size: 4]
	Actor* ChildActorTemplate;//[Offset: 0x268, Size: 4]
	void SetChildActorClass(class Actor InClass);// 0x4416678

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 4]
	int Index;//[Offset: 0x4, Size: 4]
	int SelectionIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 4]
	FName MemberName;//[Offset: 0x8, Size: 8]
	Guid MemberGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc, Size: 1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x2bb69b8
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x44b068c
	bool RemoteEvent(FName EventName);// 0x44b0604
	void LevelReset();// 0x2bb69b8

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]
	int Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x300, Size: 4]
	BillboardComponent* GoodSprite;//[Offset: 0x304, Size: 4]
	BillboardComponent* BadSprite;//[Offset: 0x308, Size: 4]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x5b4, Size: 4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b8, Size: 1]
	float ScreenSize;//[Offset: 0x5bc, Size: 4]
	float U;//[Offset: 0x5c0, Size: 4]
	float UL;//[Offset: 0x5c4, Size: 4]
	float V;//[Offset: 0x5c8, Size: 4]
	float VL;//[Offset: 0x5cc, Size: 4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x43fb924
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x43fb78c
	void SetSprite(Texture2D* NewSprite);// 0x43fb70c

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x20, Size: 8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	bool bEnableFOVDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 1]
	Vector2D[] FOVCulling;//[Offset: 0x304, Size: 12]
	bool bWithoutFrontendHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310, Size: 1]
	bool bWithoutWidget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x310, Size: 1]
	bool bWithoutLobbyWidget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x310, Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x310, Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x310, Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x310, Size: 1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x310, Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x310, Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x311, Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x311, Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x311, Size: 1]
	float KillZ;//[Offset: 0x314, Size: 4]
	class DamageType* KillZDamageType;//[Offset: 0x318, Size: 4]
	float WorldGravityZ;//[Offset: 0x31c, Size: 4]
	float GlobalGravityZ;//[Offset: 0x320, Size: 4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x324, Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x328, Size: 4]
	class GameModeBase* DefaultGameMode;//[Offset: 0x32c, Size: 4]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x330, Size: 4]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x334, Size: 4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 1]
	Vector DefaultColorScale;//[Offset: 0x33c, Size: 12]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x348, Size: 4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x34c, Size: 4]
	bool bEnableWorldComposition2DLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 1]
	float MaxWorldSize;//[Offset: 0x354, Size: 4]
	int RegionSizeNear;//[Offset: 0x358, Size: 4]
	int RegionSizeFar;//[Offset: 0x35c, Size: 4]
	bool RegionXAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	bool RegionYAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 1]
	int Graduation;//[Offset: 0x364, Size: 4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x368, Size: 4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x36c, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x36c, Size: 1]
	int VisibilityCellSize;//[Offset: 0x370, Size: 4]
	byte VisibilityAggressiveness;//[Offset: 0x374, Size: 1]
	bool bDSPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x375, Size: 1]
	bool bDSPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x375, Size: 1]
	int DSVisibilityCellSize;//[Offset: 0x378, Size: 4]
	byte DSVisibilityAggressiveness;//[Offset: 0x37c, Size: 1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37d, Size: 1]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x380, Size: 80]
	IdeaBakingWorldInfoSettings IdeaBakingSettings;//[Offset: 0x3d0, Size: 100]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x434, Size: 16]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x444, Size: 36]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x468, Size: 4]
	float WorldToMeters;//[Offset: 0x46c, Size: 4]
	float MonoCullingDistance;//[Offset: 0x470, Size: 4]
	BookMark* BookMarks;//[Offset: 0x474, Size: 4]
	float TimeDilation;//[Offset: 0x49c, Size: 4]
	float MatineeTimeDilation;//[Offset: 0x4a0, Size: 4]
	float DemoPlayTimeDilation;//[Offset: 0x4a4, Size: 4]
	float MinGlobalTimeDilation;//[Offset: 0x4a8, Size: 4]
	float MaxGlobalTimeDilation;//[Offset: 0x4ac, Size: 4]
	float MinUndilatedFrameTime;//[Offset: 0x4b0, Size: 4]
	float MaxUndilatedFrameTime;//[Offset: 0x4b4, Size: 4]
	PlayerState* Pauser;//[Offset: 0x4b8, Size: 4]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4bc, Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4bc, Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x4c0, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x4cc, Size: 12]
	bool bEnableUnLoadLevelGCMemoryOptimitize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 1]
	float[] LODRelativeDistances;//[Offset: 0x4dc, Size: 12]
	bool bEnablestreamingLevelLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	int WorldCompositionNums;//[Offset: 0x4ec, Size: 4]
	int CompositionBlockLength;//[Offset: 0x4f0, Size: 4]
	void OnRep_WorldGravityZ();// 0x1f3cb34

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x1c, Size: 4]
	float ImpactReFireDelay;//[Offset: 0x20, Size: 4]
	SoundBase* DefaultImpactSound;//[Offset: 0x24, Size: 4]
	float LastImpactSoundTime;//[Offset: 0x28, Size: 4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x2fc, Size: 12]
	class GameSession* GameSessionClass;//[Offset: 0x308, Size: 4]
	class GameStateBase* GameStateClass;//[Offset: 0x30c, Size: 4]
	class PlayerController* PlayerControllerClass;//[Offset: 0x310, Size: 4]
	class PlayerState* PlayerStateClass;//[Offset: 0x314, Size: 4]
	class HUD* HUDClass;//[Offset: 0x318, Size: 4]
	class Pawn* DefaultPawnClass;//[Offset: 0x31c, Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x320, Size: 4]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x324, Size: 4]
	GameSession* GameSession;//[Offset: 0x328, Size: 4]
	GameStateBase* GameState;//[Offset: 0x32c, Size: 4]
	FText DefaultPlayerName;//[Offset: 0x330, Size: 12]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33c, Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33c, Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33c, Size: 1]
	void StartPlay();// 0x1ecf9cc
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x44380a0
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x4437f70
	bool ShouldReset(Actor* ActorToReset);// 0x4437edc
	void ReturnToMainMenuHost();// 0x4437ec0
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x4437da0
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x20bc950
	void RestartPlayer(Controller* NewPlayer);// 0x1eb9b50
	void ResetLevel();// 0x1fd3460
	bool PlayerCanRestart(PlayerController* Player);// 0x4437d10
	bool MustSpectate(PlayerController* NewPlayerController);// 0x4437c88
	void K2_PostLogin(PlayerController* NewPlayer);// 0x2bb69b8
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x2bb69b8
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x2bb69b8
	void K2_OnLogout(Controller* ExitingController);// 0x2bb69b8
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x2bb69b8
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x4437b80
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x2274108
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x1edac74
	bool HasMatchStarted();// 0x1f8c084
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x4437b00
	int GetNumSpectators();// 0x4411568
	int GetNumPlayers();// 0x4411978
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x4437a78
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x4437968
	Actor* ChoosePlayerStart(Controller* Player);// 0x44378e0
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x27d2bc0
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x4437814

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x2fc, Size: 4]
	int MaxPlayers;//[Offset: 0x300, Size: 4]
	int MaxPartySize;//[Offset: 0x304, Size: 4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x308, Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 1]
	FName SessionName;//[Offset: 0x310, Size: 8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x2fc, Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x300, Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x304, Size: 4]
	PlayerState*[] PlayerArray;//[Offset: 0x308, Size: 12]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x318, Size: 4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x31c, Size: 4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x320, Size: 4]
	void OnRep_SpectatorClass();// 0x1f7d404
	void OnRep_ReplicatedWorldTimeSeconds();// 0x22455a8
	void OnRep_ReplicatedHasBegunPlay();// 0x20b6e64
	void OnRep_GameModeClass();// 0x1f66a10
	bool HasMatchStarted();// 0x4448640
	bool HasBegunPlay();// 0x22ccb64
	float GetServerWorldTimeSeconds();// 0x2314fdc
	float GetPlayerStartTime(Controller* Controller);// 0x44485b8
	float GetPlayerRespawnDelay(Controller* Controller);// 0x4448530

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x2fc, Size: 4]
	float LastNetSpeedUpdateTime;//[Offset: 0x300, Size: 4]
	int TotalNetBandwidth;//[Offset: 0x304, Size: 4]
	int MinDynamicBandwidth;//[Offset: 0x308, Size: 4]
	int MaxDynamicBandwidth;//[Offset: 0x30c, Size: 4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310, Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x310, Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x314, Size: 4]
	float StandbyTxCheatTime;//[Offset: 0x318, Size: 4]
	int BadPingThreshold;//[Offset: 0x31c, Size: 4]
	float PercentMissingForRxStandby;//[Offset: 0x320, Size: 4]
	float PercentMissingForTxStandby;//[Offset: 0x324, Size: 4]
	float PercentForBadPing;//[Offset: 0x328, Size: 4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x32c, Size: 4]
	float MoveRepSize;//[Offset: 0x330, Size: 4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x334, Size: 4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x338, Size: 4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x33c, Size: 4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x340, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x344, Size: 4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x348, Size: 4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x34c, Size: 4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x350, Size: 4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x354, Size: 4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x358, Size: 4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x360, Size: 4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x368, Size: 4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x36c, Size: 4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x370, Size: 4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x374, Size: 4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 1]

--------------------------------
Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0, Size: 4]
	int NumIndirectLightingBounces;//[Offset: 0x4, Size: 4]
	int NumSkyLightingBounces;//[Offset: 0x8, Size: 4]
	float IndirectLightingQuality;//[Offset: 0xc, Size: 4]
	float IndirectLightingSmoothness;//[Offset: 0x10, Size: 4]
	Color EnvironmentColor;//[Offset: 0x14, Size: 4]
	float EnvironmentIntensity;//[Offset: 0x18, Size: 4]
	float EmissiveBoost;//[Offset: 0x1c, Size: 4]
	float DiffuseBoost;//[Offset: 0x20, Size: 4]
	byte VolumeLightingMethod;//[Offset: 0x24, Size: 1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28, Size: 4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c, Size: 4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x30, Size: 4]
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x38, Size: 4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x3c, Size: 4]
	float OcclusionExponent;//[Offset: 0x40, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x44, Size: 4]
	float MaxOcclusionDistance;//[Offset: 0x48, Size: 4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bUseSimpleLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]

--------------------------------
Class: IdeaBakingWorldInfoSettings
	enum BakingLayout;//[Offset: 0x0, Size: 1]
	int NumCoarseSamples;//[Offset: 0x4, Size: 4]
	int NumSamples;//[Offset: 0x8, Size: 4]
	int NumLightingBounces;//[Offset: 0xc, Size: 4]
	float LightmapBoost;//[Offset: 0x10, Size: 4]
	float SunHardness;//[Offset: 0x14, Size: 4]
	enum BakingMode;//[Offset: 0x18, Size: 1]
	bool bUseParallelBaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bUseConservativeRasterization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bUseLocalOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	float LocalOcclusionRadius;//[Offset: 0x1c, Size: 4]
	float LocalOcclusionFallOff;//[Offset: 0x20, Size: 4]
	float LocalOcclusionDistribution;//[Offset: 0x24, Size: 4]
	float LocalOcclusionFadeRatio;//[Offset: 0x28, Size: 4]
	int LocalOcclusionRes;//[Offset: 0x2c, Size: 4]
	int LocalOcclusionMultiple;//[Offset: 0x30, Size: 4]
	float LocalOcclusionPower;//[Offset: 0x34, Size: 4]
	int LocalOcclusionDenoising;//[Offset: 0x38, Size: 4]
	int LocalOcclusionDilation;//[Offset: 0x3c, Size: 4]
	int NumDenoisingIterators;//[Offset: 0x40, Size: 4]
	int NumDilationIterators;//[Offset: 0x44, Size: 4]
	int DirectLightDenoising;//[Offset: 0x48, Size: 4]
	float RayTraceMaxDistance;//[Offset: 0x4c, Size: 4]
	float RayTraceBias;//[Offset: 0x50, Size: 4]
	float RetraceDistance;//[Offset: 0x54, Size: 4]
	float SmallestTexelRadius;//[Offset: 0x58, Size: 4]
	uint32 AreaLightSampleCount;//[Offset: 0x5c, Size: 4]
	bool bWithPortalDirectLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bWithGrayDiffuse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	byte ReverbType;//[Offset: 0x1, Size: 1]
	ReverbEffect* ReverbEffect;//[Offset: 0x4, Size: 4]
	float Volume;//[Offset: 0x8, Size: 4]
	float FadeTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x1c, Size: 4]
	float Diffusion;//[Offset: 0x20, Size: 4]
	float Gain;//[Offset: 0x24, Size: 4]
	float GainHF;//[Offset: 0x28, Size: 4]
	float DecayTime;//[Offset: 0x2c, Size: 4]
	float DecayHFRatio;//[Offset: 0x30, Size: 4]
	float ReflectionsGain;//[Offset: 0x34, Size: 4]
	float ReflectionsDelay;//[Offset: 0x38, Size: 4]
	float LateGain;//[Offset: 0x3c, Size: 4]
	float LateDelay;//[Offset: 0x40, Size: 4]
	float AirAbsorptionGainHF;//[Offset: 0x44, Size: 4]
	float RoomRolloffFactor;//[Offset: 0x48, Size: 4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float ExteriorVolume;//[Offset: 0x4, Size: 4]
	float ExteriorTime;//[Offset: 0x8, Size: 4]
	float ExteriorLPF;//[Offset: 0xc, Size: 4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 4]
	float InteriorVolume;//[Offset: 0x14, Size: 4]
	float InteriorTime;//[Offset: 0x18, Size: 4]
	float InteriorLPF;//[Offset: 0x1c, Size: 4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BookMark.Object
	Vector Location;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	FString[] HiddenLevels;//[Offset: 0x34, Size: 12]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 4]
	Actor* InViewer;//[Offset: 0x4, Size: 4]
	Actor* ViewTarget;//[Offset: 0x8, Size: 4]
	Vector ViewLocation;//[Offset: 0xc, Size: 12]
	Vector ViewDir;//[Offset: 0x18, Size: 12]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	FName PackageName;//[Offset: 0x20, Size: 8]
	World* WorldAsset;//[Offset: 0x28, Size: 40]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 12]
	Transform LevelTransform;//[Offset: 0x70, Size: 48]
	bool bShouldBeVisibleInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa1, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa1, Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa1, Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa1, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa2, Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa2, Size: 1]
	int LevelLODIndex;//[Offset: 0xa4, Size: 4]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa8, Size: 1]
	Color DrawColor;//[Offset: 0xac, Size: 4]
	LinearColor LevelColor;//[Offset: 0xb0, Size: 16]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xc0, Size: 12]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xcc, Size: 4]
	FString[] Keywords;//[Offset: 0xd4, Size: 12]
	delegate OnLevelLoaded;//[Offset: 0xe0, Size: 12]
	delegate OnLevelUnloaded;//[Offset: 0xec, Size: 12]
	delegate OnLevelShown;//[Offset: 0xf8, Size: 12]
	delegate OnLevelHidden;//[Offset: 0x104, Size: 12]
	delegate OnStatusChanged;//[Offset: 0x110, Size: 12]
	Level* LoadedLevel;//[Offset: 0x11c, Size: 4]
	Level* PendingUnloadLevel;//[Offset: 0x120, Size: 4]
	Level*[] UnloadingLevels;//[Offset: 0x124, Size: 12]
	bool IsStreamingStatePending();// 0x44b100c
	bool IsLevelVisible();// 0x44b0fe4
	bool IsLevelLoaded();// 0x44b0fc0
	FName GetWorldAssetPackageFName();// 0x44b0f80
	Level* GetLoadedLevel();// 0x44b0f64
	LevelScriptActor* GetLevelScriptActor();// 0x44b0f3c
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x44b0ddc

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x324, Size: 12]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 1]
	byte StreamingUsage;//[Offset: 0x331, Size: 1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x52c, Size: 60]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x7ac, Size: 4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c6, Size: 1]
	bool bAllowForceNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c7, Size: 1]
	GameInstance* GameInstance;//[Offset: 0x7e4, Size: 4]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 4]
	Level* Level;//[Offset: 0x24, Size: 4]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: ObjectPoolManager
	bool bUseGMCommand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bEnabledAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	<class Object,ObjectPool> Pools;//[Offset: 0x4, Size: 60]
	<FName,ObjectPoolClassConfig> mapClassConfigs;//[Offset: 0x40, Size: 60]

--------------------------------
Class: ObjectPool
	class Object* ObjectClass;//[Offset: 0x0, Size: 4]
	int ObjectLifePeriodTime;//[Offset: 0x4, Size: 4]
	Object*[] Pool;//[Offset: 0x8, Size: 12]
	<Object*,uint32> RecycleTime;//[Offset: 0x14, Size: 60]
	int Size;//[Offset: 0x50, Size: 4]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]

--------------------------------
Class: ObjectPoolClassConfig
	FName ObjectClassName;//[Offset: 0x0, Size: 8]
	bool ObjectPoolEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int PoolSize;//[Offset: 0xc, Size: 4]
	int LifePeriodTime;//[Offset: 0x10, Size: 4]
	bool UseOldPoolLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: NavigationSystem.BlueprintFunctionLibrary.Object
	NavigationData* MainNavData;//[Offset: 0x1c, Size: 4]
	NavigationData* AbstractNavData;//[Offset: 0x20, Size: 4]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x24, Size: 4]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	enum DataGatheringMode;//[Offset: 0x29, Size: 1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a, Size: 1]
	float ActiveTilesUpdateInterval;//[Offset: 0x2c, Size: 4]
	NavDataConfig[] SupportedAgents;//[Offset: 0x30, Size: 12]
	float UpdateInterval;//[Offset: 0x3c, Size: 4]
	float DirtyAreasUpdateFreq;//[Offset: 0x40, Size: 4]
	NavigationData*[] NavDataSet;//[Offset: 0x44, Size: 12]
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0x50, Size: 12]
	delegate OnNavDataRegisteredEvent;//[Offset: 0xa4, Size: 12]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xb0, Size: 12]
	enum OperationMode;//[Offset: 0x158, Size: 1]
	void UpdateDynamicGenerateTargetNav(bool IsAdd, DynamicGenerateTargetNavigation GenerateTargetNav);// 0x44d2e90
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x44d2e18
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x44d2d58
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x44d2ca4
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x44d2c2c
	void SetGeometryGatheringMode(enum NewMode);// 0x44d2bb4
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x44d2ba0
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x44d2aa0
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x44d28f4
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x44d287c
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x44d267c
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x44d248c
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x44d229c
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x44d20ac
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x44d2034
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x44d1fbc
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x44d1e10
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x44d1c64
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x44d1a60
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x44d185c
	static NavigationSystem* GetNavigationSystem(Object* WorldContextObject);// 0x44d17e4
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x44d1638
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x44d1458

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: DynamicGenerateTargetNavigation
	Vector TargetLocation;//[Offset: 0x0, Size: 12]
	float GenerateRadiusMin;//[Offset: 0xc, Size: 4]
	float GenerateRadiusMax;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x1c, Size: 12]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x28, Size: 4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 4]
	float TravelCostOverride;//[Offset: 0x4, Size: 4]
	float EnteringCostOverride;//[Offset: 0x8, Size: 4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x324, Size: 4]

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x1c, Size: 12]
	Vector[] PathPoints;//[Offset: 0x28, Size: 12]
	byte RecalculateOnInvalidation;//[Offset: 0x34, Size: 1]
	bool IsValid();// 0x44d0a18
	bool IsStringPulled();// 0x1fe93e0
	bool IsPartial();// 0x44d09f0
	float GetPathLength();// 0x44d09c8
	float GetPathCost();// 0x44d09a0
	FString GetDebugString();// 0x44d08e0
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x44d0860
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x44d0790

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x20, Size: 24]
	FName AISystemModuleName;//[Offset: 0x38, Size: 8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x20, Size: 4]
	float LockTimeAfterAvoid;//[Offset: 0x24, Size: 4]
	float LockTimeAfterClean;//[Offset: 0x28, Size: 4]
	float DeltaTimeToPredict;//[Offset: 0x2c, Size: 4]
	float ArtificialRadiusExpansion;//[Offset: 0x30, Size: 4]
	float TestHeightDifference;//[Offset: 0x34, Size: 4]
	float HeightCheckMargin;//[Offset: 0x38, Size: 4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x43fb2ec
	int GetObjectCount();// 0x43fb2c4
	int GetNewAvoidanceUID();// 0x43fb29c
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x43fb20c

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x4, Size: 4]
	NetDriver* NetDriver;//[Offset: 0x8, Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xc, Size: 4]
	Level* PersistentLevel;//[Offset: 0x10, Size: 4]
	<Level*> Levels;//[Offset: 0x14, Size: 60]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x20, Size: 4]
	World* World;//[Offset: 0x24, Size: 4]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x98, Size: 12]
	double TilesStreamingTimeThreshold;//[Offset: 0xa8, Size: 8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]
	float RebaseOriginDistance;//[Offset: 0xb4, Size: 4]
	FString PVEBordersName;//[Offset: 0xb8, Size: 12]
	FString[] UnloadTileOnServer;//[Offset: 0xc4, Size: 12]
	<FString> UnloadTileSet;//[Offset: 0xd0, Size: 60]
	bool bClientUseInitViewpoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	Vector ClientInitViewPoint;//[Offset: 0x120, Size: 12]
	bool SetStreamingDistanceScalePerLevel(out const FName LevelName, float Scale);// 0x454bd90
	bool SetStreamingDistanceScaleByLayer(FString LayerName, float Scale);// 0x454bc88
	bool SetStreamingDistanceScaleAllLevel(float Scale);// 0x454bc08
	bool RemoveDynamicTile(FString TilePackageNameStr);// 0x454bb44
	LevelStreaming* GetDynamicTile(FString TilePackageNameStr);// 0x454ba80
	LevelStreaming* AddDynamicTile(FString TilePackageNameStr, int X, int Y, bool bAllowCopy, bool bDisableDistanceStreaming);// 0x454b894

--------------------------------
Class: BP_PlayerController_Sink_C.BP_STExtraPlayerController_FM_C.BP_STExtraPlayerController_C.STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x38d4, Size: 4]
	void UserConstructionScript();// 0x2bb69b8
	void ReadConfigAutoAim(bool NewParam);// 0x2bb69b8
	void ExecuteUbergraph_BP_PlayerController_Sink(int EntryPoint, bool K2Node_Event_NewParam);// 0x2bb69b8

--------------------------------
Class: BP_STExtraPlayerController_FM_C.BP_STExtraPlayerController_C.STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	BP_FourInOneSoftBoundCheckComponent_C* BP_FourInOneSoftBoundCheckComponent;//[Offset: 0x38d0, Size: 4]

--------------------------------
Class: BP_STExtraPlayerController_C.STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	void RPC_Client_WonderfulPeriod(int IntProperty, float FloatProperty, float FloatProperty, float[] ArrayProperty, int IntProperty, bool BoolProperty);// 0x51d11a4
	void RPC_Client_MarkShoot(Actor* ObjectProperty, Actor* ObjectProperty);// 0x51d11a4
	void RPC_Client_MaliciousTeammateVictimReceiveTips(FString StrProperty, bool BoolProperty, int IntProperty);// 0x51d11a4
	void RPC_Client_MaliciousTeammateReceiveWarningTips();// 0x51d11a4
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3510, Size: 4]
	void ReadSceenMoveXAdd(bool SceenMoveXAdd, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void ReadClientReplayConfig(GameInstance* CallFunc_GetGameInstance_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, ClientInGameReplay* CallFunc_GetClientInGameReplay_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_NotEqual_BoolBool_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue2);// 0x2bb69b8
	void InitLocalHelmetDisplay(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void MapFromCBToESBH(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess);// 0x2bb69b8
	void ReceiveLuaTick();// 0x2bb69b8
	void ReceiveLuaBeginPlay();// 0x2bb69b8
	void StopAvatarDownload(GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void SetMultiVersionRedSwitchConfig(SettingConfig_C* SettingConfig, FString CallFunc_GetAccountRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, bool K2Node_SwitchString_CmpSuccess, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void MapFromCBToESGlobal(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger2_CmpSuccess);// 0x2bb69b8
	void MapFromCBToESVN(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess);// 0x2bb69b8
	void MapFromCBToESJK(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger2_CmpSuccess, bool CallFunc_GetRedBloodSwitch_ReturnValue, bool K2Node_SwitchInteger3_CmpSuccess, FString CallFunc_GetAccountRegion_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2bb69b8
	void MapFromCBToES(SettingConfig_C* SettingConfig, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void ReadConfigEffectSettingColorSingleLayer(int NewParam, LinearColor LayerColor, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetAccountRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_BlueholeHurtEffectConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, BP_STRUCT_KoreaHurtEffectConfig_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue6, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, BP_STRUCT_JapanHurtEffectConfig_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, LinearColor CallFunc_MakeColor_ReturnValue2, BP_STRUCT_VNHurtEffectConfig_type CallFunc_GetTableData_OutRow4, bool CallFunc_GetTableData_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4, BP_STRUCT_GlobalHurtEffectConfig_type CallFunc_GetTableData_OutRow5, bool CallFunc_GetTableData_ReturnValue5, GameBackendHUD* CallFunc_GetInstance_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue17, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue18, SaveGame* CallFunc_GetUserSettings_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue19, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_StringToFloat_ReturnValue20, LinearColor CallFunc_MakeColor_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue5, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, FString CallFunc_GetPublishRegion_ReturnValue, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue, bool K2Node_SwitchString_CmpSuccess, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void ReadConfigEffectSettingColorMultiLayer(int NewParam, EffectSettingMgr* EffectSettingMgr, LinearColor Layer4Color, LinearColor Layer3Color, LinearColor Layer2Color, LinearColor Layer1Color, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetAccountRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_BlueholeHitEffectConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, BP_STRUCT_KoreaHitEffectConfig_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue6, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, float CallFunc_Conv_StringToFloat_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue10, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue14, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, float CallFunc_Conv_StringToFloat_ReturnValue17, float CallFunc_Conv_StringToFloat_ReturnValue18, LinearColor CallFunc_MakeColor_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue19, float CallFunc_Conv_StringToFloat_ReturnValue20, float CallFunc_Conv_StringToFloat_ReturnValue21, LinearColor CallFunc_MakeColor_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue22, float CallFunc_Conv_StringToFloat_ReturnValue23, float CallFunc_Conv_StringToFloat_ReturnValue24, float CallFunc_Conv_StringToFloat_ReturnValue25, LinearColor CallFunc_MakeColor_ReturnValue6, float CallFunc_Conv_StringToFloat_ReturnValue26, float CallFunc_Conv_StringToFloat_ReturnValue27, float CallFunc_Conv_StringToFloat_ReturnValue28, float CallFunc_Conv_StringToFloat_ReturnValue29, LinearColor CallFunc_MakeColor_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue30, float CallFunc_Conv_StringToFloat_ReturnValue31, float CallFunc_Conv_StringToFloat_ReturnValue32, BP_STRUCT_JapanHitEffectConfig_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, LinearColor CallFunc_MakeColor_ReturnValue8, BP_STRUCT_VNHitEffectConfig_type CallFunc_GetTableData_OutRow4, bool CallFunc_GetTableData_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue33, float CallFunc_Conv_StringToFloat_ReturnValue34, float CallFunc_Conv_StringToFloat_ReturnValue35, float CallFunc_Conv_StringToFloat_ReturnValue36, float CallFunc_Conv_StringToFloat_ReturnValue37, float CallFunc_Conv_StringToFloat_ReturnValue38, float CallFunc_Conv_StringToFloat_ReturnValue39, LinearColor CallFunc_MakeColor_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue40, float CallFunc_Conv_StringToFloat_ReturnValue41, float CallFunc_Conv_StringToFloat_ReturnValue42, float CallFunc_Conv_StringToFloat_ReturnValue43, LinearColor CallFunc_MakeColor_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue44, float CallFunc_Conv_StringToFloat_ReturnValue45, float CallFunc_Conv_StringToFloat_ReturnValue46, float CallFunc_Conv_StringToFloat_ReturnValue47, LinearColor CallFunc_MakeColor_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue48, float CallFunc_Conv_StringToFloat_ReturnValue49, float CallFunc_Conv_StringToFloat_ReturnValue50, float CallFunc_Conv_StringToFloat_ReturnValue51, LinearColor CallFunc_MakeColor_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue52, LinearColor CallFunc_MakeColor_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue53, float CallFunc_Conv_StringToFloat_ReturnValue54, float CallFunc_Conv_StringToFloat_ReturnValue55, float CallFunc_Conv_StringToFloat_ReturnValue56, float CallFunc_Conv_StringToFloat_ReturnValue57, LinearColor CallFunc_MakeColor_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue58, float CallFunc_Conv_StringToFloat_ReturnValue59, float CallFunc_Conv_StringToFloat_ReturnValue60, float CallFunc_Conv_StringToFloat_ReturnValue61, LinearColor CallFunc_MakeColor_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue62, float CallFunc_Conv_StringToFloat_ReturnValue63, float CallFunc_Conv_StringToFloat_ReturnValue64, BP_STRUCT_GlobalHitEffectConfig_type CallFunc_GetTableData_OutRow5, bool CallFunc_GetTableData_ReturnValue5, LinearColor CallFunc_MakeColor_ReturnValue16, GameBackendHUD* CallFunc_GetInstance_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue65, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue66, SaveGame* CallFunc_GetUserSettings_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue67, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_StringToFloat_ReturnValue68, LinearColor CallFunc_MakeColor_ReturnValue17, float CallFunc_Conv_StringToFloat_ReturnValue69, float CallFunc_Conv_StringToFloat_ReturnValue70, float CallFunc_Conv_StringToFloat_ReturnValue71, float CallFunc_Conv_StringToFloat_ReturnValue72, float CallFunc_Conv_StringToFloat_ReturnValue73, LinearColor CallFunc_MakeColor_ReturnValue18, float CallFunc_Conv_StringToFloat_ReturnValue74, float CallFunc_Conv_StringToFloat_ReturnValue75, float CallFunc_Conv_StringToFloat_ReturnValue76, float CallFunc_Conv_StringToFloat_ReturnValue77, LinearColor CallFunc_MakeColor_ReturnValue19, float CallFunc_Conv_StringToFloat_ReturnValue78, float CallFunc_Conv_StringToFloat_ReturnValue79, float CallFunc_Conv_StringToFloat_ReturnValue80, LinearColor CallFunc_MakeColor_ReturnValue20, FString CallFunc_Concat_StrStr_ReturnValue5, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x2bb69b8
	void InitNewbieCounts(FString CallFunc_Concat_StrStr_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, bool CallFunc_IsValid_ReturnValue, NewbieGuideItem CallFunc_Array_Get_Item, NewbieGuideItem CallFunc_Array_Get_Item2, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, BP_STRUCT_GuideText_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, NewbieGuideItem K2Node_SetFieldsInStruct_StructOut, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2);// 0x2bb69b8
	void AddIgnoreCameraMoveIndex(byte _Index, int CallFunc_Array_AddUnique_ReturnValue);// 0x2bb69b8
	void ReadConfigColorBlindnessTypeBoolDelegate(bool NewParam);// 0x2bb69b8
	void ReadConfigColorBlindnessTypeIntDelegate(int NewParam);// 0x2bb69b8
	void CheckGlobalReadRed(FString StrID, out bool bIsRed, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_CheckIsBood_bIsBlood, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void CheckIsBood(FString StrID, out bool bIsBlood, int CallFunc_FindSubstring_ReturnValue, int CallFunc_FindSubstring_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x2bb69b8
	void CheckJapnReadRed(FString StrID, out bool bIsRed, bool CallFunc_GetRedBloodSwitch_ReturnValue, bool CallFunc_CheckIsBood_bIsBlood);// 0x2bb69b8
	void GetJKCBColor(FString ID, out bool bFind, out LinearColor Color, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_JKColorBlindnessConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue6, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, float CallFunc_Conv_StringToFloat_ReturnValue9, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4);// 0x2bb69b8
	void GetVNCBColor(FString ID, out bool bFind, out LinearColor Color, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_VNColorBlindnessConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue6, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, float CallFunc_Conv_StringToFloat_ReturnValue9, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4);// 0x2bb69b8
	void GetCBColor(BP_STRUCT_ColorBlindnessConfig_type tempCBData, out LinearColor Color, BP_STRUCT_ColorBlindnessConfig_type localTempCBData, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue6, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_GetVNCBColor_bFind, LinearColor CallFunc_GetVNCBColor_Color, bool CallFunc_CheckGlobalReadRed_bIsRed, bool CallFunc_CheckJapnReadRed_bIsRed, bool CallFunc_GetJKCBColor_bFind, LinearColor CallFunc_GetJKCBColor_Color);// 0x2bb69b8
	void ReadConfigColorBlindnessType(int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, GameInstance* CallFunc_GetGameInstance_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetGameFrontendHUDByGameInstance_ReturnValue, ColorBlindnessMgr* CallFunc_GetColorBlindnessMgr_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_STRUCT_ColorBlindnessConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, LinearColor CallFunc_GetCBColor_color, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void CurGameMode(out int GameMode, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2bb69b8
	void IsFPP(out bool IsFPP, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void OnRep_InWateringRange();// 0x2bb69b8
	void LoadAllBattleSound(FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, int ___int_Array_Index_Variable, FName CallFunc_Array_Get_Item, BP_STRUCT_BattleSound_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x2bb69b8
	void AsyncLoadBattleSound(Object* Object, int SoundID, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void LoadBattleSound(FString BankName, FString EventName, int SoundID, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_Map_Contains_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Map_Contains_ReturnValue2);// 0x2bb69b8
	void SetAlwaysHideTouchInterface(bool Hide);// 0x2bb69b8
	void PlayBattleSoundInBP(int SoundID, bool bPlayed, GameBackendHUD* CallFunc_GetInstance_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, AkAudioEvent* CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_PostEvent_ReturnValue);// 0x2bb69b8
	bool IsReleasePosInAimBtnRange(Vector Loc, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3);// 0x2bb69b8
	void ReadEmoteDataRowPC(int ___int_Array_Index_Variable, bool CallFunc_HasAuthority_ReturnValue, int ___int_Loop_Counter_Variable, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue2, FName[] CallFunc_GetDataTableRowNames_OutRowNames2, int ___int_Loop_Counter_Variable2, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_EmoteBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, FName CallFunc_Array_Get_Item2, FString CallFunc_Conv_NameToString_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Len_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x2bb69b8
	void IsAtaptation(out bool adaptation);// 0x2bb69b8
	void ReadAdaptationTable(bool CallFunc_HasAuthority_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Array_Index_Variable, bool CallFunc_BooleanAND_ReturnValue, FName CallFunc_Array_Get_Item, UIAdaptationStructure CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x2bb69b8
	void InitWeather(GlobalConfigActor*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_Array_IsValidIndex_ReturnValue, GlobalConfigActor* CallFunc_Array_Get_Item);// 0x2bb69b8
	void SetMotionParam(float GravityX, int CallFunc_GetPlatformInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_GetInputMotionState_Tilt, Vector CallFunc_GetInputMotionState_RotationRate, Vector CallFunc_GetInputMotionState_Gravity, Vector CallFunc_GetInputMotionState_Acceleration, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x2bb69b8
	void GetStickLeftSize(out Vector2D Size, Vector2D CallFunc_GetJoyStickCenter_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x2bb69b8
	void ShowFightingUI();// 0x2bb69b8
	void ShowAutoSprintBtn(bool Visible, Vector2D showPos_, bool Inside, Vector iPhoneXWidgetOffset, Vector2D touchPos);// 0x2bb69b8
	void ReadConfigCrossHairColor(int NewParam, int ___int_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable2, LinearColor ___struct_Variable3, LinearColor ___struct_Variable4, LinearColor ___struct_Variable5, LinearColor ___struct_Variable6, LinearColor ___struct_Variable7, LinearColor ___struct_Variable8, LinearColor ___struct_Variable9, LinearColor ___struct_Variable10, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, LinearColor K2Node_Select_Default);// 0x2bb69b8
	void ReadConfigMotionControl(int NewParam, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void ReadConfigAutoAim(bool NewParam, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void ReadConfigFromHUD(float CallFunc_Get3DTouchValue_TouchValue, bool CallFunc_Get3DTouchSwitch_TouchSwitch, float CallFunc_Divide_FloatFloat_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue2, SensibilityMode K2Node_MakeStruct_SensibilityMode, SensibilityMode K2Node_MakeStruct_SensibilityMode2, SensibilityMode K2Node_MakeStruct_SensibilityMode3, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig2, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig3, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig4, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig5, <int,SightMaterialConfig> K2Node_MakeMap_Map, SensibilityMode K2Node_MakeStruct_SensibilityMode4, SensibilityConfig K2Node_MakeStruct_SensibilityConfig);// 0x2bb69b8
	void MakeFireModeEffect(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsFPP_IsFPP, BP_SAVEGAME_UIElemLayout_C* CallFunc_LoadUIElemLayoutSGBySetting_SaveGame, float CallFunc_GetRushTriggerLengthByType_RushTriggerLength);// 0x2bb69b8
	void DebugNotDrawGuideLine();// 0x2bb69b8
	void ShowBackpackTombBox(bool Show);// 0x2bb69b8
	void BindOrUnBindJoyStickSprint(bool IsBind);// 0x2bb69b8
	void CreateRank(int Kills, int Rank);// 0x2bb69b8
	void DisableAimIfUnEquipWeapon(byte WeaponType);// 0x2bb69b8
	void SwitchAimMode();// 0x2bb69b8
	void DoInitUI(bool CallFunc_IsInFight_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, HUD* CallFunc_GetHUD_ReturnValue, SurviveHUD* K2Node_DynamicCast_AsSurvive_HUD, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocalPlayerController_ReturnValue);// 0x2bb69b8
	void HandleJumpBtnPressEvent();// 0x2bb69b8
	void OnRep_bInCar();// 0x2bb69b8
	void RefreshUI(float DeltaTime, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2bb69b8
	void UpdateInputPanel();// 0x2bb69b8
	void ShowBackpackIconSplash(bool bShow);// 0x2bb69b8
	void RefreshWeaponPanel();// 0x2bb69b8
	void SetTouchInputEnabled(bool bEnabled);// 0x2bb69b8
	void ShowMainInputControl(bool bShow);// 0x2bb69b8
	void ShowTouchInterface(bool bShow, Vector2D NormalJoystickCenter, Vector2D iPhoneXJoystickCenter, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, enum CallFunc_GetCurrentStateType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_NotEqual_BoolBool_ReturnValue);// 0x2bb69b8
	void EnableDeathGray(float BlendWeight, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x2bb69b8
	void SetDeathGrayLerpValue(float Lerp);// 0x2bb69b8
	void SetPostProcessVolume(Actor*[] CallFunc_GetActorsByTag_Targets, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, PostProcessVolume* K2Node_DynamicCast_AsPost_Process_Volume, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void UserConstructionScript(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void GrayToOne__FinishedFunc();// 0x2bb69b8
	void GrayToOne__UpdateFunc();// 0x2bb69b8
	void GrayToZero__FinishedFunc();// 0x2bb69b8
	void GrayToZero__UpdateFunc();// 0x2bb69b8
	void InpActEvt_NumPadEight_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_NumPadNine_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_ToggleTeamListPanel_K2Node_InputActionEvent(Key Key);// 0x2bb69b8
	void InpActEvt_ToggleTeamListPanel_K2Node_InputActionEvent(Key Key);// 0x2bb69b8
	void InpActEvt_SwitchToTeam_DelOneNum_K2Node_InputActionEvent(Key Key);// 0x2bb69b8
	void InpActEvt_SwitchToTeam_ClearTeamID_K2Node_InputActionEvent(Key Key);// 0x2bb69b8
	void InpActEvt_SwitchToTeam_PostTeamID_K2Node_InputActionEvent(Key Key);// 0x2bb69b8
	void InpActEvt_Android_Back_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void OnCharacterCurrentActivityIDRep(int CurrentActivityID);// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void OnSpectatorCameraChange(bool bDie);// 0x2bb69b8
	void OnStopFireEventHandle();// 0x2bb69b8
	void OnSwitchCameraSatrtHandle(byte CameraMode);// 0x2bb69b8
	void OnPlayerPutDownActorHandle(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x2bb69b8
	void OnSwitchWeaponHandle();// 0x2bb69b8
	void ReceiveTick(float DeltaSeconds);// 0x2bb69b8
	void OnUseInventoryitemHandle();// 0x2bb69b8
	void ServerStartBattle();// 0x2bb69b8
	void ServerAfterLand();// 0x2bb69b8
	void ClientAfterLand();// 0x2bb69b8
	void RefreshTopMostUIPanel(byte Type);// 0x2bb69b8
	void GameStart();// 0x2bb69b8
	void RemoveWeaponAim(byte Slot);// 0x2bb69b8
	void SetMoveableAirborne(bool NewParam);// 0x2bb69b8
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x2bb69b8
	void JoystickTriggerSprint(bool bIsSprint);// 0x2bb69b8
	void OnPlane();// 0x2bb69b8
	void SetPanels(out const UAEUserWidget*[] panels);// 0x2bb69b8
	void InitOprate();// 0x2bb69b8
	void OnFiremodeChange(int IntValue);// 0x2bb69b8
	void ChangeToMale();// 0x2bb69b8
	void ChangeToFemale();// 0x2bb69b8
	void DoUITouchMove(Vector Loc);// 0x2bb69b8
	void PressFire(int FingerIndex);// 0x2bb69b8
	void ShowFireBtn(bool bShow);// 0x2bb69b8
	void PressGrenade(bool isThrow);// 0x2bb69b8
	void InitJoyStickAfterActivation();// 0x2bb69b8
	void MemberVoice(int member, int Status);// 0x2bb69b8
	void ReceiveClientRestart();// 0x2bb69b8
	void OnShowAnimationButton(bool IsShow, int NewUIType);// 0x2bb69b8
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x2bb69b8
	void ResetMissingUIUpdate();// 0x2bb69b8
	void MotionControliOS(Vector AxisValue);// 0x2bb69b8
	void InpAxisKeyEvt_RotationRate_K2Node_InputVectorAxisEvent(Vector AxisValue);// 0x2bb69b8
	void MotionControlAndroidTick();// 0x2bb69b8
	void MotionControlAndroid(Vector AxisValue);// 0x2bb69b8
	void ReceiveBackpackComponent();// 0x2bb69b8
	void InitWallFeedBack();// 0x2bb69b8
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x2bb69b8
	void DebugOpenGuide();// 0x2bb69b8
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x2bb69b8
	void CallShowTouchInterface(bool InShow);// 0x2bb69b8
	void OnGameModeStateChanged();// 0x2bb69b8
	void ReleaseFire();// 0x2bb69b8
	void OnFireModeChangeTD(int IntValue);// 0x2bb69b8
	void OnRep_InWateringRangeBP();// 0x2bb69b8
	void PlayerExitJumpEvent();// 0x2bb69b8
	void EnterFightingStateDelegate();// 0x2bb69b8
	void GameStartCountDownDelegate(float CountdownTime);// 0x2bb69b8
	void LuaReceiveBeginPlay();// 0x2bb69b8
	void AddPubgmAutoComp();// 0x2bb69b8
	void ExecuteUbergraph_BP_STExtraPlayerController(int EntryPoint, Key K2Node_InputKeyEvent_Key4, delegate K2Node_CreateDelegate_OutputDelegate, Key K2Node_InputKeyEvent_Key3, bool ___bool_Variable, FString ___string_Variable, FString ___string_Variable2, Key K2Node_InputActionEvent_Key5, Key K2Node_InputActionEvent_Key4, Key ___struct_Variable, Key K2Node_InputActionEvent_Key3, Key K2Node_InputActionEvent_Key2, Key K2Node_InputActionEvent_Key, int ___int_Variable, byte ___byte_Variable, byte ___byte_Variable2, byte ___byte_Variable3, byte ___byte_Variable4, Key K2Node_InputKeyEvent_Key2, Key K2Node_InputKeyEvent_Key, FString CallFunc_Conv_IntToString_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, const TemBPDataAddr[] K2Node_MakeArray_Array, delegate K2Node_CreateDelegate_OutputDelegate5, Transform ___struct_Variable2, PubgmAutoRun* CallFunc_AddComponent_ReturnValue, Transform ___struct_Variable3, Transform ___struct_Variable4, AutoTestInterface* CallFunc_AddComponent_ReturnValue2, AutoRunTest* CallFunc_AddComponent_ReturnValue3, Transform ___struct_Variable5, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, AutoTestInterface* CallFunc_AddComponent_ReturnValue4, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, int K2Node_Event_CurrentActivityID, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_Event_bDie, bool CallFunc_IsValid_ReturnValue, byte K2Node_CustomEvent_CameraMode, STExtraBaseCharacter* K2Node_CustomEvent_TargetPlayer, Actor* K2Node_CustomEvent_TargetActor, float K2Node_Event_DeltaSeconds, BP_PlayerPawn_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess2, SurviveHUD* K2Node_DynamicCast_AsSurvive_HUD, bool K2Node_DynamicCast_bSuccess3, byte K2Node_Event_type, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_CustomEvent_Slot, delegate K2Node_CreateDelegate_OutputDelegate6, Pawn* CallFunc_K2_GetPawn_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, bool K2Node_CustomEvent_NewParam, bool K2Node_Event_bIsSprint, UAEUserWidget*[] K2Node_Event_panels, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, int K2Node_CustomEvent_IntValue2, FString CallFunc_Conv_IntToString_ReturnValue2, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess4, delegate K2Node_CreateDelegate_OutputDelegate7, Pawn* CallFunc_GetPlayerPawn_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn3, bool K2Node_DynamicCast_bSuccess5, Pawn* CallFunc_GetPlayerPawn_ReturnValue2, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn4, bool K2Node_DynamicCast_bSuccess6, Vector K2Node_Event_Loc, int K2Node_Event_fingerIndex, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_EqualEqual_IntInt_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate8, delegate K2Node_CreateDelegate_OutputDelegate9, delegate K2Node_CreateDelegate_OutputDelegate10, delegate K2Node_CreateDelegate_OutputDelegate11, bool CallFunc_GetUseMotionControlEnable_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate12, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool K2Node_Event_bShow, bool K2Node_Event_isThrow, int K2Node_Event_member, int K2Node_Event_status, bool CallFunc_IsOnVehicle_ReturnValue, bool K2Node_Event_IsShow, int K2Node_Event_NewUIType, delegate K2Node_CreateDelegate_OutputDelegate13, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue9, byte K2Node_Event_WeaponPropSlot, ItemDefineID K2Node_Event_DefineID, bool K2Node_Event_bEquip, int CallFunc_Divide_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate14, Vector K2Node_CustomEvent_AxisValue2, Vector K2Node_InputVectorAxisEvent_AxisValue, int ___int_Array_Index_Variable, BP_PlayerPawn_C* CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate15, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, Vector K2Node_CustomEvent_AxisValue, float CallFunc_CalInputFromRotaionRate_OutPitch, float CallFunc_CalInputFromRotaionRate_OutYaw, bool CallFunc_CalInputFromRotaionRate_bIsAddPitch, bool CallFunc_CalInputFromRotaionRate_bIsAddYaw, bool CallFunc_IsDedicatedServer_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate16, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue3, SaveGame* CallFunc_GetUserSettings_ReturnValue2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config2, bool K2Node_DynamicCast_bSuccess7, int[] K2Node_Event_FinishedGuide, int[] K2Node_Event_FinishedCounts, int K2Node_Event_PlayerLevel, int K2Node_Event_PlayerExperienceType, byte K2Node_Select2_Default, int CallFunc_MakeLiteralInt_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue2, int[] K2Node_MakeArray_Array2, int[] K2Node_MakeArray_Array3, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsObserver_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector K2Node_Event_OceansideLocation, bool K2Node_Event_bDetectedRiver, bool K2Node_Event_InShow, int CallFunc_PostEventAtLocation_ReturnValue, bool CallFunc_HasAuthority_ReturnValue2, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess8, FName CallFunc_GetGameModeState_ReturnValue, bool K2Node_SwitchName_CmpSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsObserver_ReturnValue2, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess9, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue2, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance2, bool K2Node_DynamicCast_bSuccess10, InGameUIManager* K2Node_DynamicCast_AsIn_Game_UIManager, bool K2Node_DynamicCast_bSuccess11, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue2, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue2, bool CallFunc_IsInSpectating_ReturnValue, InGameUIManager* K2Node_DynamicCast_AsIn_Game_UIManager2, bool K2Node_DynamicCast_bSuccess12, bool CallFunc_IsOnVehicle_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue4, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue4, GameStateBase* CallFunc_GetGameState_ReturnValue2, bool CallFunc_IsWindowOB_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base2, bool K2Node_DynamicCast_bSuccess13, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsFPP_IsFPP, int CallFunc_GetPlatformInt_ReturnValue, bool K2Node_SwitchInteger2_CmpSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue3, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance3, bool K2Node_DynamicCast_bSuccess14, int CallFunc_CurGameMode_GameMode, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue3, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue3, bool CallFunc_IsFPP_IsFPP2, InGameUIManager* K2Node_DynamicCast_AsIn_Game_UIManager3, bool K2Node_DynamicCast_bSuccess15, delegate K2Node_CreateDelegate_OutputDelegate17, FString CallFunc_Conv_IntToString_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11, int K2Node_CustomEvent_IntValue, FString CallFunc_Concat_StrStr_ReturnValue12, FString CallFunc_Conv_IntToString_ReturnValue5, FString CallFunc_Conv_IntToString_ReturnValue6, delegate K2Node_CreateDelegate_OutputDelegate18, FString CallFunc_Concat_StrStr_ReturnValue13, FString CallFunc_Concat_StrStr_ReturnValue14, bool CallFunc_EqualEqual_IntInt_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue15, delegate K2Node_CreateDelegate_OutputDelegate19, delegate K2Node_CreateDelegate_OutputDelegate20, GameInstance* CallFunc_GetGameInstance_ReturnValue4, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance4, bool K2Node_DynamicCast_bSuccess16, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, delegate K2Node_CreateDelegate_OutputDelegate21, delegate K2Node_CreateDelegate_OutputDelegate22, delegate K2Node_CreateDelegate_OutputDelegate23, Rotator CallFunc_GetControlRotation_ReturnValue, float K2Node_CustomEvent_CountDownTime, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsStandalone_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate24, bool CallFunc_IsServer_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_IsAutoRunTestGameBindCompoment_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x2bb69b8
	void VaultFailDS__DelegateSignature();// 0x2bb69b8
	void BindEventToBackpackComponent__DelegateSignature();// 0x2bb69b8
	void PlayerLeaveWater__DelegateSignature(bool HideLung);// 0x2bb69b8
	void PlayerEnterWater__DelegateSignature();// 0x2bb69b8
	void AirborneLanded__DelegateSignature();// 0x2bb69b8
	void ReloadingCDEnd__DelegateSignature();// 0x2bb69b8
	void ReloadingCDStart__DelegateSignature(float CD);// 0x2bb69b8
	QuickSignComponent_BP_C* QuickSignComponent_BP;//[Offset: 0x3514, Size: 4]
	BP_MapUIMarkManager_C* BP_MapUIMarkManager;//[Offset: 0x3518, Size: 4]
	BP_ChangeWearingComp_C* BP_ChangeWearingComp;//[Offset: 0x351c, Size: 4]
	BP_GameEventListener_C* BP_GameEventListener;//[Offset: 0x3520, Size: 4]
	GuideComponent_BP_C* GuideComponent_BP;//[Offset: 0x3524, Size: 4]
	BP_ServerSwitcher_C* BP_ServerSwitcher;//[Offset: 0x3528, Size: 4]
	STExtraUnderWaterEffectComp* STExtraUnderWaterEffectComp;//[Offset: 0x352c, Size: 4]
	ChatComponent_BP_C* ChatComponent_BP;//[Offset: 0x3530, Size: 4]
	BP_CommonBtn_C* BP_CommonBtn;//[Offset: 0x3534, Size: 4]
	BP_VehicleUser_C* BP_VehicleUser;//[Offset: 0x3538, Size: 4]
	float GrayToOne_Alpha_7DE4452444DF4112B2469DBCAE9CD7B1;//[Offset: 0x353c, Size: 4]
	byte GrayToOne__Direction_7DE4452444DF4112B2469DBCAE9CD7B1;//[Offset: 0x3540, Size: 1]
	TimelineComponent* GrayToOne;//[Offset: 0x3544, Size: 4]
	float GrayToZero_Alpha_AEAD84AB4721658A84A855B8F2969A97;//[Offset: 0x3548, Size: 4]
	byte GrayToZero__Direction_AEAD84AB4721658A84A855B8F2969A97;//[Offset: 0x354c, Size: 1]
	TimelineComponent* GrayToZero;//[Offset: 0x3550, Size: 4]
	PostProcessVolume* MainPostProcessVolume;//[Offset: 0x3554, Size: 4]
	byte LastCameraMode;//[Offset: 0x3558, Size: 1]
	Pawn* PrePlayerPawn;//[Offset: 0x355c, Size: 4]
	bool bInItemGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3560, Size: 1]
	float InItemGeneratorUIRefreshTime;//[Offset: 0x3564, Size: 4]
	float CurInItemGeneratorUIRefreshTime;//[Offset: 0x3568, Size: 4]
	Object* WaitingUI;//[Offset: 0x356c, Size: 4]
	Object* SimulatePlane;//[Offset: 0x3570, Size: 4]
	float PlaneStartYaw;//[Offset: 0x3574, Size: 4]
	delegate ReloadingCDStart;//[Offset: 0x3578, Size: 12]
	delegate ReloadingCDEnd;//[Offset: 0x3584, Size: 12]
	bool AlreadyAimed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3590, Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x3594, Size: 4]
	STExtraBaseCharacter*[] CurAimTargets;//[Offset: 0x3598, Size: 12]
	float CloseDistance;//[Offset: 0x35a4, Size: 4]
	byte AutoAimDrawType;//[Offset: 0x35a8, Size: 1]
	delegate AirborneLanded;//[Offset: 0x35ac, Size: 12]
	float MotionRate_Yaw;//[Offset: 0x35b8, Size: 4]
	float MotionRate_Pitch;//[Offset: 0x35bc, Size: 4]
	float MotionAimRate_Pitch;//[Offset: 0x35c0, Size: 4]
	float MotionAimRate_Yaw;//[Offset: 0x35c4, Size: 4]
	float MotionRate_Pitch_Threshold;//[Offset: 0x35c8, Size: 4]
	float MotionRate_Yaw_Threshold;//[Offset: 0x35cc, Size: 4]
	float MotionTouchAimRate_Pitch;//[Offset: 0x35d0, Size: 4]
	float MotionTouchAimRate_Yaw;//[Offset: 0x35d4, Size: 4]
	float MotionTouchRate_Yaw;//[Offset: 0x35d8, Size: 4]
	float MotionTouchRate_Pitch;//[Offset: 0x35dc, Size: 4]
	bool bDefaultIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35e0, Size: 1]
	bool DriveWithForwardAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35e1, Size: 1]
	bool DriveWithRightAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35e2, Size: 1]
	bool bInTombBoxGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35e3, Size: 1]
	delegate PlayerEnterWater;//[Offset: 0x35e4, Size: 12]
	delegate PlayerLeaveWater;//[Offset: 0x35f0, Size: 12]
	bool bindWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35fc, Size: 1]
	bool bLandScapeOrientation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35fd, Size: 1]
	float PitchReverce;//[Offset: 0x3600, Size: 4]
	float Left;//[Offset: 0x3604, Size: 4]
	float Right;//[Offset: 0x3608, Size: 4]
	float LastTime;//[Offset: 0x360c, Size: 4]
	Vector[] MotionDataStack;//[Offset: 0x3610, Size: 12]
	Vector CurMotionData;//[Offset: 0x361c, Size: 12]
	delegate BindEventToBackpackComponent;//[Offset: 0x3628, Size: 12]
	delegate VaultFailDS;//[Offset: 0x3634, Size: 12]
	<FString,UIAdaptationStructure> AdaptationDict;//[Offset: 0x3640, Size: 60]
	UIAdaptationStructure CurDeviceAdaptationOffset;//[Offset: 0x367c, Size: 28]
	UIAdaptationStructure CurDeviceAdaptationData;//[Offset: 0x3698, Size: 28]
	bool bIsJoyStickShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b4, Size: 1]
	bool bIsInitSensibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b5, Size: 1]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b6, Size: 1]
	bool adaption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b7, Size: 1]
	bool initAdaptation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b8, Size: 1]
	bool IsJoystickTriggerSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b9, Size: 1]
	float UITouchMoveX;//[Offset: 0x36bc, Size: 4]
	float UITouchMoveY;//[Offset: 0x36c0, Size: 4]
	int PressFireFingerIndex;//[Offset: 0x36c4, Size: 4]
	bool IsShowFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c8, Size: 1]
	bool IsThrowGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c9, Size: 1]
	int VoiceMemberID;//[Offset: 0x36cc, Size: 4]
	int VoiceMemberStatus;//[Offset: 0x36d0, Size: 4]
	byte AttachmentAttachSlot;//[Offset: 0x36d4, Size: 1]
	ItemDefineID AttachmentDefineID;//[Offset: 0x36d8, Size: 24]
	Vector2D AutoSprintBtnTouchPos;//[Offset: 0x36f0, Size: 8]
	bool IsAutoSprintBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36f8, Size: 1]
	bool IsFingerInsideAutoSprintBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36f9, Size: 1]
	bool IsBindJoystickSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36fa, Size: 1]
	byte UnequipWeaponType;//[Offset: 0x36fb, Size: 1]
	bool IsShowInputControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36fc, Size: 1]
	Vector2D AutoNavigateTranslation;//[Offset: 0x3700, Size: 8]
	int InputTeamID;//[Offset: 0x3708, Size: 4]
	int EmoteItemType;//[Offset: 0x370c, Size: 4]
	ItemRecordData[] EmoteDataRow;//[Offset: 0x3710, Size: 12]
	bool bLongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371c, Size: 1]
	bool bLongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371d, Size: 1]
	Vector2D AimBtnPos;//[Offset: 0x3720, Size: 8]
	Vector2D AimBtnSize;//[Offset: 0x3728, Size: 8]
	int PeekMode;//[Offset: 0x3730, Size: 4]
	int AimMode;//[Offset: 0x3734, Size: 4]
	<int,int> EmoteItemIDToBPIDMap;//[Offset: 0x3738, Size: 60]
	<int,FString> EmoteBPIDToHandlePath;//[Offset: 0x3774, Size: 60]
	<int,FString> EmoteItemIDToImagePathMap;//[Offset: 0x37b0, Size: 60]
	<int,FString> EmoteItemIDToImageBattlePathMap;//[Offset: 0x37ec, Size: 60]
	bool bAlwaysHideTouchInterface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3828, Size: 1]
	<int,AkAudioEvent*> BattleSoundMap;//[Offset: 0x382c, Size: 60]
	<int,FString> BattleBankMap;//[Offset: 0x3868, Size: 60]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a4, Size: 1]
	BP_SAVEGAME_UIElemLayout_C* SaveGameUIElemLayout;//[Offset: 0x38a8, Size: 4]
	int GameMode;//[Offset: 0x38ac, Size: 4]
	int currentColorBlindnessType;//[Offset: 0x38b0, Size: 4]
	int CurrentHitEffectIndex;//[Offset: 0x38b4, Size: 4]
	int CurrentHurtEffectIndex;//[Offset: 0x38b8, Size: 4]
	Rotator CurControllerRotation;//[Offset: 0x38bc, Size: 12]
	bool IsCurExitJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c8, Size: 1]
	bool bStopDownloadAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c9, Size: 1]
	int ShoulderMode;//[Offset: 0x38cc, Size: 4]

--------------------------------
Class: STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	float FreeCameraStartMinPitchMin;//[Offset: 0xcac, Size: 4]
	float FreeCameraStartMinPitchMax;//[Offset: 0xcb0, Size: 4]
	bool bTrackingKillerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb4, Size: 1]
	<int> TouchIndexSet;//[Offset: 0xcb8, Size: 60]
	byte OnFireTouchFingerIndex;//[Offset: 0xcf4, Size: 1]
	enum TouchEndTriggerSkillEntry;//[Offset: 0xcf5, Size: 1]
	int TouchEndTriggerSkillID;//[Offset: 0xcf8, Size: 4]
	delegate OnPlayerContollerTouchBegin;//[Offset: 0xcfc, Size: 12]
	delegate OnPlayerControllerTouchEnd;//[Offset: 0xd08, Size: 12]
	<STExtraBaseCharacter*> FriendOBRelevancyCharacterSet;//[Offset: 0xd54, Size: 60]
	float MinOBRelevancyJudgeDissquared;//[Offset: 0xd90, Size: 4]
	FName FeatureActorName;//[Offset: 0xd98, Size: 8]
	ValidTouchMoveFrameConfig[] ValidTouchMoveFrameConfig;//[Offset: 0xda0, Size: 12]
	ValidTouchMoveFrameConfig CurValidTouchMoveFrameConfig;//[Offset: 0xdac, Size: 24]
	byte[] IgnoreCameraMovingIndexArray;//[Offset: 0xdc4, Size: 12]
	byte[] IgnoreCameraMovePendingArray;//[Offset: 0xdd0, Size: 12]
	byte[] AddTouchMoveFingerArray;//[Offset: 0xddc, Size: 12]
	bool bNeedSetFireTouchFingerIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde8, Size: 1]
	byte OnFreeCameraFingerIndex;//[Offset: 0xde9, Size: 1]
	float FreeCameraSPL_Hor;//[Offset: 0xdec, Size: 4]
	float FreeCameraSPL_Ver;//[Offset: 0xdf0, Size: 4]
	float FreeCamera_FPP_MIN;//[Offset: 0xdf4, Size: 4]
	float FreeCamera_FPP_MAX;//[Offset: 0xdf8, Size: 4]
	float FreeCamera_FPP_PITCH_MIN;//[Offset: 0xdfc, Size: 4]
	float FreeCamera_FPP_PITCH_MAX;//[Offset: 0xe00, Size: 4]
	float FreeCamera_FPP_PITCH_MIN_LIMITED;//[Offset: 0xe04, Size: 4]
	float FreeCamera_FPP_PITCH_MAX_LIMITED;//[Offset: 0xe08, Size: 4]
	float FreeCameraSPL_Hor_Parachute;//[Offset: 0xe0c, Size: 4]
	float FreeCameraSPL_Ver_Parachute;//[Offset: 0xe10, Size: 4]
	float RecoverLagDelayTime;//[Offset: 0xe14, Size: 4]
	Vector2D StartPosition;//[Offset: 0xe18, Size: 8]
	Vector2D CurFreeCamPosition;//[Offset: 0xe20, Size: 8]
	Rotator EmoteFreeCamPrevFigureResultDelta;//[Offset: 0xe28, Size: 12]
	Rotator SelfieFreeCamPrevFigureResultDelta;//[Offset: 0xe34, Size: 12]
	FString FollowCandidateName;//[Offset: 0xe44, Size: 12]
	<FString,bool> IsTeammatesAutoFollowing;//[Offset: 0xe50, Size: 60]
	Rotator FreeCameraStartRotation;//[Offset: 0xe8c, Size: 12]
	Transform FPPModeSpringArmTrans;//[Offset: 0xea0, Size: 48]
	byte FreeCameraFigerIndex;//[Offset: 0xed0, Size: 1]
	bool GMShowVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed1, Size: 1]
	int8 CurrentBuildingIndex;//[Offset: 0xed2, Size: 1]
	int WeaponReconnectOpIndex;//[Offset: 0xed4, Size: 4]
	bool bHasInitUIFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed8, Size: 1]
	bool isShowVaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeda, Size: 1]
	BattleSceneAvatarDisplayInfo[] BattleSceneAvatarDisplayInfoList;//[Offset: 0xedc, Size: 12]
	LinearColor CrossHairColor;//[Offset: 0xee8, Size: 16]
	byte AutoAimType;//[Offset: 0xef8, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf00, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf01, Size: 1]
	bool bIsInResultView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf10, Size: 1]
	bool bForceHideConcentric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf11, Size: 1]
	bool bForceShowBlueCircleEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf12, Size: 1]
	FString[] ScreenAppearToBeRemovedInResult;//[Offset: 0xf14, Size: 12]
	ClientFatalDamageRecordData[] ClientFatalDamageRecords;//[Offset: 0xf20, Size: 12]
	ClientFatalDamageRecordData ClientFatalDamageLastRecords;//[Offset: 0xf2c, Size: 212]
	SensibilityConfig SensibilityConfig;//[Offset: 0x1000, Size: 236]
	bool bSingleShotWeaponShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1164, Size: 1]
	bool bShotGunShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1165, Size: 1]
	int UseMotionControlType;//[Offset: 0x1168, Size: 4]
	bool IsGyroReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116c, Size: 1]
	delegate OnCharacterNearDeathOrRescueingOtherNotifyDelegate;//[Offset: 0x1170, Size: 12]
	delegate OnPlayerEnterFlying;//[Offset: 0x117c, Size: 12]
	delegate OnPlayerChangeViewtargetToPlane;//[Offset: 0x1188, Size: 12]
	delegate OnPlayerExitFlying;//[Offset: 0x1194, Size: 12]
	delegate OnPlayerEnterJumping;//[Offset: 0x11a0, Size: 12]
	delegate OnPlayerExitJumping;//[Offset: 0x11ac, Size: 12]
	delegate OnPlayerEnterParachute;//[Offset: 0x11b8, Size: 12]
	delegate OnPlayerExitParachute;//[Offset: 0x11c4, Size: 12]
	delegate OnPlayerEnterWater;//[Offset: 0x11d0, Size: 12]
	delegate OnPlayerExitWater;//[Offset: 0x11dc, Size: 12]
	delegate OnPlayerEnterFighting;//[Offset: 0x11e8, Size: 12]
	delegate OnPlayerExitFighting;//[Offset: 0x11f4, Size: 12]
	delegate OnPlayerEnterFinished;//[Offset: 0x1200, Size: 12]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0x120c, Size: 12]
	delegate OnPlayerEndReloadWeapon;//[Offset: 0x1218, Size: 12]
	delegate OnTeammateHPChangeDelegate;//[Offset: 0x1224, Size: 12]
	delegate OnShowHideSelfMarkDelegate;//[Offset: 0x1230, Size: 12]
	delegate OnShowAllTeammatePosDelegate;//[Offset: 0x123c, Size: 12]
	delegate OnShowAliasInfoDelegate;//[Offset: 0x1248, Size: 12]
	delegate OnCheckSignalPlaybackDelegate;//[Offset: 0x1254, Size: 12]
	delegate OnEnableSignalSystemChangedDelegate;//[Offset: 0x1260, Size: 12]
	delegate OnCongregationFlagDelegate;//[Offset: 0x126c, Size: 12]
	delegate OnTeamFollowStageChangeDelegate;//[Offset: 0x1278, Size: 12]
	delegate OnCharacterBreathChange;//[Offset: 0x1284, Size: 12]
	delegate OnHideFollowPanelAndBtnDelegate;//[Offset: 0x1290, Size: 12]
	delegate OnTeammateTemperatureChangeDelegate;//[Offset: 0x129c, Size: 12]
	delegate OnRemindTeammateShoot;//[Offset: 0x12a8, Size: 12]
	delegate OnLocalCharacterTemperatureChangeDel;//[Offset: 0x12b4, Size: 12]
	delegate OnCharacterAntidoteChange;//[Offset: 0x12c0, Size: 12]
	delegate OnOneTeamPlayerHPChangeDelegate;//[Offset: 0x12cc, Size: 12]
	delegate OnNightBeggan;//[Offset: 0x12d8, Size: 12]
	delegate OnNightEnded;//[Offset: 0x12e4, Size: 12]
	delegate OnPlayerHitInfoUpdate;//[Offset: 0x12f0, Size: 12]
	delegate OnPlayerSwitchToDeadBox;//[Offset: 0x12fc, Size: 12]
	int SelectedNightRenderConfig;//[Offset: 0x1308, Size: 4]
	delegate OnInitTaskData;//[Offset: 0x130c, Size: 12]
	delegate OnInitCollectionData;//[Offset: 0x1318, Size: 12]
	delegate OnPlayerDoEmote;//[Offset: 0x1324, Size: 12]
	delegate OnPlayerEnterArea;//[Offset: 0x1330, Size: 12]
	delegate OnPlayerKilling;//[Offset: 0x133c, Size: 12]
	delegate OnPickupItem;//[Offset: 0x1348, Size: 12]
	delegate OnDropItem;//[Offset: 0x1354, Size: 12]
	delegate OnDeathBoxSpawned;//[Offset: 0x1360, Size: 12]
	delegate OnTaskConditionActived;//[Offset: 0x136c, Size: 12]
	delegate OnTaskConditionDeactived;//[Offset: 0x1378, Size: 12]
	KillOrPutDownMessage KillOrPutDownMessageData;//[Offset: 0x13a4, Size: 108]
	delegate OnKillOrPutDownMessage;//[Offset: 0x1410, Size: 12]
	delegate OnStartFireEvent;//[Offset: 0x141c, Size: 12]
	delegate OnStopFireEvent;//[Offset: 0x1428, Size: 12]
	delegate OnReleaseFireBtn;//[Offset: 0x1434, Size: 12]
	delegate OnReleaseScreen;//[Offset: 0x1440, Size: 12]
	delegate OnFingerMove;//[Offset: 0x144c, Size: 12]
	delegate OnHandleCameraModeChanged;//[Offset: 0x1458, Size: 12]
	delegate OnSwitchCameraModeStart;//[Offset: 0x1464, Size: 12]
	delegate OnSwitchCameraModeEnd;//[Offset: 0x1470, Size: 12]
	delegate OnPlayerPickUpActor;//[Offset: 0x147c, Size: 12]
	delegate OnPlayerPutDownActor;//[Offset: 0x1488, Size: 12]
	delegate OnPlayerPutDownAllProp;//[Offset: 0x1494, Size: 12]
	delegate OnSwitchWeapon;//[Offset: 0x14a0, Size: 12]
	delegate OnEquipWeaponDel;//[Offset: 0x14ac, Size: 12]
	delegate OnUnequipWeaponDel;//[Offset: 0x14b8, Size: 12]
	delegate OnUseInventoryItem;//[Offset: 0x14c4, Size: 12]
	delegate OnChangeBattleOwnerDel;//[Offset: 0x14d0, Size: 12]
	delegate OnDamageToOther;//[Offset: 0x14dc, Size: 12]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x14e8, Size: 12]
	delegate OnLocalCharacterSignalHPChangeDelegate;//[Offset: 0x14f4, Size: 12]
	delegate OnServerCharacterSignalHPChangeDelegate;//[Offset: 0x1500, Size: 12]
	delegate OnLocalCharacterSignalHPRemaingingTimeDelegate;//[Offset: 0x150c, Size: 12]
	delegate DelegatePlayerGoldChange;//[Offset: 0x1518, Size: 12]
	delegate DelegatePlayerLevelChange;//[Offset: 0x1524, Size: 12]
	delegate OnGameStartCountDownDelegate;//[Offset: 0x1530, Size: 12]
	delegate OnRank;//[Offset: 0x153c, Size: 12]
	delegate OnGameStartDelegate;//[Offset: 0x1548, Size: 12]
	delegate OnPlayerNameChange;//[Offset: 0x1554, Size: 12]
	delegate OnUseMainSlot;//[Offset: 0x1560, Size: 12]
	delegate OnBackpackMainSlot;//[Offset: 0x156c, Size: 12]
	delegate OnRemoveMainSlot;//[Offset: 0x1578, Size: 12]
	delegate OnRepPlayerState;//[Offset: 0x1584, Size: 12]
	delegate OnRepTeammateChange;//[Offset: 0x1590, Size: 12]
	delegate OnRepTeammateAvatarDisplayInfo;//[Offset: 0x159c, Size: 12]
	delegate OnMapMarkChangeDelegate;//[Offset: 0x15ac, Size: 12]
	delegate OnShowSkillPrompt;//[Offset: 0x15b8, Size: 12]
	delegate OnStartAutoSprintCountDown;//[Offset: 0x15c4, Size: 12]
	delegate OnShowAutoSprintButton;//[Offset: 0x15d0, Size: 12]
	delegate OnPlayerChangeWearingDone;//[Offset: 0x15dc, Size: 12]
	delegate OnPlayerChangeWearingAnimFinished;//[Offset: 0x15e8, Size: 12]
	delegate OnPlayerFinalAssistKill;//[Offset: 0x15f4, Size: 12]
	delegate OnConsumableAvatarChange;//[Offset: 0x1600, Size: 12]
	delegate OnEquipmentAvatarChange;//[Offset: 0x160c, Size: 12]
	delegate OnEquipmentWeaponAvatarChange;//[Offset: 0x1618, Size: 12]
	delegate OnGameStateChange;//[Offset: 0x1624, Size: 12]
	delegate OnPlayerKilledOthersPlayer;//[Offset: 0x1630, Size: 12]
	delegate OnChangeCharacterBeforeDelegate;//[Offset: 0x163c, Size: 12]
	delegate OnChangeCharacterLogicDelegate;//[Offset: 0x1648, Size: 12]
	delegate OnInfectionSelectZombieDelegate;//[Offset: 0x1654, Size: 12]
	delegate OnSetChangeCharacterStateDelegate;//[Offset: 0x1660, Size: 12]
	delegate OnCacheRecvInfectionSelectZombie;//[Offset: 0x167c, Size: 12]
	delegate OpenSequencerDelegate;//[Offset: 0x1688, Size: 12]
	STExtraBaseCharacter* tmpAnchorCharacter;//[Offset: 0x16a4, Size: 4]
	delegate OnInterruptAutoSprintCountDown;//[Offset: 0x16a8, Size: 12]
	delegate OnAutoSprintActive;//[Offset: 0x16b4, Size: 12]
	delegate OnTakeDamagedDelegate;//[Offset: 0x16c0, Size: 12]
	delegate OnPostTakeDamageForBP;//[Offset: 0x16e0, Size: 12]
	delegate OnLostConnection;//[Offset: 0x16ec, Size: 12]
	delegate OnReconnected;//[Offset: 0x16f8, Size: 12]
	delegate OnExitGame;//[Offset: 0x1704, Size: 12]
	delegate OnSpectatorChange;//[Offset: 0x1710, Size: 12]
	delegate OnCharacterRecoveryHealth;//[Offset: 0x171c, Size: 12]
	delegate RunOnNextFrameDelegate;//[Offset: 0x1728, Size: 12]
	NewbieGuideComponent* NewbieComponent;//[Offset: 0x1734, Size: 4]
	int MaternalZombieWeight;//[Offset: 0x1738, Size: 4]
	TimeLineSyncComponent* TimeLineSyncComponent;//[Offset: 0x173c, Size: 4]
	TimeWatchDogComponent* TimeWatchDogComponent;//[Offset: 0x1740, Size: 4]
	HiggsBosonComponent* HiggsBosonComponent;//[Offset: 0x1744, Size: 4]
	PlayerAntiCheatManager* AntiCheatManagerComp;//[Offset: 0x1748, Size: 4]
	bool bShouldReportAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174c, Size: 1]
	delegate NewbieShowCurGuide;//[Offset: 0x1920, Size: 12]
	delegate PlayerControllerEnterFightingStateDelegate;//[Offset: 0x192c, Size: 12]
	bool EnableAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x193c, Size: 1]
	bool DisableNewStopFireLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x193d, Size: 1]
	bool UseScreenStopFireCheckOnlyInModeTwo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x193e, Size: 1]
	bool EnableDebugRotatoInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x193f, Size: 1]
	bool EnableDebugRotatoInfoTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1940, Size: 1]
	bool EnableNewUpdateTeamPlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1941, Size: 1]
	bool EnableNetCullingDistOnVeryLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1942, Size: 1]
	float PC_CameraMoveRateX;//[Offset: 0x1944, Size: 4]
	float PC_CameraMoveRateY;//[Offset: 0x1948, Size: 4]
	float Mobile_CameraMoveRateX;//[Offset: 0x194c, Size: 4]
	float Mobile_CameraMoveRateY;//[Offset: 0x1950, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x1954, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x1958, Size: 4]
	bool bUseDisCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x195c, Size: 1]
	CommonCameraModeData NormalCameraModeData;//[Offset: 0x1960, Size: 36]
	CommonCameraModeData NearCameraModeData;//[Offset: 0x1984, Size: 36]
	Vector2D NearCameraModeCameraMoveAdditionalRate;//[Offset: 0x19a8, Size: 8]
	Vector2D NearCameraModeCameraMoveMaxSpeed;//[Offset: 0x19b0, Size: 8]
	AimCameraModeData AimCameraModeData;//[Offset: 0x19b8, Size: 36]
	Vector2D AimCameraModeCameraMoveAdditionalRate;//[Offset: 0x19dc, Size: 8]
	Vector2D AimCameraModeCameraMoveMaxSpeed;//[Offset: 0x19e4, Size: 8]
	CommonCameraModeData PlaneCameraModeData;//[Offset: 0x19ec, Size: 36]
	<byte,CameraViewPitchLimitData> CameraViewPitchLimitDataMap;//[Offset: 0x1a10, Size: 60]
	float MoveCameraMinDistanceThreshold;//[Offset: 0x1a4c, Size: 4]
	float MoveCameraMinTimeThreshold;//[Offset: 0x1a50, Size: 4]
	float MoveCameraMaxDistanceThreshold;//[Offset: 0x1a54, Size: 4]
	<byte,int> PlayerClothLODLevel;//[Offset: 0x1a58, Size: 60]
	enum[] PlayerClothLODAvatarTypeList;//[Offset: 0x1a94, Size: 12]
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa0, Size: 1]
	bool ShouldSpringUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa1, Size: 1]
	Actor* BonfireUIAttachedActor;//[Offset: 0x1aa8, Size: 4]
	bool bShowSuperCodeUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aac, Size: 1]
	byte CurCameraMode;//[Offset: 0x1aad, Size: 1]
	FString BPClassOverrideTag;//[Offset: 0x1ab0, Size: 12]
	FName AutoScopeAimCompName;//[Offset: 0x1ac0, Size: 8]
	float AutoScopeAimTraceDistance;//[Offset: 0x1ac8, Size: 4]
	bool bMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1acc, Size: 1]
	bool bMoveablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1acd, Size: 1]
	bool bMoveableAirborne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ace, Size: 1]
	bool bMoveableLandHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1acf, Size: 1]
	float MoveableLandHardTime;//[Offset: 0x1ad0, Size: 4]
	float CanMoveCDTime;//[Offset: 0x1ad4, Size: 4]
	float CanSprintCDTime;//[Offset: 0x1ad8, Size: 4]
	float SwitchPoseCDTime;//[Offset: 0x1adc, Size: 4]
	float MovealbeSwitchPoseTime;//[Offset: 0x1ae0, Size: 4]
	float AutoSprintRequestCD;//[Offset: 0x1ae4, Size: 4]
	bool bCanGetTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ae8, Size: 1]
	Vector CurScreenMoveSpeed;//[Offset: 0x1aec, Size: 12]
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x1af8, Size: 4]
	float SpecialDeviceRate;//[Offset: 0x1afc, Size: 4]
	<FString,float> SpecialDeviceRateConfigs;//[Offset: 0x1b00, Size: 60]
	bool bIsBattleOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b3c, Size: 1]
	bool bIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b3d, Size: 1]
	bool bIsMeleeAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b3e, Size: 1]
	STExtraBaseCharacter* STExtraBaseCharacter;//[Offset: 0x1b40, Size: 4]
	bool CharacterTouchMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b44, Size: 1]
	bool IsDeadForLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b45, Size: 1]
	ServerHitEnemyReplicatedData ServerHitEnemyReplicatedData;//[Offset: 0x1b48, Size: 8]
	bool bDebugShowYawInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b50, Size: 1]
	float AccumulateYawInput;//[Offset: 0x1b54, Size: 4]
	float LandAfterJumpPlaneDelayMoveTime;//[Offset: 0x1b58, Size: 4]
	bool bLandAfterJumpPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b5c, Size: 1]
	bool bIsLandingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b5d, Size: 1]
	bool bIsNeedCheckPullPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b5e, Size: 1]
	float NoRespondArea;//[Offset: 0x1b60, Size: 4]
	float ComfortableSwipeAddition;//[Offset: 0x1b64, Size: 4]
	bool bIsLeftScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b68, Size: 1]
	bool bIsRightScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b69, Size: 1]
	byte sprintOptType;//[Offset: 0x1b6a, Size: 1]
	float JoystickSprintDisThreshold;//[Offset: 0x1b6c, Size: 4]
	float JoystickSprintDisThresholdNew;//[Offset: 0x1b70, Size: 4]
	float JoystickSprintBtnHeight;//[Offset: 0x1b74, Size: 4]
	int JoystickSprintSensitity;//[Offset: 0x1b78, Size: 4]
	float JoystickSprintAngleThreshold;//[Offset: 0x1b7c, Size: 4]
	bool bIsUseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b80, Size: 1]
	byte JoystickOperatingMode;//[Offset: 0x1b81, Size: 1]
	float EasyGoStraightAngle;//[Offset: 0x1b84, Size: 4]
	bool bIsTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b88, Size: 1]
	<byte,float> TouchForceMap;//[Offset: 0x1b8c, Size: 60]
	float TouchForceFireThreshold;//[Offset: 0x1bc8, Size: 4]
	float DoubleClickFireTimeThreshold;//[Offset: 0x1bcc, Size: 4]
	float DoubleClickFireDistanceThreshold;//[Offset: 0x1bd0, Size: 4]
	float DoubleClickCancelDistanceThreshold;//[Offset: 0x1bd4, Size: 4]
	int TouchForceWatchFrame;//[Offset: 0x1bd8, Size: 4]
	bool bUseTouchForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bdc, Size: 1]
	float InputTouchRepeatLastTime;//[Offset: 0x1be0, Size: 4]
	byte TouchFireType;//[Offset: 0x1be4, Size: 1]
	float TestForce;//[Offset: 0x1be8, Size: 4]
	delegate On3DTouchForceChange;//[Offset: 0x1bec, Size: 12]
	delegate OnDoubleClickCheck;//[Offset: 0x1bf8, Size: 12]
	bool bIsAutoAimOnlyInTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c04, Size: 1]
	bool bIsAutoAimOnlyOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c05, Size: 1]
	bool bMoveInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c06, Size: 1]
	bool bAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c07, Size: 1]
	float AutoSprintBtnTime;//[Offset: 0x1c08, Size: 4]
	float AutoSprintWaitingTime;//[Offset: 0x1c0c, Size: 4]
	float AutoSprintThreshold;//[Offset: 0x1c10, Size: 4]
	float JoystickTriggerSprintDuration;//[Offset: 0x1c14, Size: 4]
	float InHouseSpringArmLengthModifier;//[Offset: 0x1c18, Size: 4]
	float InHouseSpringArmLengthModifierChangeSpeed;//[Offset: 0x1c1c, Size: 4]
	bool IsPlayerUnableToDoAutoSprintOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c20, Size: 1]
	float CurrentCameraFOV;//[Offset: 0x1c24, Size: 4]
	float MinFovChangeView;//[Offset: 0x1c28, Size: 4]
	WeaponSystemReconnectReplicateData WeaponSystemReconnectReplicateData;//[Offset: 0x1c30, Size: 40]
	int GameTipMsgID;//[Offset: 0x1c58, Size: 4]
	FString GameTipParam1;//[Offset: 0x1c5c, Size: 12]
	FString GameTipParam2;//[Offset: 0x1c68, Size: 12]
	float AutoSprintCD;//[Offset: 0x1cb0, Size: 4]
	<uint32,TeamMateStateInfo> TeamMateStates;//[Offset: 0x1cb4, Size: 60]
	<byte,TeamMateStateInfo> DoubleClickLastTouchInfoMap;//[Offset: 0x1cf0, Size: 60]
	<byte,TeamMateStateInfo> DoubleClickCurTouchInfoMap;//[Offset: 0x1d2c, Size: 60]
	bool bEnableSignalBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d6c, Size: 1]
	class GameMode[] AdditionalSignalBarDisplayGameModes;//[Offset: 0x1d70, Size: 12]
	delegate OnReceiveHasSignal;//[Offset: 0x1d7c, Size: 12]
	Transform FPPCameraLerpStartTransformRelative;//[Offset: 0x1db0, Size: 48]
	CurveFloat* CurveFPPCameraLerp;//[Offset: 0x1e78, Size: 4]
	CameraComponent* PreActiveCameraCache;//[Offset: 0x1e7c, Size: 4]
	CameraComponent* CurrentActiveCameraCache;//[Offset: 0x1e80, Size: 4]
	SpringArmComponent* CurrentActiveSpringArmCache;//[Offset: 0x1e84, Size: 4]
	PlayerTombBox* DeadTombBox;//[Offset: 0x1e94, Size: 4]
	FString[] ForbitPickList;//[Offset: 0x1ea0, Size: 12]
	bool bForbitPickupEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1eb8, Size: 1]
	int pickupPlayerChoice;//[Offset: 0x1ebc, Size: 4]
	bool bCanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec0, Size: 1]
	bool bShouldDisplayHitFinalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec1, Size: 1]
	float RescueRemainingSeconds;//[Offset: 0x1ec4, Size: 4]
	float RescueTotalSeconds;//[Offset: 0x1ec8, Size: 4]
	bool IsCurrentSpectatorFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ecc, Size: 1]
	float FreeViewUpRate;//[Offset: 0x1ed0, Size: 4]
	byte MaxTouchMoveDelayFrame;//[Offset: 0x1ed4, Size: 1]
	int MaxCacheInputSpeedNum;//[Offset: 0x1ed8, Size: 4]
	bool bBleFreeCameraUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1edc, Size: 1]
	bool IsCatchUpByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1edd, Size: 1]
	Vector PreMonsterCatchUpPos;//[Offset: 0x1ee0, Size: 12]
	TeamateStateUAVChangedCompressData TeammateUAVStateChangeCompressedData;//[Offset: 0x1eec, Size: 20]
	bool isPressingBtn_AimAndFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f00, Size: 1]
	byte CurTouchAimAndFireFingerIndex;//[Offset: 0x1f01, Size: 1]
	bool bOpeningBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f02, Size: 1]
	bool DiedisableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f03, Size: 1]
	byte CurSightZoomFingerIndex;//[Offset: 0x1f4c, Size: 1]
	byte CurAimFireFingerIndex;//[Offset: 0x1f4d, Size: 1]
	byte ValidTouchMove;//[Offset: 0x1f88, Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x1fb4, Size: 4]
	BackpackComponent* BackpackComponent;//[Offset: 0x2040, Size: 4]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x2044, Size: 4]
	ChatComponent* ChatComponent;//[Offset: 0x2048, Size: 4]
	GuideComponent* GuideComponent;//[Offset: 0x204c, Size: 4]
	QuickSignComponent* QuickSignComponent;//[Offset: 0x2050, Size: 4]
	BaseTaskComponent* TaskComponent;//[Offset: 0x2054, Size: 4]
	delegate ClientObserveCharacterDelegate;//[Offset: 0x205c, Size: 12]
	bool bEnableDeathPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2075, Size: 1]
	int8 bEnableDeathPlaybackDelay;//[Offset: 0x2076, Size: 1]
	int[] ObserveReplicateItems;//[Offset: 0x2078, Size: 12]
	delegate OnOBPlayerItemChangedDelegate;//[Offset: 0x2084, Size: 12]
	delegate OnOBPlayerWeaponChangedDelegate;//[Offset: 0x2090, Size: 12]
	delegate OnOBPlayerBulletChangedDelegate;//[Offset: 0x209c, Size: 12]
	delegate OnViewTargetAttachedToVehicleDelegate;//[Offset: 0x20a8, Size: 12]
	delegate OnViewTargetDetachedFromVehicleDelegate;//[Offset: 0x20b4, Size: 12]
	BattleItemData[] ObservedItemList;//[Offset: 0x20dc, Size: 12]
	bool bIsSendingObserveReq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20e8, Size: 1]
	uint32[] FiringPlayerList;//[Offset: 0x2184, Size: 12]
	delegate OnViewTargetPoseChangedDelegate;//[Offset: 0x2190, Size: 12]
	delegate OnAboutToChangeViewTarget;//[Offset: 0x219c, Size: 12]
	delegate OnFinishedChangeViewTarget;//[Offset: 0x21a8, Size: 12]
	delegate OnCharacterStatesChange;//[Offset: 0x21b4, Size: 12]
	FriendObserver[] FriendObserverDetails;//[Offset: 0x21c0, Size: 12]
	bool bShowWhoObservingMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21cc, Size: 1]
	delegate ObservedTargetDieDelegate;//[Offset: 0x21d0, Size: 12]
	float GotoSpectatingDelayTime;//[Offset: 0x21e0, Size: 4]
	PlayerBaseInfoInOB[] TotalPlayers;//[Offset: 0x21e4, Size: 12]
	PlayerInfoInOB[] TotalPlayerList;//[Offset: 0x21f0, Size: 12]
	PlayerInfoInOB[] TotalPlayerList_SortedByTeamID;//[Offset: 0x21fc, Size: 12]
	PlayerInfoInOB[] NearPlayerList;//[Offset: 0x2208, Size: 12]
	<FString,AllStarReportData> AllStarReportInfoCache;//[Offset: 0x2214, Size: 60]
	PlayerInfoInOB[] SameTeamPlayerList;//[Offset: 0x2250, Size: 12]
	<int,TeamInfoInOB> TeamInfoMap;//[Offset: 0x225c, Size: 60]
	ObservedData ObservedData;//[Offset: 0x2298, Size: 72]
	delegate OnSignalHPChanged;//[Offset: 0x22ec, Size: 12]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22fd, Size: 1]
	AirDropBoxInOb[] AirDropBoxList;//[Offset: 0x2300, Size: 12]
	delegate OnToggleOBMapShowHide;//[Offset: 0x2310, Size: 12]
	delegate OnInterruptGameButtonShow;//[Offset: 0x231c, Size: 12]
	delegate OnToggleOBPlayerList;//[Offset: 0x2330, Size: 12]
	delegate OnSwitchToPlayerByNumPressed;//[Offset: 0x233c, Size: 12]
	delegate OnSwitchToTeamByNumPressed;//[Offset: 0x2348, Size: 12]
	delegate OnToggleOBTeamList;//[Offset: 0x2354, Size: 12]
	delegate WeaponEquipAttachment;//[Offset: 0x2360, Size: 12]
	delegate OnVehicleExitFreeCamera;//[Offset: 0x236c, Size: 12]
	delegate OnFreeViewChangedDelegate;//[Offset: 0x2378, Size: 12]
	delegate OnOBVehicleViewChangedDelegate;//[Offset: 0x2384, Size: 12]
	float OBTPPFreeViewArmLengthMax;//[Offset: 0x23a0, Size: 4]
	float OBTPPFreeViewArmLengthMin;//[Offset: 0x23a4, Size: 4]
	bool IsSmoothlyVehicleViewSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23b4, Size: 1]
	bool NeedCheckChangeToVehicleView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23b5, Size: 1]
	CurveVector* OBVehicleViewArmOffset;//[Offset: 0x23b8, Size: 8]
	int OBVehicleViewAcceRecordsNum;//[Offset: 0x23c0, Size: 4]
	class CameraShake* OnHitCameraShake;//[Offset: 0x23d0, Size: 4]
	CurveVector* OBVehicleImpulseClamp;//[Offset: 0x23dc, Size: 8]
	CurveFloat* OBVehicleImpulseRollClamp;//[Offset: 0x23e4, Size: 8]
	float CurrentOBVehicleViewArmLength;//[Offset: 0x23ec, Size: 4]
	float OBVehicleViewArmLengthMax;//[Offset: 0x23f0, Size: 4]
	float OBVehicleViewArmLengthMin;//[Offset: 0x23f4, Size: 4]
	Vector OBVehicleRelativeLocation;//[Offset: 0x23f8, Size: 12]
	float OBVehicleViewFOV;//[Offset: 0x2404, Size: 4]
	float fPlayerAliasInfoDistanceLimit;//[Offset: 0x2408, Size: 4]
	byte iPlayerAliasInfoCount;//[Offset: 0x240c, Size: 1]
	bool IsCharacterInitFlushStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240d, Size: 1]
	bool IsAutoGetCircleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240e, Size: 1]
	delegate OnCharacterReceiveHealthChangeHistory;//[Offset: 0x2410, Size: 12]
	int FireMode;//[Offset: 0x241c, Size: 4]
	bool bNotMoveFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2420, Size: 1]
	bool bAlreadyFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2421, Size: 1]
	bool bFireNotToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2422, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2423, Size: 1]
	STExtraBaseCharacter*[] nowNearCharacterList;//[Offset: 0x2424, Size: 12]
	STExtraVehicleBase*[] nowNearVehicleList;//[Offset: 0x2430, Size: 12]
	STExtraVehicleBase*[] nowNearBlowVehicleList;//[Offset: 0x243c, Size: 12]
	STExtraShootWeapon*[] nowShotWeaponList;//[Offset: 0x2448, Size: 12]
	STExtraShootWeapon*[] nowOneShotWeaponList;//[Offset: 0x2454, Size: 12]
	Actor*[] nowGrenadeList;//[Offset: 0x2460, Size: 12]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x246c, Size: 1]
	delegate triggerVoiceCheckDelegate;//[Offset: 0x2470, Size: 12]
	delegate triggerMoveVoiceCheckDelegate;//[Offset: 0x247c, Size: 12]
	delegate triggerShotVoiceCheckDelegate;//[Offset: 0x2488, Size: 12]
	delegate triggerVehicleVoiceCheckDelegate;//[Offset: 0x2494, Size: 12]
	delegate triggerGlassVoiceCheckDelegate;//[Offset: 0x24a0, Size: 12]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24ad, Size: 1]
	delegate OnPlayerCanJump;//[Offset: 0x24b0, Size: 12]
	delegate OnPlayerCannotJump;//[Offset: 0x24bc, Size: 12]
	bool bCanOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c8, Size: 1]
	delegate OnPlayerCanOpenParachute;//[Offset: 0x24cc, Size: 12]
	delegate OnPlayerCannotOpenParachute;//[Offset: 0x24d8, Size: 12]
	bool bCanCloseParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e4, Size: 1]
	float PlaneFlyHeightFromGameMode;//[Offset: 0x24e8, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x24ec, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x24f0, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x24f4, Size: 4]
	float RealTimePawnHeight;//[Offset: 0x24f8, Size: 4]
	float OB_RotationLagSpeed;//[Offset: 0x2508, Size: 4]
	OwnerClientCreateWeaponCache OwnerClientCreateWeaponCache;//[Offset: 0x2524, Size: 20]
	WeaponMgrInfo[] SpawnAndBackpackWeaponReplicatedDataWithMgr;//[Offset: 0x2538, Size: 12]
	Actor* ThePlane;//[Offset: 0x2544, Size: 4]
	float GameAssistantJoyStickOpacity;//[Offset: 0x2550, Size: 4]
	delegate OnNotifyServerOpenPickUpBox;//[Offset: 0x2554, Size: 12]
	delegate OnNotifyServerFirstOpenPickUpBox;//[Offset: 0x2560, Size: 12]
	delegate OnNotifyServerOpenAnyPickUpBox;//[Offset: 0x256c, Size: 12]
	bool bClientCheckResetViewTargetToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2578, Size: 1]
	float ClientCheckResetViewTargetToCharacterConfigSeconds;//[Offset: 0x257c, Size: 4]
	STExtraWeapon*[] TargetClientWeaponWaitForReconnectList;//[Offset: 0x2594, Size: 12]
	class KillerTracker* KillerTrackerTemplate;//[Offset: 0x25a8, Size: 4]
	FString LastBreathMurder;//[Offset: 0x25b0, Size: 12]
	bool LastBreathMurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25bc, Size: 1]
	uint64 LastBreathMurderUID;//[Offset: 0x25c0, Size: 8]
	VehicleUserComponent* VehicleUserComp;//[Offset: 0x25c8, Size: 4]
	FString murderName;//[Offset: 0x25cc, Size: 12]
	FString FinalMurderName;//[Offset: 0x25d8, Size: 12]
	uint64 MurderUID;//[Offset: 0x25e8, Size: 8]
	bool MurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f0, Size: 1]
	bool LastBreathMurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f1, Size: 1]
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f2, Size: 1]
	<class Object,ImpactMapValueData> ImpactEffectCachedListSimulateMap;//[Offset: 0x2638, Size: 60]
	<class Object,ImpactMapValueData> ImpactEffectCachedListLocalMap;//[Offset: 0x2674, Size: 60]
	float OceanSideDetectDistance;//[Offset: 0x26b8, Size: 4]
	float OceanSideDetectInterval;//[Offset: 0x26bc, Size: 4]
	int CurrOBAirDropID;//[Offset: 0x26c0, Size: 4]
	<byte,FString> EndTouchScreenCommandMap;//[Offset: 0x26c4, Size: 60]
	bool bCanRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2700, Size: 1]
	AkAudioEvent* HitVehicleSound;//[Offset: 0x27d4, Size: 4]
	bool bIsPressingFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d8, Size: 1]
	FString ClientActivePlatformProfileName;//[Offset: 0x27dc, Size: 12]
	float ZMoveDisCalcThreshold;//[Offset: 0x2824, Size: 4]
	bool bDebugDrawHUDCrossLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2828, Size: 1]
	StateMachineComponent* NewStateMachineComp;//[Offset: 0x282c, Size: 4]
	bool ExitFromHelicopterParachuteJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2830, Size: 1]
	enum ServerStateType;//[Offset: 0x2831, Size: 1]
	enum ClientStateType;//[Offset: 0x2832, Size: 1]
	enum GameStateMsgType;//[Offset: 0x2833, Size: 1]
	bool bSwitchesInMapsExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284c, Size: 1]
	bool bIsEnterBattleResultStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284d, Size: 1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284e, Size: 1]
	float ObservingTime;//[Offset: 0x2850, Size: 4]
	KillerTracker* tracker;//[Offset: 0x2854, Size: 4]
	bool bEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2868, Size: 1]
	bool bEnableOBBulletTrackEffectSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2869, Size: 1]
	MonsterTreasureBox* CurHUDMonsterTreasureBox;//[Offset: 0x28b4, Size: 4]
	FString DefaultHUDClassPath;//[Offset: 0x28b8, Size: 12]
	delegate OnClientReportPeerVisualFieldAcotrList;//[Offset: 0x28d8, Size: 12]
	STExtraPlayerController* DieInstigator;//[Offset: 0x28e4, Size: 4]
	bool IsImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28e8, Size: 1]
	bool IsCharacterDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28e9, Size: 1]
	AvatarCapture* AvatarCaptureInfo;//[Offset: 0x28ec, Size: 4]
	int BOptimizeBulletHit;//[Offset: 0x28f0, Size: 4]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x28f4, Size: 56]
	FootprintActorInfo[] FootprintActorInfo;//[Offset: 0x292c, Size: 12]
	int MaxTeamFootprintCount;//[Offset: 0x2938, Size: 4]
	int MaxOtherFootprintCount;//[Offset: 0x293c, Size: 4]
	<enum,FootprintActorBlock> FootprintActorLookupTable;//[Offset: 0x2940, Size: 60]
	<class Object,TrailMarkActorBlock> TrailMarkActorLookupTable;//[Offset: 0x297c, Size: 60]
	IdeaDecalManager* IdeaDecalManager;//[Offset: 0x29bc, Size: 4]
	MaterialInstanceDynamic*[] BloodDecalMaterials;//[Offset: 0x29c0, Size: 12]
	<int,BackpackDecalHandle*> LocalDecalHandleMap;//[Offset: 0x29cc, Size: 60]
	SupplySpot* CurrentSupplySpot;//[Offset: 0x2a20, Size: 4]
	EnhancerSpot* CurrentEnhancerSpot;//[Offset: 0x2a24, Size: 4]
	PlayerRevivalComponent* PlayerRevivalComp;//[Offset: 0x2a28, Size: 4]
	delegate OnPlayerEnterRevivalStateDelegate;//[Offset: 0x2a54, Size: 12]
	delegate OnPlayerLeaveRevivalStateDelegate;//[Offset: 0x2a60, Size: 12]
	delegate SetCaptureIDCardStatusDelegate;//[Offset: 0x2a70, Size: 16]
	delegate OnPlayerExitGameDelegate;//[Offset: 0x2a80, Size: 12]
	delegate OnEnterVehicleDelegate;//[Offset: 0x2a9c, Size: 12]
	delegate ClientOnEnterVehicle;//[Offset: 0x2aa8, Size: 12]
	delegate ClientOnLeaveVehicle;//[Offset: 0x2ab4, Size: 12]
	delegate ClientOnChangeVehicleSeatCompletedDelegate;//[Offset: 0x2ac0, Size: 12]
	delegate OnVehicleWeaponIsReadyForFireDelegate;//[Offset: 0x2acc, Size: 12]
	delegate ClientOnDeathReplayDataWhenFatalDamagedDelegate;//[Offset: 0x2ad8, Size: 12]
	bool bEnableClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ae4, Size: 1]
	bool bClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ae5, Size: 1]
	float ControllerRelativeYawMin;//[Offset: 0x2ae8, Size: 4]
	float ControllerRelativeYawMax;//[Offset: 0x2aec, Size: 4]
	RevivalPointActor* CurOperatePlayerRevivalPoint;//[Offset: 0x2af8, Size: 8]
	int IdCardMarkType;//[Offset: 0x2b04, Size: 4]
	bool DisableJoystickMultiControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b24, Size: 1]
	int VehicleControlMode;//[Offset: 0x2b28, Size: 4]
	bool VehicleJoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2c, Size: 1]
	delegate InfectionShowKillNumDelegate;//[Offset: 0x2b30, Size: 12]
	delegate InfectionPlayerPawnInitType;//[Offset: 0x2b3c, Size: 12]
	float StreamingDistanceScaleFlying;//[Offset: 0x2b48, Size: 4]
	bool bIsPlayerInWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4c, Size: 1]
	delegate OnPlayerInOutWhiteCircleChangedDelegate;//[Offset: 0x2b50, Size: 12]
	bool bIsPlayerOutBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5c, Size: 1]
	delegate OnPlayerInOutBlueCircleChangedDelegate;//[Offset: 0x2b60, Size: 12]
	float MoveDistanceThreshold;//[Offset: 0x2b6c, Size: 4]
	float SpeedRecordTime;//[Offset: 0x2b70, Size: 4]
	float SpeedRecordAccTime;//[Offset: 0x2b74, Size: 4]
	delegate OnSelfPawnDeathDelegate;//[Offset: 0x2b78, Size: 12]
	delegate OnChangeToWalkingDead;//[Offset: 0x2b84, Size: 12]
	bool bCanChangeToWalkingDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b90, Size: 1]
	delegate OnNotifyCanChangeToWalkingDead;//[Offset: 0x2b94, Size: 12]
	delegate OnChangeToWalkingDeadRes;//[Offset: 0x2ba0, Size: 12]
	bool GMDisableLeftScreenControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bac, Size: 1]
	bool IsJoystickInLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bad, Size: 1]
	delegate OnWeakGuidEventDelegate;//[Offset: 0x2bb0, Size: 12]
	delegate OnStopWeakGuidDelegate;//[Offset: 0x2bbc, Size: 12]
	delegate OnEnableGuidActorDelegate;//[Offset: 0x2bc8, Size: 12]
	delegate OnInfectionShowTipMsgDelegate;//[Offset: 0x2bd4, Size: 12]
	delegate OnInfectionPlaySoundEventDelegate;//[Offset: 0x2be0, Size: 12]
	class DamageType* GiveupDamageTypeClass;//[Offset: 0x2bec, Size: 4]
	uint32 LastKillerKey;//[Offset: 0x2bf0, Size: 4]
	bool bAAlOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bf4, Size: 1]
	bool bIsBackPackPanelOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bf5, Size: 1]
	bool bUseAntiDataReportFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c00, Size: 1]
	bool bUseAntiDataReportFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c01, Size: 1]
	bool bUseAntiDataReportFilterCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c02, Size: 1]
	float LastReportAntiDataTime;//[Offset: 0x2c04, Size: 4]
	delegate RefreshPickupFlagStatusDelegate;//[Offset: 0x2c08, Size: 12]
	delegate OnRevivalAndEnterAirplane;//[Offset: 0x2c14, Size: 12]
	delegate OnSpawnVehicleServerTimeUpdatedDelegate;//[Offset: 0x2c20, Size: 12]
	bool bDisableTouchMoveInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c2c, Size: 1]
	delegate OnPlayerControllerStateChangedDelegate;//[Offset: 0x2c30, Size: 12]
	delegate OnPlayerNumOnPlaneChangedDelegate;//[Offset: 0x2c3c, Size: 12]
	delegate OnReconnectResetUIByPlayerControllerStateDelegate;//[Offset: 0x2c48, Size: 12]
	delegate OnMemberVoiceDelegate;//[Offset: 0x2c54, Size: 12]
	delegate HideAllUIAfterDeadTipsShowDelegate;//[Offset: 0x2c60, Size: 12]
	Actor* InteractiveActor;//[Offset: 0x2c6c, Size: 4]
	delegate OnVehicleWarKilledTrackerStartDelegate;//[Offset: 0x2c70, Size: 12]
	delegate OnVehicleWarKilledTrackerFinishDelegate;//[Offset: 0x2c7c, Size: 12]
	delegate OnVehicleWarVehicleRepawnDelegate;//[Offset: 0x2c88, Size: 12]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0x2c94, Size: 12]
	FloatingTextComponent* FloatingTextComp;//[Offset: 0x2ca0, Size: 4]
	delegate OnTouchInterfaceChangedDelegate;//[Offset: 0x2cb8, Size: 12]
	<byte,ParachuteAnimAssetData> ParachuteAnimAssetCache;//[Offset: 0x2cc4, Size: 60]
	enum CurrentWeaponFunction;//[Offset: 0x2d00, Size: 1]
	float WeaponFunctionChangingInterval;//[Offset: 0x2d04, Size: 4]
	bool bWeaponFunctionIsChanging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d08, Size: 1]
	float WeaponFunctionLastChangingTime;//[Offset: 0x2d0c, Size: 4]
	WeatherConfigComponent* WeatherConfigComponent;//[Offset: 0x2d10, Size: 4]
	DynamicWeatherExMgr* DynamicWeatherExMgr;//[Offset: 0x2d14, Size: 4]
	bool bDstWeather;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d20, Size: 1]
	bool bDstWeatherFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d30, Size: 1]
	delegate OnIndoorStateChangeDelegate;//[Offset: 0x2d34, Size: 12]
	double LastFlyLeapPlatfromTime;//[Offset: 0x3320, Size: 8]
	bool bEnableDSErrorLogReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3364, Size: 1]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3365, Size: 1]
	<int,int> ActivitdedIDMap;//[Offset: 0x3368, Size: 60]
	WeaponHitDetailInfo ShowWeaponHitDetailInfo;//[Offset: 0x33b8, Size: 16]
	WeaponHitDetailInfo CacheWeaponHitDetailInfo;//[Offset: 0x33c8, Size: 16]
	LastGameRemainItemData LastGameRemainItemData;//[Offset: 0x33d8, Size: 48]
	bool bAddMovementTickInSpect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3408, Size: 1]
	bool bIsOpenGraySceneOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340a, Size: 1]
	bool bSceneIsGrayOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340b, Size: 1]
	float FadeGrayInterpSpeed;//[Offset: 0x340c, Size: 4]
	<int,enum> PlayerAvatarHideState;//[Offset: 0x3410, Size: 60]
	float ParachuteSlideReportDuration;//[Offset: 0x344c, Size: 4]
	float ParachuteReportLocationDiffSq;//[Offset: 0x3450, Size: 4]
	ParachuteData ParachuteData;//[Offset: 0x3458, Size: 128]
	float TrustClientSinceEnterParachuteJump;//[Offset: 0x34dc, Size: 4]
	VehicleMoveDragData DragData;//[Offset: 0x34e4, Size: 24]
	float ReportSimulatedDragInterval;//[Offset: 0x34fc, Size: 4]
	void VW_Seat(int change);// 0x21fb034
	void ViewVehicle(float YawAdd, float PitchAdd, Vector Loc);// 0x21faf30
	void ViewPlane();// 0x21faf1c
	void VehicleWarOpenSequencerDelegate__DelegateSignature(out const BattleOpenSequencerInfo SequencerInfo);// 0x2bb69b8
	void VehicleWarFireTakeDamagedEvent(Vector CauserLocation);// 0x21faeac
	void VehicleResetTo(float X, float Y, float Z);// 0x21fadac
	void VehicleMoveTo(float X, float Y, float Z);// 0x21facac
	void UseZombieModeSkill();// 0x21fac98
	void UserDropItemOperation(ItemDefineID DefineID);// 0x21fac10
	void UseItem(int ID);// 0x21fab98
	void UpdateSurfboardUI();// 0x21fab84
	void UpdateSelfRevivalCountdown(int CurCountdown);// 0x21fab04
	void UpdatePoseViewPitchLimit();// 0x21faaf0
	void UpdatePoseState(byte PoseType);// 0x21faa78
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x21fa9b0
	void UnPossess();// 0x21fa994
	void UnLoadAllCollision(bool Unload);// 0x21fa914
	void TryReqMoveToTarget(int FollowType, FString FollowUID);// 0x21fa774
	void TriggerVehicleVoiceCheckFuction(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x21fa4c4
	void TriggerShotVoiceCheckFuction(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x21fa5cc
	void TriggerMoveVoiceCheckFuction(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x21fa4c4
	void TriggerHunterRevival();// 0x21fa4b0
	void TriggerGlassVoiceCheckFuction(Vector posVector, float showTime);// 0x21fa3f4
	void TouchMove(Vector Loc, byte FingerIndex);// 0x21fa338
	bool TouchEnd(byte PressType);// 0x21fa2b8
	void TouchBegin(byte PressType);// 0x21fa240
	void ToggleVehicleSync(bool Val);// 0x1f5da78
	void ToggleUserCmdDeltaSendAck(bool Val);// 0x1f5da78
	void ToggleUserCmdDeltaFlag(bool Val);// 0x1f5da78
	void ToggleUserCmdDeltaCheckSum(bool Val);// 0x1f5da78
	void ToggleUserCmdDelta(bool Val);// 0x1f5da78
	void ToggleServerAcknowledgePossession(bool Val);// 0x1f5da78
	void ToggleOBVehicleView();// 0x21fa22c
	void ToggleOBTPPFollowFreeView();// 0x21fa218
	void ToggleEnableOBBulletTrackEffectSetting(bool bEnable);// 0x21fa198
	void ToggleCheatLocation(bool Val);// 0x1f5da78
	void TestMapMarkClient(int inAlertID, int IconID, int testFuncIndex);// 0x21fa098
	void TestLowProbCircle(bool UseLowProb, int LoopCount);// 0x21f9fd0
	void TestLaunchFly(float Speed);// 0x21f9f58
	void TestAutoMoveToShootingMachine();// 0x21f9f44
	void TestAutoMoveToLocation(float X, float Y, float Z);// 0x21f9e44
	void TestAutoMoveToCharacter(FString TargetPlayerUID);// 0x21f9cec
	void TempleStopMoving();// 0x21f9cd8
	void TempleStartMoving();// 0x21f9cc4
	void TempleSpawnBoss();// 0x21f9cb0
	void TempleDisappear();// 0x21f9c9c
	void TeleportToTemple(byte bOutCollisionTeleportPoint);// 0x21f9c24
	void TeleportAIToLoc(float X, float Y, float Z);// 0x21f9b24
	void TeamNoAlwaysRelevant();// 0x21f9b10
	void TeamMateUAVStateChanged(STExtraPlayerState* STPlayerState, TeamateStateUAVChangedCompressData ChangedCompressedData);// 0x21f9a34
	void TeamMateStateChangedZNQ(STExtraPlayerState* STPlayerState, Vector_NetQuantize100 Location, uint32 View, byte Roll, float Health, float HealthMax, int VoiceID);// 0x21f980c
	void TeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector_NetQuantize100 Location, uint32 View, byte Roll, float Health, int VoiceID);// 0x21f962c
	void SwitchViewTarget();// 0x1ee1bb4
	void SwitchToTeamByNumPressed();// 0x21f9618
	void SwitchToPlayerByNumPressed();// 0x21f9604
	void SwitchToDeadBox();// 0x21f95f0
	void SwitchShowUI();// 0x21f95dc
	void SwitchPoseStateServer(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x21f94e0
	void SwitchPoseStateFailedResponse(STExtraBaseCharacter* TargetCharacter, byte FailedPoseState, byte CurPoseState, enum FailReason);// 0x21f9390
	void SwitchPoseStateClient(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x21f92cc
	void SwitchMouseCursorShowState();// 0x21f92b8
	void SwitchGenerateItem();// 0x21f925c
	void SwitchCameraModeScope(byte Mode, STExtraBaseCharacter* InCharacter);// 0x21f91a0
	void SwitchCameraModeByOrder();// 0x21f918c
	void SwitchCameraMode(byte Mode, STExtraBaseCharacter* InCharacter, bool IsUseLerpFPP, bool IsForceSwitch);// 0x21f9030
	void SwapWeaponByPropSlotOnServer(byte Slot1, byte Slot2, bool bForce);// 0x21f8f28
	void StopBuildingMode(bool HideUI, bool ShrinkMenu);// 0x21f8e50
	void StopAbsorb();// 0x21f8df4
	void StartReadyCountDown();// 0x21f8de0
	void StartLandOnGroundAfterJumpPlane();// 0x21f8dcc
	void StartInputCameraMoveTest(bool bIsStartInputCameraMoveTest, bool bIsStartTestAllTime, float IntervalTime);// 0x21f8cb4
	void StartGame();// 0x21f8ca0
	void StartFreeCamera(byte FigerIndex);// 0x21f8c28
	void StartAirDropSpecified(float X, float Y);// 0x21f8b6c
	void StartAirDropBackupEnter(float X, float Y, int MaxPlaneNum);// 0x21f8a6c
	void StartAirDrop(int Index);// 0x21f89f4
	void StartAirAttackSpecified(float X, float Y, float Radius);// 0x21f88f4
	void StartAirAttack(int Index);// 0x21f887c
	void SpectatorCameraChange_Broadcast(bool bDie);// 0x21f87b4
	void SpawnVehicleWithPath(FString Path, int Num);// 0x21f86b4
	void SpawnVehicle();// 0x21f86a0
	void SpawnFloatingTemple();// 0x21f868c
	void SpawnAllVehicle(FString Path);// 0x21f85d0
	void SpawnAITeam(int Num, int AITeamID, byte Difficulty);// 0x21f84d0
	void SpawnAI(int Num, bool bSpawnAll);// 0x21f840c
	void SpawnActorWithPath(FString Path, float X, float Y, float Z);// 0x21f8280
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x21f8208
	bool SkipChangeViewTarget();// 0x21f81d8
	void ShutDownItemGenerate(bool IsOpen);// 0x21f8158
	void ShowWeaponRecordInfo();// 0x1ee1bb4
	void ShowVaultEnable();// 0x213b3e4
	void ShowStringMsg(const FString Message, FString FromPlayerName, int MsgID);// 0x21f7ea4
	void ShowResultWeaponRecordInfo();// 0x1ee1bb4
	void ShowPoints(const Vector[] Points, const Color Color, float LifeTime);// 0x21f7d60
	void ShowOpenSequence(float Time);// 0x21f7ce8
	void ShowNavOperator();// 0x21f7cd4
	void ShowMovePath(const Vector[] Path);// 0x21f7c10
	void ShowGameTips(int TipsID, FString Params);// 0x21f7b08
	void ShowFireBtn(bool bShow);// 0x2bb69b8
	void ShowBulletShoot(Vector StartLoc, Rotator Rot);// 0x21f7a40
	void ShowAnimationButton(bool IsShow, int NewUIType);// 0x21f7970
	void ShowAllRoles();// 0x1ee1bb4
	bool ShouldSendFatalDamageToClient(UAECharacter* Causer, UAECharacter* Victim);// 0x21f78a4
	bool ShouldForceFPPView(STExtraPlayerCharacter* InCharacter);// 0x21f7824
	void SetVirtualStickVisibility(bool bJSVisiable);// 0x21f77a4
	void SetVirtualStickAutoSprintStatus(bool bVirtualstickAutoSprint);// 0x21f7724
	void SetVirtualJoystickWidgetRender(enum Visible);// 0x21f76ac
	void SetViewYawLimit(float YawMin, float YawMax);// 0x21f75f0
	void SetViewTargetTest(Actor* NewViewTarget);// 0x21f7578
	void SetVehicleWeakTickEnable(bool InVal);// 0x21f74f8
	void SetUAETriggerEnable(bool IsEnbale);// 0x21f7478
	void SetTimeSpeedFactor(float Val);// 0x1fa0fcc
	void SetTimeSpeedCheck(bool Val);// 0x1f5da78
	void SetTeammateForbitPick(bool bForbit, int LogType);// 0x21f7368
	void SetStateLeftTime(int leftTime);// 0x21f72f0
	void SetSpeed(float Modifier);// 0x21f7278
	void SetSnowBoradRotationInAir(float Pitch, float Yaw, float Roll);// 0x21f7178
	void SetSkillFingerIndex(byte FingerIndex);// 0x21f7100
	void SetSingleThreadUpdateAnim(bool InIsSingleThread);// 0x21f7080
	void SetShoulderFingerIndex(bool TouchBegin, byte FingerIndex);// 0x21f6fb8
	void SetServerLevelLoadingMode(bool bNewLoadAll);// 0x1f5da78
	void SetScopeFingerIndex(bool TouchBegin, byte FingerIndex);// 0x21f6ef0
	void SetPlayerTeamBodyInstMask(int Mask);// 0x21f6e78
	void SetPlayerMark(Vector Loc);// 0x21f6dcc
	void SetPlayerMapMultiMark(Vector NewLoc, bool bAdd, int MaxNum, bool bClearAll);// 0x21f6c0c
	void SetPlayerBodyInstMask(int Mask);// 0x21f6b94
	void SetPlaneEnabled(bool InEnable);// 0x21f6b14
	void SetPlane(Actor* Plane);// 0x21f6a9c
	void SetPeekFingerIndex(bool TouchBegin, byte FingerIndex, bool AutoCancelPeek);// 0x21f6988
	void SetParachuteAnimCached(byte AnimOverrideType, bool InValue);// 0x21f68c4
	void SetOBVehicleView(bool IsActive);// 0x21f6844
	void SetObservingTime(float Time);// 0x21f67cc
	void SetMovable(bool IsMovable);// 0x21f674c
	void SetMaxHealth(float HP);// 0x21f66d4
	void SetLowProbCircle(float X, float Y, float R, float Prob);// 0x21f658c
	void SetLocalUnPossesTest(bool bControllerSide, bool bPawnSide);// 0x21f64bc
	void SetLaunchFlyStateOnServer(enum StateType);// 0x21f6444
	void SetLaunchFlyState(enum StateType);// 0x21f63cc
	void SetJoyStickScale(float JSScale);// 0x21f6354
	void SetJoyStickPtrFireMode(int FireMode);// 0x21f62dc
	void SetJoystickOperatingMode(byte OperatingMode, float GoStraightAngle);// 0x21f6220
	void SetJoyStickOpacity(float JSOpacity);// 0x21f61a8
	void SetJoyStickInteractionSize(Vector2D JSInteractionSize);// 0x21f6138
	void SetJoyStickCenter(Vector2D JSCenter);// 0x21f60c8
	void SetIsSnowy(bool bSnowy);// 0x21f6048
	void SetIsShowBlood(bool InIsShowBlood);// 0x21f5fc8
	void SetIsRainy(bool bRainy);// 0x21f5f48
	void SetIsCacheReceiveRespawnZombie(bool isReceive);// 0x21f5ec8
	void SetIsBlizzard(bool bBlizzard);// 0x21f5e48
	void SetInfectResetPlayerInterTime(float InterTime);// 0x21f5dd0
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x21f5d48
	void SetHasResultState(bool InState);// 0x21f5cc8
	void SetGameStateReconnectInfoToClient(ReConnectGameStateInfo ReConnectInfo);// 0x21f5af4
	void SetFuelByPercent(float percent);// 0x21f5a7c
	void SetEnterInteractiveActor(Actor* IActor, bool IsIn);// 0x21f59b8
	void SetEnableWingAvatar(bool Val);// 0x21f5938
	void SetEnableVoiceByPlayerKey(STExtraPlayerState* State, bool Enable);// 0x21f5874
	void SetDisableTouchMoveInput(bool bDisable);// 0x21f57f4
	void SetCustomSensibility(int WeaponId, int AttrIndex, float Value);// 0x21f56f4
	void SetCustomJumpPoint(float JmpX, float JmpY, float JmpRadius);// 0x21f55f4
	void SetCustomFlightRoute(float StartX, float StartY, float EndX, float EndY);// 0x21f54ac
	void SetCurrentCameraFOV(float FOV, byte Mode);// 0x21f53b0
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x21f5298
	void SetClientSpawnAndBackpackWeaponReplicatedDataArray(uint32 CharacterGUID, const ItemDefineID[] DataList, int WeaponSyncTicket);// 0x21f5114
	void SetCircleInfoToClient(GetCircleInfo ReConnectInfo);// 0x21f4f84
	void SetCircleCenter(FString PointString);// 0x21f4ec8
	void SetCirCenterFixed(bool Enable, float X, float Y);// 0x21f4dbc
	void SetCaptureIDCardStatusDelegate__DelegateSignature(bool IsCapture);// 0x2bb69b8
	void SetCanGotoExPlane(bool bFlag);// 0x21f4d3c
	void SetCanDropItem(bool bCanDrop);// 0x21f4cbc
	void SetBeKickedPlayerName(FString InPlayerName);// 0x21f4b64
	void SetAngledSightFingerIndex(bool TouchBegin, byte FingerIndex);// 0x21f4a9c
	void SetAllStarReportDataByOpenID(FString InPlayerOpenID, out AllStarReportData InReportData);// 0x21f4988
	void SetAllInfectedAreaLevel(int LevelId);// 0x21f4910
	void SetAirDropEnable(bool Enable);// 0x21f4890
	void SetAirAttackEnable(bool Enable);// 0x21f4810
	void Set2x2ForceCircleLastR(float R);// 0x21f4798
	void Set2x2ForceCircle(float X, float Y, float R);// 0x21f4698
	void Set2x2CircleCenter(int Index, float X, float Y);// 0x21f4598
	void Set2x2Circle3Center(float x1, float y1, float x2, float y2, float x3, float y3);// 0x21f43c0
	void ServerUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x21f4204
	void ServerUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation, float TimeStamp);// 0x21f409c
	void ServerUpdateCurrentBuildIndex(int8 idx);// 0x21f3fe8
	void ServerTriggerSelectGrenade(int GrenadeID);// 0x21f3f34
	void ServerTriggerCharacterEntryEvent(enum EntryEvent);// 0x21f3e80
	void ServerTriggerCharacterCustomEvent(byte SkillEvent);// 0x21f3dcc
	void ServerTestPaintDecal(int ID, const PlayerDecalData DecalData);// 0x21f3c18
	void ServerStopFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, BulletInClip CurBulletInClip);// 0x21f38d8
	void ServerStopFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, BulletInClip CurBulletInClip);// 0x21f3598
	void ServerStopFillGas(STExtraShootWeapon* TargetWeapon);// 0x21f34e4
	void ServerStartPreBarrel(STExtraBaseCharacter* TargetCharacter, float HandledTime);// 0x21f33e8
	void ServerStartOnPlaneSurvive(float P_PlaneFlyHeight, float P_PlaneStartDistance, float P_PlaneFlySpeed, float P_HaveToJumpDistance, Vector P_MapCenterLoc, Vector P_PlaneStartLoc, float P_PlaneStartYaw);// 0x21f3140
	void ServerStartFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo, float MaxAimDistance, Vector2D ScreenAimRect);// 0x21f2f5c
	void ServerStartFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo);// 0x21f2e18
	void ServerStartFillGas(STExtraShootWeapon* TargetWeapon);// 0x21f2d64
	void ServerStartBarrelNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* ShootWeapon);// 0x21f2c68
	void ServerStartBarrel(STExtraBaseCharacter* TargetCharacter);// 0x21f2bb4
	void ServerSetShootType(STExtraBaseCharacter* TargetCharacter, byte ShootType);// 0x21f2ab8
	void ServerSetSelfForceHideState(int SlotID, bool bSelfHide);// 0x21f29a8
	void ServerSetReloadMethod(Actor* TargetActor, byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x21f2864
	void ServerSetObsverLocation(const Vector locat);// 0x21f27b8
	void ServerSetIsFreeView(bool isFreeView);// 0x21f26f0
	void ServerSetFreeCameraRotationOnVehicle(Rotator InRotation, bool IsAutoReturn);// 0x21f25dc
	void ServerSetFreeCamera(Rotator InRotation);// 0x21f2530
	void ServerSetControlRotationOnVehicle(Rotator InRotation, bool IsFreeCamera);// 0x21f241c
	void ServerSetControlRotation(const Rotator NewRotation);// 0x21f2370
	void ServerSendLogToLobby(FString ErrorLog);// 0x21f22b4
	void ServerReportWatchGamePlayerInfoButtonClick(uint64 WatchPlayer_UID, uint64 WatchedPlayer_UID, float Duration);// 0x21f2148
	void ServerReportVehicleDrag(const VehicleMoveDragData InDragData);// 0x21f2054
	void ServerReplicateExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x21f1df0
	void ServerRemoteDestroyAllActor();// 0x21f1dd8
	void ServerRemoteDestroyActor(int SingleId);// 0x21f1d60
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x21f1c04
	void ServerReceiveThePlane(int64 TimeStamp);// 0x21f1b4c
	void ServerQuitSpectating();// 0x21f1af0
	void ServerPickItem(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x21f16fc
	void ServerOpenParachute();// 0x21f16a0
	void ServerObserveKiller();// 0x21f1644
	void ServerObserveCharacter(uint32 InPlayerKey);// 0x21f1590
	void ServerObserveAirDropBox(int boxId);// 0x21f14dc
	void ServerNotifyAutoFollowStatus(bool IsStartFollow, STExtraBaseCharacter* Target);// 0x21f13cc
	void ServerKickPlayerFromGame(uint32 InPlayerKey);// 0x21f1318
	void ServerJumpFromPlane();// 0x21f12bc
	void ServerInterruptGame();// 0x21f1260
	void ServerInternalSetTeammateForbidPick(bool bIsForbid, int TLogIndex);// 0x21f1198
	void ServerHearSound(int AkEventID, const Vector AkLocation);// 0x21f10a4
	void ServerHandleMsg(enum Msg);// 0x21f0ff0
	void ServerHandleHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData);// 0x21f0ec0
	void ServerHandleExtraHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData, const HitTargetExtraData[] HitExtraDataArray);// 0x21f0d08
	void ServerGetTotalPlayers();// 0x21f0cac
	void ServerGetPlayerAliasInfoList();// 0x21f0c50
	void ServerGetCircleInfo();// 0x21f0bf4
	void ServerFight();// 0x21f0b98
	void ServerExitFromHelicopter(STExtraVehicleBase* ExitVehicle);// 0x21f0ae4
	void ServerExitFreeCamera();// 0x21f0a88
	void ServerDropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x21f0924
	void ServerDriveFireBalloon(STExtraFireBalloon* FireBalloon, bool bNewDrive);// 0x21f0814
	void ServerDoPickupRevivalFlag();// 0x21f07b8
	void ServerDisuseItem(ItemDefineID DefineID, enum Reason);// 0x21f069c
	void ServerControlFireBalloonMove(STExtraFireBalloon* FireBalloon, float MoveUpValue);// 0x21f05a0
	void ServerCMD_RPC(FString Cmd);// 0x21f04ac
	void ServerCMD(FString Cmd);// 0x1f00444
	void ServerClearTeammatesCache();// 0x21f0450
	void ServerChangeWeaponScheme(int Index);// 0x21f039c
	void ServerChangeWeaponFunction(enum NewWeaponFunction);// 0x21f02e8
	void ServerChangeVehicleAvatar(const int AvatarID);// 0x21f0234
	void ServerChangeStatePC(enum TargetStateType);// 0x21f01bc
	void ServerChangeItemStoreArea(ItemDefineID DefineID, int InItemNum, enum InItemStoreArea);// 0x21f0058
	void ServerAutoSwitchSameSlotWeapon(byte CurrentSlot);// 0x21effe0
	void SendStringMsg(FString Message, int MsgID, int ItemId, FString PlayerKeyString, int msgExtraParam);// 0x21efdcc
	void SendStringDirect(FString Message);// 0x21efd10
	void SendLogToLobbyOnece(byte LogType);// 0x21efc98
	void SendGameStateInitOK();// 0x21efc3c
	void SendEndTouchScreenUICommand(out FString UIMsg);// 0x21efb70
	void SendDeviceInfo(const FString PlatformProfileName, const DeviceInfo DeviceInfo);// 0x21ef9f4
	void ScopeOut();// 0x21ef9e0
	void ScopeIn();// 0x21ef9cc
	void S2C_ResponseSkillPrompt(bool bShow, float RemainingTime, FString PromptText, float TotalTime);// 0x21ef7e4
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x21ef68c
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x21ef534
	void RunOnNextFrameEvent();// 0x21ef520
	void RunOnNextFrame__DelegateSignature();// 0x2bb69b8
	void RspGetVehiclePos(STExtraVehicleBase* SimVehicle, Vector pos);// 0x21ef45c
	void RPC_UseInteractiveActor();// 0x21ef400
	void RPC_Server_VehicleWarSetPlayerHasLogin();// 0x21ef3a4
	void RPC_Server_ShootSpecialBullet(Transform LaunchTrans, STExtraShootWeapon* TargetWeapon);// 0x21ef220
	void RPC_Server_ShootSeekAndLockProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf, const SeekAndLockRPGBulletUploadData UploadData);// 0x21eee60
	void RPC_Server_ShootProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf);// 0x21ee350
	void RPC_Server_ShootGrenadeBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf);// 0x21edfe0
	void RPC_Server_SetRemainBoxIsSearched(PlayerRemainTombBox* RemainBox);// 0x21edf20
	void RPC_Server_SetPlayerStateChoose(int choose);// 0x21ede6c
	void RPC_Server_SetMicphoneTLogToServer(const TLog_Micphone MicphoneTlog);// 0x21edda8
	void RPC_Server_SendLog(FString ErrorLog);// 0x21edcb4
	void RPC_Server_RequestRefreshOwnerPawnHealth();// 0x21edc58
	void RPC_Server_ReqHealth();// 0x21edbfc
	void RPC_Server_ReportPeerVisualFieldActorList(const Actor*[] VisualFieldActorList);// 0x21edb08
	void RPC_Server_RemovePhotonDestructibleFragment(const HitResult Hit);// 0x21eda48
	void RPC_Server_RemoveFracturedMeshFragment(Actor* ImpactActor, Actor* OtherActor, Vector NormalImpulse, const HitResult Hit);// 0x21ed8a4
	void RPC_Server_PrintHP();// 0x21ed848
	void RPC_Server_NotifySwapMainWeaponFinished(byte Slot1, byte Slot2);// 0x21ed74c
	void RPC_Server_NotifyServerUseSpot(SupplySpot* InSupplySpot);// 0x21ed698
	void RPC_Server_NotifyServerUseEnhancerSpot(EnhancerSpot* InEnhancerSpot);// 0x21ed5e4
	void RPC_Server_NotifyServerProjectileBulletImpact(const ExplosionProjectileHitInfo InExProjectileHitInfo, ProjectileBulletBase* Bullet);// 0x21ed4f0
	void RPC_Server_NotifyServerOpenAnyPickUpBox(PlayerTombBox* TombBox);// 0x21ed43c
	void RPC_Server_NotifyServerLaserProjectileBulletAutoExplode(ProjectileBulletBase* Bullet, const ExplosionProjectileHitInfo InExpProjectileInfo);// 0x21ed348
	void RPC_Server_NotifyServerEnemyStep(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x21ed1f4
	void RPC_Server_NotifyServerEnemyShoot(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience);// 0x21ed040
	void RPC_Server_NotifyServerAddOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x21ecf4c
	void RPC_Server_NotifyBreakWindow(UAEHouseActor* OwnerTarget, UAEWindowRepData Window);// 0x21ecba0
	void RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();// 0x21ecb3c
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeaponWithWeaponMgr(const ItemDefineID[] WeaponIDArray, WeaponManagerComponent* WeaponMgr);// 0x21eca00
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon(const ItemDefineID[] WeaponIDArray);// 0x21ec90c
	void RPC_Server_NorifyServerAddFirstOpenedTreasureBoxes(const int[] TreasureBoxIDArray);// 0x21ec818
	void RPC_Server_NorifyServerAddFirstOpenedPlayerTombBoxes(const int[] PlayerTombBoxIDArray);// 0x21ec724
	void RPC_Server_NorifyServerAddFirstOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x21ec630
	void RPC_Server_EquipWeaponBullet(STExtraShootWeapon* TargetWeapon, int BulletID);// 0x21ec534
	void RPC_Server_ConfirmMisKill(uint32 bConfirm, const GameBaseInfo ClientBaseInfo);// 0x21ec3ec
	void RPC_Server_ClientHasReactivated();// 0x21ec390
	void RPC_Server_ClientHasFinishedRecoverWeapon_New(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x21ec22c
	void RPC_Server_ClientHasFinishedRecoverWeapon(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x21ec0c8
	void RPC_Server_ChangeWeaponState(STExtraWeapon* Weapon, byte StateType);// 0x21ebfcc
	void RPC_Server_BattleStateTime(float InBattleStateTime);// 0x21ebf18
	void RPC_ReviveState_GiveUpRevive();// 0x21ebebc
	void RPC_RequireDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr);// 0x21ebe08
	void RPC_RemoteCustomEventWithObjects(FString EventTag, FString CustomParam, Object* TObject01, Object* TObject02);// 0x21ebbf4
	void RPC_RemoteCustomEventWithObject(FString EventTag, FString CustomParam, Object* TObject);// 0x21eba30
	void RPC_RemoteCustomEvent(FString EventTag, FString CustomParam);// 0x21eb8b4
	void RPC_PushDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr, WeatherControllerRepData RepWeatherInfo);// 0x21eb7b4
	void RPC_OwnerClient_WeaponWarmUpEnd(STExtraWeapon* Weapon);// 0x21eb700
	void RPC_OwnerClient_SwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x21eb5a8
	void RPC_OwnerClient_SetTeammatesYouAttackFirstToClient(const FString[] ListOnServer);// 0x21eb44c
	void RPC_OwnerClient_SetMurderInfo(FString murderName, const bool IsAI, const uint64 InUID, const bool IsMurderSameTeam);// 0x21eb244
	void RPC_OwnerClient_SetLastBreathMurder(FString MurderPlayerName, const bool IsAI, const uint64 InUID, const bool IsMurderSameTeam);// 0x21eb03c
	void RPC_OwnerClient_SetCurrentWeaponVisible(bool bVisible);// 0x21eaf74
	void RPC_OwnerClient_PlayerEnableAttrModifier(bool bEnable, const AttrModifyItem ItemData);// 0x21ead9c
	void RPC_OwnerClient_PlayerConsumeItem(const ItemDefineID ID, int Count);// 0x21eaca0
	void RPC_OwnerClient_PlayerAddHealth(float AddVal, byte Reason);// 0x21eaba4
	void RPC_OwnerClient_PlayerAddEnergy(float AddVal, byte Reason);// 0x21eaaa8
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachment(byte WeaponPropSlot, const ItemDefineID DefineID, bool bEquip);// 0x21ea950
	void RPC_OwnerClient_HandleAIShootBulletHit(Vector_NetQuantize10 BulletStart, Vector_NetQuantize10 BulletEnd);// 0x21ea838
	void RPC_OwnerClient_FlushPlayerHealthChangeHistory(const float[] ChangeHistory, STExtraBaseCharacter* TargetPlayer);// 0x21ea6fc
	void RPC_OwnerClient_ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x21ea5b8
	void RPC_GiveUpGame();// 0x21ea55c
	void RPC_DrawDebug_Sphere(const Vector Center, float Radius, Color Color, float LifeTime);// 0x21ea41c
	void RPC_DrawDebug_Line(const Vector Start, const Vector End, Color Color, float LifeTime);// 0x21ea2e4
	void RPC_ClientSetVehicleSpawnServerTime(float STime);// 0x21ea264
	void RPC_Client_UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x21ea15c
	void RPC_Client_UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x21e9f48
	void RPC_Client_UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x21e9d7c
	void RPC_Client_UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x21e9bb0
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x21e99e4
	void RPC_Client_ShowNewCommonCountDown(float TotalTime, int StringId, int TypeId);// 0x21e98dc
	void RPC_Client_RemoteDestroyAllActor();// 0x21e98c0
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x21e9840
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x21e96ac
	void RPC_Client_PreSetBulletListInClip(STExtraShootWeapon* TargetWeapon, BulletInClip CurBulletInClip);// 0x21e9414
	void RPC_Client_PlayerBulletHitVehicleSound(Vector Loc, Rotator Rot);// 0x21e92fc
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x21e9054
	void RPC_Client_NotifyHealth(float Health);// 0x21e8fa0
	void RPC_Client_InfectionShowKillNum(int ShowKillNum);// 0x21e8f20
	void RPC_Client_DestroyWeapon(FName LogicSocket, const ItemDefineID ID, bool bEnableBroadcast);// 0x21e8dbc
	void RPC_Client_ClientDisplayScoreChangeTips(WarPlayerStateScore ScoreStruct);// 0x21e8cc8
	void RPC_Client_CircleRun(int Index, int TotalNum);// 0x21e8bcc
	void RPC_Client_ChangeWeaponState(STExtraWeapon* Weapon, byte StateType);// 0x21e8ad0
	void RPC_Client_BeginInteractiveProcess();// 0x21e8ab4
	void RPC_Client_AirAttack(const AirAttackOrder airAttackOrderSrc, const Vector AirAttackArea);// 0x21e892c
	void RPC_CancelUseInteractiveActor();// 0x21e88d0
	void RevivalTemateSuccess();// 0x21e88b4
	void RevivalTemateFailImpl(FString Reason);// 0x21e87f0
	void RevivalTemateFail(FString Reason);// 0x21e872c
	float RetriveMobileContentScaleFactor();// 0x21e8704
	void RetrievePlayerBattleResultData();// 0x1ee1bb4
	void RestoreDefaultInteractionSize(int JSIndex);// 0x21e868c
	void RespHasSignalBar(bool bHas);// 0x21e8604
	void RespawnRecoverData(UAEPlayerController* PC);// 0x21e858c
	void ResetVehicleEngine();// 0x21e8578
	bool ResetValidTouchMoveFrame();// 0x21e8550
	void ResetMissingUIUpdate();// 0x2bb69b8
	void ResetIgnoreMoveInput();// 0x21e8534
	void RequireNetCullingDistanceByDevice();// 0x21e84d8
	void RequireDeviceInfo();// 0x21e84bc
	void RequestPlayerNewbieInfo();// 0x21e84a8
	void RequestHasSignalBar();// 0x21e844c
	bool RequestChangeWearInBattle(int NewIndex);// 0x21e83cc
	bool RequestChangeWear(int NewIndex);// 0x21e834c
	void ReqSwitchPersonPerspective(bool IsNewFPP);// 0x21e8284
	void ReqRecordEnterIceMountain();// 0x21e8228
	void ReqLeaveVehicle();// 0x21e8214
	void ReqGetVehiclePos(STExtraVehicleBase* SimVehicle);// 0x21e8160
	void ReqExchangeVehicleCharacter(int Param);// 0x21e80e8
	void ReqEnterVehicle(float dis);// 0x21e8070
	void ReqEnterSnowBoard();// 0x21e805c
	void ReportWatchGamePlayerInfoButtonClick(float DuriationTime);// 0x21e7fe4
	void ReportVehicleMoveFlow(const VehicleMoveFlow VehicleMoveFlow);// 0x21e7e88
	void ReportClientParachuteData(ParachuteData InParachuteData);// 0x21e7bc0
	void ReportAntiCheatInfo();// 0x21e7bac
	void ReplaceVehicleWithPath(FString Path);// 0x21e7af0
	void ReplaceVehicle();// 0x21e7adc
	void Rep_RefreshInteractiveActor();// 0x21e7ac8
	void RemoveTouchMoveFinger(byte FingerIndex);// 0x21e7a50
	void RemoveCustomSensibility(int WeaponId);// 0x21e79d8
	void RemoveAllDoors();// 0x21e79c4
	void ReleaseFire();// 0x2bb69b8
	void ReInitUIAfterReCreatePawn(UAEPlayerController* UAEPC);// 0x21e794c
	void ReInitParachuteItem();// 0x21e7938
	void RefreshTopMostUIPanel(byte Type);// 0x2bb69b8
	void RefreshShootDetailInfo();// 0x21e7924
	void RefreshPickupFlagStatusDelegate__DelegateSignature();// 0x2bb69b8
	void RecoverStatusAfterReconnecting();// 0x21e7908
	void RecordPathPoint();// 0x21e78f4
	void ReceiveClientRestart();// 0x2bb69b8
	void ReceiveBackpackComponent();// 0x21e78d8
	void QuitSpectating();// 0x21e78c4
	void PrintStringToScreen(FString inString, LinearColor TextColor, float Duration);// 0x21e7774
	void PrintMovementLog(int PrintLog);// 0x21e76fc
	void PrintDownCollision();// 0x21e76e8
	void PrintAllPickupWarpper();// 0x21e76d4
	void PressGrenade(bool isThrow);// 0x2bb69b8
	void PressFire(int FingerIndex);// 0x2bb69b8
	void PlayerLiveStateChangedInOB(enum State, Character* OwnerCharacter);// 0x21e7618
	void PlayerKillingDelegate__DelegateSignature();// 0x2bb69b8
	void PlayerEnterAreaDelegate__DelegateSignature(int AreaID);// 0x2bb69b8
	void PlayerDoEmoteDelegate__DelegateSignature(int EmoteIndex);// 0x2bb69b8
	void PlayerControllerToggleDelegate__DelegateSignature(bool bOpen);// 0x2bb69b8
	void PlayerControllerSelfPawnDeathDelegate__DelegateSignature();// 0x2bb69b8
	void PlayerControllerNotifyChangeToWalkingDead__DelegateSignature(bool bCanChange, bool bIsWalkingDeadFinish);// 0x2bb69b8
	void PlayerControllerChangeToWalkingDeadRes__DelegateSignature(bool bSucc);// 0x2bb69b8
	void PlayerControllerChangeToWalkingDead__DelegateSignature();// 0x2bb69b8
	void PlayBattleSound(FString BankName, FString SoundName);// 0x21e74d8
	void PickupInitialItemListForRobustness();// 0x21e74c4
	void OpenParachute();// 0x21e74b0
	void OnWeaponEquipAttachmentDelegate__DelegateSignature(STExtraShootWeapon* Weapon, enum Type, bool bEquip);// 0x2bb69b8
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x2bb69b8
	void OnWeakGuidEventDelegate__DelegateSignature(int GuidID, Actor* GuidActor);// 0x2bb69b8
	void OnWallFeedBack(bool _WallFeedBack);// 0x21e7430
	void OnViewTargetSignalHPChanged(float NewSignalHP);// 0x21e73b8
	void OnViewTargetPoseChanged(byte LastPose, byte NewPose);// 0x21e72fc
	void OnViewTargetPlayerStateChanged();// 0x21e72e8
	void OnViewTargetDetachedFromVehicle(STExtraVehicleBase* LastVehicle);// 0x21e7270
	void OnViewTargetChangeVehicleSeat();// 0x21e725c
	void OnViewTargetChangePoseDelegate__DelegateSignature(byte LastPose, byte NewPose);// 0x2bb69b8
	void OnViewTargetAttachedToVehicle(STExtraVehicleBase* InVehicle);// 0x21e71e4
	void OnVehicleWeaponIsReadyForFireDelegate__DelegateSignature();// 0x2bb69b8
	void OnVehicleWarVehicleRepawnDelegate__DelegateSignature();// 0x2bb69b8
	void OnVehicleWarKilledTrackerStartDelegate__DelegateSignature();// 0x2bb69b8
	void OnVehicleWarKilledTrackerFinishDelegate__DelegateSignature();// 0x2bb69b8
	void OnVehicleExitFreeCameraDelegate__DelegateSignature(bool bExit);// 0x2bb69b8
	void OnUseVehicleWarWeapon();// 0x21e71d0
	void OnUseVehicleWarItem();// 0x21e71bc
	void OnUseVehicleWarEyes();// 0x21e71a8
	void OnUseMainSlot__DelegateSignature(byte Slot);// 0x2bb69b8
	void OnUseInventoryItemDelegate__DelegateSignature();// 0x2bb69b8
	void OnUnequipWeaponDelegate__DelegateSignature();// 0x2bb69b8
	void OnUITouchMoveDelegate__DelegateSignature(Vector Loc);// 0x2bb69b8
	static void OnTryReqMoveToTarget(const Object* WorldContextObject, int FollowType, FString FollowUID);// 0x21e6fc8
	void OnTouchInterfaceChangedDelegate__DelegateSignature();// 0x2bb69b8
	void OnTeammateTemperatureChangeDelegate__DelegateSignature();// 0x2bb69b8
	void OnTeammatesAllDie();// 0x21e6fb4
	void OnTeammateLogin(int InTeamID);// 0x21e6f3c
	void OnTeammateHPChangeDelegate__DelegateSignature();// 0x2bb69b8
	void OnTeamFollowStageChangeDelegate__DelegateSignature();// 0x2bb69b8
	void OnTaskConditionDeactivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0x2bb69b8
	void OnTaskConditionActivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0x2bb69b8
	void OnTakeDamaged__DelegateSignature(float DamageAngel);// 0x2bb69b8
	void OnSwitchWeaponDelegate__DelegateSignature();// 0x2bb69b8
	void OnSwitchToTeamByNumPressed__DelegateSignature();// 0x2bb69b8
	void OnSwitchToPlayerByNumPressed__DelegateSignature();// 0x2bb69b8
	void OnSwitchCameraModeStartDelegate__DelegateSignature(byte CameraMode);// 0x2bb69b8
	void OnSwitchCameraModeEndDelegate__DelegateSignature(byte CameraMode);// 0x2bb69b8
	void OnStopWeakGuidDelegate__DelegateSignature();// 0x2bb69b8
	void OnStopFireDelegate__DelegateSignature();// 0x2bb69b8
	void OnStartFireDelegate__DelegateSignature();// 0x2bb69b8
	void OnStartAutoSprintCountDown__DelegateSignature();// 0x2bb69b8
	void OnSpectatorChange__DelegateSignature();// 0x2bb69b8
	void OnSpectatorCameraChange(bool bDie);// 0x2bb69b8
	void OnSpawnVehicleServerTimeUpdatedDelegate__DelegateSignature();// 0x2bb69b8
	void OnShowSkillPromptDelegate__DelegateSignature(bool IsShowPrompt, float LastTime, FString PromptText, Object* PromptIcon, float TotalTime, bool bCanCancelSkill);// 0x2bb69b8
	void OnShowHideSelfMarkDelegate__DelegateSignature();// 0x2bb69b8
	void OnShowGeneralGameTipsDelegate__DelegateSignature(int TipsID, FString Params);// 0x2bb69b8
	void OnShowAutoSprintButton__DelegateSignature(bool Visible, Vector2D showPos, bool IsInside);// 0x2bb69b8
	void OnShowAnimationButton(bool IsShow, int NewUIType);// 0x21e6e6c
	void OnShowAllTeammatePosDelegate__DelegateSignature(bool bShow);// 0x2bb69b8
	void OnShowAliasInfoDelegate__DelegateSignature();// 0x2bb69b8
	void OnSetChangeCharacterState__DelegateSignature(byte ChangeState);// 0x2bb69b8
	void OnServerFinishPickupRevivalFlag();// 0x21e6e50
	void OnServerCharacterSignalHPChangeDelegate__DelegateSignature(float CurrentSignalHP);// 0x2bb69b8
	void OnRevivalAndEnterAirplane__DelegateSignature();// 0x2bb69b8
	void OnRepTeammateChange__DelegateSignature();// 0x2bb69b8
	void OnRepTeammateAvatarDisplayInfoChange__DelegateSignature();// 0x2bb69b8
	void OnRepPlayerState__DelegateSignature();// 0x2bb69b8
	void OnRepNotify_SetBattleOwner();// 0x21e6e3c
	void OnRepNotify_ServerHitEnemyReplicatedData();// 0x1ee1bb4
	void OnRep_WeatherFog();// 0x21e6e28
	void OnRep_WeaponSystemReconnectReplicateData();// 0x21e6e14
	void OnRep_WeaponFunctionChanged();// 0x21e6e00
	void OnRep_WeaponAvatarDataList();// 0x21e6de4
	void OnRep_UsedSimulation();// 0x21e6dc8
	void OnRep_SwitchWeather();// 0x21e6db4
	void OnRep_STExtraBaseCharacter();// 0x21e6da0
	void OnRep_SpawnAndBackpackWeaponReplicatedDataWithMgr();// 0x21e6d8c
	void OnRep_ShowWeaponHitDetailInfo();// 0x21e6d78
	void OnRep_ServerStateType();// 0x21e6d64
	void OnRep_RefreshTotalPlayers();// 0x21e6d50
	void OnRep_RefreshAirDropBox();// 0x21e6d3c
	void OnRep_Plane();// 0x21e6d28
	void OnRep_ObservedItemList();// 0x21e6d14
	void OnRep_InWateringRangeBP();// 0x2bb69b8
	void OnRep_InWateringCRange();// 0x21e6cc0
	void OnRep_InitialEquipmentAvatar();// 0x21e6ca4
	void OnRep_InitialConsumableAvatar();// 0x21e6c88
	void OnRep_ImprisonmentTeammateSucess();// 0x21e6c74
	void OnRep_GameStateMsgType();// 0x21e6c60
	void OnRep_ForbitPickEffect();// 0x21e6c4c
	void OnRep_ForbitPick();// 0x21e6c38
	void OnRep_FiringPlayerList();// 0x21e6c24
	void OnRep_EnableDeathPlaybackDelay();// 0x21e6c10
	void OnRep_DeadTombBox();// 0x21e6bfc
	void OnRep_CanOpenParachute();// 0x21e6be8
	void OnRep_CanJump();// 0x21e6bd4
	void OnRep_CanImprisonmentTeammate();// 0x21e6bc0
	void OnRep_BattleSceneAvatarDisplayInfoList();// 0x21e6bac
	void OnRep_BackpackComponent();// 0x21e6b98
	void OnRep_AutoAimType();// 0x21e6b84
	void OnRemoveMainSlot__DelegateSignature(byte Slot);// 0x2bb69b8
	void OnRemindTeammateShoot__DelegateSignature(FString sPlayerKey, bool bShow, float nDist);// 0x2bb69b8
	void OnReleaseScreen__DelegateSignature(byte FingerIndex);// 0x2bb69b8
	void OnReleaseFireBtnDelegate__DelegateSignature();// 0x2bb69b8
	void OnReleaseFire();// 0x21e6b70
	void OnReconnectResetUIByPlayerControllerStateDelegate__DelegateSignature();// 0x2bb69b8
	void OnReconnected__DelegateSignature();// 0x2bb69b8
	void OnReceiveHasSignal__DelegateSignature(bool HasSignal);// 0x2bb69b8
	void OnRank__DelegateSignature(int Kills, int Rank);// 0x2bb69b8
	void OnPressVehicleWarMatchData();// 0x21e6b5c
	void OnPressVampireClothSlotBtn();// 0x21e6b48
	void OnPressTurnplateQuickMsgBtn();// 0x21e6b34
	void OnPressTriggerEntireMapBtn();// 0x21e6b20
	void OnPressShowTagVehileSeatListBtn();// 0x21e6b0c
	void OnPressRolewearChangeBtn(int Index);// 0x21e6a94
	void OnPressItemSKillBtn();// 0x21e6a80
	void OnPressFire();// 0x21e6a6c
	void OnPressBackpackBtn();// 0x21e6a58
	void OnPostTakeDamageForBP__DelegateSignature(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* DamageCauser);// 0x2bb69b8
	void OnPlayerUseRecoverItem();// 0x21e6a44
	void OnPlayerStateChanged();// 0x21e6a30
	void OnPlayerReConnected(int LostPlayerKey);// 0x21e697c
	void OnPlayerPutDownAllPropDelegate__DelegateSignature();// 0x2bb69b8
	void OnPlayerPutDownActorDelegate__DelegateSignature(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x2bb69b8
	void OnPlayerPickUpActorDelegate__DelegateSignature(byte SurvivePickUpGlobalCategory, int ID);// 0x2bb69b8
	void OnPlayerNumOnPlaneChangedDelegate__DelegateSignature();// 0x2bb69b8
	void OnPlayerNameChange__DelegateSignature(FString changedplayername);// 0x2bb69b8
	void OnPlayerLostConnection(int LostPlayerKey);// 0x21e68c8
	void OnPlayerLeaveRevivalStateDelegate__DelegateSignature();// 0x2bb69b8
	void OnPlayerKilledOthersPlayer__DelegateSignature(uint32 causerKey, uint32 victimKey, int Relationship, int CauserWeaponAvatarID);// 0x2bb69b8
	void OnPlayerInOutWhiteCircleChangedDelegate__DelegateSignature(bool bIsInWhiteCircle);// 0x2bb69b8
	void OnPlayerInOutBlueCircleChangedDelegate__DelegateSignature(bool bIsInBlueCircle);// 0x2bb69b8
	void OnPlayerHitFireBtn(bool bIsRightBtn);// 0x21e6848
	void OnPlayerFinalAssistKill__DelegateSignature();// 0x2bb69b8
	void OnPlayerExitGameDelegate__DelegateSignature();// 0x2bb69b8
	void OnPlayerEnterRevivalStateDelegate__DelegateSignature();// 0x2bb69b8
	void OnPlayerControllerStateChangedDelegate__DelegateSignature(enum StateType);// 0x2bb69b8
	void OnPlayerClickDriveBtn();// 0x21e6834
	void OnPlayerChangeWearingDone__DelegateSignature(int Index, float LastTime);// 0x2bb69b8
	void OnPlayerChangeWearingAnimFinished__DelegateSignature(int Reason);// 0x2bb69b8
	void OnPlayerCanGetInVehicle(bool CanGetInVehicle);// 0x21e66f0
	void OnPickupItemDelegate__DelegateSignature(int ItemId, int Count, STExtraPlayerController* PC);// 0x2bb69b8
	void OnPickUpExpand();// 0x21e6688
	void OnPickUpCollapsed(bool isCollapsed);// 0x21e6608
	void OnPickUpActor(int Guid, int PickupCount, int TotalCount);// 0x21e6508
	void OnOneTeamPlayerHPChangeDelegate__DelegateSignature(int Index);// 0x2bb69b8
	void OnOneFloatValueDelegate__DelegateSignature(float TheValue);// 0x2bb69b8
	void OnOccupyNewbieGuide(int inGuideID);// 0x21e6490
	void OnOBVehicleHitActor(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x21e6328
	void OnObserverLevelLoaded();// 0x21e6314
	void OnObservedWeaponDataChanged(out WeaponSystemDataOnSimulateClient TargetChangeSlot);// 0x21e626c
	void OnObservedUsingWeaponChanged();// 0x21e6258
	void OnObservedPoisonFogStageChanged();// 0x21e6244
	void OnObservedItemsChanged();// 0x21e6230
	void OnObservedBulletNumChanged();// 0x21e621c
	void OnOBPawnExitVehicle(STExtraVehicleBase* InTargetVehicle);// 0x21e61a4
	void OnNightStateChangedDelegate__DelegateSignature();// 0x2bb69b8
	void OnNewbieGuideHandlePickUp(int inPickUpID);// 0x21e612c
	void OnMemberVoiceDelegate__DelegateSignature(int member, int Status);// 0x2bb69b8
	void OnMapMarkChangeDelegate__DelegateSignature(int TeamMateSerialNumber);// 0x2bb69b8
	void OnLostConnection__DelegateSignature();// 0x2bb69b8
	void OnLocalCharacterTemperatureChangeDelegate__DelegateSignature(float currentTP, float ratioHP);// 0x2bb69b8
	void OnLocalCharacterSignalHPRemaingingTimeDelegate__DelegateSignature(float RemainingTime);// 0x2bb69b8
	void OnLocalCharacterSignalHPChangeDelegate__DelegateSignature(float CurrentSignalHP, float PreSignalHP, float RatioSignalHP);// 0x2bb69b8
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x2bb69b8
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x2bb69b8
	void OnKillerNotify(Actor* Killer);// 0x21e60b4
	void OnItemOperCount(ItemDefineID DefineID, enum OperationType, int Count);// 0x21e5fa4
	void OnItemOperationInfo(BackpackComponent* Sender, out const ItemOperationInfo ItemOperationInfo);// 0x21e5ec4
	void OnItemOperation(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x21e5db4
	void OnInterruptAutoSprintCountDown__DelegateSignature();// 0x2bb69b8
	void OnInfectionShowTipMsgDelegate__DelegateSignature(int MsgID, int IconID, float showTime, float DelayTime);// 0x2bb69b8
	void OnInfectionPlaySoundEvent__DelegateSignature(int SoundID);// 0x2bb69b8
	void OnIndoorStateChangeDelegate__DelegateSignature();// 0x2bb69b8
	void OnHideFollowPanelAndBtnDelegate__DelegateSignature();// 0x2bb69b8
	void OnHandleCameraModeChangedDelegate__DelegateSignature(byte CameraMode);// 0x2bb69b8
	void OnGameStateChange__DelegateSignature(FName GameState);// 0x2bb69b8
	void OnGameStartDelegate__DelegateSignature();// 0x2bb69b8
	void OnGameStartCountDownDelegate__DelegateSignature(float CountdownTime);// 0x2bb69b8
	void OnGameModeStateChanged();// 0x2bb69b8
	void OnFingerMove__DelegateSignature(byte FingerIndex, Vector Loc);// 0x2bb69b8
	void OnExitGame__DelegateSignature();// 0x2bb69b8
	void OnEquipWeaponDelegate__DelegateSignature();// 0x2bb69b8
	void OnEquipmentWeaponAvatarChange__DelegateSignature();// 0x2bb69b8
	void OnEquipmentAvatarChange__DelegateSignature();// 0x2bb69b8
	void OnEnterBattleResultStep();// 0x21e5da0
	void OnEnableSignalSystemChangedDelegate__DelegateSignature();// 0x2bb69b8
	void OnDropItemDelegate__DelegateSignature(int ItemId, int Count, STExtraPlayerController* PC);// 0x2bb69b8
	void OnDoubleClickCheckDelegate__DelegateSignature(byte FingerIndex);// 0x2bb69b8
	void OnDeathBoxSpawnedDelegate__DelegateSignature(Transform SpawnTransform);// 0x2bb69b8
	void OnDeadBoxExpand();// 0x21e5d8c
	void OnDeadBoxCollapsed(bool isCollpased);// 0x21e5d0c
	void OnDamageToOtherDelegate__DelegateSignature(float damageToOther);// 0x2bb69b8
	void OnConsumableAvatarChange__DelegateSignature();// 0x2bb69b8
	void OnCongregationFlagDelegate__DelegateSignature();// 0x2bb69b8
	void OnClientWillGotoSpectating();// 0x21e5cf8
	void OnClientReportPeerVisualFieldAcotrList__DelegateSignature(int CamId, Actor*[] PeerVisualFieldActorList);// 0x2bb69b8
	void OnClickVehicleWarBuff();// 0x21e5ce4
	void OnClickToggleOBVehicleView();// 0x21e5cd0
	void OnCheckSignalPlaybackDelegate__DelegateSignature();// 0x2bb69b8
	void OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x2bb69b8
	void OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x2bb69b8
	void OnCharacterRecoveryHealthEvent();// 0x21e5cbc
	void OnCharacterRecoveryHealth__DelegateSignature();// 0x2bb69b8
	void OnCharacterReceiveHealthChangeHistory__DelegateSignature(out const float[] HealthChangeHistory);// 0x2bb69b8
	void OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature(bool IsNearDeath, bool IsRescueingOther);// 0x2bb69b8
	void OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x2bb69b8
	void OnCharacterGlassCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0x2bb69b8
	void OnCharacterCurrentActivityIDRep(int CurrentActivityID);// 0x21e5c3c
	void OnCharacterCheckVoiceTriggerDelegate__DelegateSignature(Actor* nowActor, float checkDis);// 0x2bb69b8
	void OnCharacterBreathChangeDelegate__DelegateSignature(float currentBR, float ratioBR, Character* OwnerCharacter, int HealthStatus);// 0x2bb69b8
	void OnCharacterAntidoteChangeDelegate__DelegateSignature(float FAntidoteExeTime, float FAntidoteMaxTime);// 0x2bb69b8
	void OnChangeBattleOwnerDelegate__DelegateSignature();// 0x2bb69b8
	void OnBuyRevivalTeammate(int TeammateIndex);// 0x21e5bbc
	void OnBuyRevivalSign();// 0x21e5ba0
	void OnBackpackMainSlot__DelegateSignature(byte Slot);// 0x2bb69b8
	void OnAutoSprintActive__DelegateSignature();// 0x2bb69b8
	void OnAssociationOperation(ItemDefineID DefineID, ItemDefineID TargetDefineID, enum OperationType, byte Reason);// 0x21e5a38
	void On3DTouchForceChangeDelegate__DelegateSignature();// 0x2bb69b8
	void ObserveWhoKilledMe();// 0x21e5a24
	void ObserveClientSetPoisonSmogStage(int SmogStage);// 0x21e5970
	void ObserveCharacter(FString InPlayerName);// 0x21e5818
	void ObserveAirDropBox(int boxId);// 0x21e57a0
	void OBCameraTurnSlower();// 0x21e578c
	void OBCameraTurnFaster();// 0x21e5778
	void OBCameraMoveSlower();// 0x21e5764
	void OBCameraMoveNear();// 0x21e5750
	void OBCameraMoveFaster();// 0x21e573c
	void OBCameraMoveFar();// 0x21e5728
	void NotifyOpenSequencer(BattleOpenSequencerInfo Info);// 0x21e5510
	void NotifyIsInResultView(bool isInResultView);// 0x21e5490
	void NotifyInOutPickUpActorWrapperBP(bool bIsIn);// 0x2bb69b8
	void NotifyDeadBoxExpand();// 0x2bb69b8
	void NotifyDeadBoxCollapsed(bool isCollpased);// 0x2bb69b8
	void MoveUp(float Rate);// 0x21e5418
	void MoveToVehicle(int ItemId);// 0x21e53a0
	void MoveToNearestVehicle(float IgnoreDistance);// 0x21e5328
	void MoveToItem(int ItemId);// 0x21e52b0
	void MoveToAIWithClassName(FString AIClassName, float XOffset, float YOffset, float ZOffset);// 0x21e5124
	void MoveToAIByDropItem(int ItemId);// 0x21e50ac
	void MoveToAI();// 0x21e5098
	void MoveTo(float X, float Y, float Z);// 0x21e4f98
	void MoveTempleToSelf();// 0x21e4f84
	void ModifyTouchIndex(Vector Loc, byte FingerIndex);// 0x21e4ec8
	void ModifyStreamingDistance(int Distance);// 0x21e4e50
	void ModifyCameraViewPitchLimitWithPose(byte Pose, float PitchMin, float PitchMax);// 0x21e4d50
	void MemberVoice(int member, int Status);// 0x2bb69b8
	void MarkStartFireFrame();// 0x21e4d3c
	void MakeVehicleFly(int isFly, bool bIsUp);// 0x1ffc87c
	void LogAIItemCount(int ItemId, float Distance);// 0x21e4c80
	void LocalProfileFootprint();// 0x21e4c6c
	void LocalGetGameStateReconnectInfo();// 0x21e4c58
	void LoadAllLand(bool bLoadAll);// 0x21e4bd8
	void LerpFPPCamera();// 0x21e4bc4
	void KillSomeOne(FString InPlayerName);// 0x21e4b08
	void KillAllEnermyVehicle();// 0x21e4af4
	void KillAll();// 0x21e4ae0
	void Kill(int GivenNumber);// 0x21e4a68
	void KickPlayerFromGame();// 0x21e4a54
	void JumpFromPlane();// 0x21e4a40
	void JoystickTriggerSprint(bool bIsSprint);// 0x2bb69b8
	bool IsViewTarget(const Actor* pActor);// 0x21e49b8
	bool IsUse3DTouch();// 0x21e4990
	bool IsTouchToRotControl();// 0x21e4960
	bool IsTombBoxTeammate(const PlayerTombBox* TombBox);// 0x21e48e0
	bool IsToggleOBBulletTrackEffect();// 0x21e48b8
	bool IsTeammate(const STExtraBaseCharacter* InCharacter);// 0x21e4838
	bool IsStandalone();// 0x21e4804
	bool IsShowBlood();// 0x21e47e4
	bool IsSameTeam(Pawn* Other);// 0x21e4764
	bool IsRevivalMode();// 0x21e4734
	bool IsReleasePosInAimBtnRange(Vector Loc);// 0x21e46b4
	bool IsParachuteAnimCached(byte AnimOverrideType);// 0x21e4634
	bool IsMurderSelfDefense(FString InformMurderName);// 0x21e4570
	bool IsMoveable_DontConsiderFollowingState();// 0x21e4548
	bool IsMoveable();// 0x21e4520
	bool IsLastBreathOrRescueingOther();// 0x21e44f8
	bool IsInRevival();// 0x21e44d0
	bool IsInPlane();// 0x21e44a8
	bool IsInParachuteOpen();// 0x21e4480
	bool IsInParachuteJump();// 0x21e4458
	bool IsInParachute();// 0x21e4430
	bool IsInObservingPlayback();// 0x21e4408
	bool IsInInitial();// 0x21e43e0
	bool IsInFreeCameraView();// 0x21e43c4
	bool IsInFinish();// 0x21e439c
	bool IsInFight();// 0x21e4374
	bool IsInDeathReplay();// 0x21e434c
	bool IsInDead();// 0x21e4324
	bool IsForbitPickMakeEffect();// 0x21e42fc
	bool IsForbitPick(out const FName TombName);// 0x21e4268
	bool IsCharacterCanEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x21e419c
	bool IsCanViewEnemy();// 0x21e4174
	bool IsCanSpectateTeammate();// 0x21e414c
	bool IsCanImprisonmentTeammate();// 0x21e4124
	bool IsCacheReceiveRespawnZombie();// 0x21e40fc
	bool IsAutoParachuteEnable();// 0x21e40d4
	bool IsAllowActorTouchMove();// 0x21e40ac
	bool IsAGMPlayer();// 0x21e4084
	void InsertGrenadeIDToName(int GrenadeID, FName Name);// 0x21e3fc8
	void InsertGrenadeIDInOrder(int GrenadeID);// 0x21e3f50
	void InputCameraMoveTest(float DeltaSeconds);// 0x21e3ed8
	void InitWeatherConfigComponent();// 0x21e3ec4
	void InitVehicleAvatarSkinList();// 0x21e3ea8
	void InitVehicleAvatarList();// 0x21e3e8c
	void InitTaskDatas(uint32 InPlayerKey);// 0x21e3e14
	void InitTaskDataDelegate__DelegateSignature(int TaskId, int process, FString ext_info);// 0x2bb69b8
	void InitTaskData(int TaskId, int process, FString ext_info);// 0x21e3c2c
	void InitTaskComponent();// 0x21e3c18
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x2bb69b8
	void InitJoyStickAfterActivation();// 0x2bb69b8
	void InitCollectionDataDelegate__DelegateSignature(int ItemId, int CurrentCount, int TotalCount);// 0x2bb69b8
	void InitCollectionData(int ItemId, int CurrentCount, int TotalCount);// 0x21e3b18
	void InfectionSelectZombieDelegate__DelegateSignature(enum TargetPawnType);// 0x2bb69b8
	void InfectionEndRound();// 0x21e3b04
	void ImprisonmentTeammate(FString TeammateName);// 0x21e3a10
	void HideAllUIAfterDeadTipsShowDelegate__DelegateSignature();// 0x2bb69b8
	void HandleVirtualJoystickInput(out const Geometry Geometry, out const Vector2D ScreenPosition, int PointerIndex, bool MouseDown);// 0x21e3898
	void HandleUpdateShovelingRelease();// 0x21e3884
	void HandleUpdateShovelingPressed();// 0x21e3870
	void HandleUpdateShoveling();// 0x21e385c
	void HandleTogglePlayerListInOB();// 0x21e3848
	void HandleToggleOBTeamList(bool InShow);// 0x21e37c8
	void HandleToggleMapInOB();// 0x21e37b4
	void HandleToggleHitDamageDisplay();// 0x21e37a0
	void HandleToggleBulletTrack();// 0x21e378c
	void HandleTipInfo(FString FullMsg);// 0x21e36d0
	void HandleSwitchToTeammatePrev();// 0x21e36bc
	void HandleSwitchToTeammateNext();// 0x21e36a8
	void HandleSwitchToTeam(int InTeamID);// 0x21e3630
	void HandleSwitchToPlayerIndex(int InPlayerIndex);// 0x21e35b8
	void HandleMsg(enum Msg);// 0x21e3540
	void HandleLeaveFreeViewInOB();// 0x21e352c
	void HandleLandOnGroundEnd();// 0x21e3518
	void HandleFlyLeapPlatform();// 0x21e34bc
	void HandleEnterFreeViewInOB();// 0x21e34a8
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x21e33d8
	void HandleClientHasReactivated();// 0x21e33c4
	void HandleChangeRolewearDone();// 0x2bb69b8
	void HandleCameraModeChanged(byte NewMode, STExtraBaseCharacter* InCharacter);// 0x21e3308
	int GotoSpectating(int TeammatePlayerid);// 0x21e3280
	void GotoFlying();// 0x21e326c
	void GotoDoubleCircleEdge(float Z);// 0x21e31f4
	void GMTeleport(FName Teleporter);// 0x21e317c
	void GMSetScalarParam(FString Name, FString ShaderName, float Value);// 0x21e2ec8
	void GMSetCampId(int CamId);// 0x21e2e50
	void GMSetBoolPoisonCircle();// 0x21e2e3c
	void GMSetBoolAirDrop();// 0x21e2e28
	void GMSetBoolAirAttack();// 0x21e2e14
	void GMSetBoolAI();// 0x21e2e00
	void GMSendDailyTaskReport();// 0x21e2dec
	void GMOpenWeather(int OpenWeatherID);// 0x21e2d74
	void GMEnableRandom();// 0x21e2d60
	void GMEnableAllComponent();// 0x21e2d4c
	void GMDisableRandom();// 0x21e2d38
	void GMDisableAllComponent();// 0x21e2d24
	void GMCloseWeather(int CloseWeatherID);// 0x21e2cac
	void GMBroastSyncTaskInfo();// 0x21e2c98
	void GMBeginCircle(int CurIndex, float PosX, float PosY);// 0x21e2b98
	int GetWriteCircleDistance();// 0x21e2b70
	WeatherConfigComponent* GetWeatherConfigComponent();// 0x21e2b48
	static WeaponHitDisanceSectionArray GetWeaponHitDistanceSectionByID(int ID);// 0x21e2a4c
	int GetWeaponDIYPlanID(int WeaponId);// 0x21e29cc
	int GetWeaponAvatarItemId(int BPID);// 0x21e2944
	int GetWeaponAvatarID(int WeaponId, bool isGrenade);// 0x21e2878
	float GetViewPortDPIScale();// 0x21e2848
	VehicleUserComponent* GetVehicleUserComp();// 0x21e2820
	bool GetUseMotionControlLog();// 0x21e27f8
	bool GetUseMotionControlEnable();// 0x21e27d0
	int GetUnlockWearCount();// 0x21e27a8
	float GetTouchForce(byte FingerIndex);// 0x21e2728
	Actor* GetThePlane();// 0x21e2708
	STExtraPlayerState* GetTeammatePlayerStateFromPlayerTombBox(const PlayerTombBox* TombBox);// 0x21e2688
	SpringArmComponent* GetTargetedSpringArm();// 0x21e2660
	int GetStatTriangles();// 0x1f07b2c
	FString GetStatMemory();// 0x21b487c
	int GetStatDrawCalls();// 0x1f07b2c
	BattleItemData[] GetSpecialClothingInAllBackpack(int Index);// 0x21e2508
	int[] GetSpecialClothingCountInAllBackpack(int Index);// 0x21e2400
	int[] GetSpecialAreaList();// 0x21e2340
	int GetSpecialAreaID();// 0x21e2318
	SIslandInactiveClearComponent* GetSIslandInactiveClearComponent();// 0x21e22f0
	Rotator GetSensibilityRate(float YawInput, float PitchInput, bool bIsMotionControl);// 0x21e21cc
	BattleSceneAvatarDisplayInfo GetSelfAvatarDisplayInfo();// 0x21e2070
	int GetRevivalCountDownTime();// 0x21e2048
	FString GetRenderThreadTime();// 0x21b487c
	FString GetRemarkNameByGID(FString actorName, FString actorUID);// 0x2bb69b8
	QuickSignComponent* GetQuickSignComponent();// 0x21e2020
	STScreenAppearanceComponent* GetPlayerScreenAppearanceComponent();// 0x21e1ff8
	PlayerInfoInOB GetPlayerInfoInOBByName(FString InPlayerName);// 0x21e1f10
	STExtraBaseCharacter* GetPlayerCharacterSafety();// 0x21e1ee8
	CharacterParachuteComponent* GetParachuteComponent();// 0x21e1ec0
	AnimationAsset* GetParachuteAnimAsset(byte AnimType, byte AnimOverrideType);// 0x21e1dfc
	Transform GetPaintDecalTargetTransform();// 0x21e1d9c
	ObservingReplay* GetObservingPlayback();// 0x21e1d74
	Vector GetNewestAirDropBoxPos();// 0x21e1d2c
	PlayerInfoInOB[] GetNearPlayerList();// 0x21e1c1c
	STExtraPlayerController*[] GetMyObservers();// 0x21e1bb4
	FString GetMurderUIDStr();// 0x21e1ab8
	FString GetMurderName();// 0x21e19f8
	bool GetMurderIsAI();// 0x21e19c0
	BattleItemData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x21e1784
	byte GetMaxTouchForceFinger();// 0x21e1744
	Vector2D GetJoyStickVisualSize();// 0x21e1704
	Vector2D GetJoyStickCenter();// 0x21e16c4
	int GetItemUseSpecialAreaID(int ItemId);// 0x21e1644
	bool GetIsRespawn();// 0x21e1624
	bool GetIsMurderSameTeam();// 0x21e15ec
	bool GetIsFreeCamera();// 0x21e15cc
	enum GetInfectionPawnSubType();// 0x21e15a4
	enum GetInfectionPawnMainType();// 0x21e157c
	IdeaDecalManager* GetIdeaDecalManager();// 0x21e1554
	FString GetGameThreadTime();// 0x21b487c
	void GetGameStateReconnectInfoOnServer();// 0x21e14f8
	void GetGameScreenSize();// 0x1ee1bb4
	void GetGameResult();// 0x21e14e4
	LastGameRemainItemData GetGameRemainItems();// 0x21e13f4
	int GetFriendDistance();// 0x1f07b2c
	Vector GetFocalLocation();// 0x21e13a4
	FString GetFinalMurderName();// 0x21e1284
	WeaponHitDetailInfo GetDetailHitInfo();// 0x21e1150
	void GetDailyTaskReportData(out DailyTaskReportInfo ResultData);// 0x21e0fd4
	enum GetCurrentStateType();// 0x21e0fac
	Vector GetCurrentLevelOffset();// 0x21e0f64
	STExtraPlayerState* GetCurPlayerState();// 0x21e0f3c
	int GetCurPlayerId();// 0x21e0f14
	STExtraBaseCharacter* GetCurPlayerCharacter();// 0x21e0eec
	Vector GetCurPawnLocation();// 0x21e0ea4
	Pawn* GetCurPawn();// 0x21e0e7c
	float GetCurFPS();// 0x1f07b2c
	Rotator GetControlLookRotation();// 0x21e0e2c
	Vector GetControlLookPoint(int LineTraceRange, out bool HitTaget);// 0x21e0d40
	BattleItemData[] GetClothingInAllBackpack(int Index);// 0x21e0be8
	class Object GetClassFromBPClassManager(class Object BaseClass);// 0x21e0b68
	ChatComponent* GetChatComponent();// 0x21e0b40
	uint32 GetBeKickedPlayerKey();// 0x21e0b18
	BackpackComponent* GetBackpackComponent();// 0x21e0af0
	AllStarReportData GetAllStarReportDataByOpenID(FString InPlayerOpenID);// 0x21e0a24
	void GenerateIdCardMark(out const Vector Loc);// 0x21e0998
	SearchedTombBoxAndWrapperListResult[] GenerateAirDropData(int boxId);// 0x21e0834
	void GameModeGotoNextState();// 0x21e0820
	void GameModeGotoFightingState();// 0x21e080c
	void FreeCameraTouchMove(Vector Loc, byte FingerIndex);// 0x21e0750
	void ForceServerSetControlRotationOnVehicle();// 0x21e073c
	void ForceReleaseCurTouchMoveFinger();// 0x21e0728
	void ForceDropItemsWithTypeList(out const int[] TypeList);// 0x21e065c
	void ForceDropItemsWithType(int TypeItem);// 0x21e05e4
	void ForceDropItemsWithoutTypeList(out const int[] IgnoreTypeList);// 0x21e0518
	void ForceDropItems(out const int[] ItemTableList);// 0x21e044c
	void ForceDropAllItem();// 0x21e0438
	void FlushItem(int onlyStatic);// 0x21e03c0
	void FireTakeDamagedEvent(Vector CauserLocation);// 0x21e0350
	void FireOrGrenade();// 0x21e033c
	void FindAIDropItem(int ItemId);// 0x21e02c4
	void Fight();// 0x21e02b0
	void FadeSceneToGrayOnDeath(bool bSet);// 0x21e0230
	BattleSceneAvatarDisplayInfo ExtractAvatarDisplayInfo(STExtraPlayerCharacter* TargetCharacter);// 0x21e008c
	void ExitNightState();// 0x21e0078
	void ExitFreeCamera(bool IsForceReset);// 0x21dfff8
	void ExecDSCommand(const FString DSCommand);// 0x21dff34
	void EquipIceDrinkItems(out const int[] ItemList);// 0x21dfe68
	void EnterVehicleDelegate__DelegateSignature(bool IsEnter, Actor* Vehicle);// 0x2bb69b8
	void EnterNightState();// 0x21dfe54
	void EnterExtreme(bool enterOrQuit);// 0x21dfdd4
	void EndTouchScreen(Vector Loc, byte FingerIndex, bool UseOldEndFireJudge);// 0x21dfccc
	void EndForceTouchFire(Vector Loc);// 0x21dfc5c
	void EnablePlayerInHouse(bool bIsIn);// 0x21dfbdc
	void EnableMyLandscapeDraw();// 0x1ee1bb4
	void EnableGuidActorDelegate__DelegateSignature(int GuidID, bool bNewEnable);// 0x2bb69b8
	void EnableAutoParachute(bool bEnable);// 0x21dfb5c
	void DynamicCreateComponents();// 0x21dfb48
	void DsLuaGM(const FString CmdString);// 0x21df9f0
	void DsLuaDoString(FString LuaString);// 0x21df934
	void DropItemsWithType(int TypeItem);// 0x21df8bc
	void DropItem(int ID);// 0x21df844
	void DropAllItem();// 0x21df830
	void DoUITouchMove(Vector Loc);// 0x2bb69b8
	void DoubleClickCancel(const byte FingerIndex);// 0x21df7b8
	void DoTouchMove(float Yaw, float Pitch);// 0x2bb69b8
	void DoRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x21df704
	void DoGiveUpRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x21df650
	void DoAfterCanNotPickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x2bb69b8
	void DisplayLuaGameTips(FString FunctionName, int ID, FString param1, FString param2);// 0x21df444
	void DisplayGameWarningTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x21df18c
	void DisplayGameTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x21deed4
	void DisplayGameTipWithMsgID(int ID);// 0x21dee5c
	void DisplayGameTipForLowFPSWarning(int ID, FString param1, FString param2);// 0x21deba4
	void DisplayBattleGeneralTip(int ID, FString param1, FString param2);// 0x21de8ec
	void DispatchPlayerRespawnedEvent(UAEPlayerController* PlayerController);// 0x21de874
	void DispatchPlayerReconnectedEvent();// 0x21de860
	void DispatchPlayerLostEvent();// 0x21de84c
	void DispatchPlayerExitEvent();// 0x21de838
	void DispatchPlayerAboutToRespawnEvent(UAEPlayerController* PlayerController);// 0x21de7c0
	void DisableMyLandscapeDraw();// 0x1ee1bb4
	void DelegatePlayerLevelChange__DelegateSignature(int Level);// 0x2bb69b8
	void DelegatePlayerGoldChange__DelegateSignature(int Gold);// 0x2bb69b8
	void DelayGotoSpectating();// 0x21de7ac
	void DelayForceExitFreeCamera();// 0x21de798
	void DebugWorldPlayerAvatarInfo();// 0x21de784
	void DebugSetUIVisibility(bool bUIVisibility);// 0x2bb69b8
	void DebugEnableFerrisWheelTick(bool bEnable);// 0x21de704
	void DebugEnableDrawSearchLine(int bEnabled);// 0x1fa0fcc
	void DebugEnableBulletImpact(int bEnabled);// 0x1fa0fcc
	void DebugAirDropPickInfo(float DrawTime, float BoxDrawSize, float BoxDrawLineLength, float ListWrapperDrawSize, float ListWrapperDrawLineLength);// 0x21de574
	void DealGetAllNearShotWeapon(float disRate);// 0x21de4fc
	void DealGetAllNearMoveVehicle(float checkDis, float minSpeed);// 0x21de440
	void DealGetAllNearMoveCharacter(float checkDis);// 0x21de3c8
	void DeactiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x21de304
	void CorrectVehicleState(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x21de148
	void ConsumeRevivalSign();// 0x21de12c
	void CollectAllPlayerWeaponPosInfo();// 0x1ee1bb4
	void ClientUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation);// 0x21de014
	void ClientStopShoveling();// 0x21ddfb8
	void ClientStartOnlineGame();// 0x21ddf9c
	void ClientShowInfectAreaWarning();// 0x21ddf40
	void ClientSetTotalPlayers(const PlayerStaticInfoInOB[] InPlayerStaticInfoList, const PlayerBaseInfoInOB[] InTotalPlayers);// 0x21dddb8
	void ClientSetPoisonSmogStage(int SmogStage);// 0x21ddd04
	void ClientSetOBData(uint32 InPlayerKey, int InTeamID, STExtraBaseCharacter* CurViewChar);// 0x21ddbfc
	void ClientSetControlRotation(const Rotator NewRotation);// 0x21ddb84
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x21dda88
	void ClientSetAIPosToTarget(Vector StartPos, Vector targetPos);// 0x21dd9c0
	void ClientSetAIPos(uint32 KeyID, Vector pos, bool isStart);// 0x21dd8ac
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);// 0x21dd7dc
	void ClientQuitViewEnemy();// 0x21dd7c0
	void ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x21dd6c0
	void ClientOnLeaveVehicleDelegate__DelegateSignature();// 0x2bb69b8
	void ClientOnHurt();// 0x21dd6a4
	void ClientOnEnterVehicleDelegate__DelegateSignature(int SeatType);// 0x2bb69b8
	void ClientOnDeathReplayDataWhenFatalDamaged__DelegateSignature(bool bIsDead, out const DeathReplayData DeathReplayData);// 0x2bb69b8
	void ClientOnDamageToOther(float _DamageToOther);// 0x21dd624
	void ClientOnChangeVehicleSeatCompletedDelegate__DelegateSignature(enum SeatType);// 0x2bb69b8
	void ClientObserveCharacter(uint32 InPlayerKey, bool IsOnPlane, enum InServerStateType);// 0x21dd510
	void ClientInterruptGame();// 0x21dd4b4
	void ClientInitIngameUIAfterRespawn();// 0x21dd458
	void ClientHearSound(int AkEventID, const Vector AkLocation);// 0x21dd39c
	void ClientHandleMsg(enum Msg, int64 TimeStamp);// 0x21dd2d4
	void ClientGotoSpectating();// 0x21dd2b8
	void ClientGiveUpRevivalTemmates();// 0x21dd29c
	void ClientGameStarted();// 0x21dd280
	void ClientFriendBattleEnd();// 0x21dd264
	void ClientForbidLoadParahuteAnim(bool bCanForbid);// 0x21dd1dc
	void ClientExitFromHelicopter(bool SkipOpenParachute);// 0x21dd154
	void ClientEnterViewBox(int boxId);// 0x21dd0d4
	void ClientEndOnlineGame();// 0x21dd0b8
	void ClientDisplayNormalTips(FString Content);// 0x21dcff4
	void ClientDisplayLuaGameTips(FString FunctionName, int ID, FString param1, FString param2);// 0x21dcde0
	void ClientDisplayGameTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x21dcc1c
	void ClientDisplayGameTipWithMsgID(int ID);// 0x21dcb68
	void ClientCheckStartShovelingFail();// 0x21dcb0c
	void ClientChangeWeaponFunction(enum NewWeaponFunction);// 0x21dca58
	void ClientChangeStatePC(enum TargetStateType);// 0x21dc9d8
	void ClearParachuteAnimAssetCache();// 0x21dc9c4
	void ClearDeadTombBox();// 0x21dc9b0
	void ClearBossBornPoint();// 0x21dc99c
	Vector2D ClampFreeCamIconOffset(out const Geometry MyGeometry);// 0x21dc8fc
	bool CientRevivalTemmates();// 0x21dc8d4
	bool CheckNeedReport(out const SACData InAntiCheatData);// 0x21dc808
	void CheckConsumeGlideItem();// 0x21dc7f4
	bool CheckAllVehicleWeaponIsReadyForFire(bool WithBroadEvent);// 0x21dc76c
	bool ChangeWeaponSchemeIndex(int NewIndex);// 0x21dc6ec
	void ChangeWeaponFunction(enum NewWeaponFunction);// 0x21dc674
	void ChangeToWalkingDead();// 0x21dc660
	void ChangeStatePC(enum TargetStateType);// 0x21dc5e8
	void ChangeSpectatorStateToFreeView();// 0x21dc5d4
	bool ChangeRolewearIndex(int NewIndex);// 0x21dc554
	void ChangePVELevel(int Lv);// 0x21dc4dc
	void ChangeCharacterLogicDelegate__DelegateSignature(enum TargetPawnType);// 0x2bb69b8
	void ChangeCharacterBeforeDelegate__DelegateSignature(enum TargetPawnType);// 0x2bb69b8
	void ChangeAIBehaviorTree(int TreeIndex);// 0x21dc464
	void CanSeeAllUI(bool bUIVisibility);// 0x1f5da78
	bool CanBePickUpByItemID(out const ItemDefineID DefineID);// 0x21dc3c4
	bool CanBePickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x21dc2b4
	bool CanAutoSwitchGrenade(int GrenadeID);// 0x21dc22c
	void CallZombieFlowAirDrop(int ZombieID);// 0x21dc1b4
	void CallZombieAirDrop(int ZombieID);// 0x21dc13c
	void CallTeamMateUAVStateChanged(TeamMateStateInfo TeamMateInfo);// 0x21dc084
	void CallTeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector Location, Rotator Rotation, float Health, int VoiceID, float Temperature);// 0x21dbea0
	void CallShowTouchInterface(bool InShow);// 0x21dbe18
	void CalInputFromRotaionRate(out float OutPitch, out float OutYaw, out bool bIsAddPitch, out bool bIsAddYaw, Vector CurMotionData, float PitchReverce, float MotionTouchRate_Pitch, float MotionTouchAimRate_Pitch, float MotionRate_Pitch, float MotionAimRate_Pitch, float MotionTouchRate_Yaw, float MotionTouchAimRate_Yaw, float MotionRate_Yaw, float MotionAimRate_Yaw, float MotionRate_Pitch_Threshold, float MotionRate_Yaw_Threshold, float Left, float Right, bool bLandScapeOrientation);// 0x21db848
	Vector2D CalcAttactBtnPos(float LocX, float LocY, float SizeX, float SizeY);// 0x21db6e8
	void CacheShootDetailInfoShootNum(int ShootNum);// 0x21db670
	void CacheShootDetailInfoHitPos(byte HitPos);// 0x21db5f8
	void CacheRecvInfectionSelectZombie__DelegateSignature(bool bRecv);// 0x2bb69b8
	void C2S_RequestSkillPrompt();// 0x21db59c
	void C2S_RequestBeingRescuedRemainingTime();// 0x21db540
	void BroadcastFatalDamageToClientWithStruct(const FatalDamageParameter FatalDamageParameter);// 0x21db3f0
	void BroadcastClientsSpawnExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x21db180
	SpringArmComponent* BPGetTargetedSpringArm();// 0x21db150
	bool BPGetIsAndroidSimulator();// 0x21db128
	void BPCastUIMsgWithTwoParam(FString Func, FString module, FString param1, FString param2);// 0x21daedc
	void BPCastUIMsgWithParam(FString Func, FString module, FString param1);// 0x21dad18
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x2bb69b8
	void BluePrintSetViewTarget(STExtraBaseCharacter* pCharacter);// 0x21daca0
	void BindVoiceCheckFunction();// 0x21dac8c
	void BindVirtualJoystickInputDelegates(bool bBind);// 0x21dac0c
	void BeginTouchScreen(Vector Loc, byte FingerIndex);// 0x21dab50
	void BeginAbsorb();// 0x21daaf4
	void BackToGameDataRefresh();// 0x21daae0
	bool AutoSelectViewTarget();// 0x21daab8
	void AutoSelectTeammateToView();// 0x21daaa4
	void AddWeaponPendantItem(int WeaponId, int pendantID);// 0x21da9e8
	void AddTouchMoveFinger(byte FingerIndex, byte Priority, out const Vector TouchLoc);// 0x21da8dc
	void AddParachuteAnimAssetCache(byte AnimType, AnimationAsset* AnimAsset, byte AnimOverrideType);// 0x21da7dc
	void AddItemAttachList(int BaseItemID);// 0x21da764
	void AddItem(int ID, int Count, int PickupType);// 0x21da664
	void AddCharacterVirtualItemToBackpack();// 0x21da650
	void AddBossBornPoint(float BornX, float BornY);// 0x21da594
	void AddAvatarItem(int ID, int Color, int Pattern, int Num);// 0x21da44c
	void AddAIItem(int ID, int Count, float Distance);// 0x21da34c
	void ActiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x21da288
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x21da208

--------------------------------
Class: UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	FName PlayerType;//[Offset: 0x638, Size: 8]
	FString PlayerName;//[Offset: 0x640, Size: 12]
	uint32 PlayerKey;//[Offset: 0x64c, Size: 4]
	uint64 UId;//[Offset: 0x650, Size: 8]
	FString PlayerOpenID;//[Offset: 0x658, Size: 12]
	int TeamID;//[Offset: 0x664, Size: 4]
	int64 IdxInTeam;//[Offset: 0x668, Size: 8]
	int CampID;//[Offset: 0x670, Size: 4]
	Vector CharacterLocation;//[Offset: 0x674, Size: 12]
	int RoomMode;//[Offset: 0x680, Size: 4]
	WeatherInfo WeatherInfo;//[Offset: 0x684, Size: 20]
	int planeAvatarId;//[Offset: 0x698, Size: 4]
	int DyeDebugFlag;//[Offset: 0x69c, Size: 4]
	int PlayerStartID;//[Offset: 0x6a0, Size: 4]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a4, Size: 1]
	PlayerNetStats NetStats;//[Offset: 0x6a8, Size: 48]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 1]
	FString PlanetailResLink;//[Offset: 0x6dc, Size: 12]
	int InPacketLossRate;//[Offset: 0x6e8, Size: 4]
	int OutPacketLossRate;//[Offset: 0x6ec, Size: 4]
	int ClientNetworkType;//[Offset: 0x6f0, Size: 4]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70c, Size: 1]
	bool bIsGlobalObserverForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70d, Size: 1]
	int GameReplayType;//[Offset: 0x710, Size: 4]
	GameModePlayerUpassInfo InitialUpassInfo;//[Offset: 0x714, Size: 44]
	GameModePlayerUpassInfo[] InitialUpassInfoList;//[Offset: 0x740, Size: 12]
	PlayerOBInfo[] PlayerOBInfoList;//[Offset: 0x74c, Size: 12]
	int LobbyShowWeaponID;//[Offset: 0x758, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75c, Size: 1]
	FString Nation;//[Offset: 0x760, Size: 12]
	bool bIsTeammateEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76c, Size: 1]
	enum DefaultCharacterGender;//[Offset: 0x774, Size: 1]
	int DefaultCharacterHeadID;//[Offset: 0x778, Size: 4]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x77c, Size: 12]
	GameModePlayerRolewearInfo[] InitialAllWear;//[Offset: 0x788, Size: 12]
	int RolewearIndex;//[Offset: 0x794, Size: 4]
	int[] equip_plating_list;//[Offset: 0x798, Size: 12]
	int VehicleSkinInReady;//[Offset: 0x7a4, Size: 4]
	bool bSpwanInVehiclePlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	GameModePlayerItem[] InitialWeaponAvatarList;//[Offset: 0x7ac, Size: 12]
	GameModePlayerPetInfo InitialPetInfo;//[Offset: 0x7b8, Size: 24]
	GameModePlayerKnapsackExtInfo[] InitialKnapsackExtInfo;//[Offset: 0x7d0, Size: 12]
	GameModePlayeWeaponSchemeInfo[] InitialWeaponSchemeInfo;//[Offset: 0x7dc, Size: 12]
	delegate OnInitialWeaponScheme;//[Offset: 0x7e8, Size: 12]
	int CurWeaponSchemeIndex;//[Offset: 0x7f4, Size: 4]
	int PveLevel;//[Offset: 0x7f8, Size: 4]
	int[] InitialCharSkillList;//[Offset: 0x7fc, Size: 12]
	GameModePlayerItem[] InitialVehicleAvatarList;//[Offset: 0x808, Size: 12]
	GameModePlayerItems[] InitialVehicleAvatarSkinList;//[Offset: 0x814, Size: 12]
	int ShowVehicleSkin;//[Offset: 0x820, Size: 4]
	GameModePlayerItem[] InitialBackPackPendantList;//[Offset: 0x824, Size: 12]
	VehicleAvatarData[] InitialVehicleAdvanceAvatarList;//[Offset: 0x830, Size: 12]
	GameModePlayerItem[] InitialVehicleMusicList;//[Offset: 0x83c, Size: 12]
	GameModePlayerConsumableAvatar InitialConsumableAvatar;//[Offset: 0x848, Size: 16]
	GameModePlayerEquipmentAvatar InitialEquipmentAvatar;//[Offset: 0x858, Size: 12]
	<int,int> WeaponAvatarItemList;//[Offset: 0x864, Size: 60]
	<int,int> GrenadeAvatarItemList;//[Offset: 0x8dc, Size: 60]
	GameModeWeaponAvatarData[] WeaponAvatarDataList;//[Offset: 0x918, Size: 12]
	<int,int> VehicleAvatarList;//[Offset: 0x924, Size: 60]
	<int,VehicleAvatarData> VehicleAdvanceAvatarList;//[Offset: 0x960, Size: 60]
	<int,VehicleAvatarSkinList> VehicleAvatarSkinList;//[Offset: 0x99c, Size: 60]
	int[] VehicleMusicList;//[Offset: 0x9d8, Size: 12]
	int[] DefaultVehicleMusic;//[Offset: 0x9e4, Size: 12]
	GameModePlayerExpressionItem[] InitialExpressionItemList;//[Offset: 0x9f0, Size: 12]
	GameModeWeaponDIYPlanData[] InitialWeaponDIYPlanData;//[Offset: 0x9fc, Size: 12]
	<int,int> WeaponDIYPlanDataMap;//[Offset: 0xa08, Size: 60]
	<int,int> InitialWeaponPendantList;//[Offset: 0xa44, Size: 60]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0xa80, Size: 12]
	SpecialPickItem[] InitialSpecialPickItemList;//[Offset: 0xa8c, Size: 12]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0xa98, Size: 12]
	uint32 TaskSyncToDsTs;//[Offset: 0xaa4, Size: 4]
	BornItem[] BornItems;//[Offset: 0xaa8, Size: 12]
	int AnchorPlatResID;//[Offset: 0xab4, Size: 4]
	int AnchorPlatColorID;//[Offset: 0xab8, Size: 4]
	int64 LastGameResultTime;//[Offset: 0xad0, Size: 8]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad9, Size: 1]
	FString IpCountryStr;//[Offset: 0xadc, Size: 12]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae8, Size: 1]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae9, Size: 1]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaea, Size: 1]
	bool bIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaeb, Size: 1]
	uint32 WatchPlayerKey;//[Offset: 0xaec, Size: 4]
	bool bIsWatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf0, Size: 1]
	float UpdateOBCircleCounter;//[Offset: 0xaf4, Size: 4]
	float UpdateOBCircleInterval;//[Offset: 0xaf8, Size: 4]
	bool bAllowAutoSelectTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xafc, Size: 1]
	FString[] FriendObservers;//[Offset: 0xb00, Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0c, Size: 1]
	bool bIsSpectatingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb18, Size: 1]
	UAEUserWidget* InGameUIRoot;//[Offset: 0xb60, Size: 8]
	bool bReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6c, Size: 1]
	bool bReconnecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6d, Size: 1]
	delegate PlayerControllerLostDelegate;//[Offset: 0xb7c, Size: 12]
	delegate SyncDailyTaskInfoDelegate;//[Offset: 0xb88, Size: 12]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0xb94, Size: 12]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0xba0, Size: 12]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0xbac, Size: 12]
	delegate PlayerControllerAboutToRespawnDelegate;//[Offset: 0xbb8, Size: 12]
	delegate PlayerControllerRespawnedDelegate;//[Offset: 0xbc4, Size: 12]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0xbd0, Size: 12]
	delegate OnPlayerQuitSpectatingForClient;//[Offset: 0xbdc, Size: 12]
	delegate OnPlayerControllerBattleBeginPlay;//[Offset: 0xbe8, Size: 12]
	bool bCanWatchEnemyInRoomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0c, Size: 1]
	int[] BuffEffectDisplayIDArray;//[Offset: 0xc14, Size: 12]
	bool IsDelayNotifyEnterBattleUntilLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc20, Size: 1]
	float NotifyTimeOut;//[Offset: 0xc24, Size: 4]
	float DelayCloseLoadingTime;//[Offset: 0xc28, Size: 4]
	FString NeedLoadLevelName;//[Offset: 0xc2c, Size: 12]
	FString NeedLoadedLevelFullName;//[Offset: 0xc38, Size: 12]
	bool IsTickHouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc44, Size: 1]
	int AntiDataCD;//[Offset: 0xc50, Size: 4]
	int ModeID;//[Offset: 0xc54, Size: 4]
	bool bOpenReconnectUseCharViewPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 1]
	float ClientToDSFlowLimitTime;//[Offset: 0xc80, Size: 4]
	float ClientToDSFlowLimit;//[Offset: 0xc84, Size: 4]
	bool UseingWeaponScheme();// 0x27e0728
	void TestShowLongTimeNoOperation();// 0x27e06ec
	void TestShowConfirmDialogOfMisKill();// 0x27e06d8
	void TestRespawn();// 0x1ee1bb4
	void TestLogout();// 0x1ee1bb4
	void TestCastUIMsgWithPara(FString strMsg, FString module, int TestID);// 0x27e0554
	void SyncDailyTaskStoreInfo(DailyTaskStoreInfo[] NewDailyTaskStoreList);// 0x27e03f8
	void SetUsedSimulationCVar(bool Value);// 0x27e0378
	static void SetTargetMsgReceiveDelegate(GameInstance* InGameInstance, delegate InDelegate);// 0x27e0298
	void SetPanels(out const UAEUserWidget*[] panels);// 0x27e01c4
	static void SetDSMsgReceiveDelegate(delegate InDelegate);// 0x27e0128
	static void SetClientMsgReceiveDelegate(GameInstance* InGameInstance, delegate InDelegate);// 0x27e0048
	void ServerTestLogout();// 0x27dffec
	void ServerSetVoiceId(int VoiceID);// 0x27dff38
	void ServerKickSelf();// 0x27dfedc
	void ServerGotoSpectating(Pawn* ViewTarget);// 0x27dfe28
	void ServerExitGame();// 0x27dfdcc
	void ServerAcknowledgeReconnection(uint32 Token);// 0x27dfd18
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x27dfc08
	void SendLuaClientToDS(int ID, out const byte[] Content);// 0x27dfaf8
	void RPC_Server_SyncClientNetInfo(int InLoss, int OutLoss, int InNetworkType);// 0x27df9b4
	void RPC_Server_ReportClientNetInfo(int AvgPing, int MaxPing, int MinPing, int LostPackRate, int AvgNoOutlier, int StdNoOutlier, int NumNoOutlier, int InLoss, int OutLoss);// 0x27df69c
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x27df560
	void RPC_LuaClientToDS(int ID, const byte[] Content);// 0x27df424
	void Respawn();// 0x27df408
	void ResetUsedSimulationCVar();// 0x27df3f4
	void ReleaseInGameUI();// 0x27df3d8
	void ReceivePostLoginInit();// 0x2bb69b8
	void PrintStatistics();// 0x1ee1bb4
	void PlayerStartIDReceived();// 0x27df3c4
	void OnRep_WeaponAvatarDataList();// 0x21e6de4
	void OnRep_WatchPlayerKey();// 0x27df3a8
	void OnRep_UsedSimulation();// 0x21e6dc8
	void OnRep_PveLevel();// 0x27df38c
	void OnRep_PlayerOBInfoList();// 0x27df378
	void OnRep_LastGameResultTime();// 0x27df35c
	void OnRep_IsSpectatingEnemy();// 0x27df340
	void OnRep_IsSpectating();// 0x27df324
	void OnRep_IsObserver();// 0x27df308
	void OnRep_InitialWeaponSchemeInfo();// 0x27df2f4
	void OnRep_InitialEquipmentAvatar();// 0x21e6ca4
	void OnRep_InitialConsumableAvatar();// 0x21e6c88
	void OnRep_FriendObservers();// 0x27df2d8
	void OnRep_CurWeaponSchemeIndex();// 0x1ee1bb4
	void OnRep_bRoomOwner();// 0x27df2bc
	void NotifyEnterBattle();// 0x27df2a8
	void LuaDoString(FString LuaString);// 0x27df1e4
	void KickSelf();// 0x1ee1bb4
	bool IsSpectatorOrDemoPlayer();// 0x27df1bc
	bool IsSpectator();// 0x27df194
	bool IsRoomMode();// 0x27df170
	bool IsPureSpectator();// 0x27df148
	bool IsObserver();// 0x27df120
	bool IsInSpectatingEnemy();// 0x27df0f8
	bool IsInSpectating();// 0x27df0d0
	bool IsFriendOrEnemySpectator();// 0x27df0a8
	bool IsFriendObserver();// 0x27df080
	bool IsExited();// 0x27df058
	bool IsDemoRecSpectator();// 0x27df030
	bool IsDemoPlaySpectator();// 0x20565dc
	bool IsDemoPlayGlobalObserver();// 0x27df008
	void InitWithPlayerParams(out const GameModePlayerParams Params);// 0x27def5c
	void InitWeaponAvatarItems();// 0x27def40
	void InitVehicleMusicList();// 0x27def24
	void InitVehicleAvatarSkinList();// 0x21e3ea8
	void InitVehicleAvatarList();// 0x21e3e8c
	void InitVehicleAdvanceAvatarList();// 0x27def08
	void InitIngameUI();// 0x27deeec
	void InitGrenadeAvatarList(bool ReInitial);// 0x27dee64
	int GotoSpectating(int PlayerID);// 0x21e3280
	bool GetWeaponPandentReflect(int wraponID, out int pendantID);// 0x27ded90
	int GetWeaponAvatarItemId(int ID);// 0x21e2944
	void GetVisibleLevelsLoadedName(out FString[] VisibleLevels);// 0x27dec5c
	DailyTaskStoreInfo GetDailyTaskStoreInfoByTaskId(int TaskId);// 0x27debcc
	int GetCurrentWeaponSchemeMainSlotItemId();// 0x27deba4
	uint32 GetCurrentOBPlayerKey();// 0x27deb74
	int GetCurrentOBPlayerInfoIndex();// 0x27deb4c
	void ForceNetReady();// 0x27deb38
	void ExitGame();// 0x27deb24
	void ExhaustCPU();// 0x27deb10
	void ExecDSCommand(const FString DSCommand);// 0x21dff34
	void ExcuteIntRecord(FString Key, int Count);// 0x27de974
	void ExcuteIntCounterRecord(FString Key, int Count);// 0x27de7d8
	void EnableInGameUI();// 0x27de7c4
	void DumpUAENetActors();// 0x27de7b0
	void DumpRegions();// 0x27de79c
	void DumpNetActors();// 0x1ee1bb4
	void DumpCharacters();// 0x27de788
	void DumpAllUI();// 0x1ee1bb4
	void DumpAllObjects();// 0x1ee1bb4
	void DumpAllActors();// 0x1ee1bb4
	void DoLuaFile(FString Filename);// 0x27de6c4
	void DoCrash();// 0x1ee1bb4
	void DisableInGameUI();// 0x27de6b0
	void DealWithPickUpFailed(ItemDefineID DefineID);// 0x27de620
	void ClientShowTeammateEscapeNotice();// 0x27de604
	void ClientRPC_CastUIMsgWithStrings(FString strMsg, FString module, const int TipsID, FString param1, FString param2);// 0x27de368
	void ClientRPC_CastUIMsgParams(FString strMsg, FString module, const int Type);// 0x27de1dc
	void ClientRPC_CastUIMsg(FString strMsg, FString module);// 0x27de094
	void ClientInitPlayerOBInfoButton();// 0x27de078
	void ClientBroadcastRespawnComplete();// 0x27de05c
	void ClientBroadcastReconnectionSuccessful();// 0x27de040
	void ClientAcknowledgeReconnection(uint32 Token);// 0x27ddfc0
	void CheckPlayerOBInfoButtonInit();// 0x27ddfa4
	bool CheckAcknowledgedPawn(Pawn* InPawn);// 0x27ddf1c
	void CastUIMsg(FString strMsg, FString module);// 0x27dddd4
	enum CanPickUpItem(ItemDefineID DefineID);// 0x27ddd3c
	void CallLuaTableFunction(FString tableName, FString FunctionName);// 0x27ddbf4
	void CallLuaGlobalFunction(FString FunctionName);// 0x27ddb30
	void BroadcastRespawnComplete();// 0x27ddb1c

--------------------------------
Class: LuaPlayerController.PlayerController.Controller.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x5e4, Size: 60]
	FString LuaFilePath;//[Offset: 0x620, Size: 12]

--------------------------------
Class: BP_FourInOneSoftBoundCheckComponent_C.FourInOneSoftBoundCheckComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd8, Size: 4]
	void OnInsideSoftBoundStatusChanged(bool bIsInside);// 0x2bb69b8
	void ExecuteUbergraph_BP_FourInOneSoftBoundCheckComponent(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_Event_bIsInside);// 0x2bb69b8
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	int NewVar;//[Offset: 0xe0, Size: 4]
	float NewVar;//[Offset: 0xe4, Size: 4]
	Transform NewVar;//[Offset: 0xf0, Size: 48]
	Object* NewVar;//[Offset: 0x120, Size: 4]
	FString NewVar;//[Offset: 0x124, Size: 12]
	AirDropVisionInfo NewVar;//[Offset: 0x130, Size: 20]

--------------------------------
Class: FourInOneSoftBoundCheckComponent.ActorComponent.Object
	PolygonSoftBoundaryActor* PolygonSoftBoundary;//[Offset: 0xbc, Size: 4]
	float TickIntervalOverride;//[Offset: 0xc0, Size: 4]
	float DamagePerGap;//[Offset: 0xc4, Size: 4]
	float DamageGap;//[Offset: 0xc8, Size: 4]
	bool bIsInsideSoftBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	STExtraPlayerController* OwnerPlayer;//[Offset: 0xd4, Size: 4]
	void OnInsideSoftBoundStatusChanged(bool bIsInside);// 0x1f2cc6c

--------------------------------
Class: PolygonSoftBoundaryActor.Actor.Object
	float TickIntervalOverride;//[Offset: 0x2fc, Size: 4]
	Vector2D PointInsidePolygon;//[Offset: 0x300, Size: 8]
	StaticMeshComponent*[] PolygonEdgeMesh;//[Offset: 0x308, Size: 12]
	float StartShowBoundDistance;//[Offset: 0x314, Size: 4]
	Vector2D[] PolygonPointArray;//[Offset: 0x318, Size: 12]
	bool IsInsideSoftBound(out const Vector Loc);// 0x20b0ff0
	Vector2D GetTheNearestPoint(out const Vector Loc);// 0x20b0f5c

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: AirDropVisionInfo
	int AirDropId;//[Offset: 0x0, Size: 4]
	Vector Position;//[Offset: 0x4, Size: 12]
	bool IsSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnPlayerTeleport;//[Offset: 0xc34, Size: 12]
	delegate OnDeath;//[Offset: 0xc40, Size: 12]
	delegate OnBulletChange;//[Offset: 0xc4c, Size: 12]
	delegate OnPlayerPoseChange;//[Offset: 0xc58, Size: 12]
	delegate OnAnimAssetSkeletonMatch;//[Offset: 0xc64, Size: 12]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0xc70, Size: 12]
	delegate OnPlayerEnterCallingForRevivalStatus;//[Offset: 0xc7c, Size: 12]
	delegate OnPlayerPickUp;//[Offset: 0xc88, Size: 12]
	delegate OnPlayerWeaponChangeState;//[Offset: 0xc94, Size: 12]
	delegate OnWeaponFireModeChangeDelegate;//[Offset: 0xca0, Size: 12]
	delegate OnWeaponShootIntervalModeChangeDelegate;//[Offset: 0xcac, Size: 12]
	delegate OnHideUIAfterPlayerDeadDelegate;//[Offset: 0xcb8, Size: 12]
	delegate OnPlayerHandFoldedChanged;//[Offset: 0xcc4, Size: 12]
	delegate IsEnterNearDeathDelegate;//[Offset: 0xcd0, Size: 12]
	delegate OnFollowStateChanged;//[Offset: 0xcdc, Size: 12]
	delegate OnCharacterAimModeChanged;//[Offset: 0xd1c, Size: 12]
	delegate OnPerspectiveChanged;//[Offset: 0xd28, Size: 12]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0xd34, Size: 12]
	delegate OnDeathDelegate;//[Offset: 0xd40, Size: 12]
	delegate OnPostTakeDamage;//[Offset: 0xd4c, Size: 12]
	delegate OnReconnectNotifyDelegate;//[Offset: 0xd58, Size: 12]
	delegate OnStartInitDelegate;//[Offset: 0xd64, Size: 12]
	delegate OnCharacterShootHitServerDelegate;//[Offset: 0xd70, Size: 12]
	delegate OnUpdateForSleepComponent;//[Offset: 0xd7c, Size: 12]
	delegate AnimMontagePlayDelegate;//[Offset: 0xdb8, Size: 12]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0xdc4, Size: 12]
	delegate OnCharacterStartFillGasDelegate;//[Offset: 0xdd0, Size: 12]
	delegate OnCharacterStartFireDelegate;//[Offset: 0xddc, Size: 12]
	delegate OnCharacterStopFireDelegate;//[Offset: 0xde8, Size: 12]
	delegate OnCharacterShootDelegate;//[Offset: 0xdf4, Size: 12]
	delegate OnCharacterBecomeViewTarget;//[Offset: 0xe00, Size: 12]
	delegate OnCharacterEndViewTarget;//[Offset: 0xe0c, Size: 12]
	delegate OnCharacterWeaponEquipDelegate;//[Offset: 0xe18, Size: 12]
	delegate OnCharacterWeaponUnEquipDelegate;//[Offset: 0xe24, Size: 12]
	delegate OnPawnChangeFinishDelegate;//[Offset: 0xe30, Size: 12]
	delegate OnPawnRespawnDelegate;//[Offset: 0xe3c, Size: 12]
	delegate OnRequestPaintDecalDelegate;//[Offset: 0xe48, Size: 12]
	delegate OnPawnExitParachute;//[Offset: 0xe54, Size: 12]
	delegate SetClimbAnimationDelegate;//[Offset: 0xe60, Size: 12]
	delegate OnCanVaultFlagChangeDelegate;//[Offset: 0xe6c, Size: 12]
	delegate OnPreRepAttachment;//[Offset: 0xe78, Size: 12]
	delegate OnPostRepAttachment;//[Offset: 0xe84, Size: 12]
	AkAudioEvent* DeathSound;//[Offset: 0xe90, Size: 4]
	AkAudioEvent* PickupSound;//[Offset: 0xe94, Size: 4]
	AkAudioEvent* ThrowawayWeaponSound;//[Offset: 0xe98, Size: 4]
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0xe9c, Size: 4]
	AkAudioEvent* SwitchSightSound;//[Offset: 0xea0, Size: 4]
	AkAudioEvent* MountAccessoriesSound;//[Offset: 0xea4, Size: 4]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xea8, Size: 1]
	bool bShowName;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xea8, Size: 1]
	bool bShowDamageToOther;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xea8, Size: 1]
	float NetDelayMinAniCompensate;//[Offset: 0xeac, Size: 4]
	bool bIsFPPOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb0, Size: 1]
	float Money;//[Offset: 0xeb4, Size: 4]
	bool bHasHandleDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb8, Size: 1]
	bool bDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xeb9, Size: 1]
	bool bIgnoreInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xeb9, Size: 1]
	bool FriendThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeba, Size: 1]
	bool bUseSameTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xebb, Size: 1]
	bool bShootSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xebc, Size: 1]
	float MaxSwimSprintSpeed;//[Offset: 0xec0, Size: 4]
	bool IsFiveTimesWalkSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xec4, Size: 1]
	bool bIsSelfieMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec5, Size: 1]
	bool bIsDrawLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec6, Size: 1]
	bool bAllowToggleADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec7, Size: 1]
	float AllowToggleADSCoolDownLength;//[Offset: 0xecc, Size: 4]
	float PreviousValueToSetForHealthPredict;//[Offset: 0xed4, Size: 4]
	float PreviousValueToSetForEnergyPredict;//[Offset: 0xed8, Size: 4]
	float ValueLimitForHealthPredict;//[Offset: 0xedc, Size: 4]
	float ValueLimitForSignalHPPredict;//[Offset: 0xee0, Size: 4]
	float ValueForSignalHPPredict;//[Offset: 0xee4, Size: 4]
	FName HeadSocketName;//[Offset: 0xee8, Size: 8]
	FName LFootSocketName;//[Offset: 0xef0, Size: 8]
	FName RFootSocketName;//[Offset: 0xef8, Size: 8]
	MoveAntiCheatComponent* MoveAntiCheatComponent;//[Offset: 0xf00, Size: 4]
	LagCompensationComponent* LagCompensationComponent;//[Offset: 0xf04, Size: 4]
	BaseCharacterEffectCom* EffectComponent;//[Offset: 0xf08, Size: 4]
	EffectComponent* NewEffectComponent;//[Offset: 0xf0c, Size: 4]
	CharacterParachuteComponent* ParachuteComponent;//[Offset: 0xf10, Size: 4]
	NavigationInvokerComponent* NavigationInvokerComponent;//[Offset: 0xf14, Size: 4]
	CapsuleComponent* DeltaRotationTestCapusle;//[Offset: 0xf18, Size: 4]
	GroupPhysicsComponent* GroupPhysics;//[Offset: 0xf1c, Size: 4]
	bool bIsWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf20, Size: 1]
	Rotator ServerControlRotation;//[Offset: 0xf24, Size: 12]
	byte PoseState;//[Offset: 0xf30, Size: 1]
	float LastChangeCapsuleSizeTime;//[Offset: 0xf34, Size: 4]
	Actor* ThePlane;//[Offset: 0xf38, Size: 4]
	float ReplicatedNowShovelingSpeed;//[Offset: 0xf3c, Size: 4]
	Rotator ReplicatedShovelingRotation;//[Offset: 0xf40, Size: 12]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4c, Size: 1]
	bool SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4d, Size: 1]
	bool IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4e, Size: 1]
	bool bIsHideCrossHairType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf58, Size: 1]
	float VaultCheckBroadcastInterval;//[Offset: 0xf5c, Size: 4]
	float RadialDamageScale;//[Offset: 0xf64, Size: 4]
	float MoveOptimizeChangeCD;//[Offset: 0x1054, Size: 4]
	byte LastPoseState;//[Offset: 0x105c, Size: 1]
	float LastSwitchCharPoseTime;//[Offset: 0x1060, Size: 4]
	bool bEnablePoseStateChangeOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1064, Size: 1]
	float ConstPoseStateOptimizeOfflineTime;//[Offset: 0x1068, Size: 4]
	bool bUsePoseStateOfflineCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1070, Size: 1]
	bool bUpdateCameraWhenShootInMovePlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1071, Size: 1]
	bool bEnableSwoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1072, Size: 1]
	float AnimDeathLifeSpan;//[Offset: 0x1074, Size: 4]
	bool DestroyOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1078, Size: 1]
	bool bRespawnResetAnimBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1079, Size: 1]
	class STExtraShootWeapon* AutoEquipWeaponTemplate;//[Offset: 0x107c, Size: 4]
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0x1080, Size: 12]
	Actor*[] PlayerSlotData;//[Offset: 0x108c, Size: 12]
	Actor*[] InventoryData;//[Offset: 0x1098, Size: 12]
	AkComponent* SoundComp;//[Offset: 0x10fc, Size: 4]
	AkComponent* AmbientSoundComp;//[Offset: 0x1100, Size: 4]
	bool IsAmbientSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1104, Size: 1]
	bool bEnableFootSoundOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1105, Size: 1]
	AkAudioEvent* FootstepSound;//[Offset: 0x1108, Size: 4]
	AkAudioEvent* AmbientSound;//[Offset: 0x110c, Size: 4]
	AkAudioEvent* AkHitHeadWithHelmet;//[Offset: 0x1110, Size: 4]
	AkAudioEvent* AkHitHeadWithoutHelmet;//[Offset: 0x1114, Size: 4]
	enum[] ModesIgnoreHitHead;//[Offset: 0x1118, Size: 12]
	<FString,SpecialAmbientData> SpecialMapAmbientSoundConfig;//[Offset: 0x1124, Size: 60]
	SceneComponent* MeshContainer;//[Offset: 0x1160, Size: 4]
	Vector2D MeshContainerDefaultOffsetXY;//[Offset: 0x1164, Size: 8]
	int CurrentTaskTriggerAreaID;//[Offset: 0x116c, Size: 4]
	float SignalHPBeforeEnterBreath;//[Offset: 0x1170, Size: 4]
	float ProduceSoundInterval;//[Offset: 0x1174, Size: 4]
	float ProduceSoundVelocitySquared;//[Offset: 0x1178, Size: 4]
	float HearRadius;//[Offset: 0x117c, Size: 4]
	bool bVaultIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1184, Size: 1]
	bool bIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1185, Size: 1]
	Actor* WaterObj;//[Offset: 0x1188, Size: 4]
	bool UseShootVerifyEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118c, Size: 1]
	byte DSHitPartJudgment;//[Offset: 0x118e, Size: 1]
	STCharacterNearDeathComp* NearDeatchComponent;//[Offset: 0x1190, Size: 4]
	STCharacterRescueOtherComp* RescueOtherComponent;//[Offset: 0x1194, Size: 4]
	STCharacterFollowComp* AutoFollowComponent;//[Offset: 0x1198, Size: 4]
	bool IsRescueingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119c, Size: 1]
	float ReplciateRestoringDuraion;//[Offset: 0x11a0, Size: 4]
	float NearDeathBreath;//[Offset: 0x11a4, Size: 4]
	bool IsBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a8, Size: 1]
	float EnterNearDeathCDTimeInitValue;//[Offset: 0x11ac, Size: 4]
	bool bIsCallingForRevival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b4, Size: 1]
	float DistSquaredInterruptRevival;//[Offset: 0x11b8, Size: 4]
	BodyTypeDef ProneBodyDef;//[Offset: 0x11bc, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x11c4, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x11cc, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x11d4, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x11dc, Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x11e4, Size: 60]
	Vector ScopeNewIdleLoc;//[Offset: 0x1220, Size: 12]
	Vector ScopeNewAimLoc;//[Offset: 0x122c, Size: 12]
	float ScopeMoveInOutSpeed;//[Offset: 0x1238, Size: 4]
	Vector ScopeAimShootSpreadDir;//[Offset: 0x123c, Size: 12]
	float ScopeAimShootSpreadAddDirValSpeed;//[Offset: 0x1248, Size: 4]
	float ScopeAimShootSpreadDecDirValSpeed;//[Offset: 0x124c, Size: 4]
	float ScopeAimShootSpreadDirValMax;//[Offset: 0x1250, Size: 4]
	Rotator ScopeAimShootSpreadRot;//[Offset: 0x1258, Size: 12]
	float ScopeAimShootSpreadAddRotValSpeed;//[Offset: 0x1264, Size: 4]
	float ScopeAimShootSpreadDecRotValSpeed;//[Offset: 0x1268, Size: 4]
	float ScopeAimShootSpreadRotValMax;//[Offset: 0x126c, Size: 4]
	float ScopeLagScale;//[Offset: 0x1274, Size: 4]
	float ScopeAimCrosshairUIScale;//[Offset: 0x1278, Size: 4]
	float ScopeFov;//[Offset: 0x127c, Size: 4]
	bool bIsUseDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1280, Size: 1]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x1284, Size: 4]
	class PlayerTombBox* DefaultDeadInventoryBoxTemplate;//[Offset: 0x1288, Size: 4]
	float DeadInventoryBoxOverrideFindPutDownPointZThreshold;//[Offset: 0x128c, Size: 4]
	int FirstDamageTypeSpesificID;//[Offset: 0x1290, Size: 4]
	float RefreshUITimeAfterSpawn;//[Offset: 0x1294, Size: 4]
	float RefreshUITimeAfterSpawnInterval;//[Offset: 0x1298, Size: 4]
	Vector ScopeNewTargetLoc;//[Offset: 0x12a4, Size: 12]
	bool bMarkScopeLocDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b0, Size: 1]
	CustomSpringArmComponent* SpringArmComp;//[Offset: 0x12b4, Size: 4]
	CameraComponent* ThirdPersonCameraComponent;//[Offset: 0x12b8, Size: 4]
	SpringArmComponent* FPPSpringArmComp;//[Offset: 0x12bc, Size: 4]
	CameraComponent* FPPCameraComp;//[Offset: 0x12c0, Size: 4]
	SpringArmComponent* ScopeSpringArmComp;//[Offset: 0x12c4, Size: 4]
	CameraComponent* ScopeCameraComp;//[Offset: 0x12c8, Size: 4]
	SceneComponent* ShoulderCameraRoot;//[Offset: 0x12cc, Size: 4]
	bool bHasStuckOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d0, Size: 1]
	SyncAKEvent SyncAKEvent;//[Offset: 0x12d4, Size: 16]
	delegate OnJoyStickInteruptDelegate;//[Offset: 0x12e4, Size: 12]
	delegate OnPlayerAttrChangeDelegate;//[Offset: 0x12f0, Size: 12]
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0x12fc, Size: 12]
	delegate OnMovementBaseChanged;//[Offset: 0x1308, Size: 12]
	bool bIsDelayingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1314, Size: 1]
	bool bDebugNewWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1315, Size: 1]
	bool bDebugPVEShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1316, Size: 1]
	BoxComponent* ProneBoxComponent;//[Offset: 0x1318, Size: 4]
	Vector ProneBoxRelativeLocation;//[Offset: 0x131c, Size: 12]
	DamageCauserRecordData[] DamageCauserRecords;//[Offset: 0x1328, Size: 12]
	DamageCauserRecordData[] DamageRecords;//[Offset: 0x1334, Size: 12]
	STCharacterMovementComponent* STCharacterMovement;//[Offset: 0x1340, Size: 4]
	bool AttackerNeedReceiveDamageRpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1344, Size: 1]
	float PickUpRadius;//[Offset: 0x1348, Size: 4]
	SimViewData SimulateViewData;//[Offset: 0x134c, Size: 6]
	bool IsFakeOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1352, Size: 1]
	AnchorPlatData AnchorPlat;//[Offset: 0x1354, Size: 8]
	class TrailMarkActor* ProneTrailMarkClass;//[Offset: 0x1370, Size: 40]
	TrailMarkActor* WeakProneTrailMarkActor;//[Offset: 0x1398, Size: 8]
	delegate OnMoveBlockDelegate;//[Offset: 0x13ac, Size: 12]
	PickUpItemData[] CacheDropItemDataList;//[Offset: 0x13b8, Size: 12]
	float MaxDispalyFootprintDistance;//[Offset: 0x13c8, Size: 4]
	Rotator DefaultMeshRot;//[Offset: 0x13cc, Size: 12]
	InteractiveMoveActor* CurrentInteractiveMoveActor;//[Offset: 0x13d8, Size: 4]
	class AnimInstance* MainCharAnimClass;//[Offset: 0x13dc, Size: 4]
	class AnimInstance* MainCharFPPAnimClass;//[Offset: 0x13e0, Size: 4]
	class AnimInstance* MainCharTPPAnimClass;//[Offset: 0x13e4, Size: 4]
	class AnimInstance* AvatarAnimClassCache;//[Offset: 0x13ec, Size: 4]
	bool IsNetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f0, Size: 1]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f1, Size: 1]
	int CurrentEmoteIndex;//[Offset: 0x13f4, Size: 4]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x13fc, Size: 12]
	delegate OnLoadAndStartPlayEmoteAnimEvent;//[Offset: 0x1408, Size: 12]
	delegate ReadyToPlayEmoteMontageFailedDelegate;//[Offset: 0x1414, Size: 12]
	AnimationAsset* TempEmoteResource;//[Offset: 0x1420, Size: 40]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0x1448, Size: 4]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0x144c, Size: 4]
	bool bEnablePlayerPickUpAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1460, Size: 1]
	bool bEnablePlayerDeadAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1461, Size: 1]
	bool bRecordKillData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1462, Size: 1]
	float AIThrowPitch;//[Offset: 0x1464, Size: 4]
	Vector2D AISpeedScale;//[Offset: 0x1468, Size: 8]
	bool bValidCalculate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1470, Size: 1]
	<FName,enum> PawnStateRelatedBuffMap;//[Offset: 0x1474, Size: 60]
	int[] ToRemoveBuffSkillIdListWhenOnPlane;//[Offset: 0x14b0, Size: 12]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14bc, Size: 1]
	bool IsAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14bd, Size: 1]
	STExtraBaseCharacter* WhoFollowMe;//[Offset: 0x14c0, Size: 4]
	float[] HealthChangeHistoryPerFrame;//[Offset: 0x14c4, Size: 12]
	float LastSyncHealthChange;//[Offset: 0x14d0, Size: 4]
	Vector CurInputVector;//[Offset: 0x14d4, Size: 12]
	StaticMeshComponent* ScopComp;//[Offset: 0x14e0, Size: 4]
	PhysicsAsset* PhysicsAssetOverride_Dead;//[Offset: 0x14f0, Size: 4]
	float voiceCheckCD;//[Offset: 0x14f4, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x14f8, Size: 4]
	float VoiceCheckDis;//[Offset: 0x14fc, Size: 4]
	float voiceCheckDisInParachute;//[Offset: 0x1500, Size: 4]
	bool voiceCheckInParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1504, Size: 1]
	int voiceBeginCheckDisWhenUAV;//[Offset: 0x1508, Size: 4]
	<byte> DanyinCompletedIDSet;//[Offset: 0x1524, Size: 60]
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0x1560, Size: 4]
	STExtraPlayerState* STExtraPlayerState;//[Offset: 0x1570, Size: 4]
	byte MovementModeBeforeNearDeath;//[Offset: 0x1574, Size: 1]
	float MoveableSwitchPoseTime;//[Offset: 0x1578, Size: 4]
	STExtraPlayerState* WhoKillMeRecord;//[Offset: 0x157c, Size: 4]
	int HandFolderRatio;//[Offset: 0x1580, Size: 4]
	float SwimUpRate;//[Offset: 0x1584, Size: 4]
	PlayerSwimComponent* swimComponet;//[Offset: 0x1588, Size: 4]
	bool bEnableWorldPawnCollisionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158d, Size: 1]
	bool bEnableWorldPawnCollisionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158e, Size: 1]
	bool SkipCirclePain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1595, Size: 1]
	PickUpItemData[] CacheDropList;//[Offset: 0x1598, Size: 12]
	bool bForbidAiPronePull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a4, Size: 1]
	bool bUpdateContainerLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a5, Size: 1]
	Vector MoveInputState;//[Offset: 0x15d4, Size: 12]
	float SwitchPoseCD;//[Offset: 0x1600, Size: 4]
	bool hHasCallGameModeKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1620, Size: 1]
	float CollideByTeammateCDConfig;//[Offset: 0x1638, Size: 4]
	PoseChangeTime SwitchPoseTime;//[Offset: 0x1640, Size: 16]
	Transform HitBoxLeanTransL;//[Offset: 0x1650, Size: 48]
	Transform HitBoxLeanTransR;//[Offset: 0x1680, Size: 48]
	BaseCharacterPickupProxy* PickupProxy;//[Offset: 0x16c8, Size: 4]
	PickupManagerComponent* PickupManagerComponent;//[Offset: 0x16cc, Size: 4]
	CharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x16d0, Size: 4]
	float DelayHideDuration;//[Offset: 0x16d4, Size: 4]
	float DelayResetStandDuration;//[Offset: 0x16d8, Size: 4]
	float DelayHideDuration_SimulatePhysicsDead;//[Offset: 0x16dc, Size: 4]
	bool bEnableRagdollAfterDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e0, Size: 1]
	float MaxRagdollActiveDuration;//[Offset: 0x16e4, Size: 4]
	bool bEnableAnimFrameCounter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1700, Size: 1]
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x1704, Size: 176]
	AnimParamList CurAnimParamList;//[Offset: 0x17b4, Size: 308]
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0x18e8, Size: 120]
	AnimVehParamList CurAnimVehParamList;//[Offset: 0x1960, Size: 48]
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0x1990, Size: 32]
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0x19b0, Size: 32]
	delegate ThrowGrenadeModeChangedDelegate;//[Offset: 0x19d0, Size: 12]
	byte ThrowGrenadeMode;//[Offset: 0x19dc, Size: 1]
	byte PrevThrowGrenadeMode;//[Offset: 0x19dd, Size: 1]
	bool IsPeekLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19ec, Size: 1]
	bool IsEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19ed, Size: 1]
	float PeekCheckCollisionTimer;//[Offset: 0x19f0, Size: 4]
	bool PeekHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19f8, Size: 1]
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0x19fc, Size: 4]
	int IsEnableReportPlayerBehavior;//[Offset: 0x1a00, Size: 4]
	float HighWalkSpeed;//[Offset: 0x1a18, Size: 4]
	float WalkSpeedChangeRate;//[Offset: 0x1a1c, Size: 4]
	float WalkSpeedThreshold;//[Offset: 0x1a20, Size: 4]
	float MaxCrouchSpeed;//[Offset: 0x1a24, Size: 4]
	float MaxProneSpeed;//[Offset: 0x1a28, Size: 4]
	float MaxSprintSpeed;//[Offset: 0x1a2c, Size: 4]
	float MaxSprintCrouchSpeed;//[Offset: 0x1a30, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x1a34, Size: 4]
	float HealthPredict;//[Offset: 0x1a38, Size: 4]
	float BreathAmount;//[Offset: 0x1a3c, Size: 4]
	bool bShouldDrowningHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a40, Size: 1]
	int PoisonSmogStage;//[Offset: 0x1a44, Size: 4]
	float PoisonSmogProgress;//[Offset: 0x1a48, Size: 4]
	float AntidoteExeTime;//[Offset: 0x1a4c, Size: 4]
	float AntidoteMaxTime;//[Offset: 0x1a50, Size: 4]
	float SpeedDynamicScale;//[Offset: 0x1a54, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0x1a58, Size: 4]
	delegate PoisonFogStageUpdatedDelegate;//[Offset: 0x1a5c, Size: 12]
	byte HealthStatus;//[Offset: 0x1a68, Size: 1]
	<enum,BodyPartCfg> BodyPartConfigMap;//[Offset: 0x1a6c, Size: 60]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa8, Size: 1]
	float SpeedRate;//[Offset: 0x1aac, Size: 4]
	float EnergySpeedScale;//[Offset: 0x1ab0, Size: 4]
	float RecoveryScale;//[Offset: 0x1ab4, Size: 4]
	float DefaultSpeedValue;//[Offset: 0x1ab8, Size: 4]
	float PawnBackpackCapacity;//[Offset: 0x1abc, Size: 4]
	float SwitchWeaponSpeedScale;//[Offset: 0x1ac0, Size: 4]
	CharacterEnergyData Energy;//[Offset: 0x1ac4, Size: 48]
	CharacterEnergyPhase[] TemperaturePhaseList;//[Offset: 0x1af4, Size: 12]
	bool bCheckRelevantWithFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b00, Size: 1]
	float FarDistanceAimFOV;//[Offset: 0x1b04, Size: 4]
	float FarRelevantDistanceSqured;//[Offset: 0x1b08, Size: 4]
	float MiddleDistanceAimFOV;//[Offset: 0x1b0c, Size: 4]
	float MiddleRelevantDistanceSqured;//[Offset: 0x1b10, Size: 4]
	float VerticalSpeedFallingDamageThrehod;//[Offset: 0x1b18, Size: 4]
	float VerticalFallingDamageCoefficient;//[Offset: 0x1b1c, Size: 4]
	float PrachuteLandedFallingDamageMax;//[Offset: 0x1b24, Size: 4]
	bool EnablePrachuteLandedFallingDamageMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b28, Size: 1]
	float HorizontalSpeedFallingDamageThrehod;//[Offset: 0x1b2c, Size: 4]
	CurveFloat* CurveHorizontalSpeedFallingDamage;//[Offset: 0x1b30, Size: 4]
	class STDamageCameraShake* DamageShakeClass;//[Offset: 0x1b34, Size: 4]
	float StandHalfHeight;//[Offset: 0x1b38, Size: 4]
	float CrouchHalfHeight;//[Offset: 0x1b3c, Size: 4]
	float ProneHalfHeight;//[Offset: 0x1b40, Size: 4]
	float CrouchEnableCheckTolerance;//[Offset: 0x1b44, Size: 4]
	float StandRadius;//[Offset: 0x1b48, Size: 4]
	float DyingRadius;//[Offset: 0x1b4c, Size: 4]
	float DyingBeCarriedRadius;//[Offset: 0x1b50, Size: 4]
	HealthPredictShowData[] HealthPredictShowDataList;//[Offset: 0x1b54, Size: 12]
	HealthPredictShowData[] EnergyPredictShowDataList;//[Offset: 0x1b60, Size: 12]
	HealthPredictShowData[] SignalHPPredictShowDataList;//[Offset: 0x1b6c, Size: 12]
	SecuryInfoComponent* SecuryComponent;//[Offset: 0x1b78, Size: 4]
	bool bInAssistantState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b88, Size: 1]
	delegate InAssistantStateDelegate;//[Offset: 0x1b8c, Size: 12]
	bool bWasOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b98, Size: 1]
	STExtraVehicleBase* LastAttachedVehicle;//[Offset: 0x1b9c, Size: 4]
	float LastVehicleDamageCD;//[Offset: 0x1ba0, Size: 4]
	float LastLeaveVehicleTime;//[Offset: 0x1ba4, Size: 4]
	int VehicleSeatIdx;//[Offset: 0x1ba8, Size: 4]
	bool bForceSetRepMovLocationOnAttachmentRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bb2, Size: 1]
	float LeaveVehicleVelocityKeepTime;//[Offset: 0x1bb4, Size: 4]
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd0, Size: 1]
	CharacterAvatarComponent2* AvatarComponent2;//[Offset: 0x1bd4, Size: 4]
	STExtraUnderWaterEffectComp* UnderWaterEffectComponent;//[Offset: 0x1bd8, Size: 4]
	<enum,int> AvatarRectifyData;//[Offset: 0x1bdc, Size: 60]
	HalloweenVampireCloth HalloweenVampireCloth;//[Offset: 0x1c18, Size: 8]
	delegate OnAttachedToVehicle;//[Offset: 0x1c20, Size: 12]
	delegate OnDetachedFromVehicle;//[Offset: 0x1c2c, Size: 12]
	delegate OnChangedVehicleSeat;//[Offset: 0x1c38, Size: 12]
	delegate OnPlayerStateUpdated;//[Offset: 0x1c44, Size: 12]
	float MaxLeaveVehicleVelocity;//[Offset: 0x1c5c, Size: 4]
	delegate SwitchAngledSightEventDelegate;//[Offset: 0x1c6c, Size: 12]
	Rotator AngledSightRotOffset;//[Offset: 0x1c78, Size: 12]
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x1d88, Size: 4]
	bool EnableSprintSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8c, Size: 1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x1d90, Size: 4]
	int DamageMagnifierIdx;//[Offset: 0x1d94, Size: 4]
	<FName,class ActorComponent> DynamicComponentMap;//[Offset: 0x1d9c, Size: 60]
	STParachuteState STReplicateParchuteState;//[Offset: 0x1dd8, Size: 24]
	STParachuteState STParachuteStateData;//[Offset: 0x1df0, Size: 24]
	UAEChaParachuteAnimListComponent* CharParachuteAnimListComponentCache;//[Offset: 0x1e08, Size: 4]
	STReplicatedMoveState STReplicatedMoveState;//[Offset: 0x1e0c, Size: 32]
	bool bReplicatedIsStartParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2c, Size: 1]
	float MoveForwardInputValue;//[Offset: 0x1e30, Size: 4]
	float MoveRightInputValue;//[Offset: 0x1e34, Size: 4]
	bool bIsParachuteLandingAnimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e38, Size: 1]
	float ParachuteLandingHeightAdded;//[Offset: 0x1e3c, Size: 4]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e40, Size: 1]
	bool bEnableAutoFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e41, Size: 1]
	float TargetPlayerAIPolicyDecisionLogInterval;//[Offset: 0x1e44, Size: 4]
	float RelevantPlayerAIPolicyDecisionLogInterval;//[Offset: 0x1e48, Size: 4]
	ParachuteFollowComponent* ParachuteFollowComp;//[Offset: 0x1e50, Size: 4]
	STExtraBaseCharacter*[] FlyingTeam;//[Offset: 0x1e54, Size: 12]
	STExtraBaseCharacter* Leader;//[Offset: 0x1e60, Size: 4]
	enum FollowState;//[Offset: 0x1e64, Size: 1]
	ParachuteFollowState[] TeammateParachuteFollowState;//[Offset: 0x1e68, Size: 12]
	STExtraBaseCharacter*[] Inviters;//[Offset: 0x1e74, Size: 12]
	STExtraPlayerState*[] InviterStateArr;//[Offset: 0x1e80, Size: 12]
	FString LatestInviter;//[Offset: 0x1e8c, Size: 12]
	bool IsDuringTransferLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e98, Size: 1]
	float MaxTemporaryNotAllowInvitedTime;//[Offset: 0x1ea0, Size: 4]
	float maxShowAlpha;//[Offset: 0x1ea8, Size: 4]
	float MoveMaxShowDis;//[Offset: 0x1eac, Size: 4]
	float WeaponMaxShowDis;//[Offset: 0x1eb0, Size: 4]
	float VehicleMaxShowDis;//[Offset: 0x1eb4, Size: 4]
	float FPPPutDownWeaponCoolingStart;//[Offset: 0x1ee0, Size: 4]
	float FPPPutDownWeaponCoolingEnd;//[Offset: 0x1ee4, Size: 4]
	float FPPSprintWeaponSmoothTime;//[Offset: 0x1ee8, Size: 4]
	bool bDynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2c, Size: 1]
	LastEmoteInfo LastEmoteInfo;//[Offset: 0x1f3c, Size: 12]
	float CollectPlayerRouteInterval;//[Offset: 0x1f4c, Size: 4]
	int IsEnableReportRoute;//[Offset: 0x1fd0, Size: 4]
	Vector EmoteColBox;//[Offset: 0x2018, Size: 12]
	int IsEnableLogAIPlayerPos;//[Offset: 0x202c, Size: 4]
	float CompVisionOpDis;//[Offset: 0x2030, Size: 4]
	float CompVisionOpDelay;//[Offset: 0x2034, Size: 4]
	bool bHasAppliedVisionCompOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2038, Size: 1]
	<SceneComponent*,CharacterCompOutOfVisionOptimizationItem> CharacterCompOutOfVisionOptimizationDataMap;//[Offset: 0x2048, Size: 60]
	bool bEnableCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2084, Size: 1]
	float MaxRelavantDistance;//[Offset: 0x208c, Size: 4]
	float MaxRelavantDistanceSquared;//[Offset: 0x2090, Size: 4]
	int IsEnableReportPlayerKillFlow;//[Offset: 0x2094, Size: 4]
	int IsEnableReportGameSetting;//[Offset: 0x2098, Size: 4]
	int EnableReportGameSettingLevel;//[Offset: 0x209c, Size: 4]
	int IsEnableReportMrpcsInCircleFlow;//[Offset: 0x20a0, Size: 4]
	int IsEnableReportMrpcsInPartCircleFlow;//[Offset: 0x20a4, Size: 4]
	int IsEnableReportMrpcsFlow;//[Offset: 0x20a8, Size: 4]
	bool CrowdAgentConsidered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20ac, Size: 1]
	BaseFPPComponent* FPPComp;//[Offset: 0x20b4, Size: 4]
	UAECharacterAnimListComponent* OwnedCharacterAnimComp;//[Offset: 0x20b8, Size: 4]
	float ClientSwitchWeaponDeltaTime;//[Offset: 0x20c4, Size: 4]
	float ClientCallSwitchWeaponDur;//[Offset: 0x20c8, Size: 4]
	bool bIsSwapingMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20cc, Size: 1]
	float EquipingScopeDelay;//[Offset: 0x20d0, Size: 4]
	bool bClientHasFinishedReloadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d5, Size: 1]
	delegate OnEquipZoomScope;//[Offset: 0x20d8, Size: 12]
	WeaponOverrideAttrs WeaponOverrideAttrs;//[Offset: 0x20e8, Size: 24]
	CharacterOverrideAttrs CharacterOverrideAttrs;//[Offset: 0x2100, Size: 16]
	float CharacterFallingVelocityZFactor;//[Offset: 0x2110, Size: 4]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x213c, Size: 1]
	bool IsOpenCommonShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x213d, Size: 1]
	int AloneDistance;//[Offset: 0x2140, Size: 4]
	int NearTeamPlayerDistance;//[Offset: 0x2144, Size: 4]
	AnimationAsset* ChangeWearingMontage;//[Offset: 0x2150, Size: 40]
	float ChangeWearingLastTime;//[Offset: 0x2178, Size: 4]
	int ChangeWearingPromptTextID;//[Offset: 0x217c, Size: 4]
	FString ChangeWearingPromptText;//[Offset: 0x2180, Size: 12]
	AnimMontage* ChangeWearingAnimMontage;//[Offset: 0x218c, Size: 4]
	delegate WearingMontageFinishedEvent;//[Offset: 0x2190, Size: 12]
	SoftObjectPath ChangeWearingIconPath;//[Offset: 0x21e0, Size: 24]
	Vector ChangeWearingColBox;//[Offset: 0x21f8, Size: 12]
	float PaintDecalMaxDistance;//[Offset: 0x2204, Size: 4]
	float PuzzlePaintDecalMaxDistance;//[Offset: 0x2208, Size: 4]
	bool bDetectingPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220c, Size: 1]
	bool bValidPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220d, Size: 1]
	float RequestPaintDecalCD;//[Offset: 0x2210, Size: 4]
	float MaxRequestPaintDecalCD;//[Offset: 0x2214, Size: 4]
	ChildActorComponent* DecalComponent;//[Offset: 0x2218, Size: 4]
	Actor* DecalActor;//[Offset: 0x221c, Size: 4]
	ChildActorComponent* PuzzleLineTraceComponent;//[Offset: 0x2220, Size: 4]
	Actor* PuzzleTraceLineActor;//[Offset: 0x2224, Size: 4]
	bool bInBattleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2228, Size: 1]
	float OutBattleStateTime;//[Offset: 0x222c, Size: 4]
	delegate OnBattleStateChange;//[Offset: 0x2234, Size: 12]
	BonfireActor* CurBonfire;//[Offset: 0x2240, Size: 4]
	BonfireActor* BuiltBonfire;//[Offset: 0x2244, Size: 4]
	class STCharacterBonfireLinkComp* BonfireLinkComponentTemplate;//[Offset: 0x2248, Size: 40]
	delegate OnCharacterPlayEmote;//[Offset: 0x2270, Size: 12]
	delegate OnCharacterWin;//[Offset: 0x227c, Size: 12]
	delegate OnCharacterFallingModeChange;//[Offset: 0x2288, Size: 12]
	Vector LastServerHitImpactPoint;//[Offset: 0x2294, Size: 12]
	byte RemainUseSupplySpotTimes;//[Offset: 0x22a0, Size: 1]
	byte RemainUseEnhancerSpotTimes;//[Offset: 0x22a1, Size: 1]
	bool IsShowHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a2, Size: 1]
	int[] UseEnhanceSpotTip;//[Offset: 0x22a4, Size: 12]
	int MonsterDamageReduceSkillID;//[Offset: 0x22b0, Size: 4]
	<int,InteractionEmoteConfig> InteractionEmoteConfig;//[Offset: 0x22b4, Size: 60]
	STExtraBaseCharacter* InteractionEmoteSender;//[Offset: 0x22f0, Size: 4]
	bool IsInitCharacterSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2302, Size: 1]
	FString CharacterSkillTableName;//[Offset: 0x2304, Size: 12]
	STExtraVehicleBase* RelevantVehicleInReady;//[Offset: 0x2310, Size: 4]
	PhysicsAsset* DeathCachePhysicsAsset;//[Offset: 0x2314, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x2320, Size: 252]
	byte MeleeAutoAimType;//[Offset: 0x241c, Size: 1]
	bool bIsInObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2428, Size: 1]
	PlayerRespawnData PlayerRespawnData;//[Offset: 0x242c, Size: 32]
	bool bRespawnQuitSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244c, Size: 1]
	bool bCharacterHideIngame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244d, Size: 1]
	float CharacterShowWeaponTime;//[Offset: 0x2450, Size: 4]
	enum CharacterMainType;//[Offset: 0x2455, Size: 1]
	enum CharacterSubType;//[Offset: 0x2456, Size: 1]
	delegate ZombieModePropSkillUIShowDelegate;//[Offset: 0x2458, Size: 12]
	int ZombieModeCurrentSkillPropLevel;//[Offset: 0x2464, Size: 4]
	int ZombieModeCurrentSkillPropID;//[Offset: 0x2468, Size: 4]
	delegate BulletTrackShowDelegate;//[Offset: 0x246c, Size: 12]
	delegate OnClientHoldGrenadeStateChange;//[Offset: 0x2478, Size: 12]
	delegate MarkPlayerPosDelegate;//[Offset: 0x2484, Size: 12]
	float Config_PlayerHurt_ResetTime;//[Offset: 0x2490, Size: 4]
	BaseVaultComponent* VaultControllerComp;//[Offset: 0x2494, Size: 4]
	bool EnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2498, Size: 1]
	bool EnableBulletFlySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2499, Size: 1]
	bool bEnableSetMeshUpdateFlagInBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249a, Size: 1]
	delegate OnUseSpringJump;//[Offset: 0x249c, Size: 12]
	float LastSprintTriggerTime;//[Offset: 0x24a8, Size: 4]
	float FallingTime;//[Offset: 0x24b0, Size: 4]
	bool bInteractWithActivityActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b4, Size: 1]
	bool IsShowRevivalPointIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b5, Size: 1]
	float SignalHPRemainingTime;//[Offset: 0x24b8, Size: 4]
	bool bIsGiveupWhenMatchGoalAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24bc, Size: 1]
	Actor* MyConstActor;//[Offset: 0x24c0, Size: 4]
	bool EnterSnowArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c4, Size: 1]
	byte[] ShowSnowAreaTypes;//[Offset: 0x24c8, Size: 12]
	float TickCanDriveSnowBoardInterval;//[Offset: 0x24d4, Size: 4]
	float ClientAttachToVehicleKeepTime;//[Offset: 0x24dc, Size: 4]
	float RefreshAnimListTimerMaxTime;//[Offset: 0x24e8, Size: 4]
	float RealtimeVerifyInterval;//[Offset: 0x24ec, Size: 4]
	float RealtimeVerifyIntervalRandomOffset;//[Offset: 0x24f0, Size: 4]
	float FirstGuide_SafeZoneCountDownTime;//[Offset: 0x2504, Size: 4]
	bool isUsingEnergyPoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2508, Size: 1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2509, Size: 1]
	bool bTemperoryDisableFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250a, Size: 1]
	float FixMovementOnVehicleInterval;//[Offset: 0x250c, Size: 4]
	float voiceCheckUAVOperatorDeltaTime;//[Offset: 0x2514, Size: 4]
	Transform DefaultParticleAttachTransform;//[Offset: 0x2520, Size: 48]
	byte DefaultParticleAttachLocationType;//[Offset: 0x2550, Size: 1]
	InjuryParticleAttachOffset[] ParticleAttachOffsetArray;//[Offset: 0x2554, Size: 12]
	float ParticleShowingInterval;//[Offset: 0x2560, Size: 4]
	bool bIsShowingInjuryEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2568, Size: 1]
	bool bIsShowingToxicEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2569, Size: 1]
	ParticleSystem* InjuryAndToxicParticleEffect;//[Offset: 0x2570, Size: 40]
	Vector MoveAdditionalSpeed;//[Offset: 0x2598, Size: 12]
	int CharacterMovementReplicatID;//[Offset: 0x25a4, Size: 4]
	int CharacterReplicatID;//[Offset: 0x25a8, Size: 4]
	ParticleSystem* ProtectedInjuryAndToxicParticleEffect;//[Offset: 0x25ac, Size: 4]
	float RTNoDamageTime;//[Offset: 0x25b0, Size: 4]
	bool IsCanEnableWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b4, Size: 1]
	bool IsWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25bc, Size: 1]
	float MinWingUpControlTime;//[Offset: 0x25c8, Size: 4]
	WidgetComponent* PlayerInfoWidgetComp;//[Offset: 0x25cc, Size: 4]
	FString DebugInfoWidgetPath;//[Offset: 0x25d0, Size: 12]
	FString DebugInfoWidgetRefreshFunName;//[Offset: 0x25dc, Size: 12]
	Vector DebugInfoLocation;//[Offset: 0x25e8, Size: 12]
	Actor* ACurrentFloor;//[Offset: 0x25f4, Size: 8]
	bool IsMotifyAutoUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25fc, Size: 1]
	bool IsMotifyAttackerByState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25fd, Size: 1]
	float WaitRefreshShootDetailInfoTime;//[Offset: 0x2600, Size: 4]
	float CurWaitRefreshShootDetailInfoTime;//[Offset: 0x2604, Size: 4]
	float[] AIHotValueDebugInfo;//[Offset: 0x2608, Size: 12]
	Actor*[] OverlapDarkAreas;//[Offset: 0x2614, Size: 12]
	float SwimmingSwitchMovementModeCD;//[Offset: 0x2620, Size: 4]
	int PrepareEmoteId;//[Offset: 0x2628, Size: 4]
	FString EmoteSouceEventName;//[Offset: 0x262c, Size: 12]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x2638, Size: 4]
	bool bIsInUnderGroundArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x263c, Size: 1]
	bool bIsAroundUndergroundEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x263d, Size: 1]
	bool bIsSkillFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x263e, Size: 1]
	uint32 SightVisionMask;//[Offset: 0x2640, Size: 4]
	bool bUnderWaterPoseCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2645, Size: 1]
	bool bReviseIgnoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2646, Size: 1]
	bool bEnableShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2647, Size: 1]
	bool bRepShoulderState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2648, Size: 1]
	bool bForceChangePersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2649, Size: 1]
	float SimulateFootstepQueryInternal;//[Offset: 0x26d8, Size: 4]
	bool bDisableAttachRepInBeCarried;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e1, Size: 1]
	NetCarryBackState NetCarryBackState;//[Offset: 0x26e4, Size: 12]
	STCharacterCarryBackComp* CarryBackComponent;//[Offset: 0x26f0, Size: 4]
	void VaultStartPosNotifyBPToCpp(bool isvaultting, bool IsValidVault, STExtraBaseCharacter* vaultCharacter, Vector StartPos);// 0x216f25c
	void VaultFailPawnCPP(const FString Content);// 0x216f198
	void VaultFailPawnBluePrint(out const FString Content);// 0x216f0c4
	bool ValidCalculate();// 0x216f09c
	void UseVehWeaponView(STExtraShootWeapon* OldVehWeapon, STExtraShootWeapon* NewVehWeapon);// 0x216efe0
	void UseSpringJump(int SpringID);// 0x216ef68
	void UserCancelRescue();// 0x216ef54
	void UpdateUnderGroundArea(bool bEnterUnderGroundArea);// 0x216eed4
	bool UpdateShovelingState();// 0x216eeac
	void UpdateShovelingHoldStateRelease();// 0x216ee98
	void UpdateShovelingHoldStatePressed();// 0x216ee84
	void UpdatePoseCollisionCpp(byte CurState, byte PreState);// 0x216edc8
	void UpdateFallingTime(float Delta);// 0x216ed50
	void UpdateDynamicHoldGunOption();// 0x216ed3c
	void UpdateCurrentShootWeaponTick();// 0x216ed28
	void UpdateAttrValue(FString AttrName, float Val, int Reason, bool bSet);// 0x216eb94
	void UpdateAllInstanceBodyTransform(int Type);// 0x216eb1c
	void UnequipWeaponFinish();// 0x1ee1bb4
	void UnequipWeapon(byte Slot, bool bSwitchWeapon);// 0x216ea58
	void TryToBroadcastFatalDamageEvent(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x216e890
	void TryPeek(bool IsLeft, bool ButtonDown);// 0x216e7c0
	void TryFollowInitialParachuteLeader(FString Name);// 0x216e668
	bool TriggerEntrySkillWithID(int SkillID, bool bEnable);// 0x216e594
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x216e50c
	void ThrowGrenadeModeChangedDelegate__DelegateSignature(byte NewMode, byte PrevMode);// 0x2bb69b8
	void TakeDamageWhenThrowedDelegate__DelegateSignature();// 0x2bb69b8
	void SyncVoiceCellInfo(STExtraBaseCharacter* Char, int InVoice1, int InVoice2);// 0x216e404
	void SyncVisibilityFor(STExtraBaseCharacter* Char, bool bVisible);// 0x216e338
	void SyncServerTagsChange(out const FName[] newTags, out const FName[] oldTags);// 0x216e1d4
	void SyncFootVoice(STExtraBaseCharacter* Char, byte FootStepState);// 0x216e110
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x216e090
	bool SwitchWeaponCheck(byte Slot, bool bIgnoreState);// 0x216dfbc
	bool SwitchWeaponBySlot(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x216de4c
	void SwitchToLastWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);// 0x216dd7c
	void SwitchToLastNoneGrenageWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);// 0x216dcac
	void SwitchShoulderStateServer(bool bShoulder);// 0x216dbe4
	void SwitchShoulderStateLocal(bool bShoulder);// 0x216db5c
	void SwitchShoulderState(bool bShoulder);// 0x216dadc
	bool SwitchPoseState(byte State, bool bIgnoreCD, bool bIgnoreCheck, bool ShouldShowPrompt, bool IsTriggerByPressBtn);// 0x216d91c
	void SwapMainWeapon();// 0x216d908
	void STServerUpdateStateDirectly(float InThrottleInput, float InSteeringInput);// 0x216d80c
	void STServerUpdateState(float InThrottleInput, float InSteeringInput, int8 State, const Rotator CameraRotation);// 0x216d684
	float StopSlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float blendTime);// 0x216d574
	bool StopPlayEmoteAnim(int EmoteIndex);// 0x216d4f4
	void StopMove();// 0x216d4e0
	bool StopFireFilter();// 0x216d4b0
	void StopFire();// 0x216d49c
	void StopFillGas();// 0x216d488
	bool StopChangeWearingAnim();// 0x216d460
	void StopCarryBack(enum InDetachMethod);// 0x216d3e8
	void StopAnimMontageOriginal(AnimMontage* AnimMontage);// 0x216d370
	void StartWaitRefreshShootDetailInfo();// 0x216d35c
	bool StartPlayEmoteAnim(int EmoteIndex);// 0x216d2dc
	void StartFireSimple(byte ShootMode);// 0x216d25c
	bool StartFireFilter(STExtraShootWeapon* ExtraWeapon);// 0x216d1d4
	void StartFire(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget, bool DoCheck, STExtraShootWeapon* ExtraWeapon);// 0x216cfe8
	void StartFillGas();// 0x216cfd4
	bool StartChangeWearingAnim();// 0x216cfac
	void SpawnFootprint(enum FootprintType);// 0x216cf34
	void SpawnAndSwithToGrenadeServerCall(int InGrenadeID);// 0x216ce80
	STExtraWeapon* SpawnAndSwitchToGrenadeOnServer(FName SpesificLogicGrenadeSlot);// 0x216ce00
	STExtraWeapon* SpawnAndSwitchToGrenadeOnClient(FName SpesificLogicGrenadeSlot);// 0x216cd80
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bResetBulletNum);// 0x216cbc4
	void ShowPlayerDebugInfo(bool bShow);// 0x1f5da78
	void ShowNightVisionFrame();// 0x216cba8
	void ShowInjuryScreenEffect();// 0x216cb94
	void ShowDebugRole();// 0x216cb80
	void ShowDebugRecordData();// 0x216cb6c
	void ShowDebugPickUpFlow();// 0x216cb58
	void ShowDebugEquipOrUnequipFlow();// 0x216cb44
	void ShowDebugBornLandFlow();// 0x216cb30
	void ShowConfirmDialogOfMisKill();// 0x216cb14
	bool ShouldUpdateHPOnUI();// 0x216cae4
	bool ShouldShowCorp();// 0x216cabc
	bool ShouldShowAnchor();// 0x216ca94
	bool ShouldAutoScopeWhenPeek();// 0x216ca64
	byte ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, out const LocalShootHitData LocalShootHitData, STExtraShootWeapon* Weapon);// 0x216c878
	void SetWeaponShootType(byte ShootType);// 0x216c800
	void SetViewTargetAgainForOB();// 0x216c7ec
	void SetThrowGrenadeMode(byte ThrowMode);// 0x216c774
	void SetTargetPlayer(STExtraBaseCharacter* InTargetPlayer);// 0x216c6fc
	void SetSightVision(bool Enable, enum Flag);// 0x216c634
	void SetSightCondition(bool Enable, enum Flag);// 0x216c634
	void SetRTNoDamageTimer(float Timer);// 0x216c5bc
	void SetReloadMethod(byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x216c4f8
	void SetPrepareEmoteId(int InEmoteID);// 0x216c480
	void SetPawnReloadWeaponFinished(bool IsFinished);// 0x216c3f8
	void SetMeshForceAnimLOD(int InNewForceAnimLOD);// 0x216c380
	void SetMeshContainerOffsetZ(float Z);// 0x216c308
	void SetMeshContainerOffsetY(float Y);// 0x216c290
	void SetMeshContainerOffsetX(float X);// 0x216c218
	void SetIsDuringTransferLeader(bool isTransfer);// 0x216c198
	void SetIsAutoFollow(bool Val, STExtraBaseCharacter* IFollowWho);// 0x216c0d0
	void SetInsectCameraEnable(bool bEnable);// 0x216c050
	void SetHighWalkSpeed(float WalkSpeed);// 0x216bfd8
	void SetHealthSafety(float NewHealth, byte Reason);// 0x216bf1c
	void SetHandFoldRatio(int Ratio);// 0x216bea4
	static void SetExpandDataContent(out const byte[] Content);// 0x216bde0
	void SetExitingParachute(bool ExitParachute);// 0x216bd60
	void SetEnterSnowArea(bool IsEnterSnowArea);// 0x216bce0
	void SetEmoteSouceEventName(FString EventName);// 0x216bb88
	void SetDelayStateSwitchTime(float DelayTime);// 0x216bb10
	void SetCurScopeFov(float InFov);// 0x216ba98
	void SetCurrentVehicle(STExtraVehicleBase* InVehicle);// 0x216ba24
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool IsInitSetting);// 0x216b94c
	void SetCurrentFloor(Actor* floor);// 0x216b8d4
	void SetCurBonfire(BonfireActor* newBonfire);// 0x216b85c
	void SetComponentsActive(class Object ComponentClass, bool IsActive);// 0x216b790
	void SetCheatSpeedModifier(float NewModifier);// 0x216b710
	void SetCharacterHideInGame(bool bHide);// 0x216b690
	void SetChangeWearingPromptEnable(bool bShow);// 0x216b610
	void SetAttachment(Actor* InAttachParent, SceneComponent* InAttachComponent, Vector RelativeLocation, Rotator RelativeRotation, Vector RelativeScale3D, FName AttachSocket);// 0x216b420
	void SetAntidoteMaxTime(float MaxTime);// 0x216b3a8
	void SetAntidoteExeTime(float ExeTime);// 0x216b330
	void SetAnimParamIsRescueing(bool Val);// 0x216b2b0
	void SetAnimParamIsNearDeathStatus(bool Val);// 0x216b230
	void SetAnimParamClimbAnimTime(float ExplicitTime, bool bFlag);// 0x216b16c
	void SetAnimParamClimbAnimSwitch(bool bFlag, float TransTime);// 0x216b0a4
	void SetAnimParamCallingForRevival(bool bIsCalling);// 0x216b024
	void SetAnimMontagePlayRate(AnimMontage* AnimMontage, float InPlayRate);// 0x216af68
	void SetAmbientRTPC(FString RTPC, float Value);// 0x216adcc
	void SetAIActive(bool bActive);// 0x216ad4c
	void SetActorLocationServerAndClient(Vector Location);// 0x216acdc
	void ServerUpdateShovelingHoldState(bool ishold);// 0x216ac14
	void ServerTriggerJump();// 0x216abb8
	void ServerSetPoisonSmogStage(int SmogStage);// 0x216ab40
	void ServerSetPeekState(bool IsLeft, bool ButtonDown);// 0x216aa1c
	void ServerSetPeekCollision(bool HasCollision);// 0x216a954
	void ServerSetMovementState(Vector Input);// 0x216a8a8
	void ServerSendToLobbyServerUseItem(int ItemId, int Count);// 0x216a7ec
	void ServerResponseInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x216a608
	void ServerRequestPaintDecal(int DecalId, const PlayerDecalData DecalData);// 0x216a454
	void ServerInviteTeammate(FString Name, enum InvitationType);// 0x216a318
	void ServerHandleBulletHitData(STExtraWeapon* OwnerWeapon, out BulletHitInfoUploadData Data);// 0x216a204
	void ServerFollowTeammate(FString Name);// 0x216a110
	void ServerEndZombieModePropSkill();// 0x1ee1bb4
	void ServerDropCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x216a05c
	void ServerChangeThrowGrenadeMode(byte ThrowMode);// 0x2169fa8
	void ServerCancelFollow();// 0x2169f4c
	void SendServerMoveToClientUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x2169e14
	void SendClientMoveToServerUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x2169c9c
	void SendClientMoveToServerReliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x2169b24
	SearchedTombBoxAndWrapperListResult[] SearchTombBoxes();// 0x2169a00
	SearchedPickUpItemResult[] SearchPickUpWrapperActors(bool bIncludeWrapprsOnGround, bool bIncludeWrapprsInBox);// 0x21698fc
	void Scoping(byte NewType);// 0x2169884
	void ScopeOut(byte NewType);// 0x216980c
	void ScopeInterrupt(byte NewType);// 0x2169794
	void ScopeIn(byte NewType);// 0x216971c
	void SaveMeshUpdateFlag();// 0x21696f8
	void RspSetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x2169644
	void RspPlayInteractionEmote(int EmoteId);// 0x2169590
	void RspClientSureLeaveVehicle(bool bCanLeave);// 0x2169508
	void RPC_Server_UseZombieModeSkill();// 0x21694ac
	void RPC_Server_TriggerEntryEventByID(int SkillID, bool bEnable);// 0x216939c
	void RPC_Server_TriggerEntryEvent(enum EntryEvent);// 0x21692e8
	void RPC_Server_SwitchWeaponShootInterval(STExtraShootWeapon* Weapon, enum Mode);// 0x21691ec
	void RPC_Server_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x2169020
	void RPC_Server_SwitchSkillProp(int SkillPropID);// 0x2168f6c
	void RPC_Server_SwapMainWeapon();// 0x2168f10
	void RPC_Server_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot);// 0x2168e5c
	void RPC_Server_SetHandFoldRatio(int Ratio);// 0x2168da8
	void RPC_Server_SetCurScopeFov(float InFov);// 0x2168cf4
	void RPC_Server_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x2168c98
	void RPC_Server_ChangeToShootGrenade();// 0x2168c3c
	void RPC_NetMulticast_HandlePlayerPickUpActor(float TargetZLoc);// 0x2168b88
	void RPC_CollideByTeamMate(STExtraBaseCharacter* pOtherChar);// 0x2168ad4
	void RPC_Client_TeleportToFinish(bool bSuccess, Vector DestLocation, Rotator DestRotation);// 0x2168954
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x2168788
	void RPC_Client_SwapMainWeapon();// 0x216872c
	void RPC_Client_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot);// 0x2168678
	void RPC_Client_ShowZombieModeSkillCD(int InCDType, float InSkillInUseCD, float InNextUseCD);// 0x2168534
	void RPC_Client_ShootVertifyRes(const byte VertifyRes, const BulletHitInfoUploadData HistoryShootData, const CharacterHistoryData HistoryChData, const Vector ServerVictmPos);// 0x2168340
	void RPC_Client_ShootVertifyFailAlarm(const byte VertifyRes, FString Tips);// 0x2168204
	void RPC_Client_SetReloadCurWeapon(STExtraWeapon* Weapon);// 0x2168150
	void RPC_Client_ReportPlayerKillFlow(STExtraBaseCharacter* killedPlayer);// 0x216809c
	void RPC_Client_OnSkillPropCountChanged(int SkillPropID);// 0x2167fe8
	void RPC_Client_OnNearDeathRecordingNotify_New(const DeathReplayData DeathReplayData);// 0x2167ee0
	void RPC_Client_OnNearDeathRecordingNotify(FString SpectatorName, bool bSpectatorIsAI);// 0x2167d90
	void RPC_Client_OnDeathStopRecordingNotify_New(const DeathReplayData DeathReplayData);// 0x2167c88
	void RPC_Client_OnDeathStopRecordingNotify(FString SpectatorName, bool bSpectatorIsAI, bool bForce);// 0x2167adc
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x2167834
	void RPC_Client_MarkPlayersOnUI(const PlayerPosMarkerParam[] PlayerMarkersParam);// 0x2167740
	void RPC_Client_DrawDebugSphere(Vector Center, float Radius, int Segments, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x21674cc
	void RPC_Client_DrawDebugLine(Vector LineStart, Vector LineEnd, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x216729c
	void RPC_Client_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x2167240
	void RPC_Client_ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x21670e8
	void RestoreMeshUpdateFlag();// 0x21670c4
	void ResponceInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x2166f30
	void ResetValueLimitForHealthPredict();// 0x2166f1c
	void ResetSignalOnServer(bool bRescued);// 0x2166e9c
	void ResetCharacterEnergy();// 0x2166e88
	void ResetCharacter();// 0x2166e6c
	void ResetCamera();// 0x2166e58
	void ResetAnimInstanceClass();// 0x2166e44
	void RequestWeaponStopFire(STExtraShootWeapon* ShootWeapon);// 0x2166dcc
	void RequestUserCancleRescue();// 0x2166d70
	void RequestServerSureLeaveVehicle();// 0x2166d14
	void RequestServerAssistantTrackVehicle(bool bEnterAssistant);// 0x2166c4c
	void RequestPutOnHalloweenVampireCloth(int ClothItemID, bool bWear);// 0x2166b3c
	bool RequestPaintDecal(int DecalId);// 0x2166abc
	void ReqStartPlayEmoteWithRand(int EmoteIndex, int Rand);// 0x21669c0
	void ReqStartChangeWearing();// 0x2166964
	void ReqSetIsWingUpControl(bool IsUpControl);// 0x216689c
	void ReqSetInteractionEmoteReceiver(STExtraBaseCharacter* Receiver);// 0x21667e8
	void ReqPlayInteractionEmote(STExtraBaseCharacter* OtherCharacter, int SelfEmoteId, int OtherEmoteId);// 0x21666a4
	void ReqInteruptPlayEmote(int EmoteIndex);// 0x21665f0
	void ReqInteruptChangeWearing();// 0x2166594
	void ReqEmotePlayFinished(int EmoteIndex);// 0x21664e0
	void ReqChangeWearingFinished(int Index);// 0x216642c
	void ReqAcceptInteractionEmote();// 0x21663d0
	void ReportAntiCheatInfo();// 0x1ee1bb4
	void RemoveClientLeaveStateCheck(enum State);// 0x2166358
	void RemoveBuffWhenGotoPlane();// 0x2166344
	bool ReloadWeaponFilter();// 0x2166314
	bool ReloadCurrentWeapon();// 0x21662ec
	void RegisterPlayerPickUpList();// 0x21662d8
	void RefreshPersonPerspective();// 0x21662c4
	void RefreshPawnVaultTypeServer();// 0x2166268
	void RefreshPawnVaultTypeAll(bool isFpsEnable);// 0x21661e0
	void RefreshMoveAttrModifier();// 0x21661cc
	void RefreshAvatar(enum SlotType, bool IsEquipped, int ItemId);// 0x21660c0
	void RecordFinalParachuteLeader();// 0x21660ac
	void PrintAIPolicyDecisionData();// 0x2166098
	bool PreSwitchWeaponBySlot(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x2165f28
	void PreDoDrop(STExtraBaseCharacter* DamageCauser);// 0x2165eb0
	void PostGetPlayerAnimation();// 0x2bb69b8
	void PostCollectDropWrapperList();// 0x2bb69b8
	void PlayWeaponSound(AkAudioEvent* WeaponSound, STExtraWeapon* Weapon);// 0x2165df4
	void PlaySwitchSightSound(bool IsScopeIn);// 0x2165d74
	void PlaySwitchFireModeSound();// 0x2165d60
	void PlaySpecialAmbientSound(AkAudioEvent* TargetSound);// 0x2165ce8
	float PlaySlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float InPlayRate, float blendTime);// 0x2165b90
	void PlaySelfThrowAwayWeaponSound();// 0x2165b7c
	void PlayPullBoltSound();// 0x2165b68
	void PlayOperateItemSound(FString BankName, FString SoundName);// 0x21658f8
	void PlayMountAccessoriesSound();// 0x21658e4
	void PlayMagOUTSound();// 0x21658d0
	void PlayMagINSound();// 0x21658bc
	void PlayLocalShellDropFX();// 0x21658a8
	void PlayLoadBulletSound();// 0x2165894
	void PlayFootstepSound(byte FootStepState);// 0x2165814
	bool PlayerConfirmToRescue();// 0x21657ec
	void PlayChangeMagazineSound();// 0x21657d8
	void PlayAmbientSound();// 0x21657c4
	void PickUpWrapperAttachmentItem(Actor* Target, out const PickUpItemData ItemData, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x2165590
	void PickUpWrapperActor(Actor* Target, out const PickUpItemData ItemData, int pickCount, int BattleItemClientPickupType);// 0x216536c
	void PickUpActor(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x2165224
	void PawnVaultStopCPP();// 0x2165208
	void PawnVaultStopBluePrint();// 0x21651ec
	void PawnVaultServerStopCheckCPP();// 0x2165190
	void PawnVaultServerStopCheckBluePrint();// 0x2165174
	void PawnVaultServerCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x2164cec
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x2164910
	void PawnVaultAllCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x216459c
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x216420c
	void PawnLeaveState(enum State);// 0x216418c
	bool PawnHasState(enum PawnState);// 0x2164104
	bool PawnEnterState(enum State);// 0x216407c
	bool PawnAllowState(enum State, bool withLog);// 0x2163fa8
	void OnWeaponEquipmentUpdateHandled();// 0x2163f8c
	void OnWeaponEquipmentUpdate();// 0x2163f70
	void OnWeaponDropStart(STExtraShootWeapon* ShootWeapon);// 0x2163ef8
	void OnWeaponDropFinished(STExtraShootWeapon* ShootWeapon);// 0x2163e80
	void OnUnEquipWeaponWithParams(STExtraShootWeapon* ShootWeapon, enum Reason);// 0x2163dbc
	void OnUnEquipWeapon();// 0x2bb69b8
	void OnUIZombieModeSkillCDShowDelegate(int InCDType, float InSkillInUseCD, float InNextUseCD);// 0x2163cbc
	void OnStateLeave(enum EnteredState);// 0x2163c3c
	void OnStateEnter(enum EnteredState);// 0x2163bbc
	void OnShowName(bool _IsShow, FString _Name);// 0x2bb69b8
	void OnServerCheckWarnSoundUAV(enum soundType);// 0x2163b3c
	void OnScopeNotHandFold();// 0x2163b28
	void OnScopeHandFold();// 0x2163b14
	void OnRep_ZombieModeSkillPropLevel();// 0x2163b00
	void OnRep_ZombieModeSkillPropChanged();// 0x2163aec
	void OnRep_WaterObj();// 0x2163ad8
	void OnRep_VehicleSeatIdx();// 0x2163ac4
	void OnRep_UnmannedVehicleSyncData();// 0x2163aa8
	void OnRep_ThrowGrenadeMode(byte PrevMode);// 0x2163a30
	void OnRep_Temperature(float LastValue);// 0x21639b0
	void OnRep_SwitchWeaponSpeedScale();// 0x216399c
	void OnRep_StatusChanged(byte prevStatus);// 0x216391c
	void OnRep_SignalHPRemainingTime();// 0x2163908
	void OnRep_SignalHP(float PrevVal);// 0x2163888
	void OnRep_SightVisionMask();// 0x2163874
	void OnRep_ShowRevivalPointIcon();// 0x214431c
	void OnRep_ShoulderStateChanged();// 0x2163858
	void OnRep_ServerLastTransformUpdateTimeStamp();// 0x2163844
	void OnRep_ScopeFov();// 0x2163830
	void OnRep_ResetDataOnRespawn();// 0x216381c
	void OnRep_ReplicatedParachuteState();// 0x1ee1bb4
	void OnRep_ReplicatedMoveState();// 0x2163808
	void OnRep_ReplicatedMovement();// 0x1eed16c
	void OnRep_ReplicatedIsStartParachute();// 0x21637f4
	void OnRep_RemainUseSupplySpotTimes();// 0x21637e0
	void OnRep_RemainUseEnhancerSpotTimes();// 0x21637cc
	void OnRep_PoseStateNotify(byte LastState);// 0x2163754
	void OnRep_PoisonFogStageChange();// 0x2163740
	void OnRep_PlayerKey();// 0x2163724
	void OnRep_PeekHasCollision();// 0x2163710
	void OnRep_MoneyNotify();// 0x21636fc
	void OnRep_IsWingUpControl();// 0x21636e8
	void OnRep_IsRescueingOtherStatusChange();// 0x21636d4
	void OnRep_IsInvincible();// 0x21636b8
	void OnRep_IsFPPChanged();// 0x216369c
	void OnRep_IsFakeOnVehicle();// 0x2163680
	void OnRep_IsBeingRescuedStatusChange();// 0x216366c
	void OnRep_InAssistantState();// 0x2163658
	void OnRep_HealthPredict();// 0x2163644
	void OnRep_HealthMax();// 0x2163628
	void OnRep_Health(float PrevHealth);// 0x1edf478
	void OnRep_HandFolderRatio();// 0x2163614
	void OnRep_FollowState();// 0x2163600
	void OnRep_EnergyChange();// 0x21635ec
	void OnRep_DamageMagnifierIdx();// 0x21635d8
	void OnRep_CurrentVehicle(STExtraVehicleBase* LastVehicle);// 0x2163560
	void OnRep_CurrentStates(uint64 prevStates);// 0x21634dc
	void OnRep_CurBonFire();// 0x21634c8
	void OnRep_CharacterHideInGame();// 0x21634b4
	void OnRep_CharacterFallingVelocityZFactor();// 0x21634a0
	void OnRep_ChangeHalloweenVampireCloth();// 0x216348c
	void OnRep_CarryBackStateChanged();// 0x2163470
	void OnRep_BreathAmmountChange();// 0x216345c
	void OnRep_bIsCallingForRevival();// 0x2163448
	void OnRep_AntidoteMaxTimeSync();// 0x1ee1bb4
	void OnRep_AntidoteExeTimeSync();// 0x1ee1bb4
	void OnRep_AngleSightRotOffsetChanged();// 0x2163434
	void OnRep_AnchorPlat();// 0x2163420
	void OnRep_AKEventNotify();// 0x216340c
	void OnPreRepAttachmentDelegate__DelegateSignature(Actor* AttachParent, SceneComponent* AttachComponent, FName AttachSocket, Vector RelativeLocation, Rotator RelativeRotation, Vector RelativeScale3D);// 0x2bb69b8
	void OnPostRepAttachmentDelegate__DelegateSignature(Actor* AttachParent, SceneComponent* AttachComponent, FName AttachSocket, Vector RelativeLocation, Rotator RelativeRotation, Vector RelativeScale3D);// 0x2bb69b8
	void OnPostFlushHealthChangeHistoryOnServer();// 0x21633f0
	void OnPoseStateChange(byte LastState, byte CurState);// 0x2bb69b8
	void OnPlayEmoteStop(int EmoteIndex);// 0x2163378
	void OnPlayEmoteEnd(int EmoteIndex);// 0x2163300
	bool OnPlayEmote(int EmoteId);// 0x2163280
	void OnOverlapDarkArea(bool bIsBegin, Actor* DarkAreaActor);// 0x21631b8
	void OnOpenDoor(PUBGDoor* door, int doorState);// 0x21630f4
	void OnNotifyHurt();// 0x2bb69b8
	void OnLoadEmoteAssetEnd(BackpackEmoteHandle* Handle, int EmoteIndex);// 0x2163038
	void OnLoadEmoteAssetBegin(BackpackEmoteHandle* Handle, int EmoteIndex, out SoftObjectPath[] OutAssetRefListToLoad);// 0x2162e7c
	void OnLeaveStateInChangeWearing(enum HasLeavedState);// 0x2162e04
	void OnInterruptCurrentEmote();// 0x2162df0
	void OnInterruptChangeWearing();// 0x2162ddc
	void OnHealthChangeFromRPC(float PrevHealth, float InHealth);// 0x2162d20
	void OnFollowStateChangedDelegate__DelegateSignature(enum LastFollowState, enum NewFollowState);// 0x2bb69b8
	void OnFollowStateChange();// 0x2162d0c
	void OnFlushHealthChangeHistoryOnClient(out const float[] ChangeHistory);// 0x2162c38
	void OnEquipWeapon(byte Slot);// 0x2bb69b8
	void OnEnterStateInChangeWearing(enum HasEnteredState);// 0x2162bc0
	void OnEndCurrentEmote(int EmoteIndex, int StopReason);// 0x2162b04
	void OnEndChangeWearing(int StopReason);// 0x2162a8c
	void OnDetectPaintDecalTarget(bool bStart);// 0x2bb69b8
	void OnCurEquipedShootWeaponChangeState(byte LastState, byte State);// 0x21629d0
	void OnClientRemoveBuff(int BuffID, int SkillID, int InstID);// 0x21628d0
	void OnClientAddBuff(int BuffID, int SkillID, int InstID);// 0x21627d0
	void OnChangeWearingAnimFinishedEvent(int Reason);// 0x2162758
	bool OnChangeWearing(int Index);// 0x21626d8
	void OnBPMoneyChange();// 0x2bb69b8
	void OnBPIsInvincibleChange();// 0x2bb69b8
	void OnBPHealthChange();// 0x2bb69b8
	void OnBeforeGetUp();// 0x2bb69b8
	void OnAsyncLoadEmoteAnim(AnimationAsset* CurrentEmoteAnim, BackpackEmoteHandle* Handle, int EmoteIndex);// 0x21624d0
	void OnAsyncLoadChangeWearingAnim();// 0x21624bc
	void OnActorHitHandle(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x2162354
	void NM_SetPeekState(bool Enable, bool IsLeft);// 0x216227c
	void NetMulticast_ExitClimbingActor(InteractiveMoveActor* ClimbingActor);// 0x21621fc
	void NetMulticast_EnterClimbingActor(InteractiveMoveActor* ClimbingActor);// 0x216217c
	void MulticastStartPlayEmoteWithRand(int EmoteIndex, int Rand);// 0x2162080
	void MulticastStartChangeWearing();// 0x2162024
	void MulticastPlayerSoundByID(int SoundID);// 0x2161f70
	void MulticastInteruptPlayEmoteOnServer(int EmoteIndex);// 0x2161ebc
	void MulticastInteruptPlayEmote(int EmoteIndex);// 0x2161e08
	void MulticastInteruptChangeWearingOnServer();// 0x2161dac
	void MulticastInteruptChangeWearing();// 0x2161d50
	bool Montage_IsPlaying(AnimMontage* AnimMontage);// 0x2161cd0
	void MeleeServer();// 0x2161c74
	void MeleeReleased();// 0x2161c60
	void MeleeLocal();// 0x2bb69b8
	void MeleeBroadcastOtherClients();// 0x2161c04
	void Melee(bool IsForCE);// 0x2161b84
	void LogWeaponsDataInWeaponManagerAndBackpack();// 0x2161b70
	void LocalUnEquipWeapon(STExtraWeapon* Weapon);// 0x2161af8
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x21619d0
	bool LocalStartPlayEmote(int EmoteIndex);// 0x2161950
	bool LocalStartChangeWearing();// 0x2161928
	bool LocalInteruptPlayEmote(int EmoteIndex);// 0x21618a8
	bool LocalInteruptChangeWearing();// 0x2161880
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x21617c4
	void LevaveFire(STExtraShootWeapon* OwnerShootWeapon);// 0x2161744
	void LeaveState(enum State);// 0x21616c4
	void LeaveServerState(enum State);// 0x2161610
	void LeaveBattleState();// 0x21615fc
	bool IsWeaponOwnerLocallyControlled();// 0x21615cc
	bool IsValidPuzzleElementTarget(out HitResult OutHitResult, out Vector OutStart, out Vector OutEnd);// 0x2161484
	bool IsValidPaintDecalTarget_Simple();// 0x2161464
	bool IsValidPaintDecalTarget(out enum OutvalidationType, out Vector OutStart, out Vector OutEnd);// 0x216132c
	bool IsUsingGrenade();// 0x2161304
	bool IsThermalImagingValid();// 0x21612dc
	bool IsSameTeamWithPlayerState(PlayerState* otherPS);// 0x216125c
	bool IsSameTeamWithLocal();// 0x2161234
	bool IsSameTeam(Pawn* Other);// 0x21611ac
	bool IsReplayViewTarget();// 0x2161184
	bool IsProneMove();// 0x216115c
	bool IsOnVehicleNotUAV();// 0x216111c
	bool IsOnVehicle();// 0x21610f8
	bool IsOnFireBalloon();// 0x21610d0
	bool IsNowUpWater();// 0x21610a8
	bool IsNightVisionValid();// 0x2161080
	bool IsNearDeath();// 0x2161058
	bool IsLocalViewed();// 0x2161028
	bool IsLocalControlorView();// 0x2161000
	bool IsInteractiveMoveComponentTakeOverJump();// 0x2160fd8
	bool IsInInteractiveMoveComponentState();// 0x2160fb0
	bool IsInFlyingTeam();// 0x2160f88
	bool IsInExtreme();// 0x2160f60
	bool IsInEditor();// 0x1fe93e0
	bool IsInCarryBackState();// 0x2160f38
	bool IsInBeCarriedBackState();// 0x2160f10
	bool IsHealthyAlive();// 0x2160ee8
	bool IsHealthAlive();// 0x2160ec0
	bool IsHandleInFold();// 0x2160e98
	bool IsGunADS();// 0x2160e68
	bool IsFirstPerson();// 0x2160e40
	bool IsExitingParachute();// 0x2160e18
	bool IsEnableDamage(STExtraBaseCharacter* TargetBaseCharacter);// 0x2160d98
	bool IsEnableBulletFlySound();// 0x2160d68
	bool IsDropAvatar();// 0x2160d38
	bool IsDetectingPaintDecalTarget();// 0x2160d18
	bool IsDefaultCharType();// 0x2160ce8
	bool IsClientCarryBackViewTarget();// 0x2160cc0
	bool IsClient_WeaponOwner();// 0x2160c90
	bool IsCharacterSprinting();// 0x2160c68
	bool IsChangeWearingState();// 0x2160c40
	bool IsCarryBackEnable();// 0x2160c18
	bool IsCanDriveSnowBoard();// 0x2160bf0
	bool IsBattleState();// 0x2160bc8
	bool IsAttackerIgnoreDamage(int DamageEventType);// 0x2160b40
	bool IsAngledSight();// 0x2160b18
	bool IsAllowScopeIn();// 0x2160af0
	bool IsAlive();// 0x2160ac0
	void InviteTeammate(FString Name, enum InvitationType);// 0x21609c0
	void InteractiveMoveComponentHandleJumpInput();// 0x21609ac
	void InteractiveMoveComponentHandleEnterInput();// 0x2160998
	void InsertDelayStateRelation(enum OldState, enum NewState);// 0x21608dc
	void InitCharacterSkillList();// 0x21608c8
	bool InDarkArea();// 0x21608a0
	void InClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x21607e4
	void HidePlayerMagOnGunReload();// 0x21607d0
	void HideNightVisionFrame();// 0x21607b4
	bool HaveAngledSight();// 0x216078c
	bool HasState(enum State);// 0x2160704
	bool HasSightCondition(enum Flags);// 0x2160684
	bool HasCarryBackState(enum InState);// 0x2160604
	bool HasAnyStates(enum[] States);// 0x21604a4
	bool HasAnySightVision(enum Flags);// 0x2160424
	bool HasAllStates(enum[] States);// 0x21602c4
	void HandleWeaponShootLost();// 0x21602a8
	void HandleWeaponOnShoot();// 0x2160294
	void HandleUnmannedVehicleControlAnimLoadFinished(byte InAnimType, STExtraVehicleBase* Vehicle, float PlayRate);// 0x2160194
	void HandleStartFireDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x2160114
	void HandleStartFillGasDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x2160094
	void HandleShootDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x2160014
	void HandlePlayOperateItemSoundOnServer(int ItemSoundID, enum ItemOperation);// 0x215ff58
	void HandlePlayerWeaponChangeState(byte WeaponStateType);// 0x215fed8
	void HandlePlayerPoseChanged(byte LastPose, byte NewPose);// 0x215fe1c
	void HandlePlayerPickUpActor(Actor* WrapperActor, float TargetZLoc);// 0x215fd60
	void HandlePlayEmoteCloseWeapon(byte TargetChangeSlot);// 0x215fce8
	void HandleOpenPickUpBoxAction();// 0x215fcd4
	void HandleOnCharAnimLoadingFinished();// 0x215fcb8
	void HandleMoveAntiShootVerifyMiss();// 0x215fc9c
	void HandleConsumeItemSkillBreak();// 0x215fc88
	void HandleBulletHitEvent(out const HitResult InImpactResult);// 0x215fbe4
	void HandleAutoSwitchWeaponDelay();// 0x215fbd0
	void GrenadeBackToWeaponServerCall();// 0x215fb74
	void GMTestZengzuo();// 0x215fb60
	void GMShowName();// 0x1ee1bb4
	Actor* GetWeaponUserConst();// 0x215fb30
	float GetWeaponOwnerPawnHealth();// 0x215fb00
	WeaponManagerComponent* GetWeaponManager();// 0x215fad0
	Rotator GetViewRotation();// 0x215fa80
	BaseVaultComponent* GetVaultComponent();// 0x215fa58
	float GetValueLimitForHealthPredict();// 0x215fa30
	STExtraUnderWaterEffectComp* getUnderWaterEffectComponent();// 0x215fa08
	Vector GetUIHelmetPosition();// 0x215f9b8
	enum GetUAVState();// 0x215f99c
	byte GetThrowGrenadeMode();// 0x215f97c
	int GetTeamMateIndex(STExtraBaseCharacter* Teammate);// 0x215f8fc
	STExtraBaseCharacter* GetTargetPlayer();// 0x215f8dc
	SkeletalMeshComponent* GetSpecialWeaponAttachMesh();// 0x215f8ac
	AkComponent* GetSoundComponent();// 0x215f884
	int[] GetSkillIdListByCharaSkillID(int[] CharSkillTableIDList);// 0x215f6a4
	FString GetShootWeaponNameByWeapon(int ItemDefineID);// 0x2bb69b8
	Vector GetShootVertifyHitBoxScale(out const CharacterHistoryData CharacterHistotyData, out const MovementRecordData MovementRecordData);// 0x215f55c
	SecuryInfoComponent* GetSecuryComponent();// 0x215f534
	STExtraVehicleBase* GetRelevantVehicleInReady();// 0x215f514
	int GetRedClothIDByEmote(int EmoteIndex);// 0x215f48c
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x215f3f4
	BoxComponent* GetProneShapeComponent();// 0x215f3d4
	byte GetPlayerWeaponFireMode();// 0x2088704
	byte GetPlayerWeaponEquipSlot();// 0x215f3ac
	AnimVehParamList GetPlayerVehAnimParam(float DeltaTime);// 0x215f2e8
	PlayerVehAnimList GetPlayerVehAnimation();// 0x215f2b4
	int GetPlayerTeamIndex();// 0x215f28c
	STExtraPlayerState* GetPlayerStateSafety();// 0x215f264
	STExtraPlayerState* GetPlayerState();// 0x215f234
	FString GetPlayerNameSafety();// 0x215f16c
	Vector GetPlayerMovementDir();// 0x215f11c
	FString GetPlayerDetailInfo();// 0x215f05c
	STExtraPlayerController* GetPlayerControllerSafety();// 0x215f02c
	STExtraPlayerController* GetPlayerControllerInReplay();// 0x215f004
	AnimParamList GetPlayerAnimParam(float DeltaTime);// 0x215eea4
	PlayerAnimData GetPlayerAnimationByEventType(byte AnimEventType);// 0x215ee1c
	PlayerAnimList GetPlayerAnimation();// 0x215ed10
	PickupManagerComponent* GetPickupManager();// 0x215ece8
	Vector GetOwnerShootStartLocation();// 0x215ec98
	int GetNearTeamPlayerNum();// 0x215ec70
	Vector GetMoveInputLocalDir();// 0x215ec28
	MoveAntiCheatComponent* GetMoveAntiCheatComponentInterface();// 0x215ebf8
	int GetMeshAnimLOD();// 0x215ebd0
	FString GetLatestInviter();// 0x215eb10
	STExtraPlayerState* GetLastInviterPlayerState();// 0x215eae8
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x215eab8
	float GetKdValue();// 0x215ea90
	bool GetIsPlayingEmote();// 0x215ea70
	bool GetIsFPP();// 0x215ea40
	bool GetIsChangeWearing();// 0x215ea20
	float GetInjuryFreeRate(int BodyPart);// 0x215e998
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x215e824
	Vector GetHeadLocation(bool bUseHeadBone);// 0x215e78c
	int GetHandFolderRatio();// 0x215e75c
	Vector GetGunOwnerHeadLocation();// 0x215e70c
	GroupPhysicsComponent* GetGroupPhysicsComponent();// 0x215e6f0
	FString GetGrenadeNameByGrenadeID(int InGrenadeID);// 0x2bb69b8
	enum GetGender();// 0x215e6d4
	bool GetFuzzyPosition(out Vector FuzzyPostion);// 0x215e648
	BaseFPPComponent* GetFPPComp();// 0x215e620
	Vector GetFollowerLocOffset(STExtraBaseCharacter* follower);// 0x215e590
	Vector GetFollowerLoc(STExtraBaseCharacter* follower);// 0x215e500
	float GetExtraDamageBySignalHP(float InDamge);// 0x215e480
	BackpackEmoteHandle* GetEmoteHandle(int ItemId);// 0x2bb69b8
	FString GetEmote(int ItemDefineID);// 0x2bb69b8
	STExtraWeapon* GetCurrentWeapon();// 0x215e458
	int GetCurrentVehicleAnimVehicleType();// 0x215e430
	STExtraVehicleBase* GetCurrentVehicle();// 0x215e400
	uint64 GetCurrentStatesInterface();// 0x215e3d0
	STExtraShootWeapon* GetCurrentShootWeapon();// 0x215e3a8
	STExtraWeapon* GetCurrentShieldWeapon();// 0x215e380
	InteractiveActorMoveComponent* GetCurrentInteractiveMoveComponent();// 0x215e358
	int GetCurrentFloorType();// 0x215e330
	FString GetCorpName();// 0x215e270
	Controller* GetControllerSafety();// 0x215e240
	UAEChaParachuteAnimListComponent* GetCharParachuteAnimListComponent();// 0x215e218
	float GetCharacterXYPlaneVelocity();// 0x215e1f0
	enum GetCharacterSubType();// 0x215e1c8
	enum GetCharacterMainType();// 0x215e1a0
	CharacterEnergyData GetCharacterEnergy();// 0x215dfb4
	UAECharacterAnimListComponent* GetCharacterAnimComponent();// 0x215df84
	STCharacterCarryBackComp* GetCarryBackComp();// 0x215df5c
	STExtraBaseCharacter* GetCarryBackCharacter();// 0x215df34
	CapsuleComponent* GetCapsuleComponentInterface();// 0x215df04
	Rotator GetCachedControlRotation();// 0x215debc
	STCharacterBonfireLinkComp* GetBonfireLinkComp();// 0x215de94
	STExtraBaseCharacter* GetBeCarriedBackCharacter();// 0x215de6c
	CharacterAvatarComponent2* getAvatarComponent2();// 0x215de44
	float GetAnimMontagePlayRate(AnimMontage* AnimMontage);// 0x215ddc4
	float GetAdjustDurabilityReduce(float DurabilityReduce, enum HitPos);// 0x215dd00
	PickUpItemData[] GetAdditionalTombBoxItemBP(int InstanceIDCnt);// 0x215dc4c
	SpringArmComponent* GetActiveSpringArm();// 0x215dc1c
	void GeneratePlayerBackpackWrappersToGround();// 0x215dc00
	void FpsPawnVaultToServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x215d934
	void FpsPawnVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x215d6f0
	void ForceWeaponFireInMuzzleDirection(bool bUseMuzzleDirection);// 0x215d670
	void ForceSyncPosistion(STExtraBaseCharacter* Char, RepMovement RepMovement);// 0x215d55c
	void ForceSwitchWeaponBySlotOnServer(byte Slot, bool bUseAnimation);// 0x215d490
	void ForceRepFPPChange(bool bSetSelf);// 0x215d408
	void ForcePlayerUpdateAnimation();// 0x215d3f4
	void ForceDestroyWeaponInventoryAndClearData();// 0x215d3e0
	void ForceCorrectClient(const Vector Postion, const Rotator Rotation, const Vector Velocity);// 0x215d2f0
	void FollowTeammate(FString Name);// 0x215d198
	enum FindBuffRelatedPawnState(FName _buffName);// 0x215d118
	void FillPlayerAnimRate(out PlayerAnimList InAnimList);// 0x215cf4c
	bool FillGasWeaponFilter();// 0x215cf24
	void FaceRotation(Rotator NewControlRotation, float DeltaTime);// 0x215ce60
	void ExitClimbingActor_Internal(InteractiveMoveActor* ClimbingActor);// 0x215cde8
	void ExitClimbingActor(InteractiveMoveActor* ClimbingActor);// 0x215cd70
	void ExecFollowTeammate(FString Name);// 0x215cc18
	void EquipZoomScope(int WeaponId, int ScopeID);// 0x215cb5c
	void EquipWeaponFinish();// 0x1ee1bb4
	void EquipWeapon(byte Slot, bool bSwitchWeapon);// 0x215ca98
	bool EnterState(enum State);// 0x215ca10
	void EnterServerState(enum State);// 0x215c95c
	void EnterFire();// 0x215c940
	void EnterClimbingActor_Internal(InteractiveMoveActor* ClimbingActor);// 0x215c8c8
	void EnterClimbingActor(InteractiveMoveActor* ClimbingActor);// 0x215c850
	void EnterBattleState();// 0x215c83c
	void EnterAssistantOnTrackVehicle(bool bEnter);// 0x215c7bc
	void EnableStanbyAnim(bool bIsEnable);// 0x215c73c
	bool EmoteAnimFinishedSuccessfully();// 0x215c714
	void DoPuzzleActorTickable(bool bStart);// 0x215c694
	void DoDetectPaintDecalTarget(bool bStart);// 0x215c614
	void DoAutoDropWeapon(STExtraShootWeapon* ShootWeapon);// 0x215c59c
	void DisappearOnDeath();// 0x215c588
	void DettachWeapon();// 0x1ee1bb4
	bool DestroyWeaponOnServerByPropSlot(byte Slot, bool bEnableBroadcast);// 0x215c4bc
	bool DestroyWeaponOnServer(FName LogicSocket, bool bEnableBroadcast);// 0x215c3e8
	void DestroyGrenadeAndSwitchBackToPreviousWeaponOnServer();// 0x215c3d4
	void DelayResetStandState();// 0x215c3c0
	void DelayMoveEnd();// 0x215c3ac
	void DelayMove(float Time);// 0x215c334
	void DelayHidden();// 0x215c318
	void DelayCustomDepth(float Time);// 0x215c2a0
	void DelayChangeRectiftAvatar(float InDelayTime, enum InSlotType, int InItemID, bool bWear);// 0x215c150
	CapsuleComponent* CreateCapsuleComponentForDeltaRotation(enum Why);// 0x215c0c8
	byte ConvertWeaponSlotToCharacterAnimType(byte WeaponSlot);// 0x215c048
	byte ConvertWeaponFireModeToWeaponAnimType(byte FireMode);// 0x215bfc8
	byte ConvertCharacterPoseStateToPoseType(byte InPoseState);// 0x215bf48
	void CollectPlayerTombBoxIDCard(out PickUpItemData[] OutItemDataList, out int InstanceIDCnt);// 0x215be3c
	void ClientSyncServerTagsChange(const FName[] newTags, const FName[] oldTags);// 0x215bcc0
	void ClientSomeOneResponseMe(FString BeInvitedName, enum res, enum InivationType);// 0x215bb74
	void ClientSomeOneInviteMe(FString SomeOne, enum InvitationType);// 0x215ba6c
	void ClientShowVeteranRecruitParachuteTeamTip(const int TipsID, FString param1, FString param2);// 0x215b8e0
	void ClientShowAutoGroupParachuteTeamTips(bool bDoGroupSuccessfully, FString LeaderName);// 0x215b7cc
	void ClientSetLeaveVehicleLocation(Vector LeaveLocation);// 0x215b754
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x215b690
	void ClientSetActorLocation(Vector Location, bool bDeactiveMov);// 0x215b5c4
	void ClientResponseFeedback(enum res);// 0x215b544
	void ClientPlayVehicleOverlapCameraShake();// 0x215b4e8
	void ClientPlayInteractEmote(int EmoteId);// 0x215b468
	void ClientOnPossessBy(Controller* NewController);// 0x215b3b4
	void ClientFeedbackZombiePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x215b1e4
	void ClientFeedbackZombieMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x215b000
	void ClientFeedbackVehiclePointDamage(float Damage, const STPointDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShot);// 0x215ae30
	void ClientChangeCharacterMesh(int MeshID);// 0x215adb0
	void ClientBulletLineTrace(Vector_NetQuantize BornPos, Vector_NetQuantize EndPos, STExtraBaseCharacter* InstigatorCharacter);// 0x215ac4c
	void ClientAttackerHandleShootDamageTips(const ShootDamageTipsStr ShootDamageTipsStr);// 0x215ab90
	void ClientAIHotValueDebugInfo(const float[] Info);// 0x215aacc
	void ClearOnDeath(Controller* EventInstigater, Actor* DamageCauser);// 0x215aa10
	void ClearHPUI();// 0x215a9f4
	void ClearClientJump();// 0x215a9e0
	bool CheckWeaponIsCurUsingWeapon(STExtraWeapon* CurWeapon);// 0x215a958
	bool CheckPlayerNeedUpdateAnimation(out byte OutForceUpdateFlag);// 0x215a8c0
	bool CheckPickWeaponCanAutoUse();// 0x215a890
	bool CheckOnMoveablePlatform();// 0x215a44c
	void CheckNeedReload(STExtraShootWeapon* OwnerShootWeapon, Actor* WeaponOwnerActor);// 0x215a7cc
	bool CheckIsWearingThoseClothes(out const int[] InClothIDList);// 0x215a6f8
	bool CheckIsWearingThisCloth(int InClothID);// 0x215a678
	bool CheckIsValidEmoteIDBP(int EmoteIndex);// 0x215a5f0
	void CheckCharacterDelayHide();// 0x215a5dc
	bool CheckCanShovelInSpringState();// 0x215a5ac
	bool CheckCanAutoUseWeapon(STExtraWeapon* Weapon);// 0x215a524
	bool CheckBuffTarget(STBuff* Buff);// 0x215a49c
	bool CheckBaseIsMoving();// 0x215a474
	bool CheckBaseIsMoveable();// 0x215a44c
	void CharacterStateReset();// 0x215a438
	static byte CharacterPoseStateToPoseType(byte InPoseState);// 0x215a3c0
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x215a2b4
	bool ChangeWearingAnimFinishedSuccessfully();// 0x215a28c
	void ChangeVehWeaponCameraData(bool Enable);// 0x215a20c
	void ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x215a104
	bool CanRegisterToPickUpList(Actor* Actor);// 0x215a07c
	bool CanPlayHitAnim();// 0x215a04c
	bool CanPaintDecal(int DecalId);// 0x2159fcc
	bool CanHearWeaponLockSound();// 0x2159f9c
	bool CanEnterWaterArea(enum[] disallowedState);// 0x2159e3c
	bool CanEnterState(enum NewState);// 0x2159dbc
	bool CanChangeThrowMode();// 0x2159d94
	void CancelFollow();// 0x2159d80
	bool CanAutoUseWeaopon(int WeaponId);// 0x2159cf8
	void CalculateUseBuffFlow(int InBuffID);// 0x2159c80
	void CalculateTakeItemFlow(int SpesificID, int Count);// 0x2159bc4
	float CalculateTakeDamageFinalDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x2159a50
	void CalculateShootPlayerHeadNum(int AddShootTimes, bool IsAI);// 0x2159984
	void CalculatePickUpItemFlowInstance(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam, uint64 InstanceID);// 0x21597a0
	void CalculatePickUpItemFlow(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam);// 0x215960c
	void CalculateHeathRecoverVal(float RecoverVal);// 0x215958c
	void CalculateHeathRecoverTimes();// 0x2159570
	void CalculateBuildingEnterFlow(int InBuildingID, int InCount);// 0x21594b4
	void CalculateBornLandThrowGrenade(int ID);// 0x215943c
	void CalculateBornLandGrenadeBattle(int ID, bool bHitOthers);// 0x2159378
	void CalculateAreaUseItemFlow(int SpesificID, int Count);// 0x21592bc
	void CalculateActivityEventFlow(TLog_ActivityEventType InEventID, int InCount);// 0x21591e4
	void CalcKillDataDeferred(out const DamageCauserRecordData Record);// 0x215913c
	void BulletLineTrace(Vector BornPos, Vector EndPos, PrimitiveComponent* MeshComp, Actor* BulletActor);// 0x2158ff0
	void BulletChange();// 0x2158f94
	void BroadcastOtherClientsDie(Controller* Killer, Actor* DamageCauser, const HitResult KillingHitInfo, Vector KillingHitImpulseDir, const DamageEvent DamageEvent, bool bIsPointDamage);// 0x2158d30
	void BroadcastFatalDamageInfoWrapper(UAECharacter* Causer, UAECharacter* VictimName, int DamageType, int AdditionalParam, bool IsHeadShot, int ResultHealthStatus, int PreviousHealthStatus, UAECharacter* WhoKillMe, int KillerKillCount);// 0x2158a7c
	void BroadcastFatalDamageInfo(UAECharacter* Causer, UAECharacter* Victim, ClientFatalDamageRecordData Data);// 0x21588a8
	void BroadcastClientsSimulateVehicleDamageDie(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x21585dc
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2158360
	void BroadcastClientsSimulateSTRadialDamage(float BaseDamage, const STRadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2157f6c
	void BroadcastClientsSimulateRadialDamageDie(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x2157c34
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x215794c
	void BroadcastClientsSimulatePoisonDamageDie(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x2157680
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2157404
	void BroadcastClientsSimulatePointDamageDie(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x2157138
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2156ebc
	void BroadcastClientsSimulateMeleeDamageDie(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x2156bdc
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x215694c
	void BroadcastClientsSimulateFallingDamageDie(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x2156680
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2156404
	void BroadcastClientsSimulateDrowningDamageDie(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x2156138
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2155ebc
	void BroadcastClientsSimulateDotDamageDie(float BaseDamage, const DotDamageEvent DotDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x2155bec
	void BroadcastClientsSimulateDotDamage(float BaseDamage, const DotDamageEvent DotDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x215596c
	void BroadcastClientsSimulateBurningDamageDie(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x2155694
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x215540c
	void BroadcastClientsSimulateAirAttackDamageDie(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x21550d4
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2154dec
	float BPTakeDamage(float Damage, const Controller* EventInstigator, const Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x2154c70
	void BPResetCharacter();// 0x2bb69b8
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0x2bb69b8
	void BPReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x2bb69b8
	void BPReceiveMeleeDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x2bb69b8
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x2bb69b8
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x2bb69b8
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x2bb69b8
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x2154afc
	float BPCalFinalDamage(Controller* Killer, float FinalDamage, bool bHeadShoot, bool bBreathing);// 0x2154990
	void BP_SetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x2bb69b8
	void BP_ResetDataOnRespawn();// 0x2154974
	int BP_GetWeaponSyncTicket();// 0x2154944
	enum BP_CheckWeaponSyncTicket(int InTicket);// 0x21548bc
	void AutoScopeWhenPeek();// 0x21548a8
	void AttachWeapon();// 0x1ee1bb4
	void AsyncAnimOpenDoorCallback(AnimationAsset* RetAsset);// 0x2154830
	void AsyncAnimListOpenDoorCallback(AnimationAsset*[] RetAssetList);// 0x21546d8
	void ApplyLeaveVehicleVelocity(Vector InLeaveVelocity);// 0x2154668
	bool AllowState(enum State, bool withLog);// 0x2154594
	void AIStartFireOnServer(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget);// 0x2154440
	void AddOneDamageCauserRecord(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x2154280
	void AddMoveOffSet(float Forward, float Right, float Up);// 0x2154180
	void AddDamageRecord(Controller* Causer, float Damage, int HSChangeMargin, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x2153fcc
	void AddClientLeaveStateCheck(enum State, float Duration);// 0x2153f10
	void ActivateParachuteFreeFallingShake(float FreeFallingShakeTime);// 0x2153e98

--------------------------------
Class: STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool bForceOpenPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 1]
	delegate CharacterAnimEventDelegate;//[Offset: 0x880, Size: 12]
	delegate CharacterCommonEventDelegate;//[Offset: 0x88c, Size: 12]
	delegate OnPushDamageDynamicDelegate;//[Offset: 0x8c0, Size: 12]
	delegate OnTakeDamageDynamicDelegate;//[Offset: 0x8cc, Size: 12]
	delegate OnClientPushDamageEvent;//[Offset: 0x8d8, Size: 12]
	float Health;//[Offset: 0x95c, Size: 4]
	float HealthMax;//[Offset: 0x960, Size: 4]
	float SignalHP;//[Offset: 0x964, Size: 4]
	float PreSignalHP;//[Offset: 0x968, Size: 4]
	float PreviousSignalHP;//[Offset: 0x96c, Size: 4]
	float SignalHPMax;//[Offset: 0x970, Size: 4]
	FString EnergyBuffListName;//[Offset: 0x974, Size: 12]
	float ResetSignalHP_FatalDamage;//[Offset: 0x980, Size: 4]
	float ResetSignalHP_Rescued;//[Offset: 0x984, Size: 4]
	int[] TypeIds;//[Offset: 0x988, Size: 12]
	float SwimSpeedDynamicScale;//[Offset: 0x994, Size: 4]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x998, Size: 1]
	float threatenValue;//[Offset: 0x99c, Size: 4]
	float HurtParticleOffset;//[Offset: 0x9a0, Size: 4]
	delegate DoOnNextFrameEnsureSpawnActorTriggerSuccess;//[Offset: 0x9ac, Size: 12]
	STExtraVehicleBase* CurrentVehicle;//[Offset: 0x9b8, Size: 4]
	UnmannedVehicleSyncData CurrentUnmannedVehicleSyncData;//[Offset: 0x9bc, Size: 8]
	UnmannedVehicleSyncData LastUnmannedVehicleSyncData;//[Offset: 0x9c4, Size: 8]
	STExtraVehicleBase* CurrentRemoteControlledVehicle;//[Offset: 0x9cc, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x9d0, Size: 4]
	bool EnableStatesInterruptRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d4, Size: 1]
	FString CharacterStateType;//[Offset: 0x9dc, Size: 12]
	bool bEnableDebugServiceInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e8, Size: 1]
	delegate OnHandleSkillStartDelegate;//[Offset: 0xa34, Size: 12]
	delegate OnHandleSkillEndDelegate;//[Offset: 0xa40, Size: 12]
	STBaseBuffSystemComponent* BuffSystemComponent;//[Offset: 0xa64, Size: 4]
	STBuffSystemComponent* BuffSystem;//[Offset: 0xa68, Size: 4]
	UTSkillManagerComponent* SkillManager;//[Offset: 0xa6c, Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xa70, Size: 4]
	ActorAttributeComponent* ActorAttribute;//[Offset: 0xa74, Size: 4]
	delegate StateEnterHandler;//[Offset: 0xa78, Size: 12]
	delegate StateLeaveHandler;//[Offset: 0xa84, Size: 12]
	delegate StateInterruptedHandlerBP;//[Offset: 0xa90, Size: 12]
	uint64 CurrentStates;//[Offset: 0xab0, Size: 8]
	uint64 DisabledStates;//[Offset: 0xab8, Size: 8]
	PawnStateDisable[] DisabledPawnStates;//[Offset: 0xac0, Size: 12]
	float RencentStatesValidRange;//[Offset: 0xacc, Size: 4]
	<float,uint64> RencentStatesMap;//[Offset: 0xad0, Size: 60]
	delegate OnPawnStateDisabled;//[Offset: 0xb0c, Size: 12]
	delegate OnPawnStateEnabled;//[Offset: 0xb18, Size: 12]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xb24, Size: 12]
	PartHitComponent* PartHitComponent;//[Offset: 0xb30, Size: 4]
	bool bIsGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb35, Size: 1]
	byte TeamNum;//[Offset: 0xb44, Size: 1]
	TickControlComponent* TickControlComp;//[Offset: 0xb48, Size: 4]
	float SpeedScale;//[Offset: 0xb54, Size: 4]
	float SpeedValue;//[Offset: 0xb58, Size: 4]
	float Temperature;//[Offset: 0xb5c, Size: 4]
	float TemperatureMax;//[Offset: 0xb60, Size: 4]
	float TemperatureMin;//[Offset: 0xb64, Size: 4]
	bool bUseModifiedTargetLocIfNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb74, Size: 1]
	bool bCanBePickByPicker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb75, Size: 1]
	CharacterMaterialComponent* CharacterMaterialComponent;//[Offset: 0xb7c, Size: 4]
	float VehicleDetailedTraceDist;//[Offset: 0xb80, Size: 4]
	float SpringArmTraceDist;//[Offset: 0xb84, Size: 4]
	<byte,CharacterBodyOffset> BodyRelativeOffsetConfig;//[Offset: 0xb88, Size: 60]
	ActivitySyncData ActicitySyncData;//[Offset: 0xbc4, Size: 28]
	bool bDisableFaceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe8, Size: 1]
	bool TriggerSkillEvent(class UTSkill SkillClass, byte SkillEventType);// 0x21992b0
	bool TriggerSkillCustomEvent(int SkillIndex, byte EventType);// 0x21991e4
	bool TriggerEntrySkillWithID(int SkillID, bool bEnable);// 0x216e594
	bool TriggerEntryEventWithID_Implementation(int SkillID, byte SkillEventType);// 0x2199118
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x216e50c
	void TriggerCustomEvent_Implementation(byte EventType);// 0x2199098
	bool SetSubAnimNodeAnimInstance(FName SubInstanceSlotName, AnimInstance* AnimInstance);// 0x2198fd4
	void SetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x2198f10
	bool SetBuffExpiry(FName BuffName, float ExpirySecondsFromNow);// 0x2198e3c
	void S2C_InterruptState(int stateID, int InterruptedBy);// 0x2198d78
	void RPC_Client_SetServiceDebugInfo(FString Info);// 0x2198cb4
	bool ResetSubAnimNodeAnimInstance(FName SubInstanceSlotName);// 0x2198c34
	void ResetPawnStateDisabled(enum State);// 0x2198bbc
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x2198aac
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x2198954
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x2198830
	void RemoveBaseBuffSystemComponent();// 0x219881c
	float PlayAnimMontageWithStartPos(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName, float StartPos);// 0x21986bc
	void OnRep_UnmannedVehicleSyncData();// 0x2163aa8
	void OnRep_Temperature(float LastValue);// 0x21639b0
	void OnRep_SignalHP(float PrevVal);// 0x2163888
	void OnRep_HealthMax();// 0x2163628
	void OnRep_Health(float PrevHealth);// 0x1edf478
	void OnRep_DisabledStates(uint64 prevStates);// 0x2198638
	void OnRep_CurrentStates(uint64 prevStates);// 0x21634dc
	void OnRep_ActivitySyncData();// 0x2198624
	void OnLeaveStateForBp(enum State);// 0x2bb69b8
	void OnHandleSkillStart__DelegateSignature(Character* OwnerCharacter, int SkillID);// 0x2bb69b8
	void OnHandleSkillEnd__DelegateSignature(Character* OwnerCharacter, enum StopReason, int SkillID);// 0x2bb69b8
	void OnEnterStateForBp(enum State);// 0x2bb69b8
	void LeaveState(enum State);// 0x21616c4
	bool IsPawnStateDisabledByWeapon(STExtraWeapon* Weapon, enum State);// 0x2198558
	bool IsPawnStateDisabled(enum State);// 0x21984d8
	bool IsCanDamageTeammate(out const DamageEvent DamageEvent);// 0x2198434
	bool IsCanDamageSelf(out const DamageEvent DamageEvent);// 0x2198390
	bool IsAlive();// 0x2160ac0
	bool HasState(enum State);// 0x2160704
	bool HasBuffID(int BuffID);// 0x2198308
	bool HasBuff(FName BuffName);// 0x2198280
	STExtraVehicleBase* GetUnmannedVehicle();// 0x2198264
	UTSkillManagerComponent* GetSkillManager();// 0x2198234
	float GetScaledSpeed();// 0x2198204
	FString GetPlayerNameSafety();// 0x215f16c
	STExtraPlayerController* GetPlayerControllerSafety();// 0x215f02c
	enum GetObserverType();// 0x21981d4
	enum[] GetDamageableGameObjectType();// 0x219810c
	UTSkill* GetCurSkill();// 0x21980dc
	STExtraVehicleBase* GetCurrentVehicle();// 0x215e400
	float GetBuffExpiry(FName BuffName);// 0x2198054
	float GetBuffDuration(int BuffID, int CauseSkillID);// 0x2197f88
	UAEBlackboard* GetBuffBlackboard(int BuffID);// 0x2197f08
	void FillBuffBlackboard(int BuffID, UAEBlackboardParameter[] ParamList);// 0x2197d80
	int ExtractDamageParams(out const DamageEvent DamageEvent, Actor* DamagetCauser, out int DamagetType);// 0x2197c40
	int ExtractDamageAdditionType(out const DamageEvent DamageEvent, Actor* DamagetCauser);// 0x2197b54
	bool EnterState(enum State);// 0x215ca10
	bool DestroySubAnimInstance(AnimInstance* AnimInstance);// 0x2197ad4
	void DelayHidden();// 0x215c318
	AnimInstance* CreateSubAnimInstance(class AnimInstance InstanceClass, FName InstanceName);// 0x2197a10
	void Client_ShowDebugString(Vector InLocation, FString InText, Actor* InActor, Color InColor, float InTime);// 0x219783c
	void Client_ShowDebugSphere(Vector InLocation, float InRadius, Color InColor, float InTime);// 0x21976f0
	void Client_ShowDebugLine(Vector InStart, Vector InEnd, Color InColor, float InTime);// 0x21975a4
	void Client_ShowDebugCone(Vector InLocation, float InRadius, Color InColor, float InTime, Vector forwardDir, float ang);// 0x21973c0
	void Client_ShowDebugCapsule(Vector InLocation, float InRadius, float Length, Color InColor, float InTime, Rotator Rot, float ang);// 0x2197194
	void Client_ShowDebugBox(Vector Center, Color InColor, float InTime, Vector Extent, Quat Rot);// 0x2196ff0
	void ClearBuff();// 0x2196fd4
	void CheckSignalHP();// 0x2196fc0
	bool CanBeAttackedByWeapon(int WeaponId);// 0x2196f38
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x2bb69b8
	void BPOnRespawned();// 0x2bb69b8
	void BPOnRecycled();// 0x2bb69b8
	bool AllowState(enum State, bool withLog);// 0x2154594
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x2196e28
	bool AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x2196cd0
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x2196b2c

--------------------------------
Class: UAECharacter.Character.Pawn.Actor.Object
	int iRegionCharacter;//[Offset: 0x658, Size: 4]
	FName PlayerType;//[Offset: 0x660, Size: 8]
	FString PlayerName;//[Offset: 0x668, Size: 12]
	FString Nation;//[Offset: 0x674, Size: 12]
	uint32 PlayerKey;//[Offset: 0x680, Size: 4]
	FString PlayerUID;//[Offset: 0x684, Size: 12]
	int TeamID;//[Offset: 0x690, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 1]
	int CampID;//[Offset: 0x698, Size: 4]
	int resID;//[Offset: 0x69c, Size: 4]
	enum DefaultCharacterGender;//[Offset: 0x6a0, Size: 1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x6a4, Size: 12]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x6b0, Size: 44]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x6dc, Size: 24]
	int planeAvatarId;//[Offset: 0x6f4, Size: 4]
	int DyeDebugFlag;//[Offset: 0x6f8, Size: 4]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0x6fc, Size: 12]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 1]
	bool bIsAIWithPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x709, Size: 1]
	float RatingScore;//[Offset: 0x71c, Size: 4]
	bool UseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 1]
	bool DefaultIsUseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x721, Size: 1]
	FString LuaFilePath;//[Offset: 0x730, Size: 12]
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x73c, Size: 60]
	void SetNetCullDistanceSquared(float fNetCullDistanceSquared);// 0x1f3d0e8
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x27c9c74
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x27c9b38
	void OnRep_UseWholeModel();// 0x27c9b24
	void OnRep_TeamID();// 0x27c9b10
	void OnRep_PlayerUID();// 0x27c9afc
	void OnRep_PlayerKey();// 0x2163724
	void OnRep_CampID();// 0x27c9ae8
	bool IsDefaultCharType();// 0x2160ce8
	int GetTeamId();// 0x27c9acc
	FString GetPlayerKey();// 0x27c9a0c
	ActorComponent*[] GetNonSimulatedComponents_OnFighting();// 0x27c9944
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates();// 0x27c987c
	ActorComponent*[] GetNonSimulatedComponents();// 0x27c97b4
	ActorComponent*[] GetNonDedicatedComponents();// 0x27c96ec
	int GetCampId();// 0x27c96c4
	void ClientAcknowledgeReconnection(uint32 Token);// 0x1f28b9c

--------------------------------
Class: STExtraVehicleBase.Pawn.Actor.Object
	int iRegionVehicle;//[Offset: 0x438, Size: 4]
	bool MeshAlwaysTickPoseAndRefreshBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 1]
	bool AutoEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43d, Size: 1]
	enum VehicleType;//[Offset: 0x43e, Size: 1]
	enum VehicleShapeType;//[Offset: 0x43f, Size: 1]
	ItemDefineID AvatarDefaultCfg;//[Offset: 0x440, Size: 24]
	ItemDefineID AvatarDefaultCfgLOD;//[Offset: 0x458, Size: 24]
	MaterialInterface* BrokenMat;//[Offset: 0x470, Size: 4]
	ParticleSystem* AssetParticleExplosion;//[Offset: 0x478, Size: 40]
	ParticleSystem* PS_OnHitObstacles;//[Offset: 0x4a0, Size: 4]
	<FName,ParticleSoftWrapperArray> ParticleSoftWrapperMap;//[Offset: 0x4a4, Size: 60]
	<FName,ParticleRuntimeDataArray> ParticleRuntimeDataMap;//[Offset: 0x4e0, Size: 60]
	Texture2D* VehicleIcon;//[Offset: 0x51c, Size: 4]
	bool AdjustViewDistanceByHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	float AdjustViewDistanceBaseDist;//[Offset: 0x524, Size: 4]
	float AdjustViewDistanceBaseFactor;//[Offset: 0x528, Size: 4]
	bool IsUnmannedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 1]
	bool bCanChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52d, Size: 1]
	float ShowGrainyScreenMinDist;//[Offset: 0x530, Size: 4]
	bool ImmuePassageDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534, Size: 1]
	float FuelConsumptionModifierBoost;//[Offset: 0x538, Size: 4]
	bool bCanBoostSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 1]
	bool bUseSyncAtClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53d, Size: 1]
	bool bCheckOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53e, Size: 1]
	float LanscapeCheckDistance;//[Offset: 0x540, Size: 4]
	bool bLockZeroAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x544, Size: 1]
	float LockZeroAngularDampingValue;//[Offset: 0x548, Size: 4]
	bool bInvulnerableWhenHasRiders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	bool bRespawnNeedAdjustLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d, Size: 1]
	int MainMaterialIndex;//[Offset: 0x550, Size: 4]
	FText VehicleDisplayName;//[Offset: 0x554, Size: 12]
	bool ShowVehicleEnterButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 1]
	bool AdvanceVehicleShowAsStandardVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x561, Size: 1]
	Vector AirDropVelocity;//[Offset: 0x564, Size: 12]
	StaticMesh* AirDropParachuteMesh;//[Offset: 0x570, Size: 4]
	FName AirDropParachuteSocketName;//[Offset: 0x578, Size: 8]
	bool bAllowDifferentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool SupportMusicGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 1]
	bool VehicleBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x582, Size: 1]
	float BackpackCapacity;//[Offset: 0x584, Size: 4]
	FName BackpackName;//[Offset: 0x588, Size: 8]
	FString[] BackpackSupportModeIDList;//[Offset: 0x590, Size: 12]
	int[] marr_MidIndexes;//[Offset: 0x59c, Size: 12]
	float EnterVehicleCameraBlendTime;//[Offset: 0x5a8, Size: 4]
	float ExitVehicleCameraBlendTime;//[Offset: 0x5ac, Size: 4]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x5b0, Size: 4]
	bool DisableTickVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 1]
	float StaticForceFixInterval;//[Offset: 0x5b8, Size: 4]
	float voiceCheckCD;//[Offset: 0x5bc, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x5c0, Size: 4]
	float VoiceCheckDis;//[Offset: 0x5c4, Size: 4]
	float voiceUsingHornCheckDis;//[Offset: 0x5c8, Size: 4]
	float voiceCheckSpeed;//[Offset: 0x5cc, Size: 4]
	bool EnableMapMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec, Size: 1]
	Vector[] RouteList;//[Offset: 0x5f0, Size: 12]
	int[] AutoDrive_BestWaypoint;//[Offset: 0x5fc, Size: 12]
	int AutoDrive_CurrentTargetWaypointIdx;//[Offset: 0x608, Size: 4]
	Vector AutoDriverTargetPosition;//[Offset: 0x60c, Size: 12]
	Vector AutoDriverStartPosition;//[Offset: 0x618, Size: 12]
	delegate OnSeatAttached;//[Offset: 0x624, Size: 12]
	delegate OnSeatDetached;//[Offset: 0x630, Size: 12]
	delegate OnSeatChange;//[Offset: 0x63c, Size: 12]
	delegate OnStartResolveStuck;//[Offset: 0x648, Size: 12]
	delegate OnEndResolveStuck;//[Offset: 0x654, Size: 12]
	bool mb_ZeroLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 1]
	FString LuaFilePath;//[Offset: 0x664, Size: 12]
	bool bDebugDrawEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 1]
	float PassengerInjuryAvoidance;//[Offset: 0x674, Size: 4]
	bool IsCanVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 1]
	bool CanPushUpCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x679, Size: 1]
	bool CanSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67a, Size: 1]
	uint16 ReplicatedFuelRatio;//[Offset: 0x67c, Size: 2]
	ParticleSystem* ParticleExplosion;//[Offset: 0x6b8, Size: 4]
	enum VehicleHealthState;//[Offset: 0x6bc, Size: 1]
	bool bIsEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bd, Size: 1]
	bool bIsUsingHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6be, Size: 1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bf, Size: 1]
	bool bIsVehicleSpringArmAutoReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	Vector BloodEffectScale;//[Offset: 0x6c4, Size: 12]
	SkeletalMeshComponent* Mesh;//[Offset: 0x6d0, Size: 4]
	VehicleSeatComponent* VehicleSeats;//[Offset: 0x6d4, Size: 4]
	VehicleDamageComponent* VehicleDamage;//[Offset: 0x6d8, Size: 4]
	VehicleCommonComponent* VehicleCommon;//[Offset: 0x6dc, Size: 4]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x6e0, Size: 4]
	VehicleSyncComponent* VehicleSyncComponent;//[Offset: 0x6e4, Size: 4]
	LagCompensationComponentBase* VehicleShootAntiCheat;//[Offset: 0x6e8, Size: 4]
	VehicleComponent*[] TickedComponents;//[Offset: 0x6ec, Size: 12]
	VehicleComponent*[] WeakTickedComponents;//[Offset: 0x6f8, Size: 12]
	bool bClearComponentTickWhenDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x704, Size: 1]
	float EnActiveTimeThreshold;//[Offset: 0x70c, Size: 4]
	bool bFreezeNeedChangeVehiclePhysx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x718, Size: 1]
	float VehicleHitThreshold;//[Offset: 0x728, Size: 4]
	float VehicleHitCharacterThreshold;//[Offset: 0x72c, Size: 4]
	float AndroidGLES2TailLightScale;//[Offset: 0x73c, Size: 4]
	int EnableTickEffectsDevciveLevel;//[Offset: 0x740, Size: 4]
	VehBackpackItem[] VehicleBackpackItems;//[Offset: 0x74c, Size: 12]
	bool bServerPrecentPenetratingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x759, Size: 1]
	bool bServerClearLinearVelocityZEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75a, Size: 1]
	bool bPeneTerrainProtectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75b, Size: 1]
	float lastForwardSpeed;//[Offset: 0x75c, Size: 4]
	delegate OnClientEnterVehicleEvent;//[Offset: 0x760, Size: 12]
	delegate OnClientExitVehicleEvent;//[Offset: 0x76c, Size: 12]
	delegate OnClientChangeVehicleSeatEvent;//[Offset: 0x778, Size: 12]
	bool NeedCheckMovetoVehicleStraight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x784, Size: 1]
	float VehicleEnterDistance;//[Offset: 0x788, Size: 4]
	float TickEnterSphereInterval;//[Offset: 0x78c, Size: 4]
	float EnterSphereExtraHeight;//[Offset: 0x790, Size: 4]
	bool EnableTickEnterSphereAsyncLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79d, Size: 1]
	float AsyncLoadResDistance;//[Offset: 0x7a0, Size: 4]
	float TickEnterSphereAsyncLoadResInterval;//[Offset: 0x7a4, Size: 4]
	bool EnableCullWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ad, Size: 1]
	float TickEnterCullWaterSphereInterval;//[Offset: 0x7b0, Size: 4]
	float EnterCullWaterDistanceSq;//[Offset: 0x7b4, Size: 4]
	Vector CullWaterCapsuleA;//[Offset: 0x7b8, Size: 12]
	Vector CullWaterCapsuleB;//[Offset: 0x7c4, Size: 12]
	float CullWaterCapsuleRadius;//[Offset: 0x7d0, Size: 4]
	float CullWaterCapsuleBlendWidth;//[Offset: 0x7d4, Size: 4]
	float PeneTerrainProtectionInterval;//[Offset: 0x7e0, Size: 4]
	float SaveValidTransformInterval;//[Offset: 0x7e4, Size: 4]
	Vector PeneTerrainProtectionFixOffset;//[Offset: 0x7e8, Size: 12]
	bool bIsAirdroppingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81c, Size: 1]
	StaticMeshComponent* AirDropParachuteMeshComp;//[Offset: 0x820, Size: 4]
	AkAudioEvent* Sfx_EngineLoop;//[Offset: 0x824, Size: 4]
	AkAudioEvent* Sfx_EngineLoop_Team;//[Offset: 0x828, Size: 4]
	AkAudioEvent* Sfx_Boost;//[Offset: 0x82c, Size: 4]
	AkAudioEvent* Sfx_FireLoop;//[Offset: 0x830, Size: 4]
	AkAudioEvent* Sfx_Landing;//[Offset: 0x834, Size: 4]
	AkAudioEvent* Sfx_Explosion;//[Offset: 0x838, Size: 4]
	AkAudioEvent* Sfx_HitBody;//[Offset: 0x83c, Size: 4]
	AkAudioEvent* Sfx_HitZombie;//[Offset: 0x840, Size: 4]
	AkAudioEvent* Sfx_HitMetal;//[Offset: 0x844, Size: 4]
	AkAudioEvent* Sfx_Horn;//[Offset: 0x848, Size: 4]
	AkAudioEvent* Sfx_Throttle;//[Offset: 0x84c, Size: 4]
	AkAudioEvent* Sfx_UnderWater_In;//[Offset: 0x850, Size: 4]
	AkAudioEvent* Sfx_UnderWater_Out;//[Offset: 0x854, Size: 4]
	AkAudioEvent* Sfx_CannotThrottle;//[Offset: 0x858, Size: 4]
	AkAudioEvent* Sfx_BodyOverlapDamage;//[Offset: 0x85c, Size: 4]
	AkAudioEvent* Sfx_EngineStart;//[Offset: 0x860, Size: 4]
	AkAudioEvent* Sfx_EngineStop;//[Offset: 0x864, Size: 4]
	AkAudioEvent*[] SfxArr_MusicLoops;//[Offset: 0x868, Size: 12]
	float EngineSfxEndDelayTime;//[Offset: 0x874, Size: 4]
	bool bAudioLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x878, Size: 1]
	STExtraVehicleSfxLoop EngineSfxLoop;//[Offset: 0x87c, Size: 92]
	STExtraVehicleSfxLoop FireSfxLoop;//[Offset: 0x8d8, Size: 92]
	STExtraVehicleSfxLoop HornSfxLoop;//[Offset: 0x934, Size: 92]
	STExtraVehicleSfxLoop MusicSfxLoop;//[Offset: 0x990, Size: 92]
	AkComponent* SoundComponent;//[Offset: 0x9ec, Size: 4]
	float RPMSfxScale;//[Offset: 0xa1c, Size: 4]
	float ThrottleSfxMinSpeed;//[Offset: 0xa20, Size: 4]
	float PlayMusicChance;//[Offset: 0xa2c, Size: 4]
	enum VehicleSyncTag;//[Offset: 0xa41, Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0xa44, Size: 4]
	VehicleSimViewData SimulateViewData;//[Offset: 0xa58, Size: 4]
	VehicleSimViewData SimulateFreeCameraViewData;//[Offset: 0xa5c, Size: 4]
	VehicleSpringArmComponent* mp_VehicleSpringArm;//[Offset: 0xa60, Size: 4]
	bool bAddVehicleRotationChangeOnPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa64, Size: 1]
	delegate OnVehicleHealthStateChanged;//[Offset: 0xaa0, Size: 12]
	bool bAlwaysIgnoreRideCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaac, Size: 1]
	float MinRideAngleDgree;//[Offset: 0xab0, Size: 4]
	bool bServerDetachApplyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab4, Size: 1]
	bool bCanUseSpeculativeCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac0, Size: 1]
	bool bUseSpeculativeCCDOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac1, Size: 1]
	float VehicleRadiusImulseScale;//[Offset: 0xac4, Size: 4]
	float VehicleAdditionalBlowUp;//[Offset: 0xac8, Size: 4]
	bool bResolvingStuckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaec, Size: 1]
	float StuckMinImpulse;//[Offset: 0xaf0, Size: 4]
	float ContinuousStuckInterval;//[Offset: 0xaf4, Size: 4]
	float ContinuousStuckTimeBeforeResoving;//[Offset: 0xaf8, Size: 4]
	float StuckResovingTime;//[Offset: 0xafc, Size: 4]
	float ContinuousStuckTimer;//[Offset: 0xb04, Size: 4]
	float StuckResovingTimer;//[Offset: 0xb08, Size: 4]
	float PenePercent;//[Offset: 0xb0c, Size: 4]
	bool bShouldRespawnSelfWhenUnusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb50, Size: 1]
	float RespawnWaitingTime;//[Offset: 0xb54, Size: 4]
	float RespawnTickInterval;//[Offset: 0xb58, Size: 4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5c, Size: 1]
	bool bServerDetachEveryoneWhenRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe0, Size: 1]
	bool bEnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbec, Size: 1]
	class VehicleAntiCheatTask[] VACTaskSetups;//[Offset: 0xbf0, Size: 12]
	VehicleAntiCheatTask*[] VACTasks;//[Offset: 0xbfc, Size: 12]
	VehicleAntiCheatTask*[] VacInstancedTasks;//[Offset: 0xc08, Size: 12]
	bool bEnableServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc44, Size: 1]
	bool EnableServerRecordWhenEnterCheatPunishMentNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4c, Size: 1]
	SkeletalMeshComponent* FPPMeshComponent;//[Offset: 0xc64, Size: 4]
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0xc68, Size: 4]
	SkeletalMesh* MeshAssetRef;//[Offset: 0xc70, Size: 40]
	SkeletalMesh* TPPMesh;//[Offset: 0xc98, Size: 4]
	bool bOnPlayerActiveRegionsChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd34, Size: 1]
	bool bInActiveRegions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd35, Size: 1]
	bool bEnableSkeletalMeshOptimizationDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd36, Size: 1]
	Vector SeekLockOffset;//[Offset: 0xd38, Size: 12]
	FName SeekLockSocket;//[Offset: 0xd48, Size: 8]
	float ProduceSoundInterval;//[Offset: 0xd50, Size: 4]
	delegate VehicleAnimEventDelegate;//[Offset: 0xd58, Size: 12]
	BattleItemHandleBase* BindingHandle;//[Offset: 0xd64, Size: 4]
	delegate OnEnterVehicle;//[Offset: 0xd68, Size: 12]
	float OverlapCameraShakeInterval;//[Offset: 0xd7c, Size: 4]
	float OverlapDamageRate;//[Offset: 0xd84, Size: 4]
	float OverlapImpulseRate;//[Offset: 0xd88, Size: 4]
	float OverlapImpulseRateZ;//[Offset: 0xd8c, Size: 4]
	float MaxOverlapImpulse;//[Offset: 0xd90, Size: 4]
	float MinOverlapSpeed;//[Offset: 0xd94, Size: 4]
	float OverlapSimpleCharacterInterval;//[Offset: 0xd98, Size: 4]
	float OverlapVehicleDamageRate;//[Offset: 0xda0, Size: 4]
	float MaxOverlapVehicleDamageRange;//[Offset: 0xda4, Size: 4]
	ESTAINoiseEventParams EngineParams;//[Offset: 0xdac, Size: 16]
	float EngineSoundCheckInterval;//[Offset: 0xdbc, Size: 4]
	float EngineSoundMinCheckSpeed;//[Offset: 0xdc4, Size: 4]
	ESTAINoiseEventParams LoudspeakerParams;//[Offset: 0xdc8, Size: 16]
	bool IsForbidNightVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd9, Size: 1]
	class AttrModifyComponent* AttrModifyCompClass;//[Offset: 0xddc, Size: 4]
	class STBuffSystemComponent* BuffSystemCompClass;//[Offset: 0xde0, Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xde4, Size: 4]
	STBuffSystemComponent* BuffSystemComp;//[Offset: 0xde8, Size: 4]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xdec, Size: 12]
	delegate OnVehicleAvatarDataCopied;//[Offset: 0xdf8, Size: 12]
	VehicleAvatarComponent* VehicleAvatar;//[Offset: 0xe04, Size: 4]
	VehicleAdvanceAvatarComponent* VehicleAdvanceAvatar;//[Offset: 0xe08, Size: 4]
	bool bAdvanceAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0c, Size: 1]
	bool ForcePlayerUpdateAnimEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0d, Size: 1]
	int CandidateAvatarID;//[Offset: 0xe10, Size: 4]
	bool bNeedDelayProcessAvatarOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe14, Size: 1]
	bool bEnableWeakTickComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1c, Size: 1]
	float WeakTickDoSomethingDuration;//[Offset: 0xe20, Size: 4]
	bool bSpawnedInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe24, Size: 1]
	IdeaDecalActor*[] AttachedDecalActors;//[Offset: 0xe28, Size: 12]
	float MaxLinearVelocity;//[Offset: 0xe34, Size: 4]
	bool bInBuffSpeedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe38, Size: 1]
	int TeamID;//[Offset: 0xe3c, Size: 4]
	int CampID;//[Offset: 0xe40, Size: 4]
	float VehicleGoStraight;//[Offset: 0xe44, Size: 4]
	bool DamageIgnoreWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe48, Size: 1]
	STExtraPlayerCharacter* ReqExchangeCharacter;//[Offset: 0xe4c, Size: 4]
	float ExchangeVehicleSeatInterval;//[Offset: 0xe50, Size: 4]
	delegate OnHitSpecialEffectDelegate;//[Offset: 0xe58, Size: 12]
	WeaponManagerBaseComponent* WeaponManagerComponent;//[Offset: 0xe64, Size: 4]
	EffectComponent* NewEffectComponent;//[Offset: 0xe68, Size: 4]
	bool OpenShootVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6c, Size: 1]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6d, Size: 1]
	int WeaponReconnectIdx;//[Offset: 0xe70, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0xe74, Size: 4]
	enum UAVOperateState;//[Offset: 0xe7c, Size: 1]
	float SingleMoveRate;//[Offset: 0xe80, Size: 4]
	SoftObjectPath VehicleStatesConfigClass;//[Offset: 0xe88, Size: 24]
	SoftObjectPath VehicleBloodMaxHpConfigClass;//[Offset: 0xea0, Size: 24]
	int CurrentVehicleStatesData;//[Offset: 0xeb8, Size: 4]
	PlayerTombBox*[] TombBoxOnVehicle;//[Offset: 0xec8, Size: 12]
	STExtraBaseCharacter*[] StandingVehiclePlayers;//[Offset: 0xed4, Size: 12]
	bool IsExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee0, Size: 1]
	FName ExplodedTombBoxPlaceSocket;//[Offset: 0xee8, Size: 8]
	float TombBoxTraceLength;//[Offset: 0xef0, Size: 4]
	float PlayerOutAngleCosin;//[Offset: 0xef4, Size: 4]
	bool bFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef8, Size: 1]
	bool bNeedFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef9, Size: 1]
	bool bInHouseSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xefa, Size: 1]
	float SleepVehicleTolerance;//[Offset: 0xefc, Size: 4]
	float StaticFixAngel;//[Offset: 0xf00, Size: 4]
	float ClientAwakeVehicleTolerance;//[Offset: 0xf04, Size: 4]
	float SleepVehicleTickTime;//[Offset: 0xf08, Size: 4]
	float ServerInitForceSleepPhysicsDelay;//[Offset: 0xf10, Size: 4]
	float ClientInitForceSleepPhysicsDelay;//[Offset: 0xf14, Size: 4]
	int CannotEnterTips;//[Offset: 0xf20, Size: 4]
	bool CanLeaveVehicleVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf24, Size: 1]
	float LeaveVehicleVelocity;//[Offset: 0xf28, Size: 4]
	int CannotLeaveTips_HighSpeed;//[Offset: 0xf2c, Size: 4]
	delegate VehicleBeforeWheelDestroy;//[Offset: 0xf34, Size: 12]
	Vector AttachedRelLoc;//[Offset: 0xf40, Size: 12]
	Actor* AttachedActor;//[Offset: 0xf4c, Size: 4]
	int HasAttachedActorTips;//[Offset: 0xf50, Size: 4]
	bool bEnableTickSafeSpawnInternalNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5c, Size: 1]
	VehicleAIComponent* VehicleAIComponent;//[Offset: 0xf60, Size: 4]
	float LandTraceMaxHeight;//[Offset: 0xf64, Size: 4]
	byte CameraDataType;//[Offset: 0xf68, Size: 1]
	bool ShowUpDownGUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf69, Size: 1]
	bool ShowHeightUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6a, Size: 1]
	bool ShowFuelCapacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6b, Size: 1]
	bool ShowSeatUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6c, Size: 1]
	bool bEnableMoveForwardInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6d, Size: 1]
	void WeakTick(float DeltaTime);// 0x223bec8
	void VehicleBeenDestroyedCleanInfoDisplay(enum InVehicleHealthState);// 0x223be50
	void UpdateHeightToLand();// 0x223be3c
	void UnregisterComponentWeakTick(VehicleComponent* InComponent);// 0x223bdc4
	void UnregisterComponentTick(VehicleComponent* InComponent);// 0x223bd4c
	void TickVehicleHealthState();// 0x223bd30
	void TickEnableAvatarOutline();// 0x223bd1c
	void StopEngine();// 0x2163aa8
	void StopAutoDriving();// 0x223bd08
	void StartFireSimple(byte ShootMode);// 0x223bc90
	void StartEngine();// 0x223bc74
	void StartAirDrop();// 0x223bc60
	void SpawnItemForVehicleBackpack(out const PickUpItemData[] ItemList);// 0x223bbb4
	void ShowBoostingEffect(bool bShow);// 0x2bb69b8
	bool ShouldUseSpecialHitEffect();// 0x223bb84
	byte ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, out const LocalShootHitData LocalShootHitData, STExtraShootWeapon* Weapon);// 0x223b998
	void SetWeaponReconnectIdx(int ReconnectOpIndex);// 0x223b918
	void SetVehicleStates(int ID, bool bEnable, float fTime);// 0x223b80c
	void SetVehicleReplicatedFuelRatio(float InFuel);// 0x223b794
	void SetUsingHorn(bool bUse);// 0x223b714
	void SetUAVOperateState(enum NewState);// 0x223b69c
	void SetSpawnedInReady(bool bFlag);// 0x223b620
	void SetSimulatePhysics(bool bSimulate);// 0x223b5a0
	void SetRegionBasedNetConsideration(bool bUseRegion);// 0x223b520
	void SetPhysActive(bool bActive, float Delay);// 0x223b458
	void SetJoystickMoveVelocity(Vector2D moveVelocity);// 0x223b3e8
	void SetHandBrake(float Rate);// 0x223b368
	void SetDefaultMusic(out const FString[] InMusic);// 0x223b234
	void SetBoosting(bool bEnalbed);// 0x223b1ac
	void SetAirControlF(float Rate);// 0x223b12c
	void SetAirControlB(float Rate);// 0x223b0ac
	void ServerSetUsingHorn(bool bUse);// 0x223afe4
	void ServerSetIsVehicleSpringArmAutoReturn(bool bEnalbed);// 0x223af1c
	void ServerSetBoosting(bool bEnalbed);// 0x223ae54
	void ServerSetAttachedActor(Actor* InAttachTarget);// 0x223addc
	void ServerSetAirControlF(float Rate);// 0x223ad28
	void ServerSetAirControlB(float Rate);// 0x223ac74
	void ServerResetToPosition(Vector NewLocation, Rotator NewRotation);// 0x223abac
	void ServerDetachEveryoneFromSeat(bool bMustExit, bool bApplyVehicleVelocity);// 0x223aadc
	void SendVehicleInAirChangedTimeToServer();// 0x223aa80
	void SendTriggerEventToServer(VehicleTriggerComponent* VTComp);// 0x223a9cc
	void SendCreateDamage(STExtraSimpleCharacter* Target);// 0x223a918
	void SendClient_ForceUpdate_ControlRotationOnVehicle_SimulateViewData();// 0x1f3e934
	void SafeSleepVehicle();// 0x223a904
	void RestartAntiCheat();// 0x223a8f0
	void ResetJoystickMove();// 0x223a8dc
	void RequestChangeVehicleAvatar();// 0x223a880
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x223a770
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x223a618
	void RemoveAntiStuckBox();// 0x223a604
	void RegisterItemHandle(BattleItemHandleBase* BindingHandle);// 0x223a58c
	void RegisterComponentWeakTick(VehicleComponent* InComponent);// 0x223a514
	void RegisterComponentTick(VehicleComponent* InComponent);// 0x223a49c
	void RecordValidTransform();// 0x223a488
	void RecordInAirTime();// 0x223a474
	void ProcessAvatarOutline();// 0x1f378b0
	void PrintStats();// 0x223a458
	int PreCheckAdvanceAvatar(int InAvatarID);// 0x2bb69b8
	bool PreChangeVehicleFPPAvatar();// 0x223a430
	bool PreChangeVehicleBrokenAvatar();// 0x223a408
	bool PreChangeVehicleAvatar(int InAvatarID, int InAdvanceAvatarID);// 0x223a344
	void PostLoadFPPMesh();// 0x2163628
	void PlaySfxOneShot(AkAudioEvent* AkEvent);// 0x223a2cc
	bool PawnHasState(enum PawnState);// 0x223a244
	void OnUserSwitchWeapon(STExtraBaseCharacter* InUser, byte Slot);// 0x223a180
	void OnUpdateEffects();// 0x2bb69b8
	void OnStopFire();// 0x2bb69b8
	void OnSkeletalMeshSleep(PrimitiveComponent* WakingComponent, FName BoneName);// 0x223a0c4
	void OnSkeletalMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x223a008
	void OnSetTailLightValue(float LightValue);// 0x2bb69b8
	void OnServerPlayerChangeVehicleSeat(enum LastSeatType, enum NewSeatType);// 0x2bb69b8
	void OnRep_VehicleSyncFlag();// 0x2239ff4
	void OnRep_VehicleHealthState();// 0x2239fe0
	void OnRep_TeamID();// 0x222f144
	void OnRep_SimulateViewData();// 0x2239fcc
	void OnRep_SimulateFreeCameraViewData();// 0x2239fb8
	void OnRep_ServerLastReplicatedServer();// 0x2239fa4
	void OnRep_ReplicatedFuelRatio();// 0x2239f90
	void OnRep_IsVehicleSpringArmAutoReturn();// 0x2239f7c
	void OnRep_IsForbidNightVehicle();// 0x2239f68
	void OnRep_IsEngineStarted();// 0x2239f54
	void OnRep_IsBoosting();// 0x2239f40
	void OnRep_IsAirdroppingVehicle();// 0x2239f2c
	void OnRep_FrozenStatic();// 0x2239f18
	void OnRep_CurrentVehicleStatesData(int OldVehicleStatesData);// 0x2239ea0
	void OnRep_CandidateAvatar();// 0x2bb69b8
	void OnRep_CampID();// 0x1ee1bb4
	void OnRep_AttachedRelLoc();// 0x2239e8c
	void OnRep_AttachedActor();// 0x2239e78
	void OnPlayerReqExitVehicle(STExtraPlayerCharacter* Player);// 0x2239df8
	void OnPlayerExitVehicle(bool IsDriver, const STExtraPlayerCharacter* Character);// 0x2bb69b8
	void OnPlayerEnterVehicle(bool IsSuccess, enum SeatType);// 0x2bb69b8
	void OnMeshLoaded(SoftObjectPath AssetRef);// 0x2239c8c
	void OnFireBeginOverlapEvent(Actor* OtherActor);// 0x2239c14
	void OnEngineStop();// 0x2bb69b8
	void OnEngineStart();// 0x2bb69b8
	void OnBoostingChanged();// 0x2bb69b8
	void NotifyServerProjectileBulletImpact(out const ExplosionProjectileHitInfo InExpProjectileInfo, ProjectileBulletBase* Bullet);// 0x2239b40
	void MultiCast_ApplyImpulse(const Vector Origin, float DamageOuterRadius, float BaseMomentumMag);// 0x2239a40
	void LoadFPPVehicleModel();// 0x2239a2c
	bool IsVehicleWarVehicle();// 0x22399fc
	bool IsValidYawInput(float YawInput, VehicleSpringArmComponent* SpringArm);// 0x2239930
	bool IsUsingFPPModel();// 0x2239908
	bool IsUCAV();// 0x22398e0
	bool IsUAV();// 0x22398b0
	bool IsSpawnedInReady();// 0x2239894
	bool IsSimulatePhysics();// 0x223986c
	bool IsNotInWater();// 0x223983c
	bool IsMotorbike();// 0x2239814
	bool IsInMidAir();// 0x22397e4
	bool IsInBuffSpeedState();// 0x22397c8
	bool IsHelicopter();// 0x22397a0
	bool IsEntirelyUnderWater();// 0x2239778
	bool IsElectronic_Failure();// 0x2239750
	bool IsClient_WeaponOwner();// 0x2239720
	bool IsCanEnter();// 0x22396f0
	bool IsAutoDriving();// 0x22396c8
	bool IsArmedVehicle();// 0x22396a0
	bool IsAmphibiousVehicle();// 0x2239678
	bool IsAlive();// 0x2239648
	bool IsAirVehicle();// 0x21af794
	bool IsAI();// 0x2239618
	bool IsActiveEffect(FName EffectName);// 0x2239598
	void InitVehicle(int FuelPercent, bool bEngineOn, bool bInHouse);// 0x223947c
	SkeletalMeshComponent* InitSkeletalMesh(FName SubobjectName);// 0x22393fc
	bool HasVehicleStates(int ID, int srcVehicleStatesData);// 0x2239338
	bool HasSkillID(int SkillID);// 0x22392b8
	bool HasBuffID(int BuffID);// 0x2239230
	bool HasAutoDriveTarget();// 0x2239208
	void HandlePlayerAttachedToVehcicle(STExtraBaseCharacter* Player);// 0x2239188
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x2239108
	void HandleOnVehicleAvatarDataCopied();// 0x22390f4
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x2238fec
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x2238e54
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x2238d4c
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x222dde0
	void HandleMoveAntiShootVerifyMiss();// 0x2238d30
	void HandleLocalPlayerLeaveVehicle(STExtraPlayerCharacter* Player);// 0x2238cb0
	void HandleLocalPlayerEnterVehicle(STExtraPlayerCharacter* Player);// 0x2238c30
	void HandleLocalPlayerDeadth(STExtraBaseCharacter* Player);// 0x2238bb8
	Actor* GetWeaponUserConst();// 0x2238b88
	Actor* GetWeaponUser();// 0x2238b58
	int GetWeaponReconnectIdx();// 0x2238b28
	WeaponOwnerProxy* GetWeaponOwnerProxy();// 0x2238af8
	uint32 GetWeaponOwnerPlayerKey();// 0x2238ac8
	float GetWeaponOwnerPawnHealth();// 0x2238a98
	WeaponManagerBaseComponent* GetWeaponManagerBase();// 0x2238a68
	WeaponManagerComponent* GetWeaponManager();// 0x1f36acc
	SkeletalMeshComponent* GetVehicleWheelMesh();// 0x2238a40
	VehicleShootWeapon* GetVehicleWeapon(int SeatId, int WeaponListID);// 0x223897c
	VehicleSyncComponent* GetVehicleSync();// 0x2238960
	VehicleSpringArmComponent* GetVehicleSpringArm();// 0x2238938
	int GetVehicleSkinItemID();// 0x2238910
	VehicleSeatComponent* GetVehicleSeats();// 0x22388f4
	float GetVehicleReplicatedFuelRatio();// 0x22388cc
	VehicleDamageComponent* GetVehicleDamage();// 0x22388b0
	VehicleCommonComponent* GetVehicleCommon();// 0x2238894
	VehicleAvatarComponent* GetVehicleAvatar();// 0x223886c
	VehicleAIComponent* GetVehicleAIComponent();// 0x2238850
	VehicleAdvanceAvatarComponent* GetVehicleAdvanceAvatar();// 0x2238828
	bool GetUsingHorn();// 0x2238800
	int GetTeamId();// 0x22387d8
	MaterialInstanceDynamic* GetTailLightDIM();// 0x22387b0
	AkComponent* GetSoundComponent();// 0x2238794
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x202b478
	Vector GetRotationInputDir();// 0x2143b40
	float GetReloadAllWeaponTime();// 0x223876c
	SkeletalMeshComponent* GetMesh();// 0x2238750
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x2238720
	BattleItemHandleBase* GetItemHandle();// 0x2238704
	bool GetIsPhysSleep();// 0x22386d4
	bool GetIsOpenVertify();// 0x22386b8
	Vector GetGunOwnerHeadLocation();// 0x2238668
	MaterialInstanceDynamic* GetFrontLightDIM();// 0x2238640
	float GetForwardSpeed();// 0x20821a8
	STExtraPlayerCharacter* GetFirstPassenger();// 0x2238618
	MaterialInstanceDynamic* GetFFPLightDIM();// 0x22385f0
	SkeletalMeshComponent* GetEquipWeaponAttachMesh();// 0x22385c0
	bool GetEnableTickEnterSphereAsyncLoadRes();// 0x22385a4
	STExtraPlayerCharacter* GetDriver();// 0x223857c
	uint64 GetCurrentStatesInterface();// 0x223854c
	void GetCurrentOverlapActors(out STExtraSimpleCharacter*[] Result);// 0x2238480
	void GetCullWaterCapsule(out Vector OutCapsulePointA, out Vector OutCapsulePointB, out float OutCullWaterCapsuleRadius, out float OutCullWaterCapsuleBlendWidth);// 0x22382f4
	int GetCampId();// 0x22382cc
	BuoyancyForceComponent* GetBuoyancyForce();// 0x22382b0
	int GetAvatarId();// 0x2238288
	void GetAllVehicleWeaponList(out VehicleShootWeapon*[] OutList);// 0x22381bc
	void GetAllSkeletalMeshList(out SkeletalMeshComponent*[] OutList);// 0x22380f0
	void ExitFPPVehicle();// 0x22380dc
	void EnterFPPVehicle();// 0x22380c8
	void EnableWeakTick(bool Enabled);// 0x2238040
	void EnablePlayMusic(bool InEnable);// 0x2237fc4
	void EnableMoveForwardInput(bool InEnable);// 0x2237f48
	void EnableAvatarOutline(enum OutlineType);// 0x2237ed0
	void DestroyAndRespawnSelf();// 0x2237ebc
	void DeactiveEffect(FName EffectName);// 0x2237e44
	void CreateAntiStuckBox();// 0x2237e30
	void ClientPlayVehicleCameraShake();// 0x2237dd4
	void ClientFeedbackPointDamage(Actor* DamageCauser);// 0x2237d20
	void ClearInputs();// 0x2237d0c
	void ClearDecals();// 0x2237cf8
	void ClearBuff();// 0x2237cdc
	void ClearAllInputState();// 0x2237cc0
	void ClearAllComponentWeakTick();// 0x2237cac
	void ClearAllComponentTick();// 0x2237c98
	bool CheckHaveSpecialAttachActor();// 0x2228f04
	void CheckEnableAvatarOutline();// 0x2bb69b8
	bool CheckAllWeaponIsReadyForFire();// 0x2237c70
	void ChangeVehicleAvatar(STExtraPlayerController* MainPlayerController);// 0x2218220
	void ChangeAssetBy(BackpackVehicleAvatarHandle* InAvatarHandle);// 0x2237bf8
	bool CanVehicleJump();// 0x21b92e4
	bool CanPushUpCharacterWhenPenetrating();// 0x2237bdc
	bool CanLeaveVehicle();// 0x21bb128
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x2237b54
	bool CanAutoDrivingNoDriver();// 0x2237b2c
	bool CanAutoDriving();// 0x2237b04
	void CallbackLoadedParticleExplosion();// 0x2237af0
	void BroadCastEnterVehicleEvent(bool IsSucc, enum SeatType);// 0x2237a28
	void BroadcastClientVehicleExplosionEffect();// 0x2237a0c
	void BPPostLoadFPPMesh();// 0x2bb69b8
	void BPPlayOverlapDamageCameraShake();// 0x2bb69b8
	void BPOnSetAttachedActor(Actor* InAttachTarget);// 0x223798c
	void AutoLoadEffect();// 0x2237978
	bool ApplyAnimation();// 0x2237950
	void AfterBeginPlay();// 0x2bb69b8
	void AddHealthSafety(float AddVal);// 0x22378d0
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x22377c0
	bool AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x2237668
	void ActiveEffectAsync(FName EffectName);// 0x22375f0
	void ActiveEffect(FName EffectName);// 0x2237578

--------------------------------
Class: ItemDefineID
	int Type;//[Offset: 0x0, Size: 4]
	int TypeSpecificID;//[Offset: 0x4, Size: 4]
	bool bValidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bValidInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	uint64 InstanceID;//[Offset: 0x10, Size: 8]

--------------------------------
Class: ParticleSoftWrapperArray
	ParticleSoftWrapper[] WrapperArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ParticleSoftWrapper
	ParticleSystem* Template;//[Offset: 0x0, Size: 40]
	Vector Location;//[Offset: 0x28, Size: 12]
	Rotator Rotation;//[Offset: 0x34, Size: 12]
	Vector Scale;//[Offset: 0x40, Size: 12]
	FName AttachSocketName;//[Offset: 0x50, Size: 8]
	bool bAutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int ValidDeviceLevel;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: ParticleRuntimeDataArray
	ParticleRuntimeData[] DataArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ParticleRuntimeData
	ParticleSystemComponent* SpawnedComponent;//[Offset: 0x0, Size: 4]

--------------------------------
Class: VehicleSeatComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	float VaildExitVehicleHeight;//[Offset: 0x14c, Size: 4]
	STExtraVehicleSeat[] Seats;//[Offset: 0x150, Size: 12]
	STExtraPlayerCharacter*[] SeatOccupiers;//[Offset: 0x15c, Size: 12]
	STExtraVehicleWeaponsOnSeat[] VehicleWeapons;//[Offset: 0x168, Size: 12]
	STExtraVehicleAttachment[] VehicleAttachmentsConfig;//[Offset: 0x174, Size: 12]
	VehicleAttachmentBase*[] VehicleAttachments;//[Offset: 0x180, Size: 12]
	delegate OnSeatOccupiersChanged;//[Offset: 0x18c, Size: 12]
	delegate OnSeatSocketChanged;//[Offset: 0x198, Size: 12]
	FName[] AlternativeLeaveVehicleSockets;//[Offset: 0x1a4, Size: 12]
	FName[] AlternativeEnterVehicleSockets;//[Offset: 0x1b0, Size: 12]
	float LeaveVehicleVelocityScale;//[Offset: 0x1bc, Size: 4]
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	bool bEnableForceLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 1]
	byte[] SeatGUITypes;//[Offset: 0x1cc, Size: 12]
	delegate OnSeatAttached;//[Offset: 0x1d8, Size: 12]
	delegate OnSeatDetached;//[Offset: 0x1e4, Size: 12]
	delegate OnSeatChanged;//[Offset: 0x1f0, Size: 12]
	delegate OnUpdateSeatGUI;//[Offset: 0x1fc, Size: 12]
	FString LatestDriverPlayerName;//[Offset: 0x208, Size: 12]
	delegate OnDriverChange;//[Offset: 0x214, Size: 12]
	FString LatestDriverPlayerUID;//[Offset: 0x220, Size: 12]
	int MaxInUseSeatGUIIndex;//[Offset: 0x230, Size: 4]
	STExtraPlayerController* RemoteController;//[Offset: 0x238, Size: 4]
	bool bDelayOnRepOccupiersInReConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	STExtraPlayerCharacter* mp_CurDriver;//[Offset: 0x240, Size: 4]
	void TestReleaseSeatAnim();// 0x22d5560
	void SeatOccupiersChangedDelegate__DelegateSignature();// 0x2bb69b8
	void ReAttachCharacterOnSeat(STExtraBaseCharacter* InCharacter);// 0x22d54e8
	void ReAttachAllCharacters();// 0x22d54d4
	void ProcessPawnUseVehWeaponRotation(STExtraBaseCharacter* InChar, FName AttachSocketName);// 0x22d5418
	void OnSeatSocketChanged__DelegateSignature();// 0x2bb69b8
	void OnRep_VehicleWeapons();// 0x22d5404
	void OnRep_Occupiers();// 0x22d53f0
	void OnRep_Attachments();// 0x22d53dc
	bool IsSeatIndexAvailable(int SeatIndex);// 0x22d535c
	bool IsSeatAvailableTeam(STExtraBaseCharacter* InCharacter);// 0x22d52dc
	bool IsSeatAvailable(enum SeatType);// 0x22d525c
	bool IsDriver(STExtraBaseCharacter* InCharacter);// 0x22d51dc
	bool HasCharacter(const STExtraBaseCharacter* Character);// 0x22d515c
	int GetSeatNum();// 0x219f6c4
	bool GetPlayerSeatInfo(STExtraPlayerCharacter* InPlayer, out STExtraVehicleSeat SeatInfo);// 0x22d4f40
	STExtraBaseCharacter* GetPassenger(int SeatIndex);// 0x205b098
	int GetInUseSeatNum();// 0x22d4f18
	STExtraBaseCharacter* GetFirstSeatCharacterBySeatType(enum SeatType);// 0x22d4e98
	STExtraPlayerCharacter* GetFirstPassenger();// 0x22d4e70
	int GetDriverSeatIndex();// 0x22d4e48
	STExtraPlayerCharacter* GetDriver();// 0x22d4e20
	int GetChracterSeatIndex(STExtraBaseCharacter* Character);// 0x22d4da0
	int GetAvailableSeatIndex(enum SeatType);// 0x22d4d20
	void ClientSetLocalWeaponWillCtr(STExtraPlayerCharacter* Character, VehicleShootWeapon* VehShootWeapon);// 0x22d4c24
	void ClientSetLeaveVehicleLocation(STExtraPlayerCharacter* Character, Vector LeaveLocation);// 0x22d4b60
	void ClientChangeSeatCameraData(STExtraPlayerCharacter* Character, int OldIndex, int NewIndex);// 0x22d4a1c
	void ChangeCharacterSeatSocket(out const FName[] InSeatSockets);// 0x22d4950

--------------------------------
Class: VehicleComponent.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: LuaActorComponent.ActorComponent.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x100, Size: 60]
	FString LuaFilePath;//[Offset: 0x13c, Size: 12]
	void UnRegistLuaTick();// 0x5238ebc
	void RegistLuaTick(float TickInterval);// 0x52392d8

--------------------------------
Class: LuaNetSerialization

--------------------------------
Class: STExtraVehicleSeat
	enum SeatType;//[Offset: 0x0, Size: 1]
	FName AnimCompTagName;//[Offset: 0x8, Size: 8]
	FName EnterVehicleSocket;//[Offset: 0x10, Size: 8]
	FName LeaveVehicleSocket;//[Offset: 0x18, Size: 8]
	byte OccupyMovementMode;//[Offset: 0x20, Size: 1]
	byte HoldWeaponType;//[Offset: 0x21, Size: 1]
	byte SeatSpecialType;//[Offset: 0x22, Size: 1]
	bool IsCanLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 1]
	bool NarrowSeatNeedUseCommomAimAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	int GUIDisplayIndex;//[Offset: 0x28, Size: 4]
	CurveFloat* MinViewPitchCurve;//[Offset: 0x2c, Size: 4]
	Rotator CharRotVsVehiRot;//[Offset: 0x30, Size: 12]
	byte SeatSideType;//[Offset: 0x3c, Size: 1]
	bool bEnableVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool bEnableUsedAsFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	bool bEnableChangeFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 1]
	STExtraVehicleWeaponConfig[] VehicleWeaponConfig;//[Offset: 0x40, Size: 12]
	bool bDefaultControlWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	FName VehicleWeaponSeatSocket;//[Offset: 0x50, Size: 8]
	bool bAddDynamicCapsuleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	float Radius;//[Offset: 0x5c, Size: 4]
	float HalfHeight;//[Offset: 0x60, Size: 4]
	Transform CollisionOffset;//[Offset: 0x70, Size: 48]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]

--------------------------------
Class: STExtraVehicleWeaponConfig
	FName VehicleWeaponSocket;//[Offset: 0x0, Size: 8]
	class VehicleShootWeapon* VehicleWeaponClass;//[Offset: 0x8, Size: 4]
	Vector2D ViewYawLimit;//[Offset: 0xc, Size: 8]
	Vector2D ViewPitchLimit;//[Offset: 0x14, Size: 8]
	bool bVerifyMuzzleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float MuzzleDirTor;//[Offset: 0x20, Size: 4]
	bool bVerifyMuzzleLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float MuzzleVehicleTore;//[Offset: 0x28, Size: 4]
	bool bVerifyMuzzleBoxRanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	Box MuzzleRangeBox;//[Offset: 0x30, Size: 28]
	float DistTorSquared;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: VehicleShootWeapon.STExtraShootWeapon.STExtraWeapon.Actor.Object
	float RotateSpeedOnVehicle;//[Offset: 0xda8, Size: 4]
	bool bUseVehWeaponDisableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdac, Size: 1]
	bool bUseVehWeaponView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdad, Size: 1]
	bool bAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdae, Size: 1]
	FName VehWeaponBindSocket;//[Offset: 0xdb0, Size: 8]
	CameraOffsetData VehWeaponViewCameraData;//[Offset: 0xdb8, Size: 28]
	bool bNeedCalcMuzzleSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd4, Size: 1]
	FName OnBlockMuzzleSocket;//[Offset: 0xdd8, Size: 8]
	AnimSequence* VehicleWeaponIdle;//[Offset: 0xde0, Size: 4]
	AnimSequence* VehicleWeaponReload;//[Offset: 0xde4, Size: 4]
	AnimSequence* VehicleWeaponUnuseIdle;//[Offset: 0xde8, Size: 4]
	float VehicleWeaponReloadRate;//[Offset: 0xdec, Size: 4]
	AnimMontage* VehicleWeaponFireMontage;//[Offset: 0xdf0, Size: 4]
	bool bVehicleWeaponUseHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf4, Size: 1]
	FName VehicleWeaponGripSocketR;//[Offset: 0xdf8, Size: 8]
	FName VehicleWeaponGripSocketL;//[Offset: 0xe00, Size: 8]
	bool bControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe08, Size: 1]
	bool bEnableControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe09, Size: 1]
	bool bEnableAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0a, Size: 1]
	bool bEnableFreeCameraWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0b, Size: 1]
	bool bEnableExitWeaponViewWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0c, Size: 1]
	bool bEnableReturnBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1c, Size: 1]
	bool bEnableRotateCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1d, Size: 1]
	bool bEnableScopeAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1e, Size: 1]
	bool bAnimFollowCameraOnlyInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe21, Size: 1]
	FName CharacterSocket;//[Offset: 0xe28, Size: 8]
	bool bEnableShowVehicleWeaponUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe30, Size: 1]
	bool bEnableShowControlButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe31, Size: 1]
	bool bEnableShowSlotUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe32, Size: 1]
	bool bEnableShowInterferenceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe33, Size: 1]
	bool bEnableShowCompass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe34, Size: 1]
	bool bUsePredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe35, Size: 1]
	class GrenadePredictLine* GrenadePredictLineClass;//[Offset: 0xe38, Size: 4]
	FName GrenadePredictLineSocket;//[Offset: 0xe40, Size: 8]
	GrenadePredictLine* GrenadePredictLine;//[Offset: 0xe48, Size: 4]
	bool bCanConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4c, Size: 1]
	float FuelConsumptionRate;//[Offset: 0xe50, Size: 4]
	float StartReloadDelayTime;//[Offset: 0xe68, Size: 4]
	float EndReloadDelayTime;//[Offset: 0xe78, Size: 4]
	STExtraPlayerCharacter* RefSeatPlayer;//[Offset: 0xe7c, Size: 4]
	bool bLocalUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe80, Size: 1]
	Actor* OwnerActor;//[Offset: 0xe84, Size: 4]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0xe88, Size: 4]
	int BulletTypeTipMsgID;//[Offset: 0xe90, Size: 4]
	int NotEnoughEnergyTipMsgID;//[Offset: 0xe94, Size: 4]
	int CantUseFireWeaponTipMsgID;//[Offset: 0xe98, Size: 4]
	void StartReloadAnim();// 0x22d6f6c
	void SetUsePawnControlRotation(STExtraPlayerCharacter* Character, bool IsUse, bool IsThirdPerson);// 0x22d6e58
	void OnVehicleExplode();// 0x213e87c
	void OnRep_OwnerActor();// 0x22d6e44
	void NetMulticastReturnBullets();// 0x22d6de8
	void MulUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed, const WeaponSyncData SyncData);// 0x22d6c8c
	void K2_SetSpecialMeshHide(bool isHide);// 0x2bb69b8
	void K2_OnUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0x2bb69b8
	void K2_OnReturnBullets();// 0x2bb69b8
	MeshComponent* K2_GetWeaponMeshComp();// 0x2bb69b8
	void HnadleScopeInAfterReload();// 0x22d6c78
	void HandleWeaponStateChanged(byte LastState, byte NewState);// 0x22d6bbc
	void HandleWeaponStartReload();// 0x22d6ba8
	void HandleWeaponEndReload();// 0x22d6b94
	void HandleEndTouchScreenInReloading(byte FingerIndex);// 0x22d6b14
	void HandleBeginTouchScreenInReloading(out const Vector2D Loc);// 0x22d6a90
	STExtraPlayerCharacter* GetPlayerCharacter();// 0x22d6a68
	STExtraVehicleBase* GetOwnerVehicle();// 0x22d6a40
	Rotator GetOwnerCameraRotator();// 0x22d69f8
	Transform GetCharacterSocketTransform();// 0x22d6998
	void DoAutoReloadVehicleWeapon(STExtraShootWeapon* ShootWeapon);// 0x22d6920
	bool CheckIsAutonomousOrObTarget();// 0x22d68f8
	void AfterReloadEnd();// 0x22d68e4

--------------------------------
Class: STExtraShootWeapon.STExtraWeapon.Actor.Object
	bool CloseLowLevelDeviceHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x868, Size: 1]
	bool bUseAdjusetImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x869, Size: 1]
	float voiceCheckCD;//[Offset: 0x86c, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x870, Size: 4]
	bool isDefaultSlienceWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x874, Size: 1]
	WeaponVerifyConfig ShootVerifyConfig;//[Offset: 0x890, Size: 60]
	bool bIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 1]
	bool bIsAIOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cd, Size: 1]
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0x8d0, Size: 12]
	delegate OnCurBulletChange;//[Offset: 0x8dc, Size: 12]
	delegate OnCurBarrelBulletChangeDelegate;//[Offset: 0x8e8, Size: 12]
	delegate OnStartFireDelegate;//[Offset: 0x8f4, Size: 12]
	delegate OnStopFireDelegate;//[Offset: 0x900, Size: 12]
	delegate OnWeaponShootDelegate;//[Offset: 0x90c, Size: 12]
	delegate OnWeaponShootHitDelegate;//[Offset: 0x918, Size: 12]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0x924, Size: 12]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0x930, Size: 12]
	delegate OnWeaponEquipDelegate;//[Offset: 0x93c, Size: 12]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0x948, Size: 12]
	delegate OnWeaponEquipAnimProcessDelegate;//[Offset: 0x954, Size: 12]
	delegate OnWeaponUnEquipAnimProcessDelegate;//[Offset: 0x960, Size: 12]
	delegate OnLeftLastBulletWhenReloadOneByOneDelegate;//[Offset: 0x96c, Size: 12]
	delegate OnBulletNumChangeDelegate;//[Offset: 0x978, Size: 12]
	delegate OnShootIntervalModeChangeDelegate;//[Offset: 0x984, Size: 12]
	delegate OnWeaponShootPlayerNotifyDelegate;//[Offset: 0x99c, Size: 12]
	delegate OnWeaponDurabilityChangedDelegate;//[Offset: 0x9a8, Size: 12]
	delegate OnWeaponSecurityLogShootActorDelegate;//[Offset: 0x9b4, Size: 12]
	delegate OnShootWeaponAutoDrop;//[Offset: 0x9c0, Size: 12]
	delegate OnWeaponDropStart;//[Offset: 0x9cc, Size: 12]
	delegate OnWeaponDropFinished;//[Offset: 0x9d8, Size: 12]
	delegate OnBulletLaunch;//[Offset: 0x9e4, Size: 12]
	delegate OnBulletImpact;//[Offset: 0x9f0, Size: 12]
	delegate OnBulletImpactFX;//[Offset: 0x9fc, Size: 12]
	delegate OnSpawnBulletImpactFX;//[Offset: 0xa08, Size: 12]
	delegate OnChangeShootType;//[Offset: 0xa14, Size: 12]
	CrossHairComponent* CachedCrossHairComponent;//[Offset: 0xa20, Size: 4]
	BulletHitInfoUploadComponent* CachedBulletHitInfoUploadComponent;//[Offset: 0xa24, Size: 4]
	BulletTrackComponent* CachedBulletTrackComponent;//[Offset: 0xa28, Size: 4]
	delegate OnScopeIn;//[Offset: 0xa2c, Size: 12]
	delegate OnScopeOut;//[Offset: 0xa38, Size: 12]
	delegate OnScopeInContinue;//[Offset: 0xa44, Size: 12]
	STExtraShootWeaponComponent* ShootWeaponComponent;//[Offset: 0xa50, Size: 4]
	MultiBulletComponent* MultiBulletComponent;//[Offset: 0xa54, Size: 4]
	GrenadeLaunchComponent* GrenadeLaunchComponent;//[Offset: 0xa58, Size: 4]
	FillGasComponent* FillGasComponent;//[Offset: 0xa5c, Size: 4]
	int CurBulletNumInClip;//[Offset: 0xa60, Size: 4]
	BulletInClip CurBulletInClip;//[Offset: 0xa64, Size: 16]
	int CurMaxBulletNumInOneClip;//[Offset: 0xa74, Size: 4]
	int CurBulletNumInBarrel;//[Offset: 0xa78, Size: 4]
	byte ShootMode;//[Offset: 0xa7c, Size: 1]
	byte CurShootType;//[Offset: 0xa7d, Size: 1]
	int CurShootTotalType;//[Offset: 0xa80, Size: 4]
	float VoiceCheckDis;//[Offset: 0xa84, Size: 4]
	float SilenceVoiceCheckDis;//[Offset: 0xa88, Size: 4]
	float nowVoiceCheckDis;//[Offset: 0xa8c, Size: 4]
	Vector ShootTargetLoc;//[Offset: 0xa90, Size: 12]
	int AngledSightID;//[Offset: 0xaa8, Size: 4]
	byte TraceChannel;//[Offset: 0xaac, Size: 1]
	Vector LastImpactEffectLocation;//[Offset: 0xab0, Size: 12]
	float LastImpactEffectTime;//[Offset: 0xabc, Size: 4]
	int CurBurstShootIndex;//[Offset: 0xac4, Size: 4]
	Transform BoltActionTransform;//[Offset: 0xad0, Size: 48]
	bool bHasFinishConfirmedFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb00, Size: 1]
	int ClientShootTimes;//[Offset: 0xb04, Size: 4]
	AkAudioEvent* BulletFlySound;//[Offset: 0xb08, Size: 4]
	AkAudioEvent* LoadBulletSound;//[Offset: 0xb0c, Size: 4]
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0xb10, Size: 4]
	AkAudioEvent* MagazineINSound;//[Offset: 0xb14, Size: 4]
	AkAudioEvent* MagazineOUTSound;//[Offset: 0xb18, Size: 4]
	AkAudioEvent* PullBoltSound;//[Offset: 0xb1c, Size: 4]
	Vector BulletDecalScale;//[Offset: 0xb20, Size: 12]
	BulletInClip CurBulletInClipOnSimulatedClients;//[Offset: 0xb2c, Size: 16]
	bool CurAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3d, Size: 1]
	float DropDuration;//[Offset: 0xb40, Size: 4]
	NormalProjectileComponent* NormalProjectileComponent;//[Offset: 0xb44, Size: 4]
	float AIShootLoudness;//[Offset: 0xb48, Size: 4]
	float AIShootStartAttenuationDis;//[Offset: 0xb4c, Size: 4]
	float AIShootMaxDis;//[Offset: 0xb50, Size: 4]
	float AISilenceShootLoudness;//[Offset: 0xb54, Size: 4]
	float AISilenceShootStartAttenuationDis;//[Offset: 0xb58, Size: 4]
	float AISilenceShootMaxDis;//[Offset: 0xb5c, Size: 4]
	bool bEnableSwitchToGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb60, Size: 1]
	byte CurShootWeaponState;//[Offset: 0xb61, Size: 1]
	ShootWeaponEntity* ShootWeaponEntityComp;//[Offset: 0xb70, Size: 4]
	ShootWeaponEffectComponent* ShootWeaponEffectComp;//[Offset: 0xb74, Size: 4]
	ShootWeaponAutoTestHandle* AutoTestHandle;//[Offset: 0xb78, Size: 4]
	int md_MaxBulletArraySize;//[Offset: 0xb7c, Size: 4]
	enum CurShootIntervalMode;//[Offset: 0xb80, Size: 1]
	bool IsEquipSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb81, Size: 1]
	bool IsEquipACCore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb82, Size: 1]
	bool IsEquipFiringSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb83, Size: 1]
	bool IsEquipCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb84, Size: 1]
	Vector OffsetFPPLocation;//[Offset: 0xb88, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0xb94, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0xba0, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0xbac, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0xbb8, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0xbc4, Size: 12]
	Rotator OffsetFPPScopeRotation;//[Offset: 0xbd0, Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0xbdc, Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xbe8, Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xbf4, Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xc00, Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xc0c, Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xc18, Size: 12]
	Rotator OffsetAngledFPPScopeRotation;//[Offset: 0xc24, Size: 12]
	bool DefaultScopeVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc30, Size: 1]
	enum[] AvailableWeaponAttachmentSocketTypeList;//[Offset: 0xc40, Size: 12]
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0xc4c, Size: 4]
	WeaponAttrModifyConfig[] WeaponAttrModifyConfigList;//[Offset: 0xc50, Size: 12]
	int[] AttachedAttachmentID;//[Offset: 0xc5c, Size: 12]
	int[] DefaultAttachedAttachmentID;//[Offset: 0xc68, Size: 12]
	uint32 ShootID;//[Offset: 0xc74, Size: 4]
	WeaponAntiCheatComp* AntiCheatComp;//[Offset: 0xc78, Size: 4]
	SimulateBulletHitInfoData[] SimulateHitDataArray;//[Offset: 0xc7c, Size: 12]
	bool IsInitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc98, Size: 1]
	bool IsRegisterCanModifyAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc99, Size: 1]
	bool bIsResettedMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd40, Size: 1]
	bool UseNewShotGunDevation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd80, Size: 1]
	bool bUnlimitBulletWhenStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd81, Size: 1]
	bool bEnableReloadADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd88, Size: 1]
	bool bCanAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd89, Size: 1]
	delegate OnSetRearSightIndexDelegate;//[Offset: 0xd8c, Size: 12]
	int WeaponDurability;//[Offset: 0xd98, Size: 4]
	int8 CurRearSightIndex;//[Offset: 0xd9c, Size: 1]
	bool bEquipmentModifierOnlyRepOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9d, Size: 1]
	void UpdateComponentTick();// 0x2218d60
	bool StopFireFilter();// 0x1f3f4a8
	void StopFire(byte ToState);// 0x2218ce0
	void StopFillGas();// 0x2218ccc
	int StartReload();// 0x2218c9c
	bool StartFireFilter();// 0x1f3f568
	void StartFire();// 0x21b98ec
	void StartFillGas();// 0x2218c88
	void StartDoPreBarrel(float HandledTime);// 0x1ed7560
	void StartDoBarrel();// 0x2218c6c
	void ShowDefaultScope(bool bShow);// 0x2218bec
	void ShowDefaultAttachmentComponentByType(enum Type, bool bVisible);// 0x2218b28
	void ShootIDIsNotValid();// 0x2218b0c
	void SetWeaponAttrModifierEnable(FString AttrModifierID, bool Enable, bool ClientSimulate);// 0x22189b4
	void SetReloadWithNoCostFromEntity(bool bReloadWithNoCost);// 0x2218934
	void SetRearSightIndex(int Index);// 0x22188bc
	void SetCurShootType(byte ShootType);// 0x2218844
	void SetCurrentBulletNumInClipOnServer(BulletInClip InBulletInClip);// 0x22186e0
	void SetCurrentBulletNumInClipOnClient(BulletInClip InBulletInClip);// 0x221857c
	void SetCurReloadMethod(byte method);// 0x2218504
	void SetBulletInClip(out BulletInWeapon[] InCurBulletList, int Count);// 0x22183f0
	void SetBaseImpactDamageEntity(float Damage);// 0x1fa0fcc
	void SetAvailableWeaponAttachmentSocketTypeList(out enum[] List);// 0x22182e4
	bool ScopeOut();// 0x22182b4
	void ScopeInContinue();// 0x22182a0
	bool ScopeIn();// 0x2108a24
	void S2C_SyncAllClientsBulletsNum(int BulletsNum);// 0x2218220
	void RPC_ServerStopReload(int InterruptState);// 0x221816c
	void RPC_ServerSetMaxBulletNum();// 0x2218110
	void RPC_ServerSetBaseImpactDamageEntity(float Damage);// 0x221805c
	void RPC_Server_SetRearSightIndex(int Index);// 0x2217fa8
	void RPC_ClientSetCurShootType(byte ShootType);// 0x2217ef4
	void RPC_ClientSetCurReloadMethod(byte method);// 0x2217e40
	void RPC_ClientNotifySimulateHitDataArray(const SimulateBulletHitInfoData[] DataArray);// 0x2217d7c
	void RPC_ClientNotifyLeftLastBulletWhenReloadOneByOne(int RemainBulletNumToReload);// 0x220d030
	void RPC_ClientChangeFreshWeaponState_WithParams(byte State, byte Parameter);// 0x2217c80
	void RPC_Client_SetBulletNumInClip(BulletInClip InBulletInClip);// 0x2217a38
	void RotateCrossHair(Rotator Rot);// 0x22179c8
	void ResetInitialBulletNumInClip(bool bSetZero);// 0x2217948
	void ReSetBulletInClip(BulletInClip NewBulletInClip);// 0x22177e4
	void RemoveGrenadeLaunchBullet(int RemoveNum);// 0x221776c
	void RemoveBulletInClip(int RemoveNum, bool IsRevert);// 0x22176a8
	void RefreshBulletInClip(int Count);// 0x2217630
	void ReduceWeaponDurability(int ReduceAmount);// 0x22175b8
	void PreSetBulletListInClip(BulletInClip NewBulletInClip);// 0x2217454
	byte PopNextSpecialBulletID();// 0x2217424
	void OnWeaponUnEquipDelegate__DelegateSignature();// 0x2bb69b8
	void OnWeaponUnEquipAnimProcessDelegate__DelegateSignature();// 0x2bb69b8
	void OnWeaponShootPlayerNotifyDelegate__DelegateSignature();// 0x2bb69b8
	void OnWeaponShootHitDelegate__DelegateSignature(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x2bb69b8
	void OnWeaponShootDelegate__DelegateSignature();// 0x2bb69b8
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(Actor* InHitActor, out const SecurityLogHitTargetInfo TargetInfo);// 0x2bb69b8
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0x2bb69b8
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0x2bb69b8
	void OnWeaponEquipDelegate__DelegateSignature();// 0x2bb69b8
	void OnWeaponEquipAnimProcessDelegate__DelegateSignature();// 0x2bb69b8
	void OnWeaponDurabilityChangeDelegate__DelegateSignature();// 0x2bb69b8
	void OnStopFireDelegate__DelegateSignature();// 0x2bb69b8
	void OnStartFireDelegate__DelegateSignature();// 0x2bb69b8
	void OnSpawnBulletImpactFX__DelegateSignature(out const BulletHitInfoUploadData ImpactResult, STEShootWeaponBulletImpactEffect* ImpactEffect);// 0x2bb69b8
	void OnShootWeaponDrop__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x2bb69b8
	void OnShootWeaponAutoReloadDelegate__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x2bb69b8
	void OnShootWeaponAutoDrop__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x2bb69b8
	void OnShootIntervalModeChangeDelegate__DelegateSignature();// 0x2bb69b8
	void OnSetRearSightIndexDelegate__DelegateSignature(int PrevIndex, int PostIndex);// 0x2bb69b8
	void OnScopeInContinue__DelegateSignature();// 0x2bb69b8
	void OnRep_WeaponDurability();// 0x2217410
	void OnRep_SimulateHitDataArray();// 0x22173fc
	void OnRep_IsEquipACCore();// 0x22173e8
	void OnRep_CurRearSightIndex(int8 PrevIndex);// 0x2217370
	void OnRep_CurMaxBulletNumChange();// 0x221735c
	void OnRep_CurCurShootIntervalMode();// 0x2217348
	void OnRep_CurBulletInClipOnSimulatedClients();// 0x2217334
	void OnMaxBulletChange__DelegateSignature();// 0x2bb69b8
	void OnLeftLastBulletWhenReloadOneByOne__DelegateSignature(int RemainNum);// 0x2bb69b8
	void OnCurBulletChange__DelegateSignature();// 0x2bb69b8
	void OnCurBarrelBulletChangeDelegate__DelegateSignature();// 0x2bb69b8
	void OnChangeShootType__DelegateSignature(STExtraShootWeapon* ShootWeapon, byte ShootType);// 0x2bb69b8
	void OnBulletNumChangeDelegate__DelegateSignature();// 0x2bb69b8
	void OnBulletLaunch__DelegateSignature(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet);// 0x2bb69b8
	void OnBulletImpactFX__DelegateSignature(out const BulletHitInfoUploadData ImpactResult, STEShootWeaponBulletImpactEffect* ImpactEffect);// 0x2bb69b8
	void OnBulletImpact__DelegateSignature(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet, out const HitResult HitRet);// 0x2bb69b8
	void NotifyServerNoneShootAction();// 0x22172d8
	void NotifyLeftLastBulletWhenReloadOneByOneOnServer(int RemainBulletNumToReload);// 0x2217260
	void NotifyClientNoneShootAction();// 0x2217204
	void LocalSetBulletNumInClip(BulletInClip InBulletInClip);// 0x22170a0
	bool IsWeaponDurabilityLoss();// 0x2217078
	bool IsWeaponAttachmentFullEquiped();// 0x2217050
	bool IsVehicleWeapon();// 0x2217028
	bool IsUsingGrenadeLaunch();// 0x2217000
	bool IsSwallowBulletTarget(Actor* TargetActor);// 0x2216f78
	bool IsSupportBolt();// 0x220e974
	bool IsSupportAutoAim();// 0x2216f50
	bool IsInPreFire();// 0x2216f28
	static bool IsGHasInfiniteBullets();// 0x2216f00
	bool IsForbidShootTarget(Actor* TargetActor);// 0x2216e78
	bool IsEnableReloadADS();// 0x2216e5c
	bool IsEnableDropBullet();// 0x2216e34
	bool IsDriverVehicleWeapon();// 0x2216e0c
	bool IsAutoDrop();// 0x2216de4
	void InitWeaponDurability(int NewVal);// 0x2216d6c
	bool HasMultiBullet();// 0x2216d44
	void HandleWeaponScopeUnEquiped(enum Type);// 0x2216ccc
	void HandleWeaponScopeEquiped(enum Type);// 0x2216c54
	void HandleWeaponAvatarPutOnSlot(int SlotID);// 0x1fa0fcc
	void HandleWeaponAvatarLoaded(int SlotID, ItemDefineID DefineID);// 0x2216b84
	void HandleWeaponAvatarClearSlot(int SlotID);// 0x1fa0fcc
	void HandleScopeOut(bool bIsBegin);// 0x2216b04
	void HandleScopeIn(bool bIsBegin);// 0x2216a84
	void HandlePartsEquipped(int WeaponSlotID, bool IsEquipped);// 0x22169c0
	void HandleAllWeaponAvatarLoaded();// 0x22169ac
	byte GetWeaponReloadType();// 0x2216984
	int GetWeaponIDFromEntity();// 0x221695c
	int GetWeaponID();// 0x221692c
	int GetWeaponDurability();// 0x2216904
	float GetWeaponBodyLength();// 0x22168dc
	Vector GetVolleyShootDirection(Vector TargetLoc, Vector OldStartLoc, Vector NewStartLoc, Vector BulletDir);// 0x2216744
	ParticleSystem* GetVisualBulletTrackFX();// 0x221671c
	bool GetVisualBulletTrackEnabled();// 0x22166f4
	WeaponVisualBulletItemConfig GetVisualBulletItemConfig();// 0x22166b4
	FName GetVerifyScopeSocketNameFromEntity();// 0x2216674
	bool GetUseSpecificBulletNumOnReloadFromEntity();// 0x221664c
	float GetTraceDistanceFromEntity();// 0x2216624
	FName GetSilencerSocketNameFromEntity();// 0x22165e4
	ShootWeaponEntity* GetShootWeaponEntityComponent();// 0x22165bc
	ShootWeaponEffectComponent* GetShootWeaponEffectComponent();// 0x2216594
	byte GetShootTypeFromEntity();// 0x221656c
	int GetShootReduceDurabilityAmount();// 0x2216544
	int GetShootIntervalShowNumberFromEntity();// 0x221651c
	float GetShootIntervalFromEntity(int BulletIndex);// 0x221649c
	FName GetShellDropSocketNameFromEntity();// 0x221645c
	MeshComponent* GetScopeMeshByType(FName SocketName, enum Type, int SocketIndex);// 0x221634c
	int GetScopeID(bool bIsAngledOpticalSight);// 0x22162bc
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x2216198
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x2216080
	bool GetReloadWithNoCostFromEntity();// 0x2216058
	float GetReloadTimeMagOutFromEntity();// 0x2216030
	float GetReloadTimeMagInFromEntity();// 0x2216008
	float GetReloadTimeFromEntity();// 0x2215fe0
	FName GetReloadTIDName(byte method);// 0x2215f50
	float GetReloadTacticalTimeFromEntity();// 0x2215f28
	int GetReloadSpecificBulletNumFromEntity();// 0x2215f00
	float GetReloadRateFromEntity();// 0x2215ed8
	float GetReloadDurationStartFromEntity();// 0x2215eb0
	float GetReloadDurationLoopFromEntity();// 0x2215e88
	Transform GetRelativeMuzzleTransform();// 0x2215e20
	float GetReferenceDistance();// 0x2215df8
	FName GetRearSightSocket(int Index);// 0x2215d70
	Rotator GetRearSightRot();// 0x2215d28
	int GetRearSightIndex();// 0x2215d00
	Rotator GetRearSightHandRotOffset();// 0x2215cb8
	float GetRangeModifier();// 0x2215c90
	SRangeAttenuateConfig[] GetRangeAttenuateFromEntity();// 0x2215bd0
	float GetPreFireTimeFromEntity();// 0x2215ba8
	float GetPostFireTimeFromEntity();// 0x2215b80
	float GetPostFillGasTime();// 0x2215b58
	FName GetOverrideScopeAimSocketName();// 0x2215b18
	Transform GetMuzzleTransform();// 0x2215ab0
	FName GetMuzzleSocketNameFromEntity();// 0x2215a68
	float GetMinShootIntervalFromEntity();// 0x2215a40
	float GetMaxVelocityOffsetAddRateFromEntity();// 0x2215a18
	float GetMaxValidHitTimeFromEntity();// 0x22159f0
	float GetMaxImpactEffectSkipTimeFromEntity();// 0x22159c8
	int GetMaxBulletNumInOneClipFromEntity();// 0x22159a0
	int GetMaxBulletNumInBarrelFromEntity();// 0x2215978
	bool GetIsNeedOffsetVelocityFromEntity();// 0x2215950
	bool GetIsEnableScopeInFromEntity();// 0x2215928
	float GetImpactEffectSkipDistanceFromEntity();// 0x2215900
	float GetIgnoreRangeAttenuatDis();// 0x22158d8
	WeaponHitPartCoff GetHitPartCoff(Actor* Victim);// 0x2215844
	AkAudioEvent* GetGrenadeLaunchShootSound();// 0x221581c
	WeaponCrossHairPerformData[] GetGrenadeLaunchCrossHairData();// 0x22156c0
	float GetGasAddDamageRate();// 0x2215698
	float GetGameDeviationFactor();// 0x2215670
	FName GetFiringSuppressorSocketNameFromEntity();// 0x2215630
	float GetFireSensitiveYawRate();// 0x2215608
	float GetFireSensitivePitchRate();// 0x22155e0
	int GetExtraShootIntervalShowNumberFromEntity();// 0x22155b8
	float GetExtraShootIntervalFromEntity();// 0x2215590
	<int,bool> GetEquipAttachSlotMap();// 0x22153c0
	MeshComponent* GetDefaultAttachmentComponentByType(enum Type);// 0x221533c
	byte GetCurSightVisionType();// 0x2215314
	byte GetCurSightType();// 0x22152e4
	enum GetCurShootIntervalMode();// 0x22152c8
	int GetCurrentBulletNumInClip();// 0x22152ac
	float GetCurReloadTime();// 0x2215284
	byte GetCurReloadMethod();// 0x221525c
	float GetCurGasRate();// 0x2215234
	float GetCurGasAngle();// 0x221520c
	int GetCurBulletNumInClip();// 0x22151e4
	float GetCrossHairInitSize();// 0x22151bc
	float GetCrossHairBurstSpeed();// 0x2215194
	float GetCrossHairBurstIncreaseSpeed();// 0x221516c
	byte GetControllerRole();// 0x1fd356c
	int GetConstantWeaponDurabilityFromEntity();// 0x2215144
	bool GetClipHasInfiniteBulletsFromEntity();// 0x221511c
	MeshComponent* GetChildMeshComp(FName compTag);// 0x221509c
	bool GetCanRecordHitDetailFromEntity();// 0x2215074
	float GetBurstShootIntervalFromEntity();// 0x221504c
	float GetBurstShootCDFromEntity();// 0x2215024
	int GetBurstShootBulletsNumFromEntity();// 0x2214ffc
	ItemDefineID GetBulletTypeFromEntity();// 0x2214fb0
	BulletTrackComponent* GetBulletTrackComponent();// 0x2214f88
	float GetBulletRangeEntity();// 0x2214f60
	float GetBulletNumSingleShotFromEntity();// 0x2214f38
	float GetBulletMomentumFromEntity();// 0x2214f10
	float GetBulletFireSpeedFromEntity();// 0x2214ee8
	float GetBaseReloadTime(bool bTactical);// 0x2214e60
	float GetBaseImpactDamageEntity();// 0x2214e38
	enum[] GetAvailableWeaponAttachmentSocketTypeList();// 0x2214d20
	float GetAutoShootCDFromEntity();// 0x2214cf8
	bool GetAutoReloadFromEntity();// 0x2214cd0
	bool GetADSManualStop();// 0x2214ca8
	float GetAccessoriesVRecoilFactor();// 0x2214c80
	float GetAccessoriesRecoveryFactor();// 0x2214c58
	float GetAccessoriesHRecoilFactor();// 0x2214c30
	float GetAccessoriesDeviationFactor();// 0x2214c08
	void ForceSyncAllClientsBulletsNumOnServer();// 0x2214bf4
	void FixBulletNumWithValideData();// 0x2214be0
	void EnableInfiniteBullets(bool bEnableInfiniteBullets);// 0x2214b60
	void DoGrenadeLaunchStartReload();// 0x2214b4c
	byte CostSpecialBulletID(byte SpecialBulletID);// 0x2214ac4
	void CostGasByOneShoot();// 0x2214ab0
	bool ConditionForbidShootTarget();// 0x1f3f4d8
	void ClearWeaponAttrModifier();// 0x2214a9c
	void ClampBulletInClip(int MinCount, int MaxCount);// 0x22149e0
	void CheckReloadAttr();// 0x22149cc
	bool CheckNeedClientSetMaxBulletNum();// 0x22149a4
	bool CanSwitchToGrenade();// 0x2214988
	void BP_OnSyncSimulatedClientsCurBullets();// 0x2bb69b8
	void AddWeaponDurability(int AddAmount);// 0x2214910
	void AddOwnerOffsetVelocity(out Vector OrginalVelocity);// 0x221488c
	void AddFillGas(float AddTime);// 0x2214814
	void AddBulletInClip(BulletInWeapon[] InCurBulletList, int Count);// 0x2214678

--------------------------------
Class: STExtraWeapon.Actor.Object
	int iRegionWeapon;//[Offset: 0x38c, Size: 4]
	float MaxWaitHandleAvatarMeshChangedTime;//[Offset: 0x390, Size: 4]
	bool GM_DisableHandleAvatarMeshChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	bool GM_UseAsyncMeshLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 1]
	bool GM_EnableNewWeaponInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396, Size: 1]
	bool GM_EnableCheckReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x397, Size: 1]
	bool GM_EnableCheckReInitSimWeaponOwnerProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	MainWeaponTableStruct WeaponCfg;//[Offset: 0x39c, Size: 16]
	Transform WeaponAttachMeshOffset;//[Offset: 0x3b0, Size: 48]
	Transform FPPWeaponOffset;//[Offset: 0x3e0, Size: 48]
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x410, Size: 48]
	Transform FPPWeaponOffsetSprint;//[Offset: 0x440, Size: 48]
	Transform TDModeFPPWeaponOffset;//[Offset: 0x470, Size: 48]
	Transform TDModeFPPWeaponOffsetNonShooting;//[Offset: 0x4a0, Size: 48]
	Transform TDModeFPPWeaponOffsetSprint;//[Offset: 0x4d0, Size: 48]
	int CrossHairType;//[Offset: 0x500, Size: 4]
	float UnMatchStateSyncCheckInterval;//[Offset: 0x504, Size: 4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x508, Size: 4]
	PredictLineComponent* PredictLine;//[Offset: 0x50c, Size: 4]
	FName WeaponStaticMeshCompTag;//[Offset: 0x510, Size: 8]
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x518, Size: 4]
	delegate WeaponEffectActionDelegate;//[Offset: 0x51c, Size: 12]
	delegate FireOneShotEffectDelegate;//[Offset: 0x528, Size: 12]
	delegate OnShootWeaponChangeState;//[Offset: 0x534, Size: 12]
	delegate OnWeaponChangeStateCommon;//[Offset: 0x540, Size: 12]
	delegate OnWeaponAttachToBackDelegate;//[Offset: 0x54c, Size: 12]
	delegate OnWeaponDrawHUDDelegate;//[Offset: 0x558, Size: 12]
	delegate OnDisconnectToClientOnServerDelegate;//[Offset: 0x564, Size: 12]
	delegate OnReconnectToClientOnServerDelegate;//[Offset: 0x570, Size: 12]
	delegate OnRecoverOnClientDelegate;//[Offset: 0x57c, Size: 12]
	delegate OnWeaponTriggerEventDelegate;//[Offset: 0x588, Size: 12]
	delegate OnWeaponBaseEquipDelegate;//[Offset: 0x594, Size: 12]
	delegate OnWeaponBaseUnEquipDelegate;//[Offset: 0x5a0, Size: 12]
	WeaponEntity* WeaponEntityComp;//[Offset: 0x5ac, Size: 4]
	WeaponSpecificHandler* WeaponSpecHandler;//[Offset: 0x5b0, Size: 4]
	byte CurFreshWeaponState;//[Offset: 0x5b4, Size: 1]
	delegate OnGetOwnerActorDelegate;//[Offset: 0x5b8, Size: 12]
	byte SyncFreshWeaponStateForRep;//[Offset: 0x5c4, Size: 1]
	FName WeaponAttachSocketName;//[Offset: 0x5c8, Size: 8]
	bool bNeedReconnct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 1]
	bool bClientHasFinishedCteate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 1]
	bool GM_CloseMaxWeaponReconnetTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d2, Size: 1]
	float MaxReconnectTime;//[Offset: 0x5d4, Size: 4]
	float StartReconnectTime;//[Offset: 0x5d8, Size: 4]
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x5e0, Size: 104]
	SceneComponent*[] UpdateOptimizationList;//[Offset: 0x650, Size: 12]
	bool bEnableCompUpdateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65c, Size: 1]
	SpawnAndBackpackWeaponReplicatedData OwnerClientCreateWeaponData;//[Offset: 0x660, Size: 88]
	bool bPlayBackpackToIdleAnimWhenGet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 1]
	WeaponTriggerEventHandleSkill* SkillHandleComp;//[Offset: 0x6bc, Size: 4]
	StaticMeshComponent* WeaponStaticMeshComp;//[Offset: 0x6c4, Size: 4]
	byte CurWeaponState;//[Offset: 0x6c8, Size: 1]
	Actor* SimulatedOwnerActor;//[Offset: 0x6cc, Size: 4]
	Pawn* SimulatedOwnerPawn;//[Offset: 0x6d0, Size: 4]
	<SceneComponent*,SceneCompUpdateOptimizationItem> SceneCompsUpdateOpCatche;//[Offset: 0x6d8, Size: 60]
	WeaponStateManager* _WeaponStateManager;//[Offset: 0x720, Size: 4]
	MeshSynData[] synData;//[Offset: 0x728, Size: 12]
	bool IsMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x734, Size: 1]
	float MaxWaitMeshInitTime;//[Offset: 0x738, Size: 4]
	float WaitMeshInitTime;//[Offset: 0x73c, Size: 4]
	bool UseReplaceBulletType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 1]
	bool bNeedUpdateWeaponAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x741, Size: 1]
	WeaponLogicBaseComponent*[] TickComponentList;//[Offset: 0x744, Size: 12]
	bool IsNeedReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758, Size: 1]
	GrenadeAvatarComponent* GrenadeAvatarComponent;//[Offset: 0x75c, Size: 4]
	bool EnableWeaponReloadAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x760, Size: 1]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x761, Size: 1]
	delegate ForceHideWeaponWidget;//[Offset: 0x764, Size: 12]
	bool bNeedHiddenWhenCameraModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	ActorComponent*[] CrossHairComps;//[Offset: 0x774, Size: 12]
	byte WeaponUIType;//[Offset: 0x780, Size: 1]
	Transform DefaultRelativeTransform;//[Offset: 0x790, Size: 48]
	Rotator RotForSimulate;//[Offset: 0x7c0, Size: 12]
	int FuncFlag;//[Offset: 0x7cc, Size: 4]
	bool bTriggerWeaponEffectWhenAppActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d4, Size: 1]
	byte AppActiveWeaponAction;//[Offset: 0x7d5, Size: 1]
	<SceneComponent*,CharacterCompOutOfVisionOptimizationItem> WeaponCompOutOfVisionOptimizationDataMap;//[Offset: 0x7d8, Size: 60]
	FString LuaFilePath;//[Offset: 0x814, Size: 12]
	void WeaponNotifyChangeStateDelegate__DelegateSignature(byte State);// 0x2bb69b8
	void WeaponEffectActionDelegate__DelegateSignature(byte Action);// 0x2bb69b8
	void UpdateWeaponAvatar(float DeltaTime);// 0x2bb69b8
	void TriggerWeaponEvent(enum Event);// 0x20d3eec
	void SpecialResetForWeaponCrosshair();// 0x2bb69b8
	void RPC_ClientSyncPostFireHandledTime(float InPostFireHandledTime);// 0x22456f0
	void RPC_ClientChangeFreshWeaponState(byte State);// 0x224563c
	void RespawnData();// 0x2bb69b8
	void ResetData();// 0x2bb69b8
	void PlayLocalShellDropFX();// 0x2bb69b8
	void OnWeaponTriggerEventDelegate__DelegateSignature(enum Event);// 0x2bb69b8
	void OnWeaponDrawHUD__DelegateSignature(HUDWidgetBase* WeaponHudWidget, Canvas* Canvas);// 0x2bb69b8
	void OnWeaponBaseUnEquipDelegate__DelegateSignature();// 0x2bb69b8
	void OnWeaponBaseEquipDelegate__DelegateSignature();// 0x2bb69b8
	void OnWeaponAttachToBackDelegate__DelegateSignature(FName SocketName);// 0x2bb69b8
	void OnShootWeaponChangeStateDelegate__DelegateSignature(byte LastState, byte NewState);// 0x2bb69b8
	void OnRep_WeaponReconnectReplicateData();// 0x2245628
	void OnRep_WeaponAttachSocketName();// 0x2245614
	void OnRep_SimulatedOwnerPawn();// 0x2245600
	void OnRep_OwnerClientCreateWeaponData();// 0x22455ec
	void OnRep_bPlayBackpackToIdleAnimWhenGet();// 0x22455d8
	void OnRep_AvatarMeshChanged();// 0x22455c4
	void OnRep_AttachmentReplication();// 0x1ff4a28
	void OnReleaseTrigger();// 0x1ecf9cc
	void OnRecoverOnClientDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x2bb69b8
	void OnReconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x2bb69b8
	void OnPushTrigger();// 0x22455a8
	void OnGetOwnerActorDelegate__DelegateSignature(Actor* OwnerActor);// 0x2bb69b8
	void OnDisconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x2bb69b8
	void NewInitWeapon();// 0x2245594
	bool JudgeHasEquipedComponentSlot(byte Slot);// 0x2245514
	bool IsUseAttrModify();// 0x22454e4
	bool IsSimulated();// 0x22454bc
	bool IsLocalOrSpectorPlayer();// 0x2245494
	bool IsAutonomous();// 0x224546c
	void InitWeapon();// 0x2245458
	bool HasComponentSlot(byte Slot);// 0x22453d8
	void HandleReconnectNew(Actor* WeaponOwner);// 0x2245360
	byte GetWeaponTypeNew();// 0x2245338
	byte GetWeaponType();// 0x2245310
	StaticMeshComponent* GetWeaponStaticMeshComponent();// 0x22452e8
	byte GetWeaponStateType();// 0x22452c0
	int GetWeaponSkillID();// 0x2245298
	SkeletalMeshComponent* GetWeaponSkeletalMeshComponent();// 0x2245270
	enum GetWeaponOwnerObserverType();// 0x2245248
	FString GetWeaponName();// 0x2245188
	MeshComponent* GetWeaponMeshComponent();// 0x2245158
	int GetWeaponID();// 0x221692c
	byte GetWeaponHoldType();// 0x2245130
	byte GetWeaponFireMode();// 0x2245100
	WeaponEntity* GetWeaponEntityComponent();// 0x22450d8
	FString GetWeaponDetailInfo();// 0x2245018
	FName GetWeaponAttachSocket();// 0x2244fd0
	WeaponSpecificHandler* GetSpecificHandler();// 0x2244fa8
	float GetSpecialScopeFov();// 0x1ed4438
	int GetScopeID(bool bIsAngledOpticalSight);// 0x22162bc
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x2216198
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x2216080
	FString GetOwnerPlayerName();// 0x2244ee8
	PlayerController* GetOwnerPlayerController();// 0x2244eb8
	Pawn* GetOwnerPawn();// 0x2244e90
	FString GetOwnerName();// 0x2244dd0
	Controller* GetOwnerController();// 0x2244da0
	Actor* GetOwnerActor();// 0x2244d70
	ItemDefineID GetItemDefineID();// 0x2244d24
	GrenadeAvatarComponent* GetGrenadeAvatar();// 0x2244cfc
	byte GetCurSightType();// 0x22152e4
	WeaponComponentItemData GetComponentSlotTarget(byte Slot);// 0x2244bb8
	LinearColor GetColorByTeamID(int TeamID);// 0x2bb69b8
	ItemHandleBase* GetBackpackItemHandle();// 0x2244b90
	void ForceHideWeaponWidget__DelegateSignature(bool bIsBegin);// 0x2bb69b8
	void DelayHandleAvatarMeshChanged();// 0x2244b7c
	void CreateWeaponHandleCallback(ItemDefineID DefineID, BattleItemHandleBase* BattleItemHandle);// 0x2244ab0
	void ClientLoadDefaultMesh();// 0x2244a9c
	void CheckNeedReInitWeaponOwnerData(Actor* OwnerActor);// 0x2244a24
	bool CheckHasFuncByInt(int Func);// 0x22449a4
	bool CheckHasFunc(enum Func);// 0x22449a4
	void ChangeSequenceState(byte StateType);// 0x2244924
	void CallForceHideWeaponWidgetDel();// 0x2244910

--------------------------------
Class: MainWeaponTableStruct
	int KeyID;//[Offset: 0x0, Size: 4]
	int[] SkillIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WeaponAvatarComponent.WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.ActorComponent.Object
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 1]
	bool SetAutonomousLoadRes();// 0x1eefbec
	void SelectWeaponGunOnePart(int WeaponGunPart);// 0x22f85e0
	void EnableDIYPatternMirro(bool bMirro, bool bLeftToRight);// 0x22f8510

--------------------------------
Class: WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0x440, Size: 4]
	delegate OnScopeEquipDelegate;//[Offset: 0x448, Size: 12]
	delegate OnScopeUnequipDelegate;//[Offset: 0x454, Size: 12]
	delegate OnWeaponAvatarLoaded;//[Offset: 0x460, Size: 12]
	delegate OnWeaponAttachAvatarLoaded;//[Offset: 0x46c, Size: 12]
	delegate OnWeaponAvatarClearSlot;//[Offset: 0x478, Size: 12]
	delegate OnWeaponAvatarPutOnSlot;//[Offset: 0x484, Size: 12]
	bool bIsEquipScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	delegate OnWeaponPartsEquipped;//[Offset: 0x494, Size: 12]
	<int,HandleMeshPack> DefaultAttachmentMesh;//[Offset: 0x4b4, Size: 60]
	<int,HandleMeshPack> DefaultAttachmentMeshOverride;//[Offset: 0x4f0, Size: 60]
	MeshSynData[] DefaultSynData;//[Offset: 0x52c, Size: 12]
	WeaponDIYData WeaponDIYData;//[Offset: 0x54c, Size: 60]
	DIYEnableLevel[] EnableLevelMap;//[Offset: 0x590, Size: 12]
	bool bShouldFindItemSkipInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 1]
	ItemDefineID WeaponDefineID;//[Offset: 0x5a0, Size: 24]
	bool ShouldDisplayByQuality(int SlotID);// 0x22fa97c
	void SetPendantSocketType(enum SocketType);// 0x22fa904
	bool SetAutonomousLoadRes();// 0x1eefbec
	void ResponWeaponDIYData(FString InPlayerUID, int WeaponAvatarID);// 0x22fa768
	void ResetAttachmentSocket();// 0x22fa754
	void ResetAttachmentParent();// 0x22fa740
	void RequestWeaponDIYData(FString InPlayerUID, int WeaponAvatarID, int InDIYPlanID);// 0x22fa5fc
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x1eed188
	void RemoveDefaultAttachmentOverride(int SlotID);// 0x22fa584
	BattleItemHandleBase* ReloadItemHandle(BattleItemHandleBase* InHandle);// 0x22fa504
	void RefreshAvatarStateChanged();// 0x1eef854
	void RecreateMeshByHandle(BattleItemHandleBase* PendingRecreateHandle);// 0x22fa48c
	bool PutOnMasterComponentByItemHandle(BattleItemHandleBase* WeaponHandle);// 0x22fa40c
	void PutOnEquipmentDIYData(int WeaponAvatarID, int InDIYPlanID);// 0x22fa350
	bool PutOnEquipmentByResID(int resID);// 0x20fffa0
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle);// 0x22fa2d0
	bool PutOffEquimentByResID(int resID);// 0x22fa248
	void ProcessWeaponDIYDataAction(out const WeaponDIYData InWeaponDIYData);// 0x22fa184
	void ProcessLoadAllMesh();// 0x1eef838
	bool PreFiltHandles(BattleItemHandleBase* AvatarHandle, out MeshSynData OutSyncData);// 0x22fa0a8
	void OnWeaponPartsEquipEvent__DelegateSignature(int WeaponSlotID, bool IsEquipped);// 0x2bb69b8
	void OnWeaponAvatarPutOnSlot__DelegateSignature(int SlotID);// 0x2bb69b8
	void OnWeaponAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x2bb69b8
	void OnWeaponAvatarClearSlot__DelegateSignature(int SlotID);// 0x2bb69b8
	void OnWeaponAttachAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x2bb69b8
	void OnScopeUnequipDelegate__DelegateSignature(enum AttachmentSocketType);// 0x2bb69b8
	void OnScopeEquipDelegate__DelegateSignature(enum AttachmentSocketTypeD);// 0x2bb69b8
	void OnRep_NetAvatarDataChanged(out const MeshSynData[] InSyncData);// 0x22f9fdc
	void OnAsyncLoadBattleHandlesDone(int AsyncLoadIndex, out const BattleItemHandleBase*[] AvatarHandles);// 0x22f9ec4
	void NetSyncData(int InSlotID, enum InOperationType, BattleItemHandleBase* InHandle);// 0x1eef4a8
	bool LoadMeshListAsync(out BattleItemHandleBase*[] InHandleList, bool bNeedDirectLoad);// 0x22f9d98
	bool IsTeammate();// 0x1eed13c
	bool IsSelf();// 0x1eed0e4
	void InitMasterComponent();// 0x22f9d84
	void InitialAvatarParam();// 0x22f9d70
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x22f9cf8
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x22f9c80
	void InitDefaultAttachment(BattleItemHandleBase* WeaponHandle);// 0x22f9c08
	int GetWeaponParentID(int InSlotID, out const ItemDefineID InItemDefineID);// 0x22f9b2c
	Controller* GetWeaponController();// 0x22f9b04
	STExtraWeapon* GetOwnerWeapon();// 0x22f9adc
	STExtraBaseCharacter* GetOwnerCharacter();// 0x22f9ab4
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x22f9a20
	BattleItemHandleBase* GetEquippedHandle(int InSlotID);// 0x22f99a0
	bool GetEquipmentMeshBySlot(int InSlotID, out MeshData OutMeshPack);// 0x22f98a8
	AvatarDIYEntityFactory* GetEntityFactory();// 0x1eef038
	MeshComponent* GetAttachmentSocketTransform(int InSlotID);// 0x1eef0d8
	AnimationAsset* GetAttachmentAnim(enum InSlotType, int AnimIdx);// 0x22f97e4
	WeaponAvatarDIYEntity* FindAvatarEntityByMesh(MeshComponent* InMeshComp);// 0x22f9764
	void DestroyWeapon();// 0x22f9750
	void ClearMeshBySlot(int SlotID, bool putDefault, bool bClearMesh);// 0x22f9634
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x22f95b4
	bool CheckSlotIsEquipped(int InSlotID, bool bIncludingDefault);// 0x22f94e8
	bool CheckIsAlreadyEquipped(ItemDefineID InDefineID);// 0x22f9458
	void BuildDownloadLoadHandleList(out const uint32[] DownloadItemIDs);// 0x22f938c
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x1eecccc
	void ApplyAttachmentOverride(BattleItemHandleBase* InAttachHandle);// 0x22f9314
	void ApplyAttachment(BattleItemHandleBase* InAttachHandle);// 0x22f929c
	void AddUnlockWeaponAttachmentAvatarList(int WeaponBPID, out <int,int> OutAttachmentSkinIDList);// 0x22f914c
	void AddDefaultAttachmentOverride(int AttchmentID);// 0x22f90d4
	int AddAction_ParticleByName(int SlotID, out const FName ParticleName);// 0x22f8ffc
	int AddAction_MatParamModify(int SlotID, int CfgIndex);// 0x22f8f38

--------------------------------
Class: AvatarDIYComponent.AvatarComponentBase.ActorComponent.Object
	AvatarDIYEntity*[] EntityTickList;//[Offset: 0x1e8, Size: 12]
	<int,AvatarDIYEntity*> AvatarEntityMap;//[Offset: 0x1f4, Size: 60]
	int[] PendingDeleteSlotID;//[Offset: 0x230, Size: 12]
	AvatarDIYEntityFactory* EntityFactory;//[Offset: 0x23c, Size: 4]
	<int,FName> SlotToSocket;//[Offset: 0x240, Size: 60]
	int StepCount;//[Offset: 0x27c, Size: 4]
	delegate AsyncLoadAvatarAllMeshDone;//[Offset: 0x280, Size: 12]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x28c, Size: 12]
	int AsyncLoadReqID;//[Offset: 0x330, Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x334, Size: 4]
	bool bSyncDIYDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	enum DisplayQuality;//[Offset: 0x349, Size: 1]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x34c, Size: 60]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	<int,bool> OutlineEnableList;//[Offset: 0x3a8, Size: 60]
	bool NeedUpdateTransformOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 1]
	<int,TextureRenderTarget2D*> DIYRTCacheMap;//[Offset: 0x3e8, Size: 60]
	int CurrentDecalBakingRequestID;//[Offset: 0x424, Size: 4]
	delegate OnAvatarDIYDecalBakingFinished;//[Offset: 0x428, Size: 12]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x434, Size: 12]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x1eeff90
	void Streamable_RequestAsyncLoadHandles(out ItemDefineID[] InHandleList);// 0x1eefebc
	bool SetMeshVisibleByID(int InSlotID, bool bIsVisible, bool bForceShow);// 0x1eefd98
	void SetMaster(MeshComponent* InComponent, FName InName, enum InType);// 0x1eefc90
	void SetDisplayQuality(enum Quality);// 0x1eefc1c
	bool SetAutonomousLoadRes();// 0x1eefbec
	void RequestSyncLoadMeshes();// 0x1eefbd8
	void RequestSyncLoadHandles();// 0x1eefbc4
	void RequestAsyncLoadMeshes();// 0x1eefba8
	void RequestAsyncLoadHandles();// 0x1eefb8c
	void RemoveDIYRTCacheInBattle(int InSlotID);// 0x1eefb14
	void RemoveAllDIYRTCacheInBattle();// 0x1eefb00
	void RemoveActionByType(int SlotID, enum InActionType, bool bDelayClear);// 0x1eef9f8
	void RemoveAction(int SlotID, int ActionInstanceID, bool bDelayClear);// 0x1eef8f0
	void ReloadAllEquippedAvatar(bool ForceAutonoumous);// 0x1eef870
	void RefreshAvatarStateChanged();// 0x1eef854
	void ProcessLoadAllMesh();// 0x1eef838
	void PreProcessBeforeLoadMesh();// 0x1eef81c
	void PostProcessAfterLoadMesh();// 0x1eef800
	void OnEngineDecalBakingFinished(out const DecalBakingRequest InRequestStruct);// 0x1eef720
	void OnAvatarDIYDecalBakingFinished__DelegateSignature(int RequestID, TextureRenderTarget2D* RenderTarget);// 0x2bb69b8
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x2bb69b8
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x1eef6a0
	void OnAsyncLoadHandlesDone(out const ItemHandleBase*[] AvatarHandles);// 0x1eef5cc
	void OnAllAvatarHandleLoadedDone();// 0x1eef5b0
	void NetSyncData(int SlotID, enum OperationType, BattleItemHandleBase* Handle);// 0x1eef4a8
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x1eef3dc
	bool IsAutonomousAvatar();// 0x1eef3b4
	AvatarDIYEntity* GetOrCreateAvatarEntity(int SlotID, int SubSlotID);// 0x1eef2f0
	<int,MeshComponent*> GetMeshComponentList();// 0x1eef160
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x1eef0d8
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x1eef068
	AvatarDIYEntityFactory* GetEntityFactory();// 0x1eef038
	TextureRenderTarget2D* GetDIYRTCacheInLobby(int InSlotID);// 0x1eeefb8
	enum GetDisplayQuality();// 0x1eeef9c
	void GetCurMeshComponents(out MeshComponent*[] OutMeshComponets);// 0x1eeeec8
	AvatarDIYEntity* GetAvatarEntity(int SlotID, int SubSlotID);// 0x1eeee04
	void EnableSyncLoadDIYDecal(bool bInSyncDIYDecal, int InMaxDecalProcessPreFrame);// 0x1eeed3c
	void EnableSyncLoadAvatar(bool bInSyncAvatar);// 0x1eeecbc
	void DrawOutlineEffect(bool Enable, int SlotID);// 0x1eeebec
	AvatarDIYEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x1eeeb28
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x1eeea54
	void AsyncLoadAvatarAllMeshDone__DelegateSignature(AvatarDIYComponent* AvatarDIYComponent);// 0x2bb69b8
	void AddDIYRTCacheInBattle(int InSlotID, TextureRenderTarget2D* InTexture2D);// 0x1eee998
	int AddAction_Modle(int SlotID, int ModleID);// 0x1eee8d4
	int AddAction_Material(int SlotID, int MaterialID);// 0x1eee810
	int AddAction_DIYSlotMatParam(out const int[] InSlotMatParam);// 0x1eee73c
	int AddAction_DIYPattern(int SlotID, out const DIYMergedTexData[] InDIYMergeData);// 0x1eee5bc
	int AddAction_DIYMirroParam(int SlotID, out const int[] InMirroParam);// 0x1eee4a4
	int AddAction_DIYMatParam(int SlotID, out const int[] InMatIDList);// 0x1eee38c
	int AddAction(int SlotID, out const AvatarActionBase InActionBase);// 0x1eee298

--------------------------------
Class: AvatarComponentBase.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0x160, Size: 4]
	bool bIsLobbyAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	bool bIsLobbyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x165, Size: 1]
	bool bForceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x166, Size: 1]
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x167, Size: 1]
	FName LightVectorName;//[Offset: 0x168, Size: 8]
	DirectionalLight* DirectionalLight;//[Offset: 0x170, Size: 4]
	delegate OnItemDownloadDelegate;//[Offset: 0x178, Size: 16]
	delegate OnBatchItemDownloadDelegate;//[Offset: 0x188, Size: 16]
	<int,int> ItemsRequestDownloadTimes;//[Offset: 0x198, Size: 60]
	bool bSyncAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	FString LuaFilePath;//[Offset: 0x1d8, Size: 12]
	void RequestDownloadItemInBattle(int InItemID);// 0x1eed25c
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x1eed188
	void OnRespawned();// 0x1eed16c
	void OnRecycled();// 0x1ebefdc
	bool IsTeammate();// 0x1eed13c
	bool IsServerMode();// 0x1eed114
	bool IsSelf();// 0x1eed0e4
	bool IsLogicRunningMode();// 0x1eed0bc
	bool IsLobbyAvatar();// 0x1eed0a0
	bool IsLobbyActor();// 0x1eed084
	bool IsForceClientMode();// 0x1eed068
	uint32 GetPlayerKey();// 0x1eed038
	GameInstance* GetGameInstance();// 0x1eed008
	void DownloadItemInBattleCallBack(uint32 ItemId, uint32 ErrorCode);// 0x1eecf44
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x1eecccc

--------------------------------
Class: AvatarDIYEntity.Object
	AvatarDIYComponent* AvatarComponent;//[Offset: 0x1c, Size: 4]
	MeshComponent* MeshComponent;//[Offset: 0x20, Size: 4]
	MeshGroup MeshGroup;//[Offset: 0x24, Size: 36]
	ItemDefineID ParentDefineID;//[Offset: 0x48, Size: 24]
	<FString,AvatarDIYEntity*> SubEntityMap;//[Offset: 0x60, Size: 60]
	int SlotID;//[Offset: 0xb4, Size: 4]
	int SubSlotID;//[Offset: 0xb8, Size: 4]
	FName SocketName;//[Offset: 0xc0, Size: 8]
	enum meshType;//[Offset: 0xc8, Size: 1]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0xcc, Size: 4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0xd0, Size: 4]
	MeshData EntityMeshData;//[Offset: 0xd8, Size: 96]
	MeshData CachedEntityMeshData;//[Offset: 0x138, Size: 96]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19a, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19b, Size: 1]
	bool bHasDeaclTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x1a0, Size: 12]
	SoftObjectPath MeshAssetPath;//[Offset: 0x1b0, Size: 24]
	<FString,AvatarDIYEntity*> SubEntityList;//[Offset: 0x1c8, Size: 60]
	void UpdateVisibility();// 0x1ef1dac
	void UnRegisterTick();// 0x1ef1d90
	void TickEntity(float DeltaTime);// 0x1ef1d10
	void SetSocketName(FName InName);// 0x1ef1c90
	void SetParentDefineID(ItemDefineID ParentID);// 0x1ef1c04
	void SetAvatarVisibility(bool bIsVisible, bool bForce);// 0x1ef1b2c
	void SetAvatarEntityParticleVisibility(bool visibie);// 0x1ef1aa4
	void RevertEntityMeshData();// 0x1ef1a90
	void RenderEntity();// 0x1ef1a74
	void RegisterTick();// 0x1ef1a58
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x1ef19d0
	void PutOnDefaultEquipment(int InSlotID);// 0x1ef1950
	void PrepareEntity();// 0x1ef1934
	void OnPreRender();// 0x1ef1918
	void OnPostRender();// 0x1ef18fc
	void MaskActionDirty(bool bFlag);// 0x1ef187c
	bool IsEntityAvailable(enum VisibilityType);// 0x1ef17f4
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x1ef1728
	void Init(int InSlotID, int InSubSlotID, AvatarDIYComponent* InAvatarComponent);// 0x1ef1620
	bool HasSomeAction(enum InActionType);// 0x1ef15a0
	bool HasMainAction();// 0x1ef1578
	FName GetSocketName();// 0x1ef1530
	enum GetSkeletalMeshType(BattleItemHandleBase* InHandle);// 0x1ef14a8
	ItemDefineID GetParentDefineID();// 0x1ef1454
	MeshData GetMeshData();// 0x1ef13f0
	BattleItemHandleBase* GetLoadedHandle();// 0x1ef13c8
	ItemDefineID GetDefineID();// 0x1ef1374
	void EnterRenderPipeline();// 0x1ef1358
	void EnterLogicPipeline();// 0x1ef133c
	void DrawOutline(bool bEnable);// 0x1ef12b4
	bool CreateAndApplyResource();// 0x1ef1284
	void ClearRenderEntity();// 0x1ef1268
	void ClearEquipmentRenderData(int CurrSlotID, bool bPutDefault);// 0x1ef119c
	void ClearEquipmentLogic(bool bPutDefault, bool bClearMesh);// 0x1ef10c4
	void ClearEntity(bool ForceClear);// 0x1ef103c

--------------------------------
Class: MeshGroup
	MeshAsset[] MeshAssetList;//[Offset: 0x0, Size: 12]
	Object*[] MeshObjectList;//[Offset: 0xc, Size: 12]
	MeshComponent*[] MeshCompList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MeshAsset
	Transform Transform;//[Offset: 0x0, Size: 48]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x30, Size: 40]
	StaticMesh* StaticMesh;//[Offset: 0x58, Size: 40]
	FName AttachSocket;//[Offset: 0x80, Size: 8]
	enum meshType;//[Offset: 0x88, Size: 1]
	bool bKeepRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	class AnimInstance* animBP;//[Offset: 0x8c, Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x90, Size: 40]
	bool bAnimInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	bool bUpdateTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	FString LuaFilePath;//[Offset: 0xc8, Size: 12]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	enum ItemStoreArea;//[Offset: 0xd5, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0xd8, Size: 12]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	float UnitWeight;//[Offset: 0xe8, Size: 4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 1]
	int ItemAttrsFlag;//[Offset: 0xf0, Size: 4]
	void UpdateAttributeModify(bool bEnable);// 0x1f75710
	bool UnEquip();// 0x23be058
	bool HanldePickupAssociationData(out const BattleItemAdditionalData[] PickupAdditionalData);// 0x23bdf14
	bool HanldeDropAssociationData();// 0x23bdee4
	bool HanldeCleared();// 0x206c860
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x1f055ac
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x1f05188
	bool HandleEnable(bool bEnable);// 0x1f04c70
	bool HandleDrop(int InCount, enum Reason);// 0x1f04ba4
	bool HandleDisuse(enum Reason);// 0x1ef599c
	bool HandleChangeItemStoreArea(enum InItemStoreArea);// 0x23bde5c
	bool HandleBindToTargetItem();// 0x1ff6c64
	World* GetWorldInternal();// 0x23044d8
	World* GetCurrentWorld();// 0x23bde34
	BattleItemData ExtractItemData();// 0x1f0b210
	void ClearAdditionalData();// 0x23bde20
	bool CheckCanUse(out const interface classNone ItemContainer, BattleItemUseTarget Target, enum Reason);// 0x23bdcc0

--------------------------------
Class: ItemHandleBase.Object
	int Count;//[Offset: 0x1c, Size: 4]
	int MaxCount;//[Offset: 0x20, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bSingle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	<FName,ItemAssociation> AssociationMap;//[Offset: 0x28, Size: 60]
	ItemDefineID DefineID;//[Offset: 0x68, Size: 24]
	void SetAssociation(FName Name, ItemAssociation Association);// 0x23c33fc
	void RemoveAssociation(FName Name);// 0x23c3384
	void Init(ItemDefineID InDefineID);// 0x23c32f4
	ItemDefineID GetDefineID();// 0x23c32b0
	<FName,ItemAssociation> GetAssociationMap();// 0x23c3130
	ItemAssociation[] GetAssociationListByTargetType(int Type);// 0x23c3024
	ItemAssociation GetAssociationByTargetDefineID(ItemDefineID TargetDefineID);// 0x23c2f78
	ItemAssociation GetAssociation(FName Name);// 0x23c2ed8
	void Constuct(out const ItemDefineID InDefineID);// 0x23c2e40
	void AddAssociation(FName Name, ItemAssociation Association);// 0x23c2d38

--------------------------------
Class: BattleItemAdditionalData
	FName Name;//[Offset: 0x0, Size: 8]
	float FloatData;//[Offset: 0x8, Size: 4]
	FString StringData;//[Offset: 0xc, Size: 12]
	int IntData;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BattleItemUseTarget
	ItemDefineID TargetDefineID;//[Offset: 0x0, Size: 24]
	FName TargetAssociationName;//[Offset: 0x18, Size: 8]
	Actor* TargetActor;//[Offset: 0x20, Size: 4]

--------------------------------
Class: ItemAssociation
	FName AssociationName;//[Offset: 0x0, Size: 8]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8, Size: 24]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BattleItemPickupInfo
	Object* Source;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x8, Size: 12]
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x18, Size: 40]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: BattleItemData.ItemData
	int Count;//[Offset: 0x48, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x50, Size: 12]
	int Durability;//[Offset: 0x5c, Size: 4]
	enum ItemStoreArea;//[Offset: 0x60, Size: 1]
	BattleItemFeatureData FeatureData;//[Offset: 0x64, Size: 44]
	ItemAssociation[] Associations;//[Offset: 0x90, Size: 12]

--------------------------------
Class: ItemData
	ItemDefineID DefineID;//[Offset: 0x8, Size: 24]
	FString Name;//[Offset: 0x20, Size: 12]
	FString Desc;//[Offset: 0x2c, Size: 12]
	FString Icon;//[Offset: 0x38, Size: 12]
	ItemHandleBase* ItemHandle;//[Offset: 0x44, Size: 4]

--------------------------------
Class: BattleItemFeatureData
	float UnitWeight;//[Offset: 0x0, Size: 4]
	int MaxCount;//[Offset: 0x4, Size: 4]
	int CountLimit;//[Offset: 0x8, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int ItemAttrsFlag;//[Offset: 0x14, Size: 4]
	int SortingPriority;//[Offset: 0x18, Size: 4]
	int Worth;//[Offset: 0x1c, Size: 4]
	int ItemCapacity;//[Offset: 0x20, Size: 4]
	int ItemDurability;//[Offset: 0x24, Size: 4]
	int itemType;//[Offset: 0x28, Size: 4]

--------------------------------
Class: MeshData
	StaticMesh* stMesh;//[Offset: 0x0, Size: 4]
	SkeletalMesh* skMesh;//[Offset: 0x4, Size: 4]
	MaterialInstance* matIns;//[Offset: 0x8, Size: 4]
	MaterialInstance*[] additionalMats;//[Offset: 0xc, Size: 12]
	enum meshType;//[Offset: 0x18, Size: 1]
	int[] hiddenSlots;//[Offset: 0x1c, Size: 12]
	ReplacedSlotInfo[] replacedSlots;//[Offset: 0x28, Size: 12]
	HideBoneData[] hideBoneSlots;//[Offset: 0x34, Size: 12]
	ItemDefineID definedID;//[Offset: 0x40, Size: 24]
	bool functionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: ReplacedSlotInfo

--------------------------------
Class: HideBoneData

--------------------------------
Class: CustomWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0x69c, Size: 4]
	MeshComponent* AttachedMeshComponent;//[Offset: 0x6a0, Size: 4]
	ParticleSystemComponent* UIParticleComp;//[Offset: 0x6a4, Size: 4]
	StaticMeshComponent* SurfaceEffectMesh;//[Offset: 0x6a8, Size: 4]
	void SetupAttachMeshComponent(MeshComponent* MeshComp, FName AttachSocket, out const Transform RelativeTrans);// 0x1f8b230
	Actor* GetBindOwner();// 0x1f8b20c
	MeshComponent* GetAttachedMeshComponent();// 0x1f8b1f0
	void CreateParticle(ParticleSystem* ParticleRes, MeshComponent* MeshComp, FName SocketName, out const Transform RelativeTrans);// 0x1f8b040
	void BindOwner(Actor* Owner);// 0x1f8afc8
	void BindEvent(bool bShowWidget);// 0x1f8af40

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x5d1, Size: 1]
	enum TimingPolicy;//[Offset: 0x5d2, Size: 1]
	class UserWidget* WidgetClass;//[Offset: 0x5d4, Size: 4]
	IntPoint DrawSize;//[Offset: 0x5d8, Size: 8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 1]
	float RedrawTime;//[Offset: 0x5e4, Size: 4]
	IntPoint CurrentDrawSize;//[Offset: 0x5f0, Size: 8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 1]
	Vector2D Pivot;//[Offset: 0x5fc, Size: 8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604, Size: 1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x605, Size: 1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x608, Size: 4]
	LinearColor BackgroundColor;//[Offset: 0x60c, Size: 16]
	LinearColor TintColorAndOpacity;//[Offset: 0x61c, Size: 16]
	float OpacityFromTexture;//[Offset: 0x62c, Size: 4]
	enum BlendMode;//[Offset: 0x630, Size: 1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x631, Size: 1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x632, Size: 1]
	UserWidget* Widget;//[Offset: 0x634, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x648, Size: 4]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x64c, Size: 4]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x650, Size: 4]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x654, Size: 4]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x658, Size: 4]
	MaterialInterface* MaskedMaterial;//[Offset: 0x65c, Size: 4]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x660, Size: 4]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x664, Size: 4]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x668, Size: 4]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66d, Size: 1]
	FName SharedLayerName;//[Offset: 0x670, Size: 8]
	int LayerZOrder;//[Offset: 0x678, Size: 4]
	enum GeometryMode;//[Offset: 0x67c, Size: 1]
	float CylinderArcAngle;//[Offset: 0x680, Size: 4]
	void SetWidget(UserWidget* Widget);// 0x2142240
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x38bea14
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x38be99c
	void SetDrawSize(Vector2D Size);// 0x38be92c
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x38be8b0
	void RequestRedraw();// 0x2163724
	UserWidget* GetUserWidgetObject();// 0x38be888
	TextureRenderTarget2D* GetRenderTarget();// 0x38be860
	LocalPlayer* GetOwnerPlayer();// 0x38be838
	MaterialInstanceDynamic* GetMaterialInstance();// 0x38be810
	Vector2D GetDrawSize();// 0x38be7d0

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0xa8, Size: 4]
	int SizeY;//[Offset: 0xac, Size: 4]
	LinearColor ClearColor;//[Offset: 0xb0, Size: 16]
	byte AddressX;//[Offset: 0xc0, Size: 1]
	byte AddressY;//[Offset: 0xc1, Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 1]
	byte RenderTargetFormat;//[Offset: 0xc3, Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 1]
	byte OverrideFormat;//[Offset: 0xc5, Size: 1]

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: AvatarDIYEntityFactory.Object
	AvatarDIYEntity* CreateEntity(int SlotID, int SubSlotID);// 0x1ef3110

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x2fc, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 1]
	void ToggleEnabled();// 0x44b2148
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x44b20d8
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x44b2060
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x44b1fe8
	void SetLightColor(LinearColor NewLightColor);// 0x44b1f6c
	void SetEnabled(bool bSetEnabled);// 0x44b1eec
	void SetCastShadows(bool bNewValue);// 0x44b1e6c
	void SetBrightness(float NewBrightness);// 0x44b1df4
	void SetAffectTranslucentLighting(bool bNewValue);// 0x44b1d74
	void OnRep_bEnabled();// 0x1ed11c0
	bool IsEnabled();// 0x44b1d4c
	LinearColor GetLightColor();// 0x44b1d08
	float GetBrightness();// 0x44b1ce0

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x288, Size: 4]
	float MaxDrawDistance;//[Offset: 0x28c, Size: 4]
	float MaxDistanceFadeRange;//[Offset: 0x290, Size: 4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 1]
	int ShadowMapChannel;//[Offset: 0x298, Size: 4]
	float MinRoughness;//[Offset: 0x2a0, Size: 4]
	float ShadowResolutionScale;//[Offset: 0x2a4, Size: 4]
	int LightPriority;//[Offset: 0x2a8, Size: 4]
	float ShadowBias;//[Offset: 0x2ac, Size: 4]
	float ShadowSharpen;//[Offset: 0x2b0, Size: 4]
	float ContactShadowLength;//[Offset: 0x2b4, Size: 4]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 1]
	bool bCacheStaticShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8, Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b8, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b8, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x2b9, Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x2bc, Size: 4]
	Vector LightFunctionScale;//[Offset: 0x2c0, Size: 12]
	TextureLightProfile* IESTexture;//[Offset: 0x2cc, Size: 4]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	float IESBrightnessScale;//[Offset: 0x2d4, Size: 4]
	float LightFunctionFadeDistance;//[Offset: 0x2d8, Size: 4]
	float DisabledBrightness;//[Offset: 0x2dc, Size: 4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	float BloomScale;//[Offset: 0x2e4, Size: 4]
	float BloomThreshold;//[Offset: 0x2e8, Size: 4]
	Color BloomTint;//[Offset: 0x2ec, Size: 4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x2f4, Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x44b3090
	void SetTemperature(float NewTemperature);// 0x44b3018
	void SetShadowBias(float NewValue);// 0x44b2fa0
	void SetLightPriority(int Priority);// 0x44b2f28
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x44b2eb8
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x44b2e40
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x44b2dc8
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x44b2d50
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x44b2c88
	void SetIntensity(float NewIntensity);// 0x44b2c10
	void SetIndirectLightingIntensity(float NewIntensity);// 0x44b2b98
	void SetIESTexture(TextureLightProfile* NewValue);// 0x44b2b20
	void SetEnableLightShaftBloom(bool bNewValue);// 0x44b2aa0
	void SetBloomTint(Color NewValue);// 0x44b2a30
	void SetBloomThreshold(float NewValue);// 0x44b29b8
	void SetBloomScale(float NewValue);// 0x44b2940
	void SetAffectTranslucentLighting(bool bNewValue);// 0x44b28c0
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x44b2840
	void ForceUpdateShadowState();// 0x44b282c

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x260, Size: 16]
	float Brightness;//[Offset: 0x270, Size: 4]
	float Intensity;//[Offset: 0x274, Size: 4]
	Color LightColor;//[Offset: 0x278, Size: 4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c, Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27c, Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27c, Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27c, Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27c, Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27c, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x280, Size: 4]
	float VolumetricScatteringIntensity;//[Offset: 0x284, Size: 4]
	void SetCastVolumetricShadow(bool bNewValue);// 0x44b4278
	void SetCastShadows(bool bNewValue);// 0x44b41f8
	LinearColor GetLightColor();// 0x44b41b4

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0xdc, Size: 4]
	float TextureMultiplier;//[Offset: 0xe0, Size: 4]

--------------------------------
Class: DecalBakingRequest
	Object* Mesh;//[Offset: 0x4, Size: 4]
	DecalParameter[] DecalParams;//[Offset: 0xc, Size: 12]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x18, Size: 4]

--------------------------------
Class: DecalParameter
	Texture2D* DecalTexture;//[Offset: 0x0, Size: 4]

--------------------------------
Class: DIYMergedTexData
	DIYOneTexData[] TextureList;//[Offset: 0x0, Size: 12]
	int TexPathID;//[Offset: 0xc, Size: 4]
	DIYParamData DIYParam;//[Offset: 0x10, Size: 48]
	int SlotID;//[Offset: 0x40, Size: 4]

--------------------------------
Class: DIYOneTexData
	int TexPathID;//[Offset: 0x0, Size: 4]
	DIYParamData DIYParam;//[Offset: 0x4, Size: 48]

--------------------------------
Class: DIYParamData
	int Direction;//[Offset: 0x0, Size: 4]
	int ColorID;//[Offset: 0x4, Size: 4]
	float Opacity;//[Offset: 0x8, Size: 4]
	float Rotation;//[Offset: 0xc, Size: 4]
	float ScaleX;//[Offset: 0x10, Size: 4]
	float ScaleY;//[Offset: 0x14, Size: 4]
	float OffSetX;//[Offset: 0x18, Size: 4]
	float OffSetY;//[Offset: 0x1c, Size: 4]
	float UClipX;//[Offset: 0x20, Size: 4]
	float UClipY;//[Offset: 0x24, Size: 4]
	float VClipX;//[Offset: 0x28, Size: 4]
	float VClipY;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: AvatarActionBase

--------------------------------
Class: HandleMeshPack
	BattleItemHandleBase* Handle;//[Offset: 0x0, Size: 4]
	WeaponMeshCfg MeshCfg;//[Offset: 0x8, Size: 328]

--------------------------------
Class: WeaponMeshCfg
	StaticMesh* stMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* skMesh;//[Offset: 0x28, Size: 40]
	StaticMesh* stMeshLod;//[Offset: 0x50, Size: 40]
	SkeletalMesh* skMeshLod;//[Offset: 0x78, Size: 40]
	MaterialInterface* MeshMat;//[Offset: 0xa0, Size: 40]
	FName MeshMatSlotName;//[Offset: 0xc8, Size: 8]
	MaterialInterface* OverrideMatByGameMode;//[Offset: 0xd0, Size: 40]
	MaterialInterface* baseMat;//[Offset: 0xf8, Size: 4]
	MaterialInterface* baseMatClass;//[Offset: 0x100, Size: 40]
	ParticleRes[] ParticleEffects;//[Offset: 0x128, Size: 12]
	UIWidgetRes[] WidgetList;//[Offset: 0x134, Size: 12]
	enum meshType;//[Offset: 0x140, Size: 1]

--------------------------------
Class: ParticleRes
	ParticleSystem* ParticleRes;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]

--------------------------------
Class: UIWidgetRes
	class UserWidget* UserWidget;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Vector2D DrawSize;//[Offset: 0x40, Size: 8]
	bool bShowDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bUseScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]

--------------------------------
Class: MeshSynData
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int gender;//[Offset: 0x18, Size: 4]
	enum OperationType;//[Offset: 0x1c, Size: 1]
	int AdditionalItemID;//[Offset: 0x20, Size: 4]
	int DIYPlanID;//[Offset: 0x24, Size: 4]

--------------------------------
Class: WeaponDIYData.ResponResult
	int WeaponId;//[Offset: 0x4, Size: 4]
	int PlanID;//[Offset: 0x8, Size: 4]
	DIYMergedTexData[] DIYData;//[Offset: 0xc, Size: 12]
	int[] MatParam;//[Offset: 0x18, Size: 12]
	int[] MirroParam;//[Offset: 0x24, Size: 12]
	int[] SlotMatParam;//[Offset: 0x30, Size: 12]

--------------------------------
Class: ResponResult
	bool bResponed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: DIYEnableLevel
	int DeviceLevel;//[Offset: 0x0, Size: 4]
	int EnableLevel;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponAvatarDIYEntity.AvatarDIYEntity.Object
	void SetWeaponEntityVisibility(bool visibie);// 0x22fbc60
	void SetSocketName(FName InName);// 0x1ef1c90
	void RenderEntity();// 0x1ef1a74
	void RemoveParticleEffect();// 0x22fbc44
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x1ef19d0
	void PrepareEntity();// 0x1ef1934
	void OnPreRender();// 0x1ef1918
	void OnPostRender();// 0x1ef18fc
	bool IsForceEnableAnim();// 0x22fbc14
	enum GetSkeletalMeshType(BattleItemHandleBase* InHandle);// 0x1ef14a8
	ItemDefineID GetDefineID();// 0x1ef1374
	void EnterLogicPipeline();// 0x1ef133c
	void ClearEquipmentLogic(bool bPutDefault, bool bClearMesh);// 0x1ef10c4
	void BroadcastWeaponEquipEvent(bool IsEquipped);// 0x22fbb94
	void ApplyParticleEffect();// 0x22fbb78
	void AddWeaponHandleAction();// 0x22fbb64

--------------------------------
Class: PredictLineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Actor* PredictActorTemplate;//[Offset: 0x67c, Size: 4]
	StaticMesh* MeshTemplate;//[Offset: 0x680, Size: 40]
	ParticleSystem* PredictEndPointFX;//[Offset: 0x6a8, Size: 40]
	CurveFloat* PredictEndPointScaleCurve;//[Offset: 0x6d0, Size: 40]
	PredictProjectilePathParams PredictProjectilePathParams;//[Offset: 0x6f8, Size: 100]
	delegate InitNewSplineMeshDelegate;//[Offset: 0x75c, Size: 12]
	PredictLineMaterialParams Param_StartPointLocation;//[Offset: 0x768, Size: 16]
	PredictLineMaterialParams Param_EndPointLocation;//[Offset: 0x778, Size: 16]
	PredictLineMaterialParams Param_EndPointFalloff;//[Offset: 0x788, Size: 16]
	PredictLineMaterialParams Param_PredictLineColor;//[Offset: 0x798, Size: 16]
	LinearColor PredictLineColor;//[Offset: 0x7a8, Size: 16]
	PredictProjectilePathResult PredictResult;//[Offset: 0x7c8, Size: 176]
	CurveFloat* Curve_PredictEndPointScale;//[Offset: 0x878, Size: 4]
	ParticleSystem* FX_PredictEndPoint;//[Offset: 0x87c, Size: 4]
	StaticMesh* SplineMeshTemplate;//[Offset: 0x880, Size: 4]
	SplineMeshComponent*[] CachedSplineMeshes;//[Offset: 0x888, Size: 12]
	int RedrawCounter;//[Offset: 0x894, Size: 4]
	void SetPredictParams(out const Vector InStartPoint, out const Vector InVelocity);// 0x20b2574
	void SetPredictActorTemplate(class Actor InActorTemplate);// 0x20b24fc

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x5b4, Size: 80]
	InterpCurveVector SplineInfo;//[Offset: 0x604, Size: 20]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x618, Size: 20]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x62c, Size: 20]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x640, Size: 20]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x654, Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x658, Size: 4]
	float Duration;//[Offset: 0x65c, Size: 4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x661, Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x662, Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x663, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x665, Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x666, Size: 1]
	float LoopPosition;//[Offset: 0x668, Size: 4]
	Vector DefaultUpVector;//[Offset: 0x66c, Size: 12]
	bool bUseConfigRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 1]
	void UpdateSpline();// 0x45375b0
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x45374dc
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x453737c
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x4536bd4
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x45371c8
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x4537068
	void SetSplineWorldPoints(out const Vector[] Points);// 0x4536f94
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x4536e8c
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x4536d2c
	void SetSplineLocalPoints(out const Vector[] Points);// 0x4536c58
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x4536bd4
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x4536a74
	void SetDrawDebug(bool bShow);// 0x45369f4
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x4536928
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x4536814
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x4536744
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x4536680
	bool IsClosedLoop();// 0x4536658
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x45365c4
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x45364e0
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x453644c
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x4536368
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x45362d4
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x4536240
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x453615c
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x45360c8
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4535fa4
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4535ed0
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4535dfc
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x4535c70
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x4535b34
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x45359f8
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x45358d4
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x45346d8
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4535800
	byte GetSplinePointType(int PointIndex);// 0x4535780
	float GetSplineLength();// 0x4535758
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x453567c
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x45355ec
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x453555c
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4535438
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4535364
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4535290
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4535180
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x45350bc
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4534ff8
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4534ed4
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4534e00
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4534d2c
	int GetNumberOfSplinePoints();// 0x4534d04
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4534be0
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4534b0c
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4534a38
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x45348d0
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x45347ac
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x45346d8
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x4534658
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x45345d8
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0x4534558
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4534434
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4534360
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x453428c
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x45341fc
	float GetCurvatureAtSplinePoint(int PointIndex);// 0x453417c
	float GetCurvatureAtDistance(float Distance);// 0x45340fc
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4534028
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4533f44
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x4533df8
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4533d14
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x4533c78
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4533b94
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4533ac0
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x45339dc
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x45338f8
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x453386c
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4533788
	void ClearSplinePoints(bool bUpdateSpline);// 0x4533708
	void AddSplineWorldPoint(out const Vector Position);// 0x453367c
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x453351c
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x4533404
	void AddSplineLocalPoint(out const Vector Position);// 0x4533378
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x453325c
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x4533154

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 20]
	InterpCurveQuat Rotation;//[Offset: 0x14, Size: 20]
	InterpCurveVector Scale;//[Offset: 0x28, Size: 20]
	InterpCurveFloat ReparamTable;//[Offset: 0x3c, Size: 20]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 4]
	Quat OutVal;//[Offset: 0x10, Size: 16]
	Quat ArriveTangent;//[Offset: 0x20, Size: 16]
	Quat LeaveTangent;//[Offset: 0x30, Size: 16]
	byte InterpMode;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 4]
	float OutVal;//[Offset: 0x4, Size: 4]
	float ArriveTangent;//[Offset: 0x8, Size: 4]
	float LeaveTangent;//[Offset: 0xc, Size: 4]
	byte InterpMode;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PredictProjectilePathParams
	Vector StartLocation;//[Offset: 0x0, Size: 12]
	Vector LaunchVelocity;//[Offset: 0xc, Size: 12]
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	float ProjectileRadius;//[Offset: 0x1c, Size: 4]
	float MaxSimTime;//[Offset: 0x20, Size: 4]
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	byte TraceChannel;//[Offset: 0x25, Size: 1]
	byte[] ObjectTypes;//[Offset: 0x28, Size: 12]
	Actor*[] ActorsToIgnore;//[Offset: 0x34, Size: 12]
	float SimFrequency;//[Offset: 0x40, Size: 4]
	float OverrideGravityZ;//[Offset: 0x44, Size: 4]
	float GravityScale;//[Offset: 0x48, Size: 4]
	float IgnoreGravityDis;//[Offset: 0x4c, Size: 4]
	byte DrawDebugType;//[Offset: 0x50, Size: 1]
	float DrawDebugTime;//[Offset: 0x54, Size: 4]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: PredictLineMaterialParams
	MaterialParameterCollection* MaterialParamCollection;//[Offset: 0x0, Size: 4]
	FName ParamName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 12]
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0xc, Size: 28]
	HitResult HitResult;//[Offset: 0x28, Size: 136]

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector Velocity;//[Offset: 0xc, Size: 12]
	float Time;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x6a4, Size: 88]
	Vector SplineUpDir;//[Offset: 0x6fc, Size: 12]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x708, Size: 1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x708, Size: 1]
	byte ForwardAxis;//[Offset: 0x709, Size: 1]
	float SplineBoundaryMin;//[Offset: 0x70c, Size: 4]
	float SplineBoundaryMax;//[Offset: 0x710, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x714, Size: 4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x718, Size: 16]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x728, Size: 1]
	void UpdateMesh();// 0x453a70c
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x453a648
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x453a588
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x453a4c4
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x453a400
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x453a340
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x453a1a0
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x453a0cc
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x453a008
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x4539f44
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x4539e84
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x4539dc0
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x4539cfc
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x4539c3c
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x4539b78
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x4539ab4
	Vector GetStartTangent();// 0x4539a6c
	Vector2D GetStartScale();// 0x4539a2c
	float GetStartRoll();// 0x4539a04
	Vector GetStartPosition();// 0x45399bc
	Vector2D GetStartOffset();// 0x453997c
	Vector GetSplineUpDir();// 0x4539934
	byte GetForwardAxis();// 0x453990c
	Vector GetEndTangent();// 0x45398c4
	Vector2D GetEndScale();// 0x4539884
	float GetEndRoll();// 0x453985c
	Vector GetEndPosition();// 0x4539814
	Vector2D GetEndOffset();// 0x45397d4
	float GetBoundaryMin();// 0x45397ac
	float GetBoundaryMax();// 0x213e6a4

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 12]
	Vector StartTangent;//[Offset: 0xc, Size: 12]
	Vector2D StartScale;//[Offset: 0x18, Size: 8]
	float StartRoll;//[Offset: 0x20, Size: 4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 8]
	Vector EndPos;//[Offset: 0x2c, Size: 12]
	Vector EndTangent;//[Offset: 0x38, Size: 12]
	Vector2D EndScale;//[Offset: 0x44, Size: 8]
	float EndRoll;//[Offset: 0x4c, Size: 4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 8]

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 4]
	Vector Position;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	Vector Scale;//[Offset: 0x34, Size: 12]
	byte Type;//[Offset: 0x40, Size: 1]

--------------------------------
Class: WeaponOwnerProxy.Object
	Actor* OwnerActor;//[Offset: 0x28, Size: 4]
	Pawn* OwnerPawn;//[Offset: 0x2c, Size: 4]
	Controller* OwnerController;//[Offset: 0x30, Size: 4]
	STExtraWeapon* BindedWeapon;//[Offset: 0x34, Size: 4]
	void OnWeaponStopFireDelegate__DelegateSignature();// 0x2bb69b8
	void HandlePlayerSwitchCameraMode(byte Mode);// 0x230771c
	void HandlePlayerChangePose(byte LastPose, byte NewPose);// 0x2307660
	STExtraPlayerController* GetOwnerSTExtraPlayerController();// 0x2307638
	STExtraBaseCharacter* GetOwnerSTExtraPlayerCharacter();// 0x2307610
	PlayerController* GetOwnerPlayerController();// 0x23075e8
	Pawn* GetOwnerPawn();// 0x23075c0
	Controller* GetOwnerController();// 0x2307598
	Actor* GetOwnerActor();// 0x230757c

--------------------------------
Class: WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	int WeaponId;//[Offset: 0x100, Size: 4]
	int SkillID;//[Offset: 0x104, Size: 4]
	byte WeaponType;//[Offset: 0x108, Size: 1]
	byte weaponTypeNew;//[Offset: 0x109, Size: 1]
	byte WeaponHoldType;//[Offset: 0x10a, Size: 1]
	FName WeaponAttachSocket;//[Offset: 0x110, Size: 8]
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	FName CustomWeaponBackpackAttachSocket;//[Offset: 0x120, Size: 8]
	bool ShowBulletTraceWhenScoped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	int MaxNoGravityRange;//[Offset: 0x12c, Size: 4]
	float LaunchGravityScale;//[Offset: 0x130, Size: 4]
	bool bEnableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	int UnableProneHoldingTipID;//[Offset: 0x138, Size: 4]
	bool bEnableVehicleHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	bool bEnableLeanOutHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	bool bEnableShovelHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e, Size: 1]
	bool bEnableShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f, Size: 1]
	int UnableShovelHoldingTipID;//[Offset: 0x140, Size: 4]
	bool bEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	int UnablePeekTipID;//[Offset: 0x148, Size: 4]
	bool bEnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 1]
	bool GuidedMissileVehicleRenderIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d, Size: 1]
	<byte,bool> PlugComponentSlotMap;//[Offset: 0x150, Size: 60]
	<byte,WeaponComponentItemData> PlugComponentSlotDataMap;//[Offset: 0x18c, Size: 60]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x1c8, Size: 4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x1cc, Size: 4]
	enum[] DisableWeaponPlayerStateList;//[Offset: 0x1d0, Size: 12]
	int DisableUseWeaponPlayerStateMsgIDDefault;//[Offset: 0x1dc, Size: 4]
	int DisableUseWeaponPlayerStateMsgIDSpecific;//[Offset: 0x1e0, Size: 4]
	Transform AttachToBackRelativeTransform_NoBagL;//[Offset: 0x1f0, Size: 48]
	Transform AttachToBackRelativeTransform_NoBagR;//[Offset: 0x220, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagL;//[Offset: 0x250, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagR;//[Offset: 0x280, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagL;//[Offset: 0x2b0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagR;//[Offset: 0x2e0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagL;//[Offset: 0x310, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagR;//[Offset: 0x340, Size: 48]
	<int,Transform> AttachToBackRelativeTransform_BagL_Map;//[Offset: 0x370, Size: 60]
	<int,Transform> AttachToBackRelativeTransform_BagR_Map;//[Offset: 0x3ac, Size: 60]
	MaterialInstance* WeaponMaterialUsedForDisplay;//[Offset: 0x3e8, Size: 4]
	bool bIsShieldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	bool bCanBeHoldedWithShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 1]
	bool bHasTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ee, Size: 1]
	byte[] AutoCheckCreateSkillCompWeaponTypeList;//[Offset: 0x3f0, Size: 12]
	bool bAutoCheckCreateSkillComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]

--------------------------------
Class: WeaponLogicBaseComponent.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0xf4, Size: 4]
	STExtraPlayerController* GlobalController;//[Offset: 0xfc, Size: 4]
	void UpdateComponentTick();// 0x1f7ff54
	STExtraWeapon* TryGetOwnerWeapon();// 0x22feddc
	STExtraShootWeapon* TryGetOwnerShootWeapon();// 0x22fedb4
	void MarkWeaponLogicComponentTickRoleEnable(byte Role, bool bTickEnable);// 0x22fecf0
	bool IsWeaponOwnerOBTarget();// 0x22fecc8
	bool IsWeaponLogicComponentTickRoleEnabled(byte Role);// 0x22fec48
	bool IsWeaponLogicComponentTickEnabled();// 0x22fec20
	bool IsLocalOrSpectorPlayer();// 0x22febf8
	FString GetWeaponDetailInfo();// 0x22feb38
	byte GetOwnerPawnRole();// 0x22feb10

--------------------------------
Class: WeaponComponentItemData
	PickUpGlobalDataTableRow PickUpGlobalDataTableRow;//[Offset: 0x0, Size: 352]
	WeaponComponentDataTableRow WeaponComponentDataTableRow;//[Offset: 0x160, Size: 24]

--------------------------------
Class: PickUpGlobalDataTableRow.SurviveTableRowBase.TableRowBase
	byte SurvivePickUpGlobalCategory;//[Offset: 0xc, Size: 1]
	SlateBrush SmallProfileImage;//[Offset: 0x10, Size: 152]
	SlateBrush LargerProfileImage;//[Offset: 0xa8, Size: 152]
	FString Name;//[Offset: 0x140, Size: 12]
	FString Description;//[Offset: 0x14c, Size: 12]
	int DisplayPriority;//[Offset: 0x158, Size: 4]

--------------------------------
Class: SurviveTableRowBase.TableRowBase
	int ID;//[Offset: 0x4, Size: 4]
	int PickUpSoundID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TableRowBase

--------------------------------
Class: WeaponComponentDataTableRow.SurviveTableRowBase.TableRowBase
	int WeaponComponentID;//[Offset: 0xc, Size: 4]
	byte Type;//[Offset: 0x10, Size: 1]
	StaticMesh* ShowMesh;//[Offset: 0x14, Size: 4]

--------------------------------
Class: WeaponSpecificHandler.WeaponLogicBaseComponent.ActorComponent.Object
	ItemDefineID ItemDefineID;//[Offset: 0x100, Size: 24]
	FName LogicSocket;//[Offset: 0x118, Size: 8]
	FName AttachSocket;//[Offset: 0x120, Size: 8]
	byte SurviveWeaponPropSlot;//[Offset: 0x128, Size: 1]
	float AIMinAttackDist;//[Offset: 0x12c, Size: 4]
	float AIMaxAttackDist;//[Offset: 0x130, Size: 4]
	float AIAttackDist;//[Offset: 0x134, Size: 4]
	ItemHandleBase* GetBackpackItemHandle();// 0x2308b3c
	int GetAvailableBulletsNumInBackpack();// 0x2308b14

--------------------------------
Class: WeaponReconnectReplicateData
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x0, Size: 4]
	Actor* WeaponOwner;//[Offset: 0x4, Size: 4]
	bool UseNewReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	FString OwnerPlayerName;//[Offset: 0xc, Size: 12]
	FName WeaponInventoryLogicSocket;//[Offset: 0x18, Size: 8]
	BulletInClip WeaponBulletInClip;//[Offset: 0x20, Size: 16]
	uint32 WeaponShootID;//[Offset: 0x30, Size: 4]
	uint32 WeaponClipID;//[Offset: 0x34, Size: 4]
	byte CurWeaponState;//[Offset: 0x38, Size: 1]
	byte CurShootType;//[Offset: 0x39, Size: 1]
	int CurShootTotalType;//[Offset: 0x3c, Size: 4]
	ItemDefineID DefineID;//[Offset: 0x40, Size: 24]
	int BackpackPistolListIndex;//[Offset: 0x58, Size: 4]
	bool bIsCurrentWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int OperationIndex;//[Offset: 0x60, Size: 4]

--------------------------------
Class: BulletInClip
	int CurBulletNumInClip;//[Offset: 0x0, Size: 4]
	BulletInWeapon[] CurBulletIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BulletInWeapon
	int BulletID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SpawnAndBackpackWeaponReplicatedData
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	FName LogicSocket;//[Offset: 0x8, Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bNeedSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	bool bResetBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int ClientResetBulletNum;//[Offset: 0x34, Size: 4]
	int OperationIndex;//[Offset: 0x38, Size: 4]
	Actor* WeaponOwnerActor;//[Offset: 0x3c, Size: 4]
	FString OwnerCharacterName;//[Offset: 0x40, Size: 12]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	int SyncTicket;//[Offset: 0x50, Size: 4]

--------------------------------
Class: WeaponTriggerEventHandleSkill.WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x2135608
	static int GetWeaponSkillID(STExtraWeapon* Weapon);// 0x230a014

--------------------------------
Class: WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x2135608
	void ProcessTriggerEvent(enum Event);// 0x20ebef4

--------------------------------
Class: SceneCompUpdateOptimizationItem

--------------------------------
Class: WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponStateBase* CurrentState;//[Offset: 0x100, Size: 4]
	WeaponStateBase* DefaultState;//[Offset: 0x104, Size: 4]
	<byte,WeaponStateBase*> StateMap;//[Offset: 0x108, Size: 60]
	WeaponStateBase* GetCurrentState();// 0x2309134
	byte GetCurrentFreshWeaponStateType();// 0x230910c

--------------------------------
Class: WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	delegate OnBeginState;//[Offset: 0x100, Size: 12]
	delegate OnEndState;//[Offset: 0x10c, Size: 12]
	bool bNeedConditionGateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	byte FreshWeaponStateType;//[Offset: 0x119, Size: 1]

--------------------------------
Class: GrenadeAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate GrenadeAvatarEqiuped;//[Offset: 0x36c, Size: 12]
	void PreChangeGrenadeAvatar(int InItemID);// 0x200e620
	void PostChangeItemAvatar(bool bProcessRenderPipeline);// 0x200e598
	FString GetItemAvatarHandlePath(int ItemId);// 0x2bb69b8
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId);// 0x2bb69b8
	int GetDefaultAvatarID(int InAvatarID);// 0x2bb69b8
	void AddAssetSoftObject(out SoftObjectPath[] FSoftObjectPathList);// 0x200e45c

--------------------------------
Class: ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate VehicleEquipedDefaultAvatarEvent;//[Offset: 0x1e4, Size: 12]
	bool bNeedCheckResExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	ItemDefineID DefaultCfg;//[Offset: 0x1f8, Size: 24]
	bool bEnableLobbyMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	MeshComponent* ItemBodyMesh;//[Offset: 0x214, Size: 4]
	NetItemAvatarData NetAvatarData;//[Offset: 0x218, Size: 32]
	BackpackCommonAvatarHandle* ItemAvatarHandle;//[Offset: 0x2d0, Size: 4]
	BackpackCommonAvatarHandle* DefaultItemAvatarHandle;//[Offset: 0x2d4, Size: 4]
	int itemType;//[Offset: 0x2d8, Size: 4]
	SkeletalMesh* MasterSkeletalMesh;//[Offset: 0x2e0, Size: 40]
	StaticMesh* MasterStaticMesh;//[Offset: 0x308, Size: 40]
	<FString,Object*> AssetObjectMap;//[Offset: 0x330, Size: 60]
	void VehicleEquipedDefaultAvatar__DelegateSignature(int AvatarID, int DefaultAvatarID);// 0x2bb69b8
	void SyncChangeItemAvatar(int InItemID);// 0x1f9134c
	void SetMasterStaticMeshPath(FString InPath, bool bForce);// 0x202b6dc
	void SetMasterSkeletalMeshPath(FString InPath, bool bForce);// 0x202b5d4
	void ResetItemAvatar();// 0x202b5c0
	void RequestDownloadItemInBattle(int InItemID);// 0x1eed25c
	void PreChangeItemAvatar(int InItemID);// 0x1f912b8
	void OnRep_ItemAvatarChanged();// 0x202b5ac
	bool IsValidAvatar();// 0x202b584
	BackpackCommonAvatarHandle* GetValidAvatarHandle();// 0x202b554
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x202b478
	MeshComponent* GetItemBodyMesh();// 0x202b45c
	MaterialInterface* GetDynamicMaterial(MaterialInstance* MatInstance, MaterialInterface* MatBase);// 0x1f3c268
	void DownloadItemInBattleCallBack(uint32 ItemId, uint32 ErrorCode);// 0x1eecf44
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x1f91140
	void ChangeItemAvatar(int InItemID, bool bUpdateFlag);// 0x202b390
	void AsyncChangeItemAvatar(int InItemID);// 0x1f91098
	bool ApplyMesh(MeshComponent* MeshComp, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh);// 0x1f90ec4
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x1f90dc4
	void AddAssetSoftObject(out SoftObjectPath[] ObjectPathList);// 0x200e45c

--------------------------------
Class: BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ItemAvatarData[] ItemAvatarMats;//[Offset: 0xf4, Size: 12]
	SkeletalMesh* ItemSkletalMesh;//[Offset: 0x100, Size: 40]
	StaticMesh* ItemStaticMesh;//[Offset: 0x128, Size: 40]
	class AnimInstance* ItemAnimBPPath;//[Offset: 0x150, Size: 40]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x1f055ac
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x1f05188
	bool HandleDrop(int InCount, enum Reason);// 0x1f04ba4
	bool HandleDisuse(enum Reason);// 0x1ef599c
	BackpackComponent* GetBackpackComponent();// 0x1f07b2c
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x1f07a68

--------------------------------
Class: ItemAvatarData
	FName SlotID;//[Offset: 0x0, Size: 8]
	MaterialInterface* MatInstance;//[Offset: 0x8, Size: 40]
	MaterialInterface* LobbyMatInstance;//[Offset: 0x30, Size: 40]

--------------------------------
Class: BackpackComponent.ActorComponent.Object
	delegate ItemListUpdatedDelegate;//[Offset: 0x108, Size: 12]
	delegate SingleItemUpdatedDelegate;//[Offset: 0x114, Size: 12]
	delegate SingleItemDeleteDelegate;//[Offset: 0x120, Size: 12]
	delegate CapacityUpdatedDelegate;//[Offset: 0x12c, Size: 12]
	delegate ItemOperationDelegate;//[Offset: 0x138, Size: 12]
	delegate ItemOperationInfoDelegate;//[Offset: 0x144, Size: 12]
	delegate AssociationOperationDelegate;//[Offset: 0x150, Size: 12]
	delegate ItemOperCountDelegate;//[Offset: 0x15c, Size: 12]
	delegate ItemOperationFailedDelegate;//[Offset: 0x168, Size: 12]
	delegate BackPackTipsToPlayerDelegate;//[Offset: 0x174, Size: 12]
	delegate ItemHandleAddDelegate;//[Offset: 0x180, Size: 12]
	<int,int> PickupLimitSetting;//[Offset: 0x18c, Size: 60]
	delegate ItemUpdatedDelegate;//[Offset: 0x1c8, Size: 12]
	delegate ItemRemovedDelegate;//[Offset: 0x1d4, Size: 12]
	CustomAccessoriesData[] CustomAccessoriesData;//[Offset: 0x1e0, Size: 12]
	BattleItemPickupAfterLand[] BattleItemPickupAfterLandList;//[Offset: 0x1ec, Size: 12]
	SpecialPickInfo[] specialCountLimit;//[Offset: 0x1f8, Size: 12]
	IncNetArray ItemListNet;//[Offset: 0x210, Size: 24]
	BattleItemData[] CachItemList;//[Offset: 0x228, Size: 12]
	IncNetArray ItemListNetCache;//[Offset: 0x234, Size: 24]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	ItemHandleBase*[] ItemHandleList;//[Offset: 0x254, Size: 12]
	<ItemDefineID,ItemHandleBase*> ItemHandleMap;//[Offset: 0x260, Size: 60]
	int CapacityThreshold;//[Offset: 0x29c, Size: 4]
	float Capacity;//[Offset: 0x2a0, Size: 4]
	float OccupiedCapacity;//[Offset: 0x2a4, Size: 4]
	float SafetyBoxCapacity;//[Offset: 0x2a8, Size: 4]
	float SafetyBoxOccupiedCapacity;//[Offset: 0x2ac, Size: 4]
	int virtualitemid;//[Offset: 0x2c0, Size: 4]
	delegate ZombieModeSkillPropLevelChangedDelegate;//[Offset: 0x2c8, Size: 12]
	delegate ZombieModeSkillPropCDDelegate;//[Offset: 0x2d4, Size: 12]
	bool IsForbidAutoEquipAttachments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	int[] NeedToShowTypeList;//[Offset: 0x2ec, Size: 12]
	bool bShowBounty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	delegate BackpackShowBountyDelegate;//[Offset: 0x2fc, Size: 12]
	FString LuaFilePath;//[Offset: 0x308, Size: 12]
	bool UseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x279d08c
	float UpdateCapacity();// 0x1eed008
	void UnlockUpdateItemListReceive();// 0x279d078
	void UnequipItem(ItemDefineID DefineID);// 0x279cff0
	void TryMergeItemHandles(ItemDefineID DefineID, enum InItemStoreArea);// 0x279cf24
	int TakeItem(ItemDefineID DefineID, int Count, bool bCallHandleDrop);// 0x279ce00
	bool SwapItem(ItemDefineID DefineID1, ItemDefineID DefineID2);// 0x279cd14
	void ServerSetShowBounty(bool bInShowBounty);// 0x279cc4c
	void ServerSetCustomAccessories(int WeaponItemID, int Index, int ItemId);// 0x279cb08
	void ServerEnableItem(ItemDefineID DefineID, bool bUse);// 0x279c9d8
	int ReturnItem(ItemDefineID DefineID, int Count, bool bCallHandlePickup);// 0x279c8b4
	bool RemoveItemHandle(ItemDefineID DefineID);// 0x279c81c
	void ReceiveItemList();// 0x20e7bcc
	void ReceiveCapacity();// 0x21355ec
	bool PickupItemFromWrapperDetail(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x279c4d4
	bool PickUpItem_Default(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x279c1d4
	bool PickupItem(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x279be8c
	void PickupBattleItemOnPlane();// 0x279be78
	bool PickItem_IntoSafetyBox(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x279bb78
	bool PickItem_IntoBackpack(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x279b878
	void OnRep_specialCountLimit();// 0x279b864
	void OnRep_ItemListNet();// 0x279b850
	void OnRep_ItemList();// 0x279b83c
	void OnRep_Capacity();// 0x279b828
	void NotifyItemUpdated(ItemDefineID DefineID);// 0x279b798
	void NotifyItemRemoved(ItemDefineID DefineID);// 0x279b708
	void NotifyItemListUpdated();// 0x279b6ec
	void NotifyCapacityUpdated();// 0x279b6d0
	BattleItemHandleBase* NewItemHandle(ItemDefineID DefineID);// 0x279b638
	void ModifyItemHandleEquippingState(ItemHandleBase* ItemHandle, bool bEquipping);// 0x279b574
	void ModifyItemHandleCount(ItemHandleBase* ItemHandle, int Count);// 0x279b4b8
	void ModifyAutoPickClipType(int InAutoPickClipType);// 0x279b404
	void ModifyAimNotAutoUse(bool bAdd);// 0x279b33c
	void LockUpdateItemListReceive();// 0x279b328
	BattleItemData ItemNet2Data(out const NetArrayUnit netItem);// 0x279b164
	bool IsNeedToShowInBackpack(int TypeDefineID);// 0x279b0e4
	bool IsItemExist(out const ItemDefineID DefineID);// 0x279b044
	bool IsEnableWeaponAttachmentBindToWeapon();// 0x279b014
	bool IsCustomIgnoreAccessories(int WeaponId, int Index);// 0x279af50
	bool IsCustomAccessories(int WeaponId, int ItemId);// 0x279ae8c
	bool IsAutoUse(int ItemId);// 0x2bb69b8
	bool HasUnEquipItemByDefindIdRange(int LowValue, int HighValue);// 0x279adc8
	bool HasTagSub(int ItemId, out const FName TagName);// 0x2bb69b8
	bool HasItemBySubType(int SubType);// 0x279ad48
	bool HasItemByDefineID(ItemDefineID DefineID);// 0x279acb8
	bool HasItemByDefindIdRange(int LowValue, int HighValue);// 0x279abf4
	void HandleDropInDisuse(out const ItemDefineID DefineID, BattleItemHandleBase* ItemHandle, enum Reason, float OccupiedCapacityBeforeDisuse);// 0x279aa8c
	World* GetWorld_BP();// 0x279aa64
	int GetUnEquipItemNumByItemId(int ItemId);// 0x279a9e4
	SpecialPickInfo GetSpecialItemNow(ItemDefineID DefineID);// 0x279a944
	SpecialPickInfo GetSpecialItemBefore(int ItemResId);// 0x279a8b4
	BattleItemData GetLeastElectrictyBattleItemData(ItemDefineID DefineID, FString AdditionalDataName);// 0x279a6e0
	int GetItemSubType(int ItemId);// 0x2bb69b8
	BattleItemData[] GetItemListByDefineID(ItemDefineID DefineID);// 0x279a570
	<ItemDefineID,ItemHandleBase*> GetItemHandleMap();// 0x279a538
	ItemHandleBase*[] GetItemHandleList();// 0x279a4c8
	int GetItemCountByType(int InItemType);// 0x279a448
	int GetItemCountByItemSpecialID(int InItemSpecialID);// 0x279a3c8
	BattleItemData GetItemByDefineID(ItemDefineID DefineID);// 0x279a30c
	float GetItemAssociateWeights(BattleItemData InItemData);// 0x279a248
	BattleItemData GetFirstItemBySubType(int SubType);// 0x279a19c
	BattleItemData GetFirstItemByDefineIDIgnoreInstance(ItemDefineID DefineID);// 0x279a0e0
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(ItemDefineID DefineID);// 0x279a024
	BattleItemData[] GetAllItemList(enum InItemStoreArea);// 0x2799ecc
	enum GetAIPickupType(int ItemId);// 0x2799e44
	void ForceNetUpdate();// 0x208d7e0
	void EquipItem(ItemDefineID DefineID);// 0x2799dbc
	bool DropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x2799c9c
	bool DisuseItem(ItemDefineID DefineID, enum Reason);// 0x2799bc0
	BattleItemHandleBase* CreateItemHandleInternal(ItemDefineID DefineID);// 0x2799b28
	ItemHandleBase* CreateItemHandle(ItemDefineID DefineID);// 0x2799a90
	int ConsumeItem(ItemDefineID DefineID, int Count);// 0x27999bc
	void ClientUpdateSingleItem(const ItemDefineID DefineID);// 0x279993c
	void ClientUpdateItemData(const BattleItemData InItemData);// 0x27998a0
	void ClientRemoveItemData(const BattleItemData InItemData);// 0x2799804
	void ClientBroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x27996ec
	void ClientBroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x27995d4
	int CheckSpecialMaxCountForItem(ItemDefineID DefineID, int Count);// 0x2799500
	bool CheckSkillPropItemCanBePickup(BackpackComponent* BackpackComp, ItemDefineID DefineID);// 0x2799420
	int CheckLeftLimitCountForItem(int InItemID, int InCount);// 0x2799354
	void CheckItemEmptyInBackpack(int InItemID);// 0x27992dc
	int CheckCapacityForItem(ItemDefineID DefineID, int Count, enum InItemStoreArea);// 0x27991c4
	bool ChangeItemStoreArea(ItemDefineID DefineID, int InItemNum, enum InItemStoreArea);// 0x27990a4
	bool CanDisuseToBackpack(ItemDefineID DefineID);// 0x279900c
	bool CacheItemAssociationBeforeDisuse(ItemDefineID DefineID, enum Reason);// 0x2798f30
	void BroadcastItemOperCountDelegate(ItemDefineID DefineID, enum OperationType, int Count);// 0x2798e20
	void BroadcastItemOperationInfoDelegate(out const ItemOperationInfo ItemOperationInfo);// 0x2798d84
	void BroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x2798c74
	void BroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x2798b64
	bool AddItemHandle(ItemDefineID DefineID, ItemHandleBase* ItemHandle);// 0x2798a88
	void AddBattleItemPickupOnPlane(out ItemDefineID DefineID, out BattleItemPickupInfo pickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x27987e8

--------------------------------
Class: CustomAccessoriesData
	int WeaponId;//[Offset: 0x0, Size: 4]
	int Index;//[Offset: 0x4, Size: 4]
	int ItemId;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BattleItemPickupAfterLand
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	BattleItemPickupInfo pickupInfo;//[Offset: 0x18, Size: 72]
	enum Reason;//[Offset: 0x60, Size: 1]
	enum BattleItemClientPickupType;//[Offset: 0x61, Size: 1]

--------------------------------
Class: SpecialPickInfo
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: IncNetArray
	NetArrayUnit[] incArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NetArrayUnit
	BattleItemNet Unit;//[Offset: 0x0, Size: 64]
	bool markDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: BattleItemNet
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int Count;//[Offset: 0x18, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	enum ItemStoreArea;//[Offset: 0x1d, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x20, Size: 12]
	ItemAssociation[] Associations;//[Offset: 0x2c, Size: 12]
	int Durability;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ItemOperationInfo
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	enum BattleItemOperationType;//[Offset: 0x18, Size: 1]
	byte Reason;//[Offset: 0x19, Size: 1]
	int Count;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<enum,FName> SlotTypeToSocket;//[Offset: 0x6c0, Size: 60]
	<enum,FName> SubSlotTypeToSocket;//[Offset: 0x6fc, Size: 60]
	int gender;//[Offset: 0x738, Size: 4]
	delegate OnAvatarEquipped;//[Offset: 0x73c, Size: 12]
	AvatarSlotNameConfig DefaultSlotNameConfig;//[Offset: 0x748, Size: 120]
	<enum,AvatarSlotNameConfig> SlotNameMap;//[Offset: 0x7c0, Size: 60]
	int HeadAvatarID;//[Offset: 0x810, Size: 4]
	int PreHeadAvatarID;//[Offset: 0x814, Size: 4]
	SoftObjectPath HeadMeshSoftPath;//[Offset: 0x818, Size: 24]
	class AnimInstance* HeadAniminstanceClass;//[Offset: 0x830, Size: 4]
	bool isEnable2PassHairMarkDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x835, Size: 1]
	bool forceLodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 1]
	bool bEnableCameraModeLODControll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 1]
	<FName> HadHideBoneNames;//[Offset: 0x848, Size: 60]
	enum[] OpenResetHideBone;//[Offset: 0x884, Size: 12]
	<enum,AvatarHideBonesDesc> AvatarHideBoneMap;//[Offset: 0x890, Size: 60]
	int[] ignoreSlots;//[Offset: 0x8cc, Size: 12]
	int WholeBodyModelID;//[Offset: 0x8d8, Size: 4]
	int CurrentClothID;//[Offset: 0x8dc, Size: 4]
	int[] NeedRemoveSlot;//[Offset: 0x8e0, Size: 12]
	bool bWearingSuit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ec, Size: 1]
	<enum,FName> ClothMaterialColorName;//[Offset: 0x8f0, Size: 60]
	<enum,FName> ClothMaterialSkinName;//[Offset: 0x92c, Size: 60]
	<enum,BackpackAvatarItemColor*> RunningColorHandle;//[Offset: 0x968, Size: 60]
	<enum,BackpackAvatarItemPattern*> RunningPatternHandle;//[Offset: 0x9a4, Size: 60]
	<int,AvatarEffectGroup> LoadedEffectGroup;//[Offset: 0x9e0, Size: 60]
	delegate OnAvatarAttachEquipped;//[Offset: 0xa1c, Size: 12]
	delegate OnClothParticleEquipped;//[Offset: 0xa28, Size: 12]
	<int,AvatarAttachMeshGroup> LoadedAttachMeshGroup;//[Offset: 0xa34, Size: 60]
	int ConfigMinDistFromMainChar;//[Offset: 0xa70, Size: 4]
	int ConfigMaxDistFromMainChar;//[Offset: 0xa74, Size: 4]
	int ConfigBaseNonRenderedUpdateRate;//[Offset: 0xa78, Size: 4]
	float[] ConfigBaseVisibleDistanceFactorThesholds;//[Offset: 0xa7c, Size: 12]
	AvatarAttachMeshFrameSkipMap[] ConfigLODToFrameSkipMap;//[Offset: 0xa88, Size: 12]
	int EnableEquipAvatarPendant;//[Offset: 0xa94, Size: 4]
	bool bConsiderDefaultReplaceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa98, Size: 1]
	bool bAllowSetInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa99, Size: 1]
	<int,AdditonalAvatarStruct> AdditionalAvatarMap;//[Offset: 0xa9c, Size: 60]
	FakeHeadInfo FakeHeadInfo;//[Offset: 0xad8, Size: 56]
	class AnimInstance* SoftAnimBPClass;//[Offset: 0xb10, Size: 40]
	bool EnableCachedAvatarRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb38, Size: 1]
	bool bEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3b, Size: 1]
	bool HasVehicleAjustHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3c, Size: 1]
	int BodySlotStateChangeCount;//[Offset: 0xb40, Size: 4]
	float CutPlaneW;//[Offset: 0xb44, Size: 4]
	bool EnableClothPlaneCut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb48, Size: 1]
	SkinnedMeshComponent* ClothSkinMeshTobeCut;//[Offset: 0xb60, Size: 4]
	int TypeToInt(enum InSlotType);// 0x1f68f9c
	void TemporarySetHidedBonesVisibility(bool Visible);// 0x1f68f1c
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x1f68de0
	void Streamable_RequestAsyncLoadHandles_Download(out const ItemDefineID[] InHandleList);// 0x1f68d0c
	void Streamable_RequestAsyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x1f68c38
	bool SetSkinMaterial(int SlotID, out const ItemDefineID DefineID, BackpackAvatarHandle* InAvatarHandle);// 0x1f68b18
	void SetNormalMaterial(out const MeshPackage MeshPack, MeshComponent* MeshComp, int SlotID, BackpackAvatarHandle* InAvatarHandle);// 0x1f689a0
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow, bool bWithLog);// 0x1f68828
	void SetIgnoreSlots(BackpackAvatarHandle* avatar);// 0x1f687b0
	void SetClothParticleVisibility(int SlotID, bool Visible, bool IsForCE);// 0x1f6869c
	void SetCastPhotonShadow(bool Enable);// 0x1f6861c
	bool SetBodySuitsMaterial(out const MeshPackage MeshPack, MeshComponent* MeshComp, BackpackAvatarHandle* InAvatarHandle);// 0x1f684e0
	void SetAvatarVisibility(enum SlotType, bool Visible, bool IsForCE);// 0x1f683cc
	void SetAvatarGender(int AGender);// 0x1f66998
	void SetAvatarForceLOD(enum SlotType, int LODLevel);// 0x1f68310
	void SetAllMeshCharMode(bool bMainChar);// 0x1f68290
	void ResetOnReCycle();// 0x1f6827c
	void ResetBackpackPendant(int InSlotID, BackpackAvatarHandle* AvatarHandle);// 0x1f681c0
	void ResetAnimDynamicsByMeshComp(MeshComponent* MeshComp);// 0x1f68140
	void ResetAllAnimDynamics();// 0x1f68124
	void RequestSyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x1f68058
	void RemoveForceReplaceOnVehicle(int SlotID);// 0x1f67fe0
	void RemoveClothParticleEffect(int SlotID);// 0x1f67f68
	void RemoveAttachMesh(int SlotID);// 0x1f67ef0
	void ProcessClothSuits();// 0x1f67ed4
	void ProcessChangedVehicleSeat();// 0x2bb69b8
	void ProcessAvatarRectify();// 0x1f67eb8
	void PreProcessBeforeLoadMesh();// 0x1f67e9c
	void PreHanleEquipCloth(const BattleItemUseTarget Target, BackpackAvatarHandle* InAvatarHandle, enum Reason);// 0x2bb69b8
	void PostProcessAfterLoadMesh();// 0x1f67e80
	void OnSyncLoadBattleHandlesDone(out const BattleItemHandleBase*[] AvatarHandles);// 0x1f67db4
	void OnRespawned();// 0x1eed16c
	void OnRep_EnableClothPlaneCut();// 0x1f67da0
	void OnRep_BodySlotStateChangedInternal();// 0x1f67d8c
	void OnRep_BodySlotStateChanged();// 0x1f67d70
	void OnRecycled();// 0x1ebefdc
	void OnPlayerLeaveState(enum State);// 0x1f67cf8
	void OnPlayerEnterState(enum State);// 0x1f67c80
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x1f67bac
	void OnItemsDownloaded(out const uint32[] InDownloadItemIDs);// 0x1f67ad8
	void OnEnterOrLeaveVehicle();// 0x2bb69b8
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x1f679b8
	void OnClothParticleEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemId);// 0x2bb69b8
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID);// 0x1f6788c
	void OnAvatarLogicUnequippedEvent(int InSlotID, out const ItemDefineID OldItemID);// 0x1f677b0
	void OnAvatarLogicEquippedEvent(int InSlotID, out const ItemDefineID NewItemID, out const ItemDefineID OldItemID);// 0x1f67678
	void OnAvatarEquippedCall(enum SlotType, bool bEquipped, int ItemId);// 0x1f6756c
	void OnAvatarEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemId);// 0x2bb69b8
	void OnAvatarAttachEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemId);// 0x2bb69b8
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x1f674ec
	void OnAsyncLoadBattleHandlesDone_Download(int InAsyncLoadIndex, out const BattleItemHandleBase*[] AvatarHandles);// 0x1f673d4
	void OnAsyncLoadBattleHandlesDone(int InBodySlotStateChangeCount, out const BattleItemHandleBase*[] AvatarHandles);// 0x1f672bc
	bool NeedUseUpgradeMat(int OriginID);// 0x2bb69b8
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc, bool bForce);// 0x1f67194
	bool IsWearingAvatarNeedParachuteWind();// 0x2bb69b8
	bool IsUseDefaultReplaceModel(int InSlotID, out const ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle);// 0x1f6706c
	bool IsTeammate();// 0x1eed13c
	bool IsSelf();// 0x1eed0e4
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x1f66f70
	bool IsSameAvatarHandle(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x1f66e74
	bool IsPendantExistAndBackpackHided(int SlotType);// 0x1f66df4
	bool IsNeedModifyVehicle(int TemplateID);// 0x1f66d74
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x1f66ca8
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x1f66b78
	bool IsInVehicleTemplateConfig(int VehicleID, int TemplateID);// 0x1f66ab4
	bool IsCutPlaneOnVehicleOpen();// 0x2bb69b8
	enum IntToType(int InSlotID);// 0x1f66a40
	void InitMasterComponent();// 0x1f66a2c
	void Initialize();// 0x1f66a10
	void InitialAvatarParam(int AGender);// 0x1f66998
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x1f66920
	void InitDefaultAvatarByResID(int AGender, int Head, int Hair);// 0x1f66820
	bool InitBodyMeshByHead(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x1f6673c
	bool HideHeadMesh(MeshComponent* MasterBoneComp, SkeletalMesh* SkeletalMesh);// 0x2bb69b8
	bool HandleUnEquipCloth(out const ItemDefineID InItemID);// 0x1f666a4
	bool HandleUnEquipAdditionalCloth(out const ItemDefineID InItemID, int InSlotID);// 0x1f665c8
	void HandleHeadEquipped(BattleItemHandleBase* Handle);// 0x1f66550
	void HandleEquipInitalCloth(BattleItemHandleBase* InItemHandle);// 0x1f664d8
	bool HandleEquipCloth(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x1f663fc
	bool HandleEquipAdditionalCloth(out const ItemDefineID InItemID, int InSlotID);// 0x1f66320
	StaticMesh* GetStaticMesh(out const MeshPackage MeshPack);// 0x1f6626c
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x1f6615c
	SkeletalMesh* GetSkeletalMesh(out const MeshPackage MeshPack);// 0x1f660a8
	int GetRepalceIDOnVehicle(int OriginID);// 0x2bb69b8
	enum GetPendantSlotType();// 0x1f66078
	MeshComponent* GetMeshCompBySlot(enum SlotType);// 0x1f65ff0
	MaterialInstanceDynamic* GetMaterialBySlotName(enum InSlotType, FName SlotName);// 0x1f65f2c
	MaterialInstance* GetMaterial(out const MeshPackage MeshPack, bool bPreferUpgrade);// 0x1f65e2c
	BackpackAvatarHandle* GetLoadedHandle(int SlotID);// 0x1f65dac
	int GetEquipmentSkinItemID(int InItemID);// 0x1f65d24
	bool GetEquimentMeshBySlot(int Slot, out MeshData MeshPack);// 0x1f65c2c
	int[] GetDefaultBodyItemIDList();// 0x1f65b6c
	FName GetClothMaterialSkinName(enum SlotType, bool bSuit);// 0x1f65a98
	FName GetClothMaterialColorName(enum SlotType, bool bSuit);// 0x1f659c4
	MaterialInterface* GetCharSkinMaterial(MeshComponent* MasterMesh, enum SlotType, BackpackAvatarHandle* InAvatarHandle);// 0x1f658bc
	enum GetBPSlotNameConfigType(BackpackAvatarHandle* InAvatarHandle);// 0x2bb69b8
	BackpackAvatarItemPattern* GetAvatarItemPattern(enum InSlotType, int InPatternID, int InNumID);// 0x1f657b4
	BackpackAvatarItemColor* GetAvatarItemColor(enum InSlotType, int InColorID);// 0x1f656f0
	int GetAvatarIDBySlotID(int SlotID);// 0x1f65670
	enum GetAttachPartSlotType();// 0x1f65640
	MeshComponent* GetAttachParentMesh(int SlotID);// 0x1f655b8
	bool GetAttachMeshResRef(out const AvatarAttachMeshData MeshPack, out SoftObjectPath OutAssetRef);// 0x1f65434
	void GetAllEquipItems(out int[] EquipItems);// 0x1f65368
	void GenerateVehicleTemplateConfig();// 0x2bb69b8
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle);// 0x2bb69b8
	void ForceReplaceAvatarOnVehicle(int SlotID);// 0x1f652f0
	void FillVehicleTemplateConfig(int TemplateID, int VehicleID);// 0x1f65234
	bool EnableEquipAvatarPendantFeature();// 0x1f6520c
	bool DeleteAvatarMeshData(int InSlotID, bool MeshChanged);// 0x1f65138
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID);// 0x2bb69b8
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID);// 0x2bb69b8
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x1f65054
	void ClearAvatarHandlerFromPool(out const ItemDefineID InItemID);// 0x1f64fbc
	bool CheckShouldEquipDefaultItem(int InSlotID);// 0x1f64f34
	bool CheckIsHiddenByOther(int InItemResID);// 0x1f64eb4
	bool BPIsNeedModifyVehicle(int VehicleID, int TemplateID, int SeatIdx);// 0x2bb69b8
	void AsyncLoadClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x1f64df8
	void AsyncLoadAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x1f64d3c
	void ApplyMeshCompCollision(int SlotID);// 0x1f64cc4
	bool ApplyMaterial(MeshComponent* InMeshComponent, ItemHandleBase* InItemHandle);// 0x1f64bf8
	void ApplyClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x1f64b3c
	void ApplyAvatarCustomInfo(int InSlotID, MaterialInstanceDynamic* InMatDynamic, BackpackAvatarItemColor* InColorHandle, BackpackAvatarItemPattern* InPatternHandle);// 0x1f649f4
	void ApplyAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x1f64938
	void ApplyAnimListOverride(ItemHandleBase* InItemHandle, bool IsPutOn);// 0x1f6486c
	void AddAvatarHandleToPool(ItemHandleBase* InHandle);// 0x1f647ec

--------------------------------
Class: SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<int,FName> SlotToSocket;//[Offset: 0x3ec, Size: 60]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x428, Size: 60]
	<int,SlotMeshDesc> LoadedMeshComps;//[Offset: 0x464, Size: 60]
	<int,SlotHandleDesc> LoadedHandleDescs;//[Offset: 0x4a0, Size: 60]
	delegate OnAvatarBeginLoadMesh;//[Offset: 0x4dc, Size: 12]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x4e8, Size: 12]
	delegate OnAvatarMeshEquipped;//[Offset: 0x4f4, Size: 12]
	delegate OnAvatarMeshMaterialApplyed;//[Offset: 0x500, Size: 12]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
	bool EnableMeshOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50d, Size: 1]
	bool IsGameStateValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50e, Size: 1]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x510, Size: 12]
	int AsyncLoadReqID;//[Offset: 0x5b4, Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x5b8, Size: 4]
	bool bAutonomousLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 1]
	AvatarEntity*[] EntityTickList;//[Offset: 0x5d4, Size: 12]
	<int,AvatarEntity*> AvatarEntityList;//[Offset: 0x5e0, Size: 60]
	AvatarEntityFactory* EntityFactory;//[Offset: 0x61c, Size: 4]
	bool bLoadWithBatchBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 1]
	enum[] LoadWithBatchBodyFilterTypes;//[Offset: 0x624, Size: 12]
	int[] LoadWithBatchBodyFilterTemplateIDs;//[Offset: 0x630, Size: 12]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x1f68de0
	void Streamable_RequestAsyncLoadHandles_Download(out const ItemDefineID[] InHandleList);// 0x1f68d0c
	void Streamable_RequestAsyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x1f68c38
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow, bool bWithLog);// 0x1f68828
	void SetLoadMeshWithBatchBody(bool bFlag);// 0x2100554
	void ResetSlotSyncData();// 0x2100538
	void RequestSyncLoadMeshesWithPath(out const SoftObjectPath[] AssetPathList);// 0x2100404
	void RequestSyncLoadMeshes();// 0x21003f0
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x1eed188
	void RequestAsyncLoadMeshes();// 0x21003dc
	void RequestAsyncLoadHandles();// 0x21003c8
	void RemoveEquippedAvatar(int InSlotID);// 0x2100348
	void RemoveAllEquippedAvatar(bool bClearMasterMesh);// 0x21002c0
	void ReloadLogicAvatar(int SlotID, enum ReloadType, bool bReBuild);// 0x21001b0
	void ReloadAllLogicAvatar(enum ReloadType);// 0x2100130
	void ReloadAllEquippedAvatar(enum ReloadType);// 0x21000b0
	bool PutOnEquipmentByResID(int resID);// 0x2100028
	bool PutOffEquimentByResID(int resID);// 0x20fffa0
	void PreProcessBeforeLoadMesh();// 0x1f67e9c
	void PostProcessAfterLoadMesh();// 0x1f67e80
	void OnSyncLoadMeshesDone();// 0x20fff8c
	void OnRespawned();// 0x1eed16c
	void OnRep_BodySlotStateChanged();// 0x1f67d70
	void OnRecycled();// 0x1ebefdc
	void OnItemsDownloaded(out const uint32[] InDownloadItemIDs);// 0x1f67ad8
	void OnAvatarMeshMaterialApplyed__DelegateSignature(MeshComponent* MeshComponent);// 0x2bb69b8
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID);// 0x1f6788c
	void OnAvatarMeshEquipped__DelegateSignature(int SlotID, bool bEquipped, int ItemId);// 0x2bb69b8
	void OnAvatarBeginLoadMesh__DelegateSignature();// 0x2bb69b8
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x2bb69b8
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x1f674ec
	void OnAsyncLoadHandlesDone_Download(out const ItemHandleBase*[] AvatarHandles);// 0x20ffeb8
	void OnAsyncLoadHandlesDone(out const ItemHandleBase*[] AvatarHandles);// 0x20ffde4
	void OnAllAvatarHandleLoadedDoneSync();// 0x20ffdd0
	void OnAllAvatarHandleLoadedDone();// 0x20ffdbc
	bool NeedToHandleSlotState(out const ItemDefineID InItemID);// 0x20fbca8
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc, bool bForce);// 0x1f67194
	bool IsValidStateToRequestDownload();// 0x20ffd94
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x20ffcc8
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x1f66ca8
	bool IsItemHasEquipped(int InItemID);// 0x20fb300
	bool IsEnableItemDownload(int ItemId);// 0x2bb69b8
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x20fb1c8
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x1f8c448
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x20ffc40
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x20ffb7c
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x1f6615c
	enum GetMeshTypeBySlot(int InSlotID);// 0x20ffafc
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x20ffa7c
	MeshComponent* GetMeshCompBySlot(enum SlotType);// 0x1f65ff0
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x20ffa0c
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID);// 0x20ff8fc
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID);// 0x20ff7ec
	AvatarEntityFactory* GetEntityFactory();// 0x20ff7bc
	SoftObjectPath GetBatchDefaultBodyPath();// 0x2bb69b8
	ItemHandleBase* GetAvatarHandleExternal(out const ItemDefineID InItemID, bool bDirectCreate);// 0x20ff6d8
	AvatarEntity* GetAvatarEntity(int SlotID, FName Option, int SubSlotID);// 0x20ff5d0
	MeshComponent* GetAttachParentMesh(int SlotID);// 0x1f655b8
	MeshComponent*[] GetAllMeshComponents(bool CheckVisible);// 0x20ff4c0
	int GetAdvanceVehicleInsideSlotID();// 0x20ff490
	bool GenerateDefaultAvatarConfig(int InBaseSkinID);// 0x2bb69b8
	bool DeleteAvatarMeshData(int InSlotID, bool DestroyComp);// 0x1f65138
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x1f65054
	AvatarEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x20ff3cc
	bool CheckSlotInfo(int InSlotID, out bool isHide, out bool isReplace, out bool bVisable, out ItemDefineID OutItemID);// 0x20ff1e4
	bool CanLoadItemWithBatchBody(out const ItemDefineID InItemID);// 0x20ff14c
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x20ff078
	void BuildDownloadLoadHandleList(out const uint32[] DownloadItemIDs, out ItemDefineID[] OutRequestItemList);// 0x20fef0c
	enum BPGetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x20fedfc
	void BPCreateAvatarCustomHandle(int SlotID, int ItemId, out const AvatarCustom InCostomInfo, out AvatarCustomBase*[] OutCustomHandle);// 0x2bb69b8
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x1eecccc

--------------------------------
Class: SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<int,AvatarSlotDesc> LogicSlotDesc;//[Offset: 0x1e4, Size: 60]
	<int,AvatarSlotDesc> ViewSlotDesc;//[Offset: 0x220, Size: 60]
	NetAvatarSyncData NetAvatarData;//[Offset: 0x25c, Size: 24]
	AvatarSlotDesc[] PendingEquipItemLogic;//[Offset: 0x274, Size: 12]
	AvatarSlotDesc[] PendingUnEquipItemLogic;//[Offset: 0x280, Size: 12]
	delegate OnAvatarEquippedEvent;//[Offset: 0x28c, Size: 12]
	delegate OnAvatarUnequippedEvent;//[Offset: 0x298, Size: 12]
	delegate OnAvatarEquippedFailedEvent;//[Offset: 0x2a4, Size: 12]
	int itemType;//[Offset: 0x2b0, Size: 4]
	enum CustomType;//[Offset: 0x2b4, Size: 1]
	<int,ForceEquipSlotInfo> ForceEquipItemLogic;//[Offset: 0x2b8, Size: 60]
	bool bEnableRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 1]
	bool bEnableBPModifyRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 1]
	bool bEnableBPModifySlotType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fe, Size: 1]
	bool bEnableBPModifySlotName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ff, Size: 1]
	int SubSlotStartNum;//[Offset: 0x300, Size: 4]
	int SubSlotIntervalNum;//[Offset: 0x304, Size: 4]
	<int,enum> SlotHideStateMap;//[Offset: 0x308, Size: 60]
	int[] AlawysHideResetOperation;//[Offset: 0x3c8, Size: 12]
	bool bEnableConflictRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	delegate OnAvatarConflictProcess;//[Offset: 0x3d8, Size: 12]
	void SetForceHideState(int InSlotID, enum InForceHideState);// 0x20fbf9c
	void RemoveForceEquipItem(int SlotID);// 0x20fbf24
	void RemoveAllEquippedItem();// 0x20fbf10
	void OnRespawned();// 0x1eed16c
	void OnRep_BodySlotStateChanged();// 0x1f67d70
	void OnRecycled();// 0x1ebefdc
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x1f67bac
	void OnHandleUnequipSlot(int InSlotID);// 0x20fbe98
	void OnHandleUnequipItem(out const AvatarSyncData InSyncData);// 0x20fbdf0
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x20fbd48
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x1f679b8
	void OnAvatarUnequippedEvent__DelegateSignature(int SlotID, ItemDefineID OldItemID);// 0x2bb69b8
	void OnAvatarLogicUnequippedEvent(int InSlotID, out const ItemDefineID OldItemID);// 0x1f677b0
	void OnAvatarLogicEquippedEvent(int InSlotID, out const ItemDefineID NewItemID, out const ItemDefineID OldItemID);// 0x1f67678
	void OnAvatarEquippedFailedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x2bb69b8
	void OnAvatarEquippedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x2bb69b8
	void OnAvatarConflictProcess__DelegateSignature(int SlotID, ItemDefineID NewItemID, int[] ConflictSlotID);// 0x2bb69b8
	bool NeedToHandleSlotState(out const ItemDefineID InItemID);// 0x20fbca8
	bool ModifyViewDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x20fbb98
	bool ModifyViewDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x20fba88
	bool ModifyViewDataByForceHide(int InSlotID, bool bHide);// 0x20fb9bc
	bool ModifySyncDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x20fb8ac
	bool ModifySyncDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x20fb79c
	bool ModifySyncDataByForceHide(int InSlotID, enum HideState);// 0x20fb6d8
	int MakeStateInfo(out const int[] InSlotDesc);// 0x20fb604
	AvatarTableData MakeAvatarTableData(out const ItemDefineID InItemID);// 0x20fb538
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x1f66f70
	bool IsItemHasMutilReplaceMesh(int InSlotID, out const ItemDefineID InItemID);// 0x20fb454
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x1f66b78
	bool IsEquippedThoseItemList(out const int[] InItemListID);// 0x20fb380
	bool IsEquippedItemID(int InItemID);// 0x20fb300
	bool IsEquippedItemDefineID(out const ItemDefineID InItemID);// 0x20fb268
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x20fb1c8
	bool HasLogicEquipped(out const ItemDefineID InItemID);// 0x20fb130
	bool HandleUnequipSlot(int InSlotID);// 0x20fb0b0
	bool HandleUnequipItem(out const ItemDefineID InItemID);// 0x20fb018
	void HandleItemSlotState(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x20fae38
	void HandleItemResetOrderDesc();// 0x20fae24
	void HandleItemResetOperation();// 0x20fae10
	void HandleItemReplaceRelation();// 0x20fadfc
	void HandleItemHideRelation();// 0x20fade8
	bool HandleEquipItem(out const ItemDefineID InItemID, out const AvatarCustom InCustomInfo);// 0x20facec
	void GetViewDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x20fab44
	void GetViewDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x20fa99c
	bool GetViewDataItemID(const int InSlotID, out ItemDefineID OutItemDefineID);// 0x20fa8c0
	bool GetViewDataBySlot(const int InSlotID, out AvatarSlotDesc OutSlotDesc);// 0x20fa7a8
	void GetSyncDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x20fa600
	void GetSyncDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x20fa458
	bool GetSyncDataItemID(const int InSlotID, out ItemDefineID OutItemDefineID);// 0x20fa37c
	bool GetSyncDataBySlot(const int InSlotID, out AvatarSyncData OutSlotDesc);// 0x20fa288
	int GetLogicEquippedSlot(out const ItemDefineID InItemID);// 0x20fa1f0
	int GetItemTemplateID(out const ItemDefineID InItemID);// 0x20fa150
	enum GetForceHideState(int InSlotID);// 0x20fa0c8
	void GetEquippedItemDefineID2(int InSlotID, out ItemDefineID ItemDefineID, out ItemDefineID RealShowItemDefineID);// 0x20f9f98
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x20f9f04
	int GetAvatarSlotID(int InSubSlotID);// 0x20f9e84
	void ClientPostProcessViewDataMiddle();// 0x1f87580
	void ClientPostProcessViewDataBefore();// 0x20f9e68
	void ClientPostProcessViewDataAfter();// 0x20f9e4c
	void ClientBuildAvatarRelationData();// 0x20f9e38
	void ClientBodySlotStateChanged();// 0x20f9e24
	bool CheckItemConflictRule(out const ItemDefineID InItemID, out const AvatarTableData InAvatarData);// 0x20f9cdc
	void BuildAvatarItemMap(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x20f9afc
	bool BPClientPostProcessViewDataMiddle();// 0x20e7560
	bool BPClientPostProcessViewDataBefore();// 0x20f9acc
	bool BPClientPostProcessViewDataAfter();// 0x1f709c4
	void AddForceEquipItem(int SlotID, int ItemId, enum HideState);// 0x20f99cc

--------------------------------
Class: AvatarSlotDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	int SubSlotID;//[Offset: 0x4, Size: 4]
	ItemDefineID ItemDefineID;//[Offset: 0x8, Size: 24]
	ItemDefineID RealShowItemDefineID;//[Offset: 0x20, Size: 24]
	int gender;//[Offset: 0x38, Size: 4]
	int HideState;//[Offset: 0x3c, Size: 4]
	int ReplaceState;//[Offset: 0x40, Size: 4]
	bool IsExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	AvatarCustom CustomInfo;//[Offset: 0x48, Size: 20]
	bool bForceHideState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	enum SlotDescDiff;//[Offset: 0x5d, Size: 1]
	ItemDefineID OldItemDefineID;//[Offset: 0x60, Size: 24]

--------------------------------
Class: AvatarCustom
	enum CustomType;//[Offset: 0x0, Size: 1]
	int ColorID;//[Offset: 0x4, Size: 4]
	int PatternID;//[Offset: 0x8, Size: 4]
	int NumID;//[Offset: 0xc, Size: 4]
	int ParticleID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NetAvatarSyncData
	AvatarSyncData[] SlotSyncData;//[Offset: 0x0, Size: 12]
	int gender;//[Offset: 0xc, Size: 4]
	int BaseID;//[Offset: 0x10, Size: 4]
	int UpdateFlag;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AvatarSyncData
	int ItemId;//[Offset: 0x0, Size: 4]
	int AdditionalItemID;//[Offset: 0x4, Size: 4]
	int SlotID;//[Offset: 0x8, Size: 4]
	int SubSlotID;//[Offset: 0xc, Size: 4]
	int HideState;//[Offset: 0x10, Size: 4]
	int ReplaceState;//[Offset: 0x14, Size: 4]
	int FakeItemID;//[Offset: 0x18, Size: 4]
	enum ForceDescDiff;//[Offset: 0x1c, Size: 1]
	enum OperationType;//[Offset: 0x1d, Size: 1]
	AvatarCustom CustomInfo;//[Offset: 0x20, Size: 20]
	enum ForceHideState;//[Offset: 0x34, Size: 1]

--------------------------------
Class: ForceEquipSlotInfo

--------------------------------
Class: AvatarTableData
	int SlotID;//[Offset: 0x0, Size: 4]
	int SubSlotID;//[Offset: 0x4, Size: 4]
	int[] HideFlags;//[Offset: 0x8, Size: 12]
	int[] ReplaceFlags;//[Offset: 0x14, Size: 12]
	int[] RecoverHideFlagsWhenSelfHidden;//[Offset: 0x20, Size: 12]
	int[] RecoverReplaceFlagsWhenSelfHidden;//[Offset: 0x2c, Size: 12]
	int[] RecoverHideFlagsWhenSelfReplaced;//[Offset: 0x38, Size: 12]
	int[] RecoverReplaceFlagsWhenSelfReplaced;//[Offset: 0x44, Size: 12]
	int[] ConflictConfig;//[Offset: 0x50, Size: 12]
	int[] ConflictConfigWhenSelfReplaced;//[Offset: 0x5c, Size: 12]
	int HideBoneSlotID;//[Offset: 0x68, Size: 4]
	int HideBoneType;//[Offset: 0x6c, Size: 4]
	FName[] HideBoneNames;//[Offset: 0x70, Size: 12]

--------------------------------
Class: SlotMeshDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	MeshComponent* MeshComp;//[Offset: 0x4, Size: 8]
	ParticleGroup ParticleGroup;//[Offset: 0xc, Size: 36]

--------------------------------
Class: ParticleGroup
	ParticleSystem*[] ParticleSystemList;//[Offset: 0x0, Size: 12]
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0xc, Size: 12]
	ParticleAsset[] ParticleAssetList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ParticleAsset
	Transform Transform;//[Offset: 0x0, Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	FName ComponentTag;//[Offset: 0x60, Size: 8]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x68, Size: 12]
	bool bLimitCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]

--------------------------------
Class: SlotHandleDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	ItemHandleBase* EquipHandle;//[Offset: 0x4, Size: 8]
	AvatarCustomBase*[] CustomHandles;//[Offset: 0xc, Size: 12]
	SoftObjectPath EquipMeshAssetPath;//[Offset: 0x18, Size: 24]

--------------------------------
Class: AvatarCustomBase.CustomBase.Object
	CustomMatConfig[] MatConfigs;//[Offset: 0x30, Size: 12]
	void SetCustomMatParam(MaterialInterface* InMaterial, out const CustomMatConfig InMatConfig, bool bSetTexture);// 0x1f82f74
	void AsyncLoadCustomAssetDone();// 0x1f82f60
	bool ApplyCustomInfo();// 0x1f81a70

--------------------------------
Class: CustomBase.Object
	int CustomID;//[Offset: 0x1c, Size: 4]
	ActorComponent* OwnerComp;//[Offset: 0x20, Size: 8]
	MeshComponent* OwnerMeshComp;//[Offset: 0x28, Size: 8]
	void SetCustomID(int InCustomID);// 0x1f82be8
	MeshComponent* GetOwnerMeshComp();// 0x1f82bc0
	ActorComponent* GetOwnerComp();// 0x1f82b98
	bool ClearCustomInfo();// 0x1f81ab4
	bool ApplyCustomInfo();// 0x1f81a70

--------------------------------
Class: CustomMatConfig
	FName SlotName;//[Offset: 0x0, Size: 8]
	CustomMatScalar[] ScalarConfig;//[Offset: 0x8, Size: 12]
	CustomMatColor[] ColorConfig;//[Offset: 0x14, Size: 12]
	CustomMatTextrue[] TextrueConfig;//[Offset: 0x20, Size: 12]

--------------------------------
Class: CustomMatScalar
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	float Scalar;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CustomMatColor
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	LinearColor Color;//[Offset: 0x10, Size: 16]

--------------------------------
Class: CustomMatTextrue
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	Texture* Textrue;//[Offset: 0x10, Size: 40]
	FString TextruePath;//[Offset: 0x38, Size: 12]

--------------------------------
Class: AvatarEntity.Object
	int SlotID;//[Offset: 0x1c, Size: 4]
	int SubSlotID;//[Offset: 0x20, Size: 4]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x24, Size: 4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x28, Size: 4]
	SlotViewAvatarComponent* AvatarComponent;//[Offset: 0x2c, Size: 4]
	MeshComponent* MeshComponent;//[Offset: 0x30, Size: 4]
	MeshData EntityMeshData;//[Offset: 0x38, Size: 96]
	MeshData CachedEntityMeshData;//[Offset: 0x98, Size: 96]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb, Size: 1]
	FName SocketName;//[Offset: 0x100, Size: 8]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x108, Size: 12]
	SoftObjectPath MeshAssetPath;//[Offset: 0x118, Size: 24]
	ItemDefineID ParentDefineID;//[Offset: 0x130, Size: 24]
	<FString,AvatarEntity*> SubEntityList;//[Offset: 0x148, Size: 60]
	void UpdateVisibility();// 0x1ef5d4c
	void UnRegisterTick();// 0x1ef5d30
	void TickEntity();// 0x1ef1a58
	void SetSocketName();// 0x1ef1268
	void SetParentDefineID(ItemDefineID ParentID);// 0x1ef5ca4
	void SetAvatarVisibility(bool visibie, bool IsForCE);// 0x1ef5bcc
	void RevertEntityMeshData();// 0x1ef5bb8
	void RenderEntity(out SoftObjectPath SoftPath);// 0x1ef5adc
	void RegisterTick();// 0x1ef5ac0
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x1ef4b34
	void PutOnDefaultEquipment(enum SlotType);// 0x1ef5a40
	void OnPostRender();// 0x1ef5a24
	bool IsEntityAvailable(enum VisibilityType);// 0x1ef599c
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x1ef58d0
	void Init(int SlotID, int SubSlotID, SlotViewAvatarComponent* AvatarComponent);// 0x1ef57c8
	enum GetMeshType();// 0x1ef5798
	MeshData GetMeshData();// 0x1ef5734
	BattleItemHandleBase* GetLoadedHandle();// 0x1ef570c
	ItemDefineID GetDefineID();// 0x1ef56b8
	void EnterRenderPipeline();// 0x1ef569c
	void EnterLogicPipeline();// 0x1ef5680
	void DrawOutline(bool bEnable);// 0x1ef55f8
	bool CreateAndApplyResource(out SoftObjectPath SoftPath);// 0x1ef5514
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);// 0x1ef5448
	void ClearEquipmentLogic(bool putDefault);// 0x1ef53c0
	void ClearEntity(bool ForceClear);// 0x1ef5338
	void ApplyAnimation();// 0x1ef531c
	void ApplaySocketRelativeTransform(BackpackAvatarHandle* AvatarHandle);// 0x1ef529c

--------------------------------
Class: BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum SlotID;//[Offset: 0xf4, Size: 1]
	enum SubSlot;//[Offset: 0xf5, Size: 1]
	enum specialType;//[Offset: 0xf6, Size: 1]
	enum ForceMeshType;//[Offset: 0xf7, Size: 1]
	enum ForceLODMeshType;//[Offset: 0xf8, Size: 1]
	<enum,int> SuitConfig;//[Offset: 0xfc, Size: 60]
	MeshPackage MeshPack;//[Offset: 0x138, Size: 656]
	MeshPackage replacedMeshPack;//[Offset: 0x3c8, Size: 656]
	MeshPackage[] MutilReplacedMeshPack;//[Offset: 0x658, Size: 12]
	enum[] hiddenFlags;//[Offset: 0x664, Size: 12]
	enum[] subHiddenFlags;//[Offset: 0x670, Size: 12]
	enum[] ReplaceFlags;//[Offset: 0x67c, Size: 12]
	enum[] ignoreFlags;//[Offset: 0x688, Size: 12]
	AvatarPostOperation[] postOperation;//[Offset: 0x694, Size: 12]
	BackpackComponent* pBackpackComp;//[Offset: 0x6a0, Size: 4]
	int ItemCapacity;//[Offset: 0x6a4, Size: 4]
	int Durability;//[Offset: 0x6a8, Size: 4]
	BodyAttachmentConfig BodyAttachmentConfig;//[Offset: 0x6b4, Size: 36]
	enum hideBoneSlot;//[Offset: 0x6d8, Size: 1]
	FName hideBoneName;//[Offset: 0x6e0, Size: 8]
	FName[] hideBoneNameArray;//[Offset: 0x6e8, Size: 12]
	enum HideBoneType;//[Offset: 0x6f4, Size: 1]
	<int,AvatarPendantConfig_SpecialParam> PendantSpecialConfigMap;//[Offset: 0x6f8, Size: 60]
	AvatarPendantConfig[] PendantConfigList;//[Offset: 0x734, Size: 12]
	int PendantConfigIndex;//[Offset: 0x740, Size: 4]
	float PendantScale;//[Offset: 0x744, Size: 4]
	int DefaultExtendPendantID;//[Offset: 0x748, Size: 4]
	AvatarAnimOverrideData[] CharacterAnimListOverrideList;//[Offset: 0x74c, Size: 12]
	byte CharacterAnimOverrideType;//[Offset: 0x758, Size: 1]
	BattleItemPickupInfo CachedBattleItemPickupInfo;//[Offset: 0x760, Size: 72]
	BattleItemAdditionalData[] ArmorAttachmentAdditionalDataList;//[Offset: 0x7a8, Size: 12]
	ArmorAttachItemUnit[] CachedArmorAttachmentListBeforeDrop;//[Offset: 0x7b4, Size: 12]
	void SetItemDurability(int InDurability);// 0x1f058f0
	void SetItemCapacity(int InCapacity);// 0x1f05878
	void PreLocalHandleDisuse();// 0x1f05864
	void OnCharacterAttrChangedWithDetailEvent(Actor* Owner, FString AttrName, float deltaVal, float resultVal);// 0x1f056d8
	bool HasCustomInfo();// 0x1f056b0
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x1f055ac
	bool HandleRealShowMeshpack(out const AvatarSlotDesc InSlotDesc, Object* Outer);// 0x1f05494
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x1f05188
	bool HandleMutilReplaceMeshPack(int ReplaceState, out MeshPackage OutMeshPack, Object* Outer);// 0x1f05044
	bool HandleMutilMeshPack(out MeshPackage OutMeshPack, Object* Outer);// 0x1f04f44
	bool HandleMeshpackPostProcess(out const MeshPackage InMeshPack, out MeshPackage OutMeshPack, Object* Outer);// 0x1f04dcc
	bool HandleMeshAttached(MeshComponent* SkeletalMeshComp, Object* Outer);// 0x1f04d00
	bool HandleEnable(bool bEnable);// 0x1f04c70
	bool HandleDrop(int InCount, enum Reason);// 0x1f04ba4
	bool HandleDisuse(enum Reason);// 0x1ef599c
	BackpackComponent* GetBackpackComponent();// 0x1f04b7c
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity, enum Reason, enum DisuseReason);// 0x1f04a24
	bool BPNeedCheckCapacityInHandleDisuse(enum Reason);// 0x1f0499c
	void AutoEquipChips();// 0x1ef1a74

--------------------------------
Class: MeshPackage.AssetPackage
	StaticMesh* maleStMesh;//[Offset: 0x8, Size: 40]
	StaticMesh* femaleStMesh;//[Offset: 0x30, Size: 40]
	StaticMesh* maleLODStMesh;//[Offset: 0x58, Size: 40]
	StaticMesh* femaleLODStMesh;//[Offset: 0x80, Size: 40]
	SkeletalMesh* maleSkMesh;//[Offset: 0xa8, Size: 40]
	SkeletalMesh* femaleSkMesh;//[Offset: 0xd0, Size: 40]
	SkeletalMesh* maleLODSkMesh;//[Offset: 0xf8, Size: 40]
	SkeletalMesh* femaleLODSkMesh;//[Offset: 0x120, Size: 40]
	MaterialInterface* maleMat;//[Offset: 0x148, Size: 40]
	MaterialInterface* femaleMat;//[Offset: 0x170, Size: 40]
	MaterialSet[] additionalMaleMats;//[Offset: 0x198, Size: 12]
	MaterialSet[] additionalFemaleMats;//[Offset: 0x1a4, Size: 12]
	MaterialInterface* baseMat;//[Offset: 0x1b0, Size: 4]
	class AnimInstance* animBP;//[Offset: 0x1b4, Size: 4]
	AnimSequence* LobbyIdleAnim;//[Offset: 0x1b8, Size: 40]
	bool IsEffectOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	enum EffectCreateType;//[Offset: 0x1e1, Size: 1]
	AvatarEffectData[] EffectDataList;//[Offset: 0x1e4, Size: 12]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0x1f0, Size: 12]
	class AnimInstance* animBPClass;//[Offset: 0x200, Size: 40]
	MaterialInterface* maleUpgradeMat;//[Offset: 0x228, Size: 40]
	MaterialInterface* femaleUpgradeMat;//[Offset: 0x250, Size: 40]
	MaterialInterface* upgradeBaseMat;//[Offset: 0x278, Size: 4]

--------------------------------
Class: AssetPackage

--------------------------------
Class: MaterialSet
	MaterialInterface* targetMat;//[Offset: 0x0, Size: 40]
	enum targetSlot;//[Offset: 0x28, Size: 1]
	MaterialInterface* targetBaseMat;//[Offset: 0x30, Size: 40]

--------------------------------
Class: AvatarEffectData
	Transform Transform;//[Offset: 0x0, Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	FName ComponentTag;//[Offset: 0x60, Size: 8]
	enum ValidMethod;//[Offset: 0x68, Size: 1]
	enum ValidDevice;//[Offset: 0x69, Size: 1]
	bool bIsActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x6c, Size: 12]
	float EmitterDurationLobby;//[Offset: 0x78, Size: 4]
	float EmitterDurationFight;//[Offset: 0x7c, Size: 4]

--------------------------------
Class: AvatarAttachMeshData.AssetPackage
	Transform Transform;//[Offset: 0x10, Size: 48]
	FName AttachSocket;//[Offset: 0x40, Size: 8]
	FName SlotName;//[Offset: 0x48, Size: 8]
	StaticMesh* StaticMesh;//[Offset: 0x50, Size: 40]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x78, Size: 40]
	SkeletalMesh* LODSkeletalMesh;//[Offset: 0xa0, Size: 40]
	MaterialInterface* MatInstance;//[Offset: 0xc8, Size: 40]
	class AnimInstance* AttachAnimBP;//[Offset: 0xf0, Size: 4]
	bool bUseScreenFactorOptimizeAnimRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]

--------------------------------
Class: AvatarPostOperation
	enum SlotID;//[Offset: 0x0, Size: 1]
	enum operationWhenReplaced;//[Offset: 0x1, Size: 1]
	enum operationWhenHidden;//[Offset: 0x2, Size: 1]

--------------------------------
Class: BodyAttachmentConfig
	FText AttachmentID;//[Offset: 0x0, Size: 12]
	BodyAttachmentAttrModify[] BodyAttachmentAttrModifiers;//[Offset: 0xc, Size: 12]
	FString BodyDurabilityIndexName;//[Offset: 0x18, Size: 12]

--------------------------------
Class: BodyAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AvatarPendantConfig_SpecialParam
	FName SpecialUseExplanation;//[Offset: 0x0, Size: 8]
	Transform AdditionalTransform2SocketRelativeTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: AvatarPendantConfig
	FString ConfigName;//[Offset: 0x0, Size: 12]
	Transform SocketRelativeTransform;//[Offset: 0x10, Size: 48]
	Vector AngularLimitsMin;//[Offset: 0x40, Size: 12]
	Vector AngularLimitsMax;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: AvatarAnimOverrideData
	byte Layer;//[Offset: 0x0, Size: 1]
	class UAECharAnimListCompBase* AnimListCompClass;//[Offset: 0x4, Size: 4]
	UAECharAnimListCompBase* AnimListCompInstance;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterAsynLoadedTypeAnim[] CharacterAsynLoadedAnims;//[Offset: 0x174, Size: 12]

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0x10c, Size: 60]
	AnimationAsset*[] AnimationCatcheList;//[Offset: 0x148, Size: 12]
	bool bDisableAnimListOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]

--------------------------------
Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimListData
	int LayerID;//[Offset: 0x0, Size: 4]
	AnimationAsset* Animation;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterAsynLoadedTypeAnim
	byte AnimTypeAsynLoaded;//[Offset: 0x0, Size: 1]
	FString AnimsCatorgeryName;//[Offset: 0x4, Size: 12]
	CharacterAnimTypeAsynLoadedPhaseData Anim;//[Offset: 0x10, Size: 72]

--------------------------------
Class: CharacterAnimTypeAsynLoadedPhaseData
	FString PhaseName;//[Offset: 0x0, Size: 12]
	<byte,AnimationAsset*> PhaseAnimSoftPtr;//[Offset: 0xc, Size: 60]

--------------------------------
Class: ArmorAttachItemUnit
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	FName SlotName;//[Offset: 0x18, Size: 8]

--------------------------------
Class: AvatarEntityFactory.Object
	AvatarEntity* CreateEntity(int SlotID, int SubSlotID);// 0x1ef3110

--------------------------------
Class: AvatarSlotNameConfig
	<enum,FString> MaleSlotName;//[Offset: 0x0, Size: 60]
	<enum,FString> FemaleSlotName;//[Offset: 0x3c, Size: 60]

--------------------------------
Class: AvatarHideBonesDesc
	HideBoneData[] hideBoneSlots;//[Offset: 0x0, Size: 12]

--------------------------------
Class: BackpackAvatarItemColor.CustomHandleBase.Object
	SlotToMatColor[] SlotMatColorArray;//[Offset: 0x24, Size: 12]
	void SetCustomColorDeffered(MaterialInterface* InMaterial, out const SlotToMatColor InMatColor);// 0x1f06b9c
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x1f06ae0

--------------------------------
Class: CustomHandleBase.Object
	CharacterAvatarComponent2* OwnerComponent;//[Offset: 0x1c, Size: 8]
	void SetMaterialTexture(MaterialInterface* InMaterial, FName InName, Texture* InTexture);// 0x1f064cc
	void SetMaterialScalar(MaterialInterface* InMaterial, FName InName, float InValue);// 0x1f063c4
	void SetMaterialColor(MaterialInterface* InMaterial, FName InName, LinearColor InColor);// 0x1f062b0
	CharacterAvatarComponent2* GetOwnerComponent();// 0x1f06288

--------------------------------
Class: SlotToMatColor
	enum SlotID;//[Offset: 0x0, Size: 1]
	LinearColor[] MaskColor;//[Offset: 0x4, Size: 12]
	float GrayScale;//[Offset: 0x10, Size: 4]
	Texture* MaskGrayTexture;//[Offset: 0x18, Size: 40]

--------------------------------
Class: BackpackAvatarItemPattern.CustomHandleBase.Object
	SlotToMatPattern[] SlotMatPatternArray;//[Offset: 0x24, Size: 12]
	SoftObjectPath SoftRefPath1;//[Offset: 0x30, Size: 24]
	SoftObjectPath SoftRefPath2;//[Offset: 0x48, Size: 24]
	void SetCustomPatternDeffered(MaterialInterface* InMaterial, out const SlotToMatPattern InMatPattern);// 0x1f07400
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x1f07344
	bool IsPatternNumMode();// 0x1f0731c
	void InitPatternNumID(int InNumID);// 0x1f072a8
	void GetPatternNumTexturePath(int InNumID, out SoftObjectPath OutTexture1, out SoftObjectPath OutTexture2);// 0x2bb69b8

--------------------------------
Class: SlotToMatPattern
	enum SlotID;//[Offset: 0x0, Size: 1]
	Texture* PatternTexture;//[Offset: 0x8, Size: 40]
	float IconScale;//[Offset: 0x30, Size: 4]
	Texture* PatternTexture;//[Offset: 0x38, Size: 40]
	float IconScale;//[Offset: 0x60, Size: 4]
	LinearColor IconOffset;//[Offset: 0x64, Size: 16]

--------------------------------
Class: AvatarEffectGroup
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0x0, Size: 12]
	AvatarEffectData[] EffectDataList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AvatarAttachMeshGroup
	MeshComponent*[] AttachMeshCompList;//[Offset: 0x0, Size: 12]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AvatarAttachMeshFrameSkipMap
	int LODLevel;//[Offset: 0x0, Size: 4]
	int SkipFrame;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AdditonalAvatarStruct
	int ItemId;//[Offset: 0x0, Size: 4]
	int[] SlotIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: FakeHeadInfo
	bool bEnableFakeHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	SkeletalMesh* SoftFakeHeadMesh;//[Offset: 0x8, Size: 40]
	class AnimInstance* FakeHeadAnimBPClass;//[Offset: 0x30, Size: 4]

--------------------------------
Class: NetItemAvatarData
	ItemDefineID ItemDefineID;//[Offset: 0x0, Size: 24]
	int UpdateFlag;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ItemAvatarMatPath
	FName SlotID;//[Offset: 0x0, Size: 8]
	SoftObjectPath MatInstancePath;//[Offset: 0x8, Size: 24]
	SoftObjectPath MatBasePath;//[Offset: 0x20, Size: 24]

--------------------------------
Class: CharacterCompOutOfVisionOptimizationItem
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]

--------------------------------
Class: HUDWidgetBase.Object
	float DesignedResolution;//[Offset: 0x1c, Size: 4]
	Vector2D Position;//[Offset: 0x20, Size: 8]
	Vector2D Size;//[Offset: 0x28, Size: 8]
	Vector2D Origin;//[Offset: 0x30, Size: 8]
	Vector2D ScreenPosition;//[Offset: 0x38, Size: 8]
	bool bScaleByDesignedResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bMaintainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	float Opacity;//[Offset: 0x44, Size: 4]
	bool bIgnoreHUDBaseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	SurviveHUD* HUDOwner;//[Offset: 0x4c, Size: 4]
	STExtraPlayerController* ExtraPlayerOwner;//[Offset: 0x50, Size: 4]
	Pawn* CharacterOwner;//[Offset: 0x54, Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	float LastRenderTime;//[Offset: 0x5c, Size: 4]
	Vector2D RenderPosition;//[Offset: 0x60, Size: 8]
	Vector2D RenderSize;//[Offset: 0x68, Size: 8]
	float RenderScale;//[Offset: 0x70, Size: 4]
	Vector2D CanvasCenter;//[Offset: 0x74, Size: 8]
	Canvas* Canvas;//[Offset: 0x7c, Size: 4]
	float AspectScale;//[Offset: 0x80, Size: 4]
	Vector2D CanvasClip;//[Offset: 0x84, Size: 8]
	StructProperty*[] RenderObjectList;//[Offset: 0x8c, Size: 12]
	bool ShouldDraw(bool bShowScores);// 0x201ce6c
	void SetHidden(bool bIsHidden);// 0x201cde4
	void RenderObj_TextureAt(out HUDRenderObject_Texture TextureObject, float X, float Y, float Width, float Height);// 0x201cb74
	void RenderObj_Texture(out HUDRenderObject_Texture TextureObject, Vector2D DrawOffset);// 0x201c9e0
	Vector2D RenderObj_TextAt(out HUDRenderObject_Text TextObject, float X, float Y);// 0x201c88c
	Vector2D RenderObj_Text(out HUDRenderObject_Text TextObject, Vector2D DrawOffset);// 0x201c780
	void DrawTexture(Texture* Texture, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUL, float MaterialVL, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot, bool bApplyHUDRenderPos);// 0x201c2f4
	Vector2D DrawText(FText Text, float X, float Y, Font* Font, bool bDrawShadow, Vector2D ShadowDirection, LinearColor ShadowColor, bool bDrawOutline, LinearColor OutlineColor, float TextScale, float DrawOpacity, LinearColor DrawColor, byte TextHorzAlignment, byte TextVertAlignment, out const FontRenderInfo RenderInfo);// 0x201bb88
	void DrawMaterial(MaterialInterface* Material, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot);// 0x201b75c
	void DrawAllRenderObjects(float DeltaTime, Vector2D DrawOffset);// 0x201b6a0
	void Draw(float DeltaTime);// 0x1fd9740
	LinearColor ApplyHUDColor(LinearColor DrawColor);// 0x201b604

--------------------------------
Class: SurviveHUD.HUD.Actor.Object
	bool bIsWorldMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a0, Size: 1]
	Vector MarkerPosition;//[Offset: 0x3a4, Size: 12]
	bool bShowCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	bool bDrawCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b1, Size: 1]
	bool ShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b2, Size: 1]
	bool OBShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b3, Size: 1]
	HitPerformData HitPerform;//[Offset: 0x3b4, Size: 120]
	Texture2D* HUDMainTexture;//[Offset: 0x42c, Size: 4]
	Texture2D* CrossHairDisableTexture;//[Offset: 0x430, Size: 4]
	Texture2D* CrossHairDisablePaintingTexture;//[Offset: 0x434, Size: 4]
	bool PlayHudHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	class HUDWidgetBase[] HUDWidgetClassList;//[Offset: 0x43c, Size: 12]
	HUDWidgetBase*[] HudWidgets;//[Offset: 0x448, Size: 12]
	SimpleCrossHairData[] PriorCrossHairList;//[Offset: 0x454, Size: 12]
	Texture2D* HUDPlayerTexture;//[Offset: 0x46c, Size: 4]
	CanvasIcon Crosshair;//[Offset: 0x470, Size: 20]
	CanvasIcon ProgreesBar;//[Offset: 0x4d4, Size: 20]
	CanvasIcon BKProgreesBar;//[Offset: 0x4e8, Size: 20]
	CanvasIcon ProgressBarPlayer;//[Offset: 0x4fc, Size: 20]
	CanvasIcon Marker;//[Offset: 0x524, Size: 20]
	Texture2D* HUDWorldMapTexture;//[Offset: 0x538, Size: 4]
	CanvasIcon WORLDMAP;//[Offset: 0x53c, Size: 20]
	Texture2D* AimCrosshairTextrue;//[Offset: 0x550, Size: 4]
	float DateDrawOffsetX;//[Offset: 0x580, Size: 4]
	void SetShowDebugInfo(bool bNewDebugShow);// 0x2254b68
	void OnAsyncLoadingFinished();// 0x2254b54
	bool IsValidDamageNumber(const Actor* DamageCauser, int DamageTypeId);// 0x2254a88
	LinearColor GetPlayerNameColorByTeamID(int TeamID);// 0x22549f4
	LinearColor GetColorByTeamID(int TeamID);// 0x2254960
	void EnableCrosshair(bool bEnable);// 0x22548e4
	void DrawScreenString(FText Text, float X, float Y);// 0x22545b4
	void DrawCircleUFunction(Vector2D Center, float Radius, LinearColor Color);// 0x22544a8
	void AddHitDamageNumberWithConfig(float Damage, const Actor* HitTarget, const STExtraPlayerController* PC, int ConfigIndex, bool bIsHeadshot, bool bIsDeadlyShot, bool bIsCareTeam);// 0x2254278
	void AddHitDamageNumber(float Damage, const Actor* HitTarget, bool IsHeadShot, int MyTeamID, int EnemyTeamID, int PlayerNumPerTeam);// 0x225409c

--------------------------------
Class: HitPerformData
	WeaponCrossHairIconData[] IconList;//[Offset: 0x0, Size: 12]
	float DefaultSpread;//[Offset: 0xc, Size: 4]
	float SpreadMax;//[Offset: 0x10, Size: 4]
	float HeadExtraScale;//[Offset: 0x14, Size: 4]
	float AddSpreadScale;//[Offset: 0x18, Size: 4]
	float SpreadDecreaseSpeed;//[Offset: 0x1c, Size: 4]
	float DefaultOffset;//[Offset: 0x20, Size: 4]
	float DefaultAlpha;//[Offset: 0x24, Size: 4]
	float AlphaDecreaseSpeed;//[Offset: 0x28, Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	LinearColor HitBodyDrawColor;//[Offset: 0x30, Size: 16]
	LinearColor HitHeadDrawColor;//[Offset: 0x40, Size: 16]
	LinearColor HitToDeathDrawColor;//[Offset: 0x50, Size: 16]
	AkAudioEvent* HeadShotSound;//[Offset: 0x60, Size: 4]
	AkAudioEvent* BodyShotSound;//[Offset: 0x64, Size: 4]
	AkAudioEvent* DeadlyShotSound;//[Offset: 0x68, Size: 4]
	float CurCrosshairSpread;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: WeaponCrossHairIconData
	CanvasIcon2D Icon;//[Offset: 0x0, Size: 20]
	float Offset;//[Offset: 0x14, Size: 4]
	Vector2D IconOffset;//[Offset: 0x18, Size: 8]
	float Alpha;//[Offset: 0x20, Size: 4]
	float Scale;//[Offset: 0x24, Size: 4]
	float IconRotate;//[Offset: 0x28, Size: 4]
	float LogicRotate;//[Offset: 0x2c, Size: 4]
	bool IsSpreadEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float BlendInOutRatePerSec;//[Offset: 0x34, Size: 4]

--------------------------------
Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0, Size: 4]
	float U;//[Offset: 0x4, Size: 4]
	float V;//[Offset: 0x8, Size: 4]
	float UL;//[Offset: 0xc, Size: 4]
	float VL;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c, Size: 4]
	float MaxAttenuationRadius;//[Offset: 0x20, Size: 4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float MinimumDuration;//[Offset: 0x28, Size: 4]
	float MaximumDuration;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: SimpleCrossHairData
	FString Tag;//[Offset: 0x0, Size: 12]
	Texture2D* CrossHairTexture;//[Offset: 0xc, Size: 4]
	float Scale;//[Offset: 0x10, Size: 4]
	int Priority;//[Offset: 0x14, Size: 4]

--------------------------------
Class: CanvasIcon
	Texture* Texture;//[Offset: 0x0, Size: 4]
	float U;//[Offset: 0x4, Size: 4]
	float V;//[Offset: 0x8, Size: 4]
	float UL;//[Offset: 0xc, Size: 4]
	float VL;//[Offset: 0x10, Size: 4]

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: HUDRenderObject_Texture.HUDRenderObject
	Texture* Atlas;//[Offset: 0x30, Size: 4]
	TextureUVs UVs;//[Offset: 0x34, Size: 16]
	bool bUseTeamColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	LinearColor[] TeamColorOverrides;//[Offset: 0x48, Size: 12]
	bool bIsBorderElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool bIsSlateElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	Vector2D RenderOffset;//[Offset: 0x58, Size: 8]
	float Rotation;//[Offset: 0x60, Size: 4]
	Vector2D RotPivot;//[Offset: 0x64, Size: 8]

--------------------------------
Class: HUDRenderObject
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float RenderPriority;//[Offset: 0x8, Size: 4]
	Vector2D Position;//[Offset: 0xc, Size: 8]
	Vector2D Size;//[Offset: 0x14, Size: 8]
	LinearColor RenderColor;//[Offset: 0x1c, Size: 16]
	float RenderOpacity;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: TextureUVs
	float U;//[Offset: 0x0, Size: 4]
	float V;//[Offset: 0x4, Size: 4]
	float UL;//[Offset: 0x8, Size: 4]
	float VL;//[Offset: 0xc, Size: 4]

--------------------------------
Class: HUDRenderObject_Text.HUDRenderObject
	FText Text;//[Offset: 0x38, Size: 12]
	Font* Font;//[Offset: 0x44, Size: 4]
	float TextScale;//[Offset: 0x48, Size: 4]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	Vector2D ShadowDirection;//[Offset: 0x50, Size: 8]
	LinearColor ShadowColor;//[Offset: 0x58, Size: 16]
	bool bDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	LinearColor OutlineColor;//[Offset: 0x6c, Size: 16]
	byte HorzPosition;//[Offset: 0x7c, Size: 1]
	byte VertPosition;//[Offset: 0x7d, Size: 1]

--------------------------------
Class: FontRenderInfo
	bool bClipText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEnableShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	DepthFieldGlowInfo GlowInfo;//[Offset: 0x4, Size: 36]

--------------------------------
Class: DepthFieldGlowInfo
	bool bEnableGlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	LinearColor GlowColor;//[Offset: 0x4, Size: 16]
	Vector2D GlowOuterRadius;//[Offset: 0x14, Size: 8]
	Vector2D GlowInnerRadius;//[Offset: 0x1c, Size: 8]

--------------------------------
Class: WeaponVerifyConfig
	int VerifyIgnoreType;//[Offset: 0x0, Size: 4]
	bool bVerifySooterSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float ShooterMuzzleOffsetAdditional;//[Offset: 0x8, Size: 4]
	float ShooterMuzzleCircleAddit;//[Offset: 0xc, Size: 4]
	bool bUseCompressDataUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bVerifyAttachDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bForceAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	float MaxAttachDistanceHorizon;//[Offset: 0x14, Size: 4]
	float MaxAttachDistanceZ;//[Offset: 0x18, Size: 4]
	float MinAttachDistanceZ;//[Offset: 0x1c, Size: 4]
	float MaxGunRoot;//[Offset: 0x20, Size: 4]
	float MaxMuzzleGun;//[Offset: 0x24, Size: 4]
	float DistMuzzleGun;//[Offset: 0x28, Size: 4]
	float MuzzleHighCD;//[Offset: 0x2c, Size: 4]
	float AimFlyCD;//[Offset: 0x30, Size: 4]
	bool bVerifyRpgController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bVerifyFakeTraceBock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	float MaxBackTraceSize;//[Offset: 0x38, Size: 4]

--------------------------------
Class: CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<FName,FString> CrossHairNameAndTextureMap;//[Offset: 0x100, Size: 60]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x13c, Size: 12]
	LinearColor MainTargetColor;//[Offset: 0x148, Size: 16]
	LinearColor SecondaryTargetColor;//[Offset: 0x158, Size: 16]
	LinearColor WeaponSightLockColor;//[Offset: 0x168, Size: 16]
	LinearColor WeaponSightLockHDRColor;//[Offset: 0x178, Size: 16]
	<int,int> SightTypeToIndex;//[Offset: 0x188, Size: 60]
	<byte,SightMaterialModify> SightMaterialModifyMap;//[Offset: 0x1c4, Size: 60]
	WeaponCrossHairPerformData[] CrossHairDataOverride;//[Offset: 0x200, Size: 12]
	float PistolCenterDownDis;//[Offset: 0x20c, Size: 4]
	bool bDrawDebugCrossHairCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	float DrawDebugCrossHairCircleAreaSteps;//[Offset: 0x214, Size: 4]
	bool bDrawDebugSpreadCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	float DrawDebugSpreadCircleAreaSteps;//[Offset: 0x21c, Size: 4]
	bool bForceHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	float RotateAngle;//[Offset: 0x224, Size: 4]
	STExtraPlayerController* PlayerController;//[Offset: 0x228, Size: 4]
	ShootWeaponEntity* ShootWeaponEntity;//[Offset: 0x230, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x234, Size: 4]
	BulletTrackComponent* BulletTrackComp;//[Offset: 0x238, Size: 4]
	Texture2D* CrossHairTextureNormal;//[Offset: 0x23c, Size: 4]
	Texture2D* CrossHairEmptyHand;//[Offset: 0x240, Size: 4]
	Texture2D* CrossHairPistolEdge;//[Offset: 0x244, Size: 4]
	Texture2D* CrossHairPistolCenter;//[Offset: 0x248, Size: 4]
	Texture2D* CrossHairShotGun;//[Offset: 0x24c, Size: 4]
	bool bInitAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 1]
	void UpdateComponentTick();// 0x1f7ff54
	void DrawWeaponCrosshairInner(HUDWidgetBase* WeaponHudWidget, float DeltaTime);// 0x1f7fe90
	void DrawSpreadEnd();// 0x1f7fe7c
	void DrawDebugPointEnd();// 0x1f7fe68

--------------------------------
Class: WeaponCrossHairPerformData
	WeaponCrossHairIconData[] Crosshair;//[Offset: 0x0, Size: 12]
	enum SpreadType;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SightMaterialModify
	SightMaterialModifyItem[] AimMaterialModify;//[Offset: 0x0, Size: 12]
	SightMaterialModifyItem[] NoAimMaterialModify;//[Offset: 0xc, Size: 12]

--------------------------------
Class: SightMaterialModifyItem
	int MaterialID;//[Offset: 0x0, Size: 4]
	FName ParameterName;//[Offset: 0x8, Size: 8]
	LinearColor Value;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ShootWeaponEntity.WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x400, Size: 4]
	float BulletFireSpeed;//[Offset: 0x404, Size: 4]
	bool bAddOwnerOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	float MaxVelocityOffsetAddRate;//[Offset: 0x40c, Size: 4]
	int MaxBulletNumInOneClip;//[Offset: 0x410, Size: 4]
	int MaxBulletNumInBarrel;//[Offset: 0x414, Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x418, Size: 4]
	ExtendBulletNumAttachment[] ReplaceExtendMaxBulletNumList;//[Offset: 0x41c, Size: 12]
	float ShootInterval;//[Offset: 0x428, Size: 4]
	int ShootIntervalShowNumber;//[Offset: 0x42c, Size: 4]
	float ExtraShootInterval;//[Offset: 0x430, Size: 4]
	int ExtraShootIntervalShowNumber;//[Offset: 0x434, Size: 4]
	<int,float> VolatileShootIntervalMap;//[Offset: 0x438, Size: 60]
	bool bHasSingleFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 1]
	bool bHasAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x475, Size: 1]
	bool bHasBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x476, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x477, Size: 1]
	int BurstShootBulletsNum;//[Offset: 0x478, Size: 4]
	bool bHasVolleyFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	int VolleyShootBulletsNum;//[Offset: 0x480, Size: 4]
	float VolleyBulletSpreadFactor;//[Offset: 0x484, Size: 4]
	FName[] VolleyMuzzleSocketNameList;//[Offset: 0x488, Size: 12]
	float BurstShootInterval;//[Offset: 0x494, Size: 4]
	float BurstShootCD;//[Offset: 0x498, Size: 4]
	int BulletNumSingleShot;//[Offset: 0x49c, Size: 4]
	FName MuzzleSocketName;//[Offset: 0x4a0, Size: 8]
	FName DefaultMuzzleSocketName;//[Offset: 0x4a8, Size: 8]
	FName SilencerSocketName;//[Offset: 0x4b0, Size: 8]
	FName FiringSuppressorSocketName;//[Offset: 0x4b8, Size: 8]
	FName ShellDropSocketName;//[Offset: 0x4c0, Size: 8]
	FName ScopeAimCameraSocketName;//[Offset: 0x4c8, Size: 8]
	float ImpactEffectSkipDistance;//[Offset: 0x4d0, Size: 4]
	float MaxImpactEffectSkipTime;//[Offset: 0x4d4, Size: 4]
	byte ShootType;//[Offset: 0x4d8, Size: 1]
	int ShootTotalType;//[Offset: 0x4dc, Size: 4]
	bool ADSManualStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 1]
	float WeaponWarnUpTime;//[Offset: 0x4e4, Size: 4]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0x4e8, Size: 20]
	WeaponHitPartCoff WeaponHitPartCoffZombie;//[Offset: 0x4fc, Size: 20]
	float BaseImpactDamage;//[Offset: 0x510, Size: 4]
	float VehicleDamageScale;//[Offset: 0x514, Size: 4]
	float BulletMomentum;//[Offset: 0x518, Size: 4]
	float BulletRange;//[Offset: 0x51c, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x520, Size: 4]
	byte ImpactDirType;//[Offset: 0x524, Size: 1]
	SRangeAttenuateConfig[] RangeAttenuate;//[Offset: 0x528, Size: 12]
	float RangeModifier;//[Offset: 0x534, Size: 4]
	float ReferenceDistance;//[Offset: 0x538, Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x53c, Size: 4]
	class DamageType* DamageType;//[Offset: 0x540, Size: 4]
	ItemDefineID BulletType;//[Offset: 0x548, Size: 24]
	ItemDefineID ReplaceBulletType;//[Offset: 0x560, Size: 24]
	bool bHasInfiniteClips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	bool bClipHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 1]
	int InitBulletInClip;//[Offset: 0x57c, Size: 4]
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	float TraceDistance;//[Offset: 0x584, Size: 4]
	float MaxValidHitTime;//[Offset: 0x588, Size: 4]
	<byte,float> BreakThroughDampRateConfig;//[Offset: 0x58c, Size: 60]
	float MaxDamageRate;//[Offset: 0x5c8, Size: 4]
	<byte,int> BreakThroughMaxNumConfig;//[Offset: 0x5cc, Size: 60]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 1]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0x60c, Size: 4]
	WeaponVisualBulletClientModeConfig VisualBulletTrackConfig;//[Offset: 0x610, Size: 88]
	Vector2D LocalOBBulletLaunchRangeFromMuzzle;//[Offset: 0x668, Size: 8]
	Vector2D LocalSimulateBulletLaunchRangeFromMuzzle;//[Offset: 0x670, Size: 8]
	float BulletTrackDistanceFix;//[Offset: 0x678, Size: 4]
	float DamageImpulse;//[Offset: 0x67c, Size: 4]
	byte ReloadType;//[Offset: 0x680, Size: 1]
	float PreFireTime;//[Offset: 0x684, Size: 4]
	float PostFireTime;//[Offset: 0x688, Size: 4]
	float PostReloadTime;//[Offset: 0x68c, Size: 4]
	float ReloadDurationStart;//[Offset: 0x690, Size: 4]
	float ReloadDurationStartTacticalOffset;//[Offset: 0x694, Size: 4]
	float ReloadDurationLoop;//[Offset: 0x698, Size: 4]
	float ReloadTime;//[Offset: 0x69c, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x6a0, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x6a4, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x6a8, Size: 4]
	float ReloadRate;//[Offset: 0x6ac, Size: 4]
	FName ReloadAllTIDName;//[Offset: 0x6b0, Size: 8]
	FName ReloadTacticalTIDName;//[Offset: 0x6b8, Size: 8]
	bool bUseSpecificBulletNumOnReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	int ReloadSpecificBulletNum;//[Offset: 0x6c4, Size: 4]
	bool ReloadWithNoCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 1]
	bool InitAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c9, Size: 1]
	bool bAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ca, Size: 1]
	bool bAutoSwitchWhenNoBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cb, Size: 1]
	float DropDuration;//[Offset: 0x6cc, Size: 4]
	bool bStoreBulletsToWrapperWhenDisUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 1]
	int InterruptReloadByFireMinBulletThreshold;//[Offset: 0x6d4, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x6d8, Size: 252]
	AutoAimingConfigByGameMode[] AdjustAutoAimingConfigByModeList;//[Offset: 0x7d4, Size: 12]
	bool IsSupportAutoAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 1]
	SRecoilInfo RecoilInfo;//[Offset: 0x7e4, Size: 100]
	float AccessoriesVRecoilFactor;//[Offset: 0x848, Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0x84c, Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0x850, Size: 4]
	SDeviation DeviationInfo;//[Offset: 0x854, Size: 68]
	float ShotGunCenterPerc;//[Offset: 0x898, Size: 4]
	float ShotGunVerticalSpread;//[Offset: 0x89c, Size: 4]
	float ShotGunHorizontalSpread;//[Offset: 0x8a0, Size: 4]
	float GameDeviationFactor;//[Offset: 0x8a4, Size: 4]
	float GameDeviationAccuracy;//[Offset: 0x8a8, Size: 4]
	float AccessoriesDeviationFactor;//[Offset: 0x8ac, Size: 4]
	byte CrossHairType;//[Offset: 0x8b0, Size: 1]
	float CrossHairInitialSize;//[Offset: 0x8b4, Size: 4]
	float CrossHairBurstSpeed;//[Offset: 0x8b8, Size: 4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0x8bc, Size: 4]
	float VehicleWeaponDeviationAngle;//[Offset: 0x8c0, Size: 4]
	bool bDrawCrosshairWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c4, Size: 1]
	FName DefaultScopeSocket;//[Offset: 0x8c8, Size: 8]
	FName DefaultGripSocket;//[Offset: 0x8d0, Size: 8]
	FName DefaultGunStockSocket;//[Offset: 0x8d8, Size: 8]
	FName DefaultMagSocket;//[Offset: 0x8e0, Size: 8]
	float WeaponBodyLength;//[Offset: 0x8e8, Size: 4]
	FName[] OpticalSightAttachmentSocketNameList;//[Offset: 0x8ec, Size: 12]
	float WeaponAimFOV;//[Offset: 0x8fc, Size: 4]
	float WeaponAimInTime;//[Offset: 0x900, Size: 4]
	float WeaponAimPitchRate;//[Offset: 0x904, Size: 4]
	float WeaponAimYawRate;//[Offset: 0x908, Size: 4]
	float GameMotionYawRate;//[Offset: 0x90c, Size: 4]
	float GameMotionPitchRate;//[Offset: 0x910, Size: 4]
	float ForegripParam;//[Offset: 0x914, Size: 4]
	float MagParam;//[Offset: 0x918, Size: 4]
	bool SimulateMagParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91c, Size: 1]
	float SensitiveFireYawRate;//[Offset: 0x920, Size: 4]
	byte SightType;//[Offset: 0x924, Size: 1]
	float SensitiveFirePitchRate;//[Offset: 0x928, Size: 4]
	byte SightVisionType;//[Offset: 0x92c, Size: 1]
	ItemDefineID DefaultScopeID;//[Offset: 0x930, Size: 24]
	float MaxBulletImpactFXClampDistance;//[Offset: 0x948, Size: 4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0x94c, Size: 4]
	float RecoilKickADS;//[Offset: 0x950, Size: 4]
	float ExtraHitPerformScale;//[Offset: 0x954, Size: 4]
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0x958, Size: 4]
	bool bAutoExitScopeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95c, Size: 1]
	enum ReleaseFireType;//[Offset: 0x95d, Size: 1]
	bool bEnableScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95e, Size: 1]
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95f, Size: 1]
	float LockAnimPitchDegree;//[Offset: 0x960, Size: 4]
	float LockAnimPitchDegreeCrouch;//[Offset: 0x964, Size: 4]
	float AnimationKick;//[Offset: 0x968, Size: 4]
	int ReloadAnimSlot;//[Offset: 0x96c, Size: 4]
	bool ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x970, Size: 1]
	bool bEnableNightVersionWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x971, Size: 1]
	float HandleFolderFactorScale;//[Offset: 0x974, Size: 4]
	bool bShowBarrelBulletNumUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x978, Size: 1]
	bool bRecordHitDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x979, Size: 1]
	int ConstantWeaponDurability;//[Offset: 0x97c, Size: 4]
	int ShootReduceDurabilityAmount;//[Offset: 0x980, Size: 4]
	Rotator[] RearSightRotConfig;//[Offset: 0x984, Size: 12]
	FName[] RearSightSocketConfig;//[Offset: 0x990, Size: 12]
	Rotator[] RearSightHandRotOffsetConfig;//[Offset: 0x99c, Size: 12]
	int RearSightRotIndex;//[Offset: 0x9a8, Size: 4]
	bool bForceUseShootIntervalConsistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ac, Size: 1]
	int MaxFireNumPerFrame;//[Offset: 0x9b0, Size: 4]
	byte[] CoronaEffectCfg;//[Offset: 0xd5c, Size: 12]
	ItemDefineID GetBulletType();// 0x20ec670

--------------------------------
Class: STExtraShootWeaponBulletBase.Actor.Object
	BulletMovementComponent* PMComp;//[Offset: 0x334, Size: 4]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	int MaxNoGravityRange;//[Offset: 0x33c, Size: 4]
	float LaunchGravityScale;//[Offset: 0x340, Size: 4]
	int PunctureTimes;//[Offset: 0x344, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x348, Size: 4]
	class DamageType* DamageType;//[Offset: 0x34c, Size: 4]
	ParticleSystem* NormalTailFX;//[Offset: 0x350, Size: 4]
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	bool bDrawImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x355, Size: 1]
	ParticleSystem* BeamTailFX;//[Offset: 0x358, Size: 4]
	Vector RootScale;//[Offset: 0x35c, Size: 12]
	bool bUseOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	bool bHasFlyPastEarSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 1]
	Vector ShootDir;//[Offset: 0x36c, Size: 12]
	bool bIgnoreCahracterRootCompImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	float ShowBulletEffectMinDistance;//[Offset: 0x37c, Size: 4]
	STExtraShootWeapon* OwningShootWeapon;//[Offset: 0x470, Size: 4]
	delegate OnResetBullet;//[Offset: 0x474, Size: 12]
	delegate OnBulletImpact;//[Offset: 0x480, Size: 12]
	delegate OnLaunchBullet;//[Offset: 0x48c, Size: 12]
	delegate OnRecycleBullet;//[Offset: 0x498, Size: 12]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x4a4, Size: 4]
	Actor* WeaponOwnerPawn;//[Offset: 0x4a8, Size: 4]
	float WeaponFloorHeight;//[Offset: 0x558, Size: 4]
	Vector WeaponOwnerPos;//[Offset: 0x55c, Size: 12]
	byte CachedOwnerRole;//[Offset: 0x568, Size: 1]
	uint32 OwnerPlayerKey;//[Offset: 0x56c, Size: 4]
	bool bEnableClientBlockVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	bool bEnableUpdateBulletTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x571, Size: 1]
	int MaxTraceTimes;//[Offset: 0x574, Size: 4]
	bool bEnableFillSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	bool IngoreSameGroupBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 1]
	void ResetBulletDelegate__DelegateSignature();// 0x2bb69b8
	void ReloadNoEncodeAttr();// 0x1ecd2d8
	void OnShowBulletEffect();// 0x2bb69b8
	void OnRecycleBulletDelegate__DelegateSignature();// 0x2bb69b8
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x1f3d570
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0x2bb69b8
	void OnImpact(out const HitResult _ImpactResult);// 0x1f3d4cc
	bool NeedCheckBulletFlySound();// 0x221ce2c
	void LaunchBulletDelegate__DelegateSignature();// 0x2bb69b8
	float GetMaxBulletFlySpeed();// 0x20e4a04
	Controller* GetInstigatorControllerSafe();// 0x221ce04
	STExtraBaseCharacter* GetInstigatorCharacter();// 0x221cddc
	bool ConditionalDestroyBullet(out const HitResult _ImpactResult);// 0x221cd38
	bool ClientVerifyBlock(out const Vector MuzzlePos, out const Vector ImpactPoint, Actor* Weapon, Actor* ImpactActor);// 0x221cbc8

--------------------------------
Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreBounceReflectOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x156, Size: 1]
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x157, Size: 1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool bCheckBodyInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x15c, Size: 4]
	void ResumeMoveAfterImpactWithNoLost();// 0x1f5d2a8
	void ResetTickDelay();// 0x1f5d28c
	void IgnoreBounceReflectOnce();// 0x1f5d270
	void ForceStop();// 0x1f5d25c

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xf4, Size: 4]
	float MaxSpeed;//[Offset: 0xf8, Size: 4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc, Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfc, Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfc, Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xfc, Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfc, Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfc, Size: 1]
	float PreviousHitTime;//[Offset: 0x100, Size: 4]
	Vector PreviousHitNormal;//[Offset: 0x104, Size: 12]
	float ProjectileGravityScale;//[Offset: 0x110, Size: 4]
	float Buoyancy;//[Offset: 0x114, Size: 4]
	float Bounciness;//[Offset: 0x118, Size: 4]
	float Friction;//[Offset: 0x11c, Size: 4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x120, Size: 4]
	delegate OnProjectileBounce;//[Offset: 0x124, Size: 12]
	delegate OnProjectileStop;//[Offset: 0x130, Size: 12]
	float HomingAccelerationMagnitude;//[Offset: 0x13c, Size: 4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x140, Size: 8]
	float MaxSimulationTimeStep;//[Offset: 0x148, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x14c, Size: 4]
	int BounceAdditionalIterations;//[Offset: 0x150, Size: 4]
	void StopSimulating(out const HitResult HitResult);// 0x4510f5c
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x4510ee4
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x2bb69b8
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x2bb69b8
	Vector LimitVelocity(Vector NewVelocity);// 0x4510e50

--------------------------------
Class: STEShootWeaponBulletImpactEffect.Actor.Object
	<Vector2D,HitEffectItemDataList> HitEffectDirectionOverrideDataMap;//[Offset: 0x2fc, Size: 60]
	ParticleSystem* DefaultFX;//[Offset: 0x338, Size: 4]
	ParticleSystem* ConcreteFX;//[Offset: 0x33c, Size: 4]
	ParticleSystem* DirtFX;//[Offset: 0x340, Size: 4]
	ParticleSystem* WaterFX;//[Offset: 0x344, Size: 4]
	ParticleSystem* MetalFX;//[Offset: 0x348, Size: 4]
	ParticleSystem* WoodFX;//[Offset: 0x34c, Size: 4]
	ParticleSystem* GlassFX;//[Offset: 0x350, Size: 4]
	ParticleSystem* GrassFX;//[Offset: 0x354, Size: 4]
	ParticleSystem* FleshFX;//[Offset: 0x358, Size: 4]
	ParticleSystem* SteelFX;//[Offset: 0x35c, Size: 4]
	ParticleSystem* SandbagFX;//[Offset: 0x360, Size: 4]
	ParticleSystem* SandFX;//[Offset: 0x364, Size: 4]
	ParticleSystem* ClothFX;//[Offset: 0x368, Size: 4]
	ParticleSystem* PlasticFX;//[Offset: 0x36c, Size: 4]
	ParticleSystem* LeatherFX;//[Offset: 0x370, Size: 4]
	ParticleSystem* CeramicsFX;//[Offset: 0x374, Size: 4]
	ParticleSystem* PaperFX;//[Offset: 0x378, Size: 4]
	ParticleSystem* StoneFX;//[Offset: 0x37c, Size: 4]
	ParticleSystem* SnowFX;//[Offset: 0x380, Size: 4]
	ParticleSystem* PopCanFX;//[Offset: 0x384, Size: 4]
	ParticleSystem* PyreflyFX;//[Offset: 0x388, Size: 4]
	ParticleSystem* LeafFX;//[Offset: 0x38c, Size: 4]
	ParticleSystem* CarFX;//[Offset: 0x390, Size: 4]
	ParticleSystem* AsphaltFX;//[Offset: 0x394, Size: 4]
	ParticleSystem* IceFX;//[Offset: 0x398, Size: 4]
	ParticleSystem* FleshFXNormal;//[Offset: 0x39c, Size: 4]
	ParticleSystem* FleshFXExpand;//[Offset: 0x3a0, Size: 4]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	AkAudioEvent* DefaultSound;//[Offset: 0x3a8, Size: 4]
	AkAudioEvent* ConcreteSound;//[Offset: 0x3ac, Size: 4]
	AkAudioEvent* DirtSound;//[Offset: 0x3b0, Size: 4]
	AkAudioEvent* WaterSound;//[Offset: 0x3b4, Size: 4]
	AkAudioEvent* MetalSound;//[Offset: 0x3b8, Size: 4]
	AkAudioEvent* WoodSound;//[Offset: 0x3bc, Size: 4]
	AkAudioEvent* GlassSound;//[Offset: 0x3c0, Size: 4]
	AkAudioEvent* GrassSound;//[Offset: 0x3c4, Size: 4]
	AkAudioEvent* FleshSound;//[Offset: 0x3c8, Size: 4]
	AkAudioEvent* SteelSound;//[Offset: 0x3cc, Size: 4]
	AkAudioEvent* SandbagSound;//[Offset: 0x3d0, Size: 4]
	AkAudioEvent* SandSound;//[Offset: 0x3d4, Size: 4]
	AkAudioEvent* ClothSound;//[Offset: 0x3d8, Size: 4]
	AkAudioEvent* PlasticSound;//[Offset: 0x3dc, Size: 4]
	AkAudioEvent* LeatherSound;//[Offset: 0x3e0, Size: 4]
	AkAudioEvent* CeramicsSound;//[Offset: 0x3e4, Size: 4]
	AkAudioEvent* PaperSound;//[Offset: 0x3e8, Size: 4]
	AkAudioEvent* StoneSound;//[Offset: 0x3ec, Size: 4]
	AkAudioEvent* SnowSound;//[Offset: 0x3f0, Size: 4]
	AkAudioEvent* PopCanSound;//[Offset: 0x3f4, Size: 4]
	AkAudioEvent* PyreflySound;//[Offset: 0x3f8, Size: 4]
	AkAudioEvent* LeafSound;//[Offset: 0x3fc, Size: 4]
	AkAudioEvent* CarSound;//[Offset: 0x400, Size: 4]
	AkAudioEvent* AsphaltSound;//[Offset: 0x404, Size: 4]
	AkAudioEvent* IceSound;//[Offset: 0x408, Size: 4]
	AkAudioEvent* WindBreakSound;//[Offset: 0x40c, Size: 4]
	AkAudioEvent* ShootFeedbackSound;//[Offset: 0x410, Size: 4]
	AkAudioEvent* ShootShieldFeedbackSound;//[Offset: 0x414, Size: 4]
	DecalData DefaultDecal;//[Offset: 0x418, Size: 28]
	DecalData ConcreteDecal;//[Offset: 0x434, Size: 28]
	DecalData DirtDecal;//[Offset: 0x450, Size: 28]
	DecalData WaterDecal;//[Offset: 0x46c, Size: 28]
	DecalData MetalDecal;//[Offset: 0x488, Size: 28]
	DecalData WoodDecal;//[Offset: 0x4a4, Size: 28]
	DecalData GrassDecal;//[Offset: 0x4c0, Size: 28]
	DecalData GlassDecal;//[Offset: 0x4dc, Size: 28]
	DecalData FleshDecal;//[Offset: 0x4f8, Size: 28]
	DecalData SteelDecal;//[Offset: 0x514, Size: 28]
	DecalData SandbagDecal;//[Offset: 0x530, Size: 28]
	DecalData SandDecal;//[Offset: 0x54c, Size: 28]
	DecalData ClothDecal;//[Offset: 0x568, Size: 28]
	DecalData PlasticDecal;//[Offset: 0x584, Size: 28]
	DecalData LeatherDecal;//[Offset: 0x5a0, Size: 28]
	DecalData CeramicsDecal;//[Offset: 0x5bc, Size: 28]
	DecalData PaperDecal;//[Offset: 0x5d8, Size: 28]
	DecalData StoneDecal;//[Offset: 0x5f4, Size: 28]
	DecalData SnowDecal;//[Offset: 0x610, Size: 28]
	DecalData PopCanDecal;//[Offset: 0x62c, Size: 28]
	DecalData PyreflyDecal;//[Offset: 0x648, Size: 28]
	DecalData LeafDecal;//[Offset: 0x664, Size: 28]
	DecalData CarDecal;//[Offset: 0x680, Size: 28]
	DecalData AsphaltDecal;//[Offset: 0x69c, Size: 28]
	DecalData IceDecal;//[Offset: 0x6b8, Size: 28]
	BulletHitInfoUploadData SurfaceHit;//[Offset: 0x6e0, Size: 272]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f0, Size: 1]
	bool bIgnoreDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f1, Size: 1]
	bool bAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f2, Size: 1]
	DecalComponent* ImpactDecalComp;//[Offset: 0x7f4, Size: 4]
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0x7f8, Size: 4]
	Vector DecalScale;//[Offset: 0x800, Size: 12]
	SceneComponent* TargetImpactComp;//[Offset: 0x820, Size: 4]
	ParticleSystem* GreenBloodFleshFX;//[Offset: 0x89c, Size: 4]
	<int,ParticleSystem*> WeaponAvatarSpecialFleshFX;//[Offset: 0x8a0, Size: 60]
	bool LoadNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 1]
	bool UseNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e1, Size: 1]
	void TimerHideDecal();// 0x2140b50
	void OnLoadImpactFxAsyncCallBack(SoftObjectPath ImpactFxPath, float DistanceScaler, byte HitSurfaceType);// 0x214095c
	void OnHandleImpactFx(ParticleSystem* ImpactFX, float DistanceScaler, byte HitSurfaceType);// 0x214085c
	SoftObjectPath GetDirectionImpactFXPath(byte SurfaceType, float NormalDegree, float DistanceScaler, byte HitSurfaceType, const Actor* ImpactCauser);// 0x2140670
	bool GetDirectionImpactFXAsync(byte SurfaceType, float NormalDegree, float DistanceScaler, byte HitSurfaceType, const Actor* ImpactCauser);// 0x21404d4

--------------------------------
Class: HitEffectItemDataList
	<byte,ParticleSystem*> ItemDataListMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: DecalData
	float DecalSize;//[Offset: 0x0, Size: 4]
	float LifeSpan;//[Offset: 0x4, Size: 4]
	Material* DecalMaterial;//[Offset: 0x8, Size: 4]
	float ImpactEffectStartScaleDistance;//[Offset: 0xc, Size: 4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x10, Size: 4]
	float ImpactEffectStartScaleValue;//[Offset: 0x14, Size: 4]
	float ImpactEffectEndScaleValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BulletHitInfoUploadData
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector VictimLocation;//[Offset: 0x24, Size: 12]
	Vector BulletPos;//[Offset: 0x30, Size: 12]
	Vector ShootMomentMuzzlePos;//[Offset: 0x3c, Size: 12]
	Vector2D ShootDir2D;//[Offset: 0x48, Size: 8]
	byte SurfaceType;//[Offset: 0x50, Size: 1]
	uint32 ShootID;//[Offset: 0x54, Size: 4]
	int BulletTypeSpecialID;//[Offset: 0x58, Size: 4]
	uint16 CompensationTime;//[Offset: 0x5c, Size: 2]
	Actor* Actor;//[Offset: 0x60, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x68, Size: 8]
	int TimeStamp;//[Offset: 0x70, Size: 4]
	int ClientShootTime;//[Offset: 0x74, Size: 4]
	byte SpecialBulletID;//[Offset: 0x78, Size: 1]
	byte HitBodyType;//[Offset: 0x79, Size: 1]
	uint32 CharacterImpactOffsetSquared;//[Offset: 0x7c, Size: 4]
	float MuzzleFloorHeight;//[Offset: 0x80, Size: 4]
	Vector WeaponOwnerHeadPos;//[Offset: 0x84, Size: 12]
	float DamageRate;//[Offset: 0x90, Size: 4]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	Vector GunTailPos;//[Offset: 0x98, Size: 12]
	FName BoneName;//[Offset: 0xa8, Size: 8]
	Transform BoneTrans;//[Offset: 0xb0, Size: 48]
	byte ImpactEffectMask;//[Offset: 0xe0, Size: 1]

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x260, Size: 4]
	int SortOrder;//[Offset: 0x264, Size: 4]
	float FadeScreenSize;//[Offset: 0x268, Size: 4]
	float FadeStartDelay;//[Offset: 0x26c, Size: 4]
	float FadeDuration;//[Offset: 0x270, Size: 4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 1]
	Vector DecalSize;//[Offset: 0x278, Size: 12]
	void SetSortOrder(int Value);// 0x4420318
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x44202a0
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x4420198
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x4420120
	float GetFadeStartDelay();// 0x44200f8
	float GetFadeDuration();// 0x44200d0
	MaterialInterface* GetDecalMaterial();// 0x44200a8
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x4420078

--------------------------------
Class: ExtendBulletNumAttachment
	int TypeSpecificID;//[Offset: 0x0, Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponHitPartCoff
	float Head;//[Offset: 0x0, Size: 4]
	float Body;//[Offset: 0x4, Size: 4]
	float Limbs;//[Offset: 0x8, Size: 4]
	float Hand;//[Offset: 0xc, Size: 4]
	float Foot;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SRangeAttenuateConfig
	int rangeStart;//[Offset: 0x0, Size: 4]
	int rangeEnd;//[Offset: 0x4, Size: 4]
	float rangeAttenuateFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeaponVisualBulletClientModeConfig
	WeaponVisualBulletCameraModeConfig AutonomousClientSetting;//[Offset: 0x0, Size: 24]
	WeaponVisualBulletCameraModeConfig OBPawnPerspectiveClientSetting;//[Offset: 0x18, Size: 24]
	WeaponVisualBulletCameraModeConfig ReplayPawnPerspectiveClientSetting;//[Offset: 0x30, Size: 24]
	WeaponVisualBulletItemConfig DefaultSetting;//[Offset: 0x48, Size: 8]
	WeaponVisualBulletItemConfig ReplayDefaultSetting;//[Offset: 0x50, Size: 8]

--------------------------------
Class: WeaponVisualBulletCameraModeConfig
	WeaponVisualBulletItemConfig FPPSetting;//[Offset: 0x0, Size: 8]
	WeaponVisualBulletItemConfig TPPSetting;//[Offset: 0x8, Size: 8]
	WeaponVisualBulletItemConfig GunADSSetting;//[Offset: 0x10, Size: 8]

--------------------------------
Class: WeaponVisualBulletItemConfig
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	ParticleSystem* VisualBulletTrackFX;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AutoAimingConfig
	AutoAimingRangeConfig OuterRange;//[Offset: 0x0, Size: 76]
	AutoAimingRangeConfig InnerRange;//[Offset: 0x4c, Size: 76]
	AutoAimingRangeConfig ScopeRange;//[Offset: 0x98, Size: 76]
	float followTimeMax;//[Offset: 0xe4, Size: 4]
	bool TriggerBeforeFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	CurveFloat* SpeedCurve;//[Offset: 0xec, Size: 4]
	CurveFloat* DistanceSpeedCurve;//[Offset: 0xf0, Size: 4]
	CurveFloat* SensitiveSpeedCurve;//[Offset: 0xf4, Size: 4]
	float MaxAngle;//[Offset: 0xf8, Size: 4]

--------------------------------
Class: AutoAimingRangeConfig
	float Speed;//[Offset: 0x0, Size: 4]
	float CenterSpeedRate;//[Offset: 0x4, Size: 4]
	float RangeRate;//[Offset: 0x8, Size: 4]
	float SpeedRate;//[Offset: 0xc, Size: 4]
	float RangeRateSight;//[Offset: 0x10, Size: 4]
	float SpeedRateSight;//[Offset: 0x14, Size: 4]
	float CrouchRate;//[Offset: 0x18, Size: 4]
	float ProneRate;//[Offset: 0x1c, Size: 4]
	float DyingRate;//[Offset: 0x20, Size: 4]
	float DriveVehicleRate;//[Offset: 0x24, Size: 4]
	float InVehicleRate;//[Offset: 0x28, Size: 4]
	float FreeFallRate;//[Offset: 0x2c, Size: 4]
	float OpeningRate;//[Offset: 0x30, Size: 4]
	float LandingRate;//[Offset: 0x34, Size: 4]
	float adsorbMaxRange;//[Offset: 0x38, Size: 4]
	float adsorbMinRange;//[Offset: 0x3c, Size: 4]
	float adsorbMinAttenuationDis;//[Offset: 0x40, Size: 4]
	float adsorbMaxAttenuationDis;//[Offset: 0x44, Size: 4]
	float adsorbActiveMinRange;//[Offset: 0x48, Size: 4]

--------------------------------
Class: AutoAimingConfigByGameMode
	class GameStateBase* GameStateClass;//[Offset: 0x0, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x4, Size: 252]

--------------------------------
Class: SRecoilInfo
	float VerticalRecoilMin;//[Offset: 0x0, Size: 4]
	float VerticalRecoilMax;//[Offset: 0x4, Size: 4]
	float VerticalRecoilVariation;//[Offset: 0x8, Size: 4]
	float VerticalRecoveryModifier;//[Offset: 0xc, Size: 4]
	float VerticalRecoveryClamp;//[Offset: 0x10, Size: 4]
	float VerticalRecoveryMax;//[Offset: 0x14, Size: 4]
	float LeftMax;//[Offset: 0x18, Size: 4]
	float RightMax;//[Offset: 0x1c, Size: 4]
	float HorizontalTendency;//[Offset: 0x20, Size: 4]
	CurveVector* RecoilCurve;//[Offset: 0x24, Size: 4]
	int BulletPerSwitch;//[Offset: 0x28, Size: 4]
	float TimePerSwitch;//[Offset: 0x2c, Size: 4]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float RecoilSpeedVertical;//[Offset: 0x34, Size: 4]
	float RecoilSpeedHorizontal;//[Offset: 0x38, Size: 4]
	float RecovertySpeedVertical;//[Offset: 0x3c, Size: 4]
	float RecoilValueClimb;//[Offset: 0x40, Size: 4]
	float RecoilValueFail;//[Offset: 0x44, Size: 4]
	float RecoilModifierStand;//[Offset: 0x48, Size: 4]
	float RecoilModifierCrouch;//[Offset: 0x4c, Size: 4]
	float RecoilModifierProne;//[Offset: 0x50, Size: 4]
	float RecoilHorizontalMinScalar;//[Offset: 0x54, Size: 4]
	float BurstEmptyDelay;//[Offset: 0x58, Size: 4]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float ShootSightReturnSpeed;//[Offset: 0x60, Size: 4]

--------------------------------
Class: SDeviation
	float DeviationBase;//[Offset: 0x0, Size: 4]
	float DeviationBaseAim;//[Offset: 0x4, Size: 4]
	float DeviationBaseADS;//[Offset: 0x8, Size: 4]
	float DeviationRecoilGain;//[Offset: 0xc, Size: 4]
	float DeviationRecoilGainAim;//[Offset: 0x10, Size: 4]
	float DeviationRecoilGainADS;//[Offset: 0x14, Size: 4]
	float DeviationMax;//[Offset: 0x18, Size: 4]
	float DeviationMinMove;//[Offset: 0x1c, Size: 4]
	float DeviationMaxMove;//[Offset: 0x20, Size: 4]
	float DeviationMoveMultiplier;//[Offset: 0x24, Size: 4]
	float DeviationMoveMinRefrence;//[Offset: 0x28, Size: 4]
	float DeviationMoveMaxRefrence;//[Offset: 0x2c, Size: 4]
	float DeviationStanceStand;//[Offset: 0x30, Size: 4]
	float DeviationStanceCrouch;//[Offset: 0x34, Size: 4]
	float DeviationStanceProne;//[Offset: 0x38, Size: 4]
	float DeviationStanceJump;//[Offset: 0x3c, Size: 4]
	float DeviationShoulderMultiplier;//[Offset: 0x40, Size: 4]

--------------------------------
Class: BulletTrackComponent.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x100, Size: 4]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x104, Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x108, Size: 4]
	bool IsAutonomousOrSpectorWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	SRecoilInfo RecoilInfo_NoTss;//[Offset: 0x178, Size: 100]
	SDeviation DeviationInfo_NoTss;//[Offset: 0x1dc, Size: 68]
	void SetUseTss(bool bUse);// 0x1f5da78
	void OnWeaponStopFire();// 0x1f5da64
	void OnWeaponStartFire();// 0x1f5da50
	void OnWeaponShoot();// 0x1f5da3c
	void GetDataFromWeaponEntity();// 0x1f5da28
	Vector GetCurRecoilInfo();// 0x1f5d9e0
	float GetCurDeviation();// 0x1f5d9b8
	void CheckComponentTick();// 0x1f5d9a4

--------------------------------
Class: BulletHitInfoUploadComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UploadInterval;//[Offset: 0x100, Size: 4]
	bool bEnableTssSdkAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	bool bEnableTssSdkAntiDataFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 1]
	bool bEnableTssSdkAntiDataFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106, Size: 1]
	bool bDisableDsTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107, Size: 1]
	bool bDisableDsAntiDataReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	bool bEnableAddSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x10c, Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x168, Size: 4]
	bool NeedSendSimpleCharacterHitData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	void HandleOnWeaponStopFire();// 0x1f5c264
	void HandleOnWeaponStartFire();// 0x1f5c250
	bool CheckCloseDSTick();// 0x1f5c228
	void AddHitData(out const BulletHitInfoUploadData Data, out const LocalShootHitData ShootData);// 0x1f5c090

--------------------------------
Class: LocalShootHitData
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize ShootingDeviation;//[Offset: 0x4, Size: 12]
	Vector_NetQuantize BulletsBornPosition;//[Offset: 0x10, Size: 12]
	int BulletFlyDistance;//[Offset: 0x1c, Size: 4]
	int BulletDown;//[Offset: 0x20, Size: 4]
	int8 CurBullet;//[Offset: 0x24, Size: 1]
	int ShootInterval;//[Offset: 0x28, Size: 4]
	int BulletFlyTime;//[Offset: 0x2c, Size: 4]
	int BulletShootTime;//[Offset: 0x30, Size: 4]
	int BulletHitTime;//[Offset: 0x34, Size: 4]
	int AimFov;//[Offset: 0x38, Size: 4]
	byte bulletDamageReduceRatio;//[Offset: 0x3c, Size: 1]
	Vector_NetQuantize ShootingRecoil;//[Offset: 0x40, Size: 12]
	int64 ClientStartTime;//[Offset: 0x50, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x58, Size: 12]
	int AutoAimSpeed;//[Offset: 0x64, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x68, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x6c, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x70, Size: 4]

--------------------------------
Class: STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	FName NormalBulletsTrackCompTag;//[Offset: 0x100, Size: 8]
	FName ScopeBulletsTrackCompTag;//[Offset: 0x108, Size: 8]
	BulletTrackComponent* ShootWeaponBulletsTrackComponent;//[Offset: 0x110, Size: 4]
	BulletTrackComponent* ShootWeaponScopeBulletsTrackComponent;//[Offset: 0x114, Size: 4]
	ShootWeaponEntity* ShootWeaponEntityComponent;//[Offset: 0x118, Size: 4]
	bool bIsContinuousShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	int ContinuousShootingBulletsNum;//[Offset: 0x120, Size: 4]
	delegate OnShoot;//[Offset: 0x124, Size: 12]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x130, Size: 4]
	float LastCalcShootTime;//[Offset: 0x140, Size: 4]
	HitResult CalcShootHitRet;//[Offset: 0x148, Size: 136]
	VolleyShootInfoCache[] VolleyShootLocCache;//[Offset: 0x4b8, Size: 12]
	<int,ShootWeaponCustomDamageList> CustomBulletDamage;//[Offset: 0x4dc, Size: 60]
	void VehicleShoot();// 0x221de60
	void UpdateVolleyShootParameters(Vector TargetLoc, out Vector StartLoc, out Rotator BulletRot, out Vector BulletDir);// 0x221dce8
	void ShootDelegate__DelegateSignature();// 0x2bb69b8
	void ReInitWeaponOwnerData();// 0x221dcd4
	void OnWeaponClipMaxBulletChanged();// 0x221dcc0
	void OnWeaponBulletChanged();// 0x221dcac
	void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);// 0x2bb69b8
	void OnContinuousShootDelegate__DelegateSignature(int BulletsNum);// 0x2bb69b8
	void LocalShowDamageFloatingText(Actor* AttackWeaponOwner, Actor* VictimeActor, float Damage, byte HitBodyType, Vector ImpactPoint);// 0x221db18
	float GetDamageAfterModify(float Damage, out const DamageEvent DamageEvent, Actor* AttackActor, Actor* VictimActor);// 0x221d9a4
	void GetBulletPosAndVelocity(out Vector StartPos, out Vector Velocity);// 0x221d8cc
	HitResult ConditionPreCalcShootHitRet(bool WithDeviation, float ToleranceTime);// 0x221d7ac
	bool CheckShootState();// 0x20758d0

--------------------------------
Class: VolleyShootInfoCache
	Vector StartLoc;//[Offset: 0x0, Size: 12]
	Vector ShootDir;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ShootWeaponCustomDamageList
	<enum,ShootWeaponCustomDamage> Data;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ShootWeaponCustomDamage
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 40]
	float DamageRate;//[Offset: 0x28, Size: 4]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MultiBulletComponent.WeaponLogicBaseComponent.ActorComponent.Object
	int FirstAddBulletID;//[Offset: 0x100, Size: 4]
	SupportUpBullet[] MultiBulletList;//[Offset: 0x104, Size: 12]
	ItemDefineID OriginalBulletDefineID;//[Offset: 0x110, Size: 24]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x128, Size: 4]
	void SetFirstAddBullet(int BulletID);// 0x2063a1c
	void SetBulletIDListInClip(out BulletInWeapon[] InCurBulletList, int Count, out BulletInClip CurBulletInClip);// 0x2063874
	void SetBulletAttr(int ReloadBulletID);// 0x20637fc
	void RemoveBulletIDListInClip(int RemoveNum, out BulletInClip CurBulletInClip, bool IsRevert);// 0x206369c
	void RefreshBulletIDListInClip(int Count, out BulletInClip CurBulletInClip);// 0x206358c
	void PreSetBulletIDListInClip(out BulletInClip NewBulletInClip, out BulletInClip CurBulletInClip);// 0x2063428
	bool HasMultiBullet();// 0x2063400
	int GetShootBulletType();// 0x20633d8
	int GetNextCostBulletIDFromBackpack(BackpackComponent* InBackPack);// 0x2063358
	int GetNextBulletID();// 0x2063330
	BackpackComponent* GetBackpackComponent();// 0x2063308
	float GetAdjustBulletMomentum();// 0x20632e0
	float GetAdjustBulletDamage();// 0x20632b8
	int CostBulletFromBackpack(BackpackComponent* BackPack, int WantReloadNum, out BulletInWeapon[] CostBulletList);// 0x206315c
	void AddBulletIDListInClip(BulletInWeapon[] InCurBulletList, int Count, out BulletInClip CurBulletInClip);// 0x2062f28

--------------------------------
Class: SupportUpBullet
	int UpBulletID;//[Offset: 0x0, Size: 4]
	int DefaultPriority;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GrenadeLaunchComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x100, Size: 4]
	float BulletSpeed;//[Offset: 0x104, Size: 4]
	int CurBulletNum;//[Offset: 0x108, Size: 4]
	bool bUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	int MaxBulletNumInClip;//[Offset: 0x110, Size: 4]
	ItemDefineID BulletType;//[Offset: 0x118, Size: 24]
	bool CanUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x134, Size: 12]
	class CameraShake* ShootCameraShake;//[Offset: 0x140, Size: 4]
	float CameraShakeInnerRadius;//[Offset: 0x144, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x148, Size: 4]
	float CameraShakFalloff;//[Offset: 0x14c, Size: 4]
	AkAudioEvent* ShootSound;//[Offset: 0x150, Size: 4]
	float ReloadTime;//[Offset: 0x154, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x158, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x15c, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x160, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x164, Size: 4]
	BackpackComponent* OwnerBackPack;//[Offset: 0x168, Size: 4]
	void ShootGrenadeBullet(Vector StartLoc, Rotator StartRot, uint32 ShootID);// 0x200ee8c
	void SetUseGreanadeLaunch(bool bIsUse);// 0x200ee0c
	void RemoveBullet(int RemoveNum);// 0x200ed94
	int ReloadGrenadeLaunch();// 0x200ed6c
	void OnRep_UseGrenadeLaunchState();// 0x200ed58
	void OnRep_CurBulletNum();// 0x200ed44
	void OnRep_CanUseGrenadeLaunch();// 0x200ed30
	void LaunchGrenadeBullet(Transform Trans, uint32 ShootID, int Pellet);// 0x200ebc0
	bool JudgeMustReload();// 0x200eb8c
	bool IsUseGreanadeLaunch();// 0x200eb64
	void HandleGrenadeLaunchEquip(bool bIsEquip);// 0x200eae4
	BackpackComponent* GetBackpackComp();// 0x200eabc
	void DoGrenadeLaunchStartReload();// 0x200eaa8
	bool CheckCanReload();// 0x200ea80

--------------------------------
Class: FillGasComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UpGasSpeed;//[Offset: 0x100, Size: 4]
	float DownGasSpeed;//[Offset: 0x104, Size: 4]
	float CostGasOneShoot;//[Offset: 0x108, Size: 4]
	float MaxGas;//[Offset: 0x10c, Size: 4]
	float GasAddDamageRate;//[Offset: 0x110, Size: 4]
	float MaxGasAngle;//[Offset: 0x114, Size: 4]
	float PostFillGasTime;//[Offset: 0x118, Size: 4]
	float GasUpdateInterval;//[Offset: 0x11c, Size: 4]
	int CurGas;//[Offset: 0x120, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x124, Size: 4]
	void OnRep_CurGas();// 0x1ee1bb4
	void CostGassByShoot();// 0x1fda02c
	void CheckNeedRep();// 0x1fda018
	void AddFillGass(float AddFillGasTime);// 0x1fd9fa0

--------------------------------
Class: NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float AutoRecoverShootLockInterval;//[Offset: 0x52c, Size: 4]
	NormalProjectileVerifyConfig VerifyConfig;//[Offset: 0x530, Size: 44]
	delegate OnHandleShootDamageDelegate;//[Offset: 0x55c, Size: 12]
	bool bNeedWaitClientBulletLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	float CurShootLockInterval;//[Offset: 0x570, Size: 4]
	void UpdateShootLockCD(float DeltaTime);// 0x2075900
	void OnHandleShootDamageDelegate__DelegateSignature(NormalProjectileComponent* NormalProjectileComponent);// 0x2bb69b8
	bool CheckShootState();// 0x20758d0

--------------------------------
Class: STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	Actor*[] BulletCacheList;//[Offset: 0x520, Size: 12]

--------------------------------
Class: NormalProjectileVerifyConfig
	float MaxShootPointTolerateDistanceOffset;//[Offset: 0x0, Size: 4]
	float MaxShootPointTolerateDistanceOffsetVehicle;//[Offset: 0x4, Size: 4]
	float MaxImpactPointTolerateDistanceOffset;//[Offset: 0x8, Size: 4]
	float BlockVerifyImpactNormalOffset;//[Offset: 0xc, Size: 4]
	bool bVerifyBulletScDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float MaxDiffServerClient;//[Offset: 0x14, Size: 4]
	bool bVerifyShootDir2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x1c, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x20, Size: 4]
	bool bVerifyWeaponFireInfoTimeForcePunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bVerifyClientFlySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bVerifyLauchTimeWithServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	float ClientServerFlyTimeTorelate;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ShootWeaponEffectComponent.WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<enum,AkAudioEvent*> ShootModeFireShotSoundDataMap;//[Offset: 0x150, Size: 60]
	class CameraShake* CameraShakeTemplate_NormalCameraMode;//[Offset: 0x18c, Size: 4]
	class CameraShake* CameraShakeTemplate_NearCameraMode;//[Offset: 0x190, Size: 4]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x194, Size: 4]
	float CameraShakeInnerRadius;//[Offset: 0x198, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x19c, Size: 4]
	float CameraShakFalloff;//[Offset: 0x1a0, Size: 4]
	bool bNeedRefreshMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	bool bNeedOptimizeMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a6, Size: 1]
	ParticleSystem* MuzzleFX;//[Offset: 0x1a8, Size: 4]
	Vector LocalMuzzelFXScale;//[Offset: 0x1ac, Size: 12]
	ParticleSystem* ScopeMuzzleFX;//[Offset: 0x1b8, Size: 4]
	Vector ScopeMuzzelFXScale;//[Offset: 0x1bc, Size: 12]
	ParticleSystem* RemoteMuzzleFX;//[Offset: 0x1c8, Size: 4]
	Vector RemoteMuzzelFXScale;//[Offset: 0x1cc, Size: 12]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x1d8, Size: 16]
	ParticleSystem* LocalSilencerMuzzleFX;//[Offset: 0x1e8, Size: 4]
	Vector LocalSilencerMuzzelFXScale;//[Offset: 0x1ec, Size: 12]
	ParticleSystem* ScopeSilencerMuzzleFX;//[Offset: 0x1f8, Size: 4]
	Vector ScopeSilencerMuzzelFXScale;//[Offset: 0x1fc, Size: 12]
	ParticleSystem* RemoteSilencerMuzzleFX;//[Offset: 0x208, Size: 4]
	Vector RemoteSilencerMuzzelFXScale;//[Offset: 0x20c, Size: 12]
	FXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;//[Offset: 0x218, Size: 16]
	ParticleSystem* LocalFiringSuppressorMuzzleFX;//[Offset: 0x228, Size: 4]
	Vector LocalFiringSuppressorMuzzelFXScale;//[Offset: 0x22c, Size: 12]
	ParticleSystem* ScopeFiringSuppressorMuzzleFX;//[Offset: 0x238, Size: 4]
	Vector ScopeFiringSuppressorMuzzelFXScale;//[Offset: 0x23c, Size: 12]
	ParticleSystem* RemoteFiringSuppressorMuzzleFX;//[Offset: 0x248, Size: 4]
	Vector RemoteFiringSuppressorMuzzelFXScale;//[Offset: 0x24c, Size: 12]
	FXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;//[Offset: 0x258, Size: 16]
	ParticleSystem* LocalCompensatorMuzzleFX;//[Offset: 0x268, Size: 4]
	Vector LocalCompensatorMuzzelFXScale;//[Offset: 0x26c, Size: 12]
	ParticleSystem* ScopeCompensatorMuzzleFX;//[Offset: 0x278, Size: 4]
	Vector ScopeCompensatorMuzzelFXScale;//[Offset: 0x27c, Size: 12]
	ParticleSystem* RemoteCompensatorMuzzleFX;//[Offset: 0x288, Size: 4]
	Vector RemoteCompensatorMuzzelFXScale;//[Offset: 0x28c, Size: 12]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	ParticleSystem* ShellDropFX;//[Offset: 0x29c, Size: 4]
	Vector ShellDropFXScale;//[Offset: 0x2a0, Size: 12]
	ParticleSystem* FPPShellDropFX;//[Offset: 0x2ac, Size: 4]
	Vector FPPShellDropFXScale;//[Offset: 0x2b0, Size: 12]
	float ShootLightCD;//[Offset: 0x2bc, Size: 4]
	float LastShootLightTime;//[Offset: 0x2c0, Size: 4]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0x2c4, Size: 4]
	int MaxOBBulletTrackCompNum;//[Offset: 0x2c8, Size: 4]
	float MaxFlyAngel;//[Offset: 0x2cc, Size: 4]
	ParticleSystemComponent* ShellDropFXComp;//[Offset: 0x2d0, Size: 4]
	ParticleSystemComponent* FPPShellDropFXComp;//[Offset: 0x2d4, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x2d8, Size: 4]
	ParticleSystemComponent* MuzzleFXComp;//[Offset: 0x2dc, Size: 4]
	ParticleSystemComponent*[] OBBulletTrackFXCompsArray;//[Offset: 0x2e0, Size: 12]
	Vector MuzzleFXOriginalScale;//[Offset: 0x2ec, Size: 12]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x2f8, Size: 4]
	float LastMuzzleEffectTime;//[Offset: 0x2fc, Size: 4]
	float MuzzleEffectTimeInterval;//[Offset: 0x300, Size: 4]
	OBEffectBullet*[] OBEffectBulletsCachePool;//[Offset: 0x310, Size: 12]
	bool bChangeShellDropRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	Rotator ShellDropRot;//[Offset: 0x320, Size: 12]
	FName ChangeShellDropSocket;//[Offset: 0x330, Size: 8]
	bool bSimulateBulletOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	float bSimulateBulletMaxDistance;//[Offset: 0x33c, Size: 4]
	float SnipperStayDistance;//[Offset: 0x340, Size: 4]
	float bSimulateBulletRadius;//[Offset: 0x344, Size: 4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	bool ShellDropRotHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 1]
	void ReloadAttr(int WeaponId);// 0x20ebf9c
	void OnWeaponUnEquiped();// 0x20ebf88
	void OnWeaponEuiped();// 0x20ebf74
	void HandleWeaponAction(byte Action);// 0x20ebef4
	STExtraShootWeapon* GetOwnerShootWeapon();// 0x20ebecc
	OBEffectBullet* GetOBEffectBullet();// 0x20ebea4
	int GetAvailableOBEffectBulletNum();// 0x20ebe7c
	void CheckOptimizeMuzzleFX();// 0x20ebe60
	void ChangeShellDropFx();// 0x20ebe4c
	void ActiveShootLight();// 0x20ebe38
	void ActiveLocalShellDropFX();// 0x20ebe24

--------------------------------
Class: WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0x100, Size: 60]
	AkAudioEvent* ShellDropSound;//[Offset: 0x13c, Size: 4]
	AkAudioEvent* SilencerShootSound;//[Offset: 0x140, Size: 4]
	AkAudioEvent* DurabilityLossShootSound;//[Offset: 0x144, Size: 4]
	AkAudioEvent* ScopeSound;//[Offset: 0x148, Size: 4]
	AkAudioEvent* ScopeOutSound;//[Offset: 0x14c, Size: 4]
	void HandleWeaponAction(byte Action);// 0x20ebef4

--------------------------------
Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0, Size: 4]
	float FXEndScaleDistance;//[Offset: 0x4, Size: 4]
	float FXStartScaleValue;//[Offset: 0x8, Size: 4]
	float FXEndScaleValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: OBEffectBullet.Actor.Object
	float MaxMovingTime;//[Offset: 0x2fc, Size: 4]
	bool bIgnoreEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x304, Size: 12]
	ParticleSystem* CurFXTemplate;//[Offset: 0x314, Size: 4]
	float CurMovingTime;//[Offset: 0x340, Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0x344, Size: 4]

--------------------------------
Class: ShootWeaponAutoTestHandle.Object
	void OnWeaponShootBullet(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet);// 0x20eb930
	void OnBulletImpact(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet, out const HitResult HitRet);// 0x20eb80c
	FString GenerateBulletsImpactJsonStringAndClearData();// 0x20eb74c

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	delegate OnAttrModified;//[Offset: 0xf8, Size: 12]
	uint32 AttrModifyStateList;//[Offset: 0x104, Size: 4]
	RepAttributeModify DynamicModifierRep;//[Offset: 0x108, Size: 16]
	RepAttributeModify DynamicModifierRepOnlyOwner;//[Offset: 0x118, Size: 16]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0x138, Size: 12]
	AttributeExpand[] AttributeExpands;//[Offset: 0x298, Size: 12]
	AttrDynamicModifier DynamicModifier;//[Offset: 0x2a4, Size: 124]
	<FString,RelateAttributeGroup> RelateAttributeGroup;//[Offset: 0x320, Size: 60]
	enum ActorAttrType;//[Offset: 0x35c, Size: 1]
	ModAttrSimulateSyncItem[] ModSimulateSyncList;//[Offset: 0x424, Size: 12]
	void SetValueToAttributeSafety(FString AttrName, float Value);// 0x23ba5d0
	void SetOrignalValueToAttribute(FString AttrName, float Value);// 0x23ba4d0
	void SetAttrModifyStateValue(int Index, bool Value);// 0x23ba40c
	void SetAttributeMaxValue(FString AttrName, float MaxValue);// 0x23ba30c
	void ResponeAttrValue(FString AttrName, float FinalValue);// 0x23ba1d0
	void RequestAttrValue(FString AttrName);// 0x23ba0dc
	void RemoveDynamicModifyItemForLua(uint32 ModifyUID);// 0x23ba064
	bool RegisterModifyAbleAttr(out const AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x23b9ed8
	void OnRep_ModSimulateSyncList();// 0x23b9ec4
	void OnRep_DynamicModifier();// 0x23b9eb0
	void OnRep_AttrModifyStateList();// 0x23b9e9c
	void OnAttrModifiedEvent__DelegateSignature(out const AttrAffected[] AffectedAttrS);// 0x2bb69b8
	bool IsAttrModifyStateValidIndex(int Index);// 0x23b9e1c
	bool HasDynamicModifier(FString AttrModifyId);// 0x23b9d58
	AttrModifyModDataSubsystem* GetSubsystem();// 0x23b9d30
	FString GetMaxAttrName(FString AttrName);// 0x23b9bec
	bool GetAttrModifyStateValue(int Index);// 0x23b9b6c
	int GetAttrModifyStateNum();// 0x23b9b50
	AttrModifyItem GetAttrModifyItemByItemName(FString ItemName);// 0x23b9874
	float GetAttributeValue(FString AttrName);// 0x23b97ac
	float GetAttributeOrignalValue(FString AttrName);// 0x23b96e4
	bool EnableAttrModifierByIndex(int ModifyConfigIndex);// 0x23b9664
	bool EnableAttrModifier(FString AttrModifyItemName);// 0x23b9504
	bool DisableAttrModifierByIndex(int ModifyConfigIndex);// 0x23b9484
	bool DisableAttrModifier(FString AttrModifyItemName);// 0x23b9324
	bool DisableAllAttrModifier();// 0x23b92fc
	void AddValueToAttribute(FString AttrName, float Value);// 0x23b91fc
	uint32 AddDynamicModifyItemForLua(FString AttrName, byte ModifyType, float Value, bool bEnable, Object* Causer);// 0x23b9018
	void AddDynamicModifier(out AttrModifyItem AttrModifyItem, bool RepOnlyOwner);// 0x23b8e74

--------------------------------
Class: RepAttributeModify

--------------------------------
Class: AttrModifyItem
	CacheAffactTargetInfo[] AffectTargetsCachInfo;//[Offset: 0x0, Size: 12]
	FString AttrModifyItemName;//[Offset: 0xc, Size: 12]
	FString AttrName;//[Offset: 0x18, Size: 12]
	int AttrId;//[Offset: 0x24, Size: 4]
	int CompareId;//[Offset: 0x28, Size: 4]
	enum ModifierOp;//[Offset: 0x2c, Size: 1]
	float ModifierValue;//[Offset: 0x30, Size: 4]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool ClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]

--------------------------------
Class: CacheAffactTargetInfo
	Actor* AffectTarget;//[Offset: 0x0, Size: 8]
	float FinalAddValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AttributeExpand
	FString AttrName;//[Offset: 0x0, Size: 12]
	FString AttrDesc;//[Offset: 0xc, Size: 12]
	int RelateTypeId;//[Offset: 0x18, Size: 4]
	FString RelateGroup;//[Offset: 0x1c, Size: 12]
	float Value;//[Offset: 0x28, Size: 4]

--------------------------------
Class: AttrDynamicModifier
	<FString,AttrDynamicModifyTarget> ModifyAttrs;//[Offset: 0x0, Size: 60]
	<FString,AttrDynamicModifyConfig> ModifyConfigs;//[Offset: 0x3c, Size: 60]
	AttrModifyComponent* Component;//[Offset: 0x78, Size: 4]

--------------------------------
Class: AttrDynamicModifyTarget
	AttrDynamicModifyItem[] List;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AttrDynamicModifyItem
	Object* Causer;//[Offset: 0x18, Size: 8]

--------------------------------
Class: AttrDynamicModifyConfig
	bool IsOneceModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool HasLimitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool HasMaxAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	FString AttrName;//[Offset: 0x4, Size: 12]
	FString LimitAttrName;//[Offset: 0x10, Size: 12]
	FString MaxAttrName;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: RelateAttributeGroup
	<int,FString> RelateAttributes;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ModAttrSimulateSyncItem
	int AttrId;//[Offset: 0x0, Size: 4]
	float FinalValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AttrRegisterItem
	FString AttrName;//[Offset: 0x0, Size: 12]
	enum AttrVariableType;//[Offset: 0xc, Size: 1]
	bool HasReplicatedTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]

--------------------------------
Class: AttrAffected
	FString AttrName;//[Offset: 0x0, Size: 12]
	Actor* AffectedActor;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AttrModifyModDataSubsystem.GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: WeaponAttrModifyConfig
	FString ModifyConfigID;//[Offset: 0x0, Size: 12]
	WeaponAttrModifyData[] WeaponAttrModifiers;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WeaponAttrModifyData
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeaponAntiCheatComp.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x100, Size: 8]
	float ShootRateCheckInterval;//[Offset: 0x118, Size: 4]
	bool ShootRateCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	float ShootRateCheckMulCoff;//[Offset: 0x120, Size: 4]
	bool ShootHitTargetIntervalCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	float ShootHitTargetIntervalMulCoff;//[Offset: 0x128, Size: 4]
	float ShootTimeInfoCheckClearInterval;//[Offset: 0x16c, Size: 4]
	float ShootTimeInfoCheckLifeTime;//[Offset: 0x170, Size: 4]
	float ShootTimeGunPosBigCircle;//[Offset: 0x174, Size: 4]
	float ShootTimeGunPosMaxRightDif;//[Offset: 0x178, Size: 4]
	float ShootTimeGunPosMaxRightDifInVehicle;//[Offset: 0x17c, Size: 4]
	int MaxClientCapsuleHalfHeight;//[Offset: 0x180, Size: 4]
	float ShootTimeMuzzleDistThres;//[Offset: 0x184, Size: 4]
	float ShootTimeMuzzleZThres;//[Offset: 0x188, Size: 4]
	bool bVerifyTimeLineSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	float TimeLineCheckDnBorder;//[Offset: 0x190, Size: 4]
	float TimeLineCheckUpBorder;//[Offset: 0x194, Size: 4]
	float ShootTimeConnectionDeltaThres;//[Offset: 0x198, Size: 4]
	bool bVerifyStartFireTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	float MaxShootPassTimeDeltaBetweenSysAndLevel;//[Offset: 0x1a0, Size: 4]
	float TolerateFlyTime;//[Offset: 0x1a4, Size: 4]
	float TolerateFlyDis;//[Offset: 0x1a8, Size: 4]
	float DeCon6SpanTime;//[Offset: 0x274, Size: 4]
	void OnWeaponShootHit(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x22f6754

--------------------------------
Class: ShootWeaponDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	byte AvatarDamagePosition;//[Offset: 0xa5, Size: 1]
	float DamageImpulse;//[Offset: 0xc0, Size: 4]

--------------------------------
Class: STPointDamageEvent.PointDamageEvent.DamageEvent
	int ItemId;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x8, Size: 4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0xc, Size: 12]
	HitResult HitInfo;//[Offset: 0x18, Size: 136]

--------------------------------
Class: SimulateBulletHitInfoData
	Vector_NetQuantize10 ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector_NetQuantize10 ShootMomentMuzzlePos;//[Offset: 0x24, Size: 12]
	byte SpecialBulletID;//[Offset: 0x30, Size: 1]
	byte SurfaceType;//[Offset: 0x31, Size: 1]
	Actor* Actor;//[Offset: 0x34, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x3c, Size: 8]
	byte HitBodyType;//[Offset: 0x44, Size: 1]
	byte ImpactEffectMask;//[Offset: 0x45, Size: 1]

--------------------------------
Class: SecurityLogHitTargetInfo

--------------------------------
Class: CameraOffsetData
	Vector SocketOffset;//[Offset: 0x0, Size: 12]
	Vector TargetOffset;//[Offset: 0xc, Size: 12]
	float SpringArmLength;//[Offset: 0x18, Size: 4]

--------------------------------
Class: GrenadePredictLine.Actor.Object
	Vector HighThrowOffset;//[Offset: 0x2fc, Size: 12]
	Vector LowThrowOffset;//[Offset: 0x308, Size: 12]
	byte ThrowMode;//[Offset: 0x314, Size: 1]
	float PredictLineVelocityScale;//[Offset: 0x318, Size: 4]
	float MaxSimTime;//[Offset: 0x31c, Size: 4]
	GrenadePredictResult GrenadePredictResult;//[Offset: 0x320, Size: 40]
	float GrenadeRadius;//[Offset: 0x348, Size: 4]
	Vector PredictLineStartLocation;//[Offset: 0x34c, Size: 12]
	Vector PredictLineStartVelocity;//[Offset: 0x358, Size: 12]
	Vector LauncheVelocity;//[Offset: 0x364, Size: 12]

--------------------------------
Class: GrenadePredictResult
	Vector[] SplinePoints;//[Offset: 0x0, Size: 12]
	bool IsHitActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Vector HitActorLocation;//[Offset: 0x10, Size: 12]
	Rotator HitActorRotation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnHasPickupPropsAvailableChanged;//[Offset: 0x2740, Size: 12]
	delegate OnHasTombBoxesAvailableChanged;//[Offset: 0x274c, Size: 12]
	delegate OnSkillFinishedDelegate;//[Offset: 0x2758, Size: 12]
	delegate OnPlayerInteractiveStateChange;//[Offset: 0x2764, Size: 12]
	delegate OnScopeOutDelegate;//[Offset: 0x2770, Size: 12]
	delegate OnScopeInDelegate;//[Offset: 0x277c, Size: 12]
	delegate OnGetOnVehicleDelegate;//[Offset: 0x2788, Size: 12]
	delegate OnRepParachuteStateDelegate;//[Offset: 0x2794, Size: 12]
	delegate OnParachuteStateChanged;//[Offset: 0x27a0, Size: 12]
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0x27ac, Size: 4]
	STScreenAppearanceComponent* ScreenAppearaceComp;//[Offset: 0x27b0, Size: 4]
	BoxComponent* BoxEar;//[Offset: 0x27b4, Size: 4]
	NightVisionComponent* NightVisionComponent;//[Offset: 0x27b8, Size: 4]
	class NightVisionComponent* NightVisionComponentClass;//[Offset: 0x27bc, Size: 4]
	float IndoorCheckDistance;//[Offset: 0x27c0, Size: 4]
	float IndoorCheckTime;//[Offset: 0x27c4, Size: 4]
	float BodyIndoorUpdateCheckTime;//[Offset: 0x27c8, Size: 4]
	float IndoorLowerCameraHeight;//[Offset: 0x27cc, Size: 4]
	bool IsIndoorBodyAreaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d0, Size: 1]
	float IndoorBodyAreaDistance;//[Offset: 0x27d4, Size: 4]
	float fTickDuration;//[Offset: 0x27d8, Size: 4]
	SoftClassPath PlayerGunCollisionComponentClassPath;//[Offset: 0x27e0, Size: 24]
	bool ShouldVaultOnBaseMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27f8, Size: 1]
	enum ParachuteState;//[Offset: 0x2808, Size: 1]
	float ParachuteCanCloseHeightWhenClientAdjust;//[Offset: 0x280c, Size: 4]
	float LandDistanceCanAjustWhenParachuteLanded;//[Offset: 0x2810, Size: 4]
	float CheckCanLandInternal;//[Offset: 0x2838, Size: 4]
	bool bIsPendingCaptived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283c, Size: 1]
	enum LastParachuteState;//[Offset: 0x283d, Size: 1]
	float HaveToOpenHeightToGround;//[Offset: 0x2840, Size: 4]
	bool IsPlaneJumpParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2844, Size: 1]
	float SwimZDir;//[Offset: 0x2848, Size: 4]
	bool Indoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284c, Size: 1]
	bool IsBodyIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284d, Size: 1]
	float SwimRotateX_Ex;//[Offset: 0x2850, Size: 4]
	CustomParticleSystemComponent* PS_CloudFast;//[Offset: 0x2854, Size: 4]
	CustomParticleSystemComponent* PS_CloudSlow;//[Offset: 0x2858, Size: 4]
	ParticleSystem* PS_CloudFastAsset;//[Offset: 0x285c, Size: 4]
	ParticleSystem* PS_CloudSlowAsset;//[Offset: 0x2860, Size: 4]
	AkAudioEvent* AK_StartFallingLocal;//[Offset: 0x2864, Size: 4]
	AkAudioEvent* AK_ParachuteLocal;//[Offset: 0x2868, Size: 4]
	AkAudioEvent* AK_ParachuteRemote;//[Offset: 0x286c, Size: 4]
	AkAudioEvent* AK_LandingLocal;//[Offset: 0x2870, Size: 4]
	AkAudioEvent* AK_LandingRemotel;//[Offset: 0x2874, Size: 4]
	AkAudioEvent* AK_ParachuteLocalOverride;//[Offset: 0x2878, Size: 4]
	AkAudioEvent* AK_ParachuteRemoteOverride;//[Offset: 0x287c, Size: 4]
	AkAudioEvent* AK_LandingLocalOverride;//[Offset: 0x2880, Size: 4]
	AkAudioEvent* AK_LandingRemotelOverride;//[Offset: 0x2884, Size: 4]
	SpringArmParams FreeFallSpringArmParam;//[Offset: 0x2888, Size: 80]
	SpringArmParams FreeFallSpringArmParamForVehicleParachute;//[Offset: 0x28d8, Size: 80]
	SpringArmParams OpeningSpringArmParam;//[Offset: 0x2928, Size: 80]
	SpringArmParams TPPSpringArmParam;//[Offset: 0x2978, Size: 80]
	class CameraShake* FreeFallCamShake;//[Offset: 0x29e0, Size: 4]
	bool bDisableSimulateCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29e4, Size: 1]
	bool bEnableParachuteFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29e5, Size: 1]
	float VehicleForwardInputRate;//[Offset: 0x29e8, Size: 4]
	float VehicleRightInputRate;//[Offset: 0x29ec, Size: 4]
	bool bDrawBoxEarBulletOverlapRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29f0, Size: 1]
	STExtraPlayerController* STPlayerController;//[Offset: 0x29fc, Size: 4]
	MinimalViewInfo CameraInfoAdditive;//[Offset: 0x2a00, Size: 1408]
	float CameraInfoAdditiveWeight;//[Offset: 0x2f80, Size: 4]
	AirAttackLocatorComponent* AirAttackLocatorComponent;//[Offset: 0x2fd8, Size: 4]
	bool EnableGoldenSuitCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2feb, Size: 1]
	bool IsGoldenSuitStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fec, Size: 1]
	float GoldenSuitCheckAccDelta;//[Offset: 0x2ff0, Size: 4]
	bool EnableGoldenSuitATK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ff4, Size: 1]
	enum GoldenSuitSlot;//[Offset: 0x2ff5, Size: 1]
	int GoldenSuitReplaceSkillId;//[Offset: 0x2ff8, Size: 4]
	float GoldenSuitCheckDelta;//[Offset: 0x2ffc, Size: 4]
	float GoldenSuitTestFistDamage;//[Offset: 0x3000, Size: 4]
	FanPickerConfigData FistFanPickerData;//[Offset: 0x3004, Size: 72]
	FName FeatureActorName;//[Offset: 0x30a8, Size: 8]
	bool bSprintUseConsumableNotStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30b0, Size: 1]
	bool bLockUpdateAroundAfterRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30b1, Size: 1]
	bool bIsLockingUpdateAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30b2, Size: 1]
	float LockUpdateAroundPickupTime;//[Offset: 0x30b4, Size: 4]
	ActivityAnimationRepData ActivityAnimationRepData;//[Offset: 0x30c0, Size: 4]
	ActivityActorBase*[] ActivityActorList;//[Offset: 0x30c8, Size: 12]
	InteractiveComponentBase*[] InteractiveComponentList;//[Offset: 0x30d4, Size: 12]
	bool IsLocalActuallyAngledSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e0, Size: 1]
	bool IsLocalActuallyScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e1, Size: 1]
	AngledSightRepData AngledSightRepData;//[Offset: 0x30e2, Size: 2]
	float SpecifiedItemLastConsumeTime;//[Offset: 0x30e4, Size: 4]
	int TrySightCorrectionTime;//[Offset: 0x30f0, Size: 4]
	float SightCorrectionDelay;//[Offset: 0x30f4, Size: 4]
	bool IsStartObserverMainSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30f8, Size: 1]
	bool IsStartObserverAngleSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30f9, Size: 1]
	int CurrentSightCorrectionTimes;//[Offset: 0x30fc, Size: 4]
	bool bRecommendSignalRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3109, Size: 1]
	bool CheckForActivityRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3110, Size: 1]
	ActicityDisallowedData[] PreConfiguredActivityDisallowedData;//[Offset: 0x3114, Size: 12]
	int CurrentActivityID;//[Offset: 0x3120, Size: 4]
	int CurrentActivityIndex;//[Offset: 0x3124, Size: 4]
	WarteringAreaCPP* MiniTreeRef;//[Offset: 0x3128, Size: 4]
	bool bEnableSecurity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x312c, Size: 1]
	PlayerRoleCacheFrameData WeaponManagerUsedPlayerRoleCacheFrameData;//[Offset: 0x3130, Size: 16]
	int[] InjuryFreeData;//[Offset: 0x3140, Size: 12]
	void UseCameraParamForVehicleParachute(bool InEnable);// 0x21cc374
	void UpdateParachuteState(out const Rotator Rotation, float FallingSpeed);// 0x21cc2a8
	void UpdateParachuteFallingCameraDistance(float Alpha);// 0x21cc230
	void UpdateIndoorState(bool IsInDoor);// 0x21cc168
	void UpdateEnableGoldenSuitCheck();// 0x21cc14c
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x21cc084
	void TriggerZombieBornSkills();// 0x21cc070
	void TriggerAutoAimCheck(float DeltaTime);// 0x21cbff8
	void TouchCancelSkillLock();// 0x21cbfe4
	void SyncLatestPlayerStatus(enum LatestParachuteState);// 0x21cbf30
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x216e090
	void SwitchSightAngledServer(byte InAngledSightType, bool IsOnlyTurn);// 0x21cbe20
	void SwitchSightAngledLocal(byte Type, bool IsOnlyTurn);// 0x21cbd54
	void SwitchSightAngled(byte Type, bool IsOnlyTurn);// 0x21cbc90
	void SwitchCameraToParachuteOpening();// 0x21cbc74
	void SwitchCameraToParachuteFalling();// 0x21cbc58
	void SwitchCameraToNormal();// 0x21cbc3c
	void SwitchCameraFromParachuteOpeningToTPPUpdate(float Alpha);// 0x21cbbc4
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x2bb69b8
	void SwitchCameraFromParachuteOpeningToTPPFinish();// 0x21cbbb0
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x2bb69b8
	void StopCamShake();// 0x21cbb94
	void StartUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x21cbb1c
	void StartSwitchColdDown(float SwitchColdDownTime);// 0x21cbaa4
	void StartCamShake();// 0x21cba88
	void ShowNightVisionFrame();// 0x216cba8
	void ShowConfirmDialogOfMisKill();// 0x216cb14
	bool ShouldTriggerEntryEvent(enum EntryEvent);// 0x21cba08
	bool ShouldDropBagItem(out const ItemDefineID SkillItemID);// 0x21cb968
	void SetSwimRotateX_Ex(float NewSwimRotateX);// 0x21cb8f0
	void SetSpecifiedItemConsumed(int ItemId);// 0x2bb69b8
	void SetSelfAndVehicleShadow(bool IsShow);// 0x21cb870
	void SetRainyEffectParam(byte EffectType, float InRainyEffectParam);// 0x21cb7b4
	void SetRainyEffectEnable(byte EffectType, bool InEnable, float InRainyEffectParam);// 0x21cb6a8
	void SetPitchViewAngle(float MinPitch, float MaxPitch);// 0x21cb5e4
	void SetParachuteState(enum State);// 0x21cb564
	void SetInjuryFreeRateData(out const int[] InInjuryFreeData);// 0x21cb498
	void SetFPPDeafultFov(float InFov);// 0x21cb420
	void SetFovInTPPSpringArm(float FieldOfView);// 0x21cb3a8
	void SetBodyIndoor(bool IsInDoor);// 0x21cb328
	void ServerUserMoveCmdDual(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, const byte[] UserCmd, const byte[] UserCmdDelta);// 0x21cb0cc
	void ServerUserMoveCmd(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, const byte[] UserCmd);// 0x21caefc
	void ServerUpdateParachuteState(const Rotator Rotation, float FallingSpeed);// 0x21cae08
	void ServerSetBulletFlySoundData(STExtraPlayerCharacter* PlayerCharacter, STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x21cacac
	void ServerRPCOnClickInteractiveButton(InteractiveComponentBase* pComponent);// 0x21cabf8
	void ServerOnApplicationactivated(bool bActive);// 0x21cab30
	void RPC_Server_OnMiniGameEnd(int Score, int Duration, ActivityActorBase* ActiveActor);// 0x21ca9ec
	void RPC_Server_CheckActivityOverlap(ActivityActorBase* ActiveActor, bool isBeginOverlap);// 0x21ca8dc
	void RPC_Client_NotifyActivityOverlap(ActivityActorBase* ActiveActorn, bool isBeginOverlap);// 0x21ca7cc
	void RPC_Client_CheckedActivityOverlap(ActivityActorBase* ActiveActorn, bool IsOverlaped, bool IsBegin);// 0x21ca660
	void ResetCharacter();// 0x2166e6c
	void RequestLoadParachuteAnim(bool bHasNewChildComponent);// 0x21ca5d8
	void ReqSetShoulderCameraMode(bool bShoulderMode);// 0x21ca510
	void RemoveParachuteAnim();// 0x21ca4fc
	void ReleaseTrigger(enum Hand);// 0x21ca47c
	void RefreshBearerFramingTick();// 0x21ca468
	void PushTrigger(enum Hand);// 0x21ca3e8
	void ProneWithTerrain(Rotator CharacterRotation, bool isMoving, float Offset, float deap);// 0x21ca294
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x2bb69b8
	void OnSkillFinishedDelegate__DelegateSignature(enum StopReason, int SkillID, bool HasThrownGrenade);// 0x2bb69b8
	void OnScopeOutDelegate__DelegateSignature(bool bIsBegin);// 0x2bb69b8
	void OnScopeInDelegate__DelegateSignature(bool bIsBegin);// 0x2bb69b8
	void OnRepParachuteStateDelegate__DelegateSignature();// 0x2bb69b8
	void OnRep_STPlayerController();// 0x21ca280
	void OnRep_ParachuteState(enum State);// 0x21ca200
	void OnRep_InjuryFreeData();// 0x21ca1ec
	void OnRep_CurrentActivityID();// 0x21ca1d8
	void OnRep_bIsPendingCaptived();// 0x21ca1c4
	void OnRep_AngleSightStateChanged();// 0x21ca1b0
	void OnRep_ActivityAnimationRepData();// 0x21ca19c
	void OnRank(int Kills, int Rank);// 0x21ca0e0
	void OnPlayerInteractiveStateChange__DelegateSignature(STExtraBaseCharacter* BaseCharacter, ActivityActorBase* ActivityActor, enum Status);// 0x2bb69b8
	void OnPlayerCurrentWeaponChange(byte CurSlot);// 0x21ca068
	void OnParachuteStateChangedDelegate__DelegateSignature(enum LastParachuteState, enum NewParachuteState);// 0x2bb69b8
	void OnMiniTreeTriggerServerLogicCPP();// 0x21ca04c
	void OnLockUpdateAroundPickupEnd();// 0x21ca038
	void OnLoadParachuteAnimCompleted();// 0x21ca024
	void OnHasTombBoxesAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x2bb69b8
	void OnHasPickupPropsAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x2bb69b8
	void OnBPStateCheckIn();// 0x2bb69b8
	void OnAvatarEquippedSucc(enum SlotType, bool IsEquipped, int InItemID);// 0x21c9f18
	void OnAllAvatarEquippedSucc();// 0x21c9f04
	void NotifyClientParachuteLandedOK();// 0x21c9ea8
	void MulticastSetShoulderCameraMode(bool bShoulderMode);// 0x21c9e20
	void MiniTreeTriggerServerLogic();// 0x21c9dc4
	bool IsSwitchCoolingDownFinish();// 0x21c9d90
	bool IsSpecifiedItemInCD(int ItemId);// 0x21c9d08
	bool IsLandedWithClientPos();// 0x21c9ce0
	bool IsInLaunchSeat();// 0x21c9cb0
	bool IsGrenadeEmpty();// 0x21c9c88
	bool IsBodyIndoorFuc();// 0x21c9c68
	bool IsBodyIndoorCheck();// 0x21c9c40
	bool IsAllowSyncControllerRotationInActived();// 0x21c9c18
	bool IsAllowPickupActor();// 0x21c9bf0
	void InitAirAttackLocatorComponent();// 0x21c9bdc
	void HideNightVisionFrame();// 0x21607b4
	bool HasParachuteAnimLoaded();// 0x21c9bb4
	void HandleParachuteStateChanged(enum NewState);// 0x21c9b34
	void HandleBulletOverlap(Actor* BulletActor, out const HitResult HitResult, out const HitResult[] HitResults);// 0x21c99bc
	void HandleAIInstigateBulletOverlap(STExtraBaseCharacter* InstigatorCharacter, out const HitResult HitResult, out const HitResult[] HitResults);// 0x21c9844
	SpringArmComponent* GetThirdPersonSpringArm();// 0x2bb69b8
	CameraComponent* GetThirdPersonCamera();// 0x2bb69b8
	float GetSwimRotateX_Ex();// 0x21c981c
	int GetSkillIndexByActivityID();// 0x2bb69b8
	SpringArmComponent* GetScopeSpringArm();// 0x2bb69b8
	CameraComponent* GetScopeCamera();// 0x2bb69b8
	bool GetPlayerVisibile();// 0x21c97f4
	AnimationAsset* GetPlayerParachuteAnimByAnimType(byte AnimType);// 0x21c9774
	STExtraPlayerController* GetPlayerControllerSafety();// 0x215f02c
	void GetOnVehicleDelegate__DelegateSignature();// 0x2bb69b8
	SceneComponent* GetMoveableComp();// 0x21c974c
	bool GetIsInDoor();// 0x21c971c
	bool GetIsGunADS();// 0x21c96ec
	float GetInjuryFreeRate(int BodyPart);// 0x215e998
	SpringArmComponent* GetFPPSpringArm();// 0x2bb69b8
	float GetFPPDeafultFov();// 0x21c96c4
	CameraComponent* GetFPPCamera();// 0x2bb69b8
	SpringArmComponent* GetFirstPersonSpringArm();// 0x2bb69b8
	CameraComponent* GetFirstPersonCamera();// 0x2bb69b8
	enum[] GetDisallowedStates(int ActivityID);// 0x2bb69b8
	int GetBuildingAvatarID(int BuildingID);// 0x2bb69b8
	Vector GetBonePos(FName BoneName, Vector OffsetPos);// 0x21c95ec
	void FreeFallShakeCam();// 0x21c95d8
	void FinishUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x21c9560
	void EnableRegionBaseNetConsideration();// 0x21c954c
	void EnablePet(bool Enable);// 0x21c94c4
	void DynamicCreateComponents();// 0x21c94b0
	void DumpCharacterAnimBPVars();// 0x21c949c
	void DisableSimulateAnimUpdateRateOptimization(bool bDisable, float LessThanDistanceSquareCanDisable);// 0x21c93d4
	void DelayRemoveParachuteAnim();// 0x21c93c0
	void ClientUserMoveCmdAck(int Sequence);// 0x21c9340
	void ClientRPCOnOverlapInteractiveComponent(InteractiveComponentBase* pComponent, bool isBeginOverlap);// 0x21c9274
	void ClientPlayEarSound(STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x21c9170
	void ClientInitParachuteLaunchStatus(Vector Vel);// 0x21c90f8
	void ClientAckGoodMove(float TimeStamp);// 0x21c9078
	void ClearHPUI();// 0x215a9f4
	void CheckServerCanLanded();// 0x21c9064
	bool CanAnimInstanceCacheParachuteAnim(STExtraAnimInstance* MyAnimInstance);// 0x21c8fe4
	void CallRefreshBPStateCheckIn();// 0x21c8fd0
	void AsyncLoadGunCollisionFinish(SoftClassPath GunCollisionPath);// 0x21c8e64
	void AnimInstanceCacheParachuteAnimVars(bool bForceRefreshAnim);// 0x21c8de4
	bool AllowTriggerActivities(bool bCheckCanReceive);// 0x21c8d5c
	void AdjustServerParachuteLanded(const Vector Position, const Rotator Rotation);// 0x21c8c70

--------------------------------
Class: WeaponAutoAimingComponent.ActorComponent.Object
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0xc8, Size: 32]
	AutoAimEnemyInfo LastSelectInfo;//[Offset: 0xe8, Size: 32]
	Vector2D AimTargetScreenPos;//[Offset: 0x108, Size: 8]
	bool LastAimSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	STExtraPlayerController* ExtraPlayerController;//[Offset: 0x114, Size: 4]
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x118, Size: 4]
	float LastSelectAimEnemyTime;//[Offset: 0x11c, Size: 4]
	float LastFindAimEnemyTime;//[Offset: 0x120, Size: 4]
	float AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x124, Size: 4]
	float AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x128, Size: 4]
	float DEFAULT_CD_TIME;//[Offset: 0x12c, Size: 4]
	float SCOPE_AUTO_AIM_TIME;//[Offset: 0x130, Size: 4]
	float OPEN_COLLISION_TIME;//[Offset: 0x134, Size: 4]
	float AIM_CROSSHAIR_CHECK_DELTA;//[Offset: 0x138, Size: 4]
	float LOCK_TARGET_TOLERANCE;//[Offset: 0x13c, Size: 4]
	float RANGE_SCALE;//[Offset: 0x140, Size: 4]
	float RANGE_SCALE_MAX;//[Offset: 0x144, Size: 4]
	float AC_AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x164, Size: 4]
	float AC_AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x168, Size: 4]
	float AC_DEFAULT_CD_TIME;//[Offset: 0x16c, Size: 4]
	float AC_SCOPE_AUTO_AIM_TIME;//[Offset: 0x170, Size: 4]
	float AC_RANGE_SCALE;//[Offset: 0x174, Size: 4]
	float AC_RANGE_SCALE_MAX;//[Offset: 0x178, Size: 4]
	float AC_AutoAimBreakThroughRatio;//[Offset: 0x17c, Size: 4]
	FName[] Bones;//[Offset: 0x180, Size: 12]
	<FName,Vector> BonesOffset;//[Offset: 0x18c, Size: 60]
	float TargetScreenWidth;//[Offset: 0x1c8, Size: 4]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 1]
	float AutoAimSensitiveScreenRatio;//[Offset: 0x1d0, Size: 4]
	bool bEnableAimSensitiveOnlyInGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	float AutoAimSensitiveAngle;//[Offset: 0x1d8, Size: 4]
	float AutoAimBreakThroughAngle;//[Offset: 0x1dc, Size: 4]
	float AutoAimBreakThroughRatio;//[Offset: 0x1e0, Size: 4]
	float AutoAimBreakThroughStart;//[Offset: 0x1e4, Size: 4]
	float AutoAimBreakThroughSensitiveScale;//[Offset: 0x1e8, Size: 4]
	bool BInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	bool bModifyCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 1]
	WeaponCrossHairPerformData[] CrossHairDataRifle;//[Offset: 0x3b4, Size: 12]
	WeaponCrossHairPerformData[] CrossHairDataPistol;//[Offset: 0x3c0, Size: 12]
	WeaponCrossHairPerformData[] CrossHairDataShotGun;//[Offset: 0x3cc, Size: 12]
	void OnUnEquipWeapon();// 0x22f7934
	void OnShoot(STExtraWeapon* Weapon);// 0x22f78bc
	void OnEquipWeapon();// 0x22f78a8
	void OnCharacterLeaveState(enum ChangedState);// 0x22f7830
	void OnCharacterEnterState(enum ChangedState);// 0x22f77b8
	bool IsTriggerBeforeFire();// 0x22f7790
	bool IsCurrentWeaponSupportAutoAim();// 0x22f7768
	void Init(Controller* Controller);// 0x22f76f0
	bool HasEnemyInAutoAimRange(float DeltaTime);// 0x22f7670
	void GetDataFromWeaponEntity();// 0x22f765c
	AutoAimEnemyInfo FindEnemyNearScreenCenter(out const Vector RayStart, float Radius, out const FName BoneName, float CollisionTime, bool HitMatchBone);// 0x22f7480
	bool CheckSmoke(out const Vector StartPoint, out const Vector EndPoint, STExtraPlayerCharacter* Pawn, out FName OutHitBoneName);// 0x22f72f4
	bool CheckInAngle(STExtraBaseCharacter* EnemyPawn, float MaxAngle);// 0x1ec4dbc
	bool CheckBuffStun();// 0x22f72cc
	bool CanEnemeyRaycastReach(out const Vector StartPoint, out const Vector EndPoint, STExtraPlayerCharacter* Pawn, out FName OutHitBoneName);// 0x22f7140
	bool CanAsynCalcuAimRange();// 0x22f7118
	void BPDrawDebugInfo(out const float[] AutoAimParams);// 0x22f7044

--------------------------------
Class: AutoAimEnemyInfo
	STExtraPlayerCharacter* EnemyPawn;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x18, Size: 8]

--------------------------------
Class: STScreenAppearanceComponent.ActorComponent.Object
	StaticMesh* AppearanceMeshTemplate;//[Offset: 0xf4, Size: 4]
	AppearanceMatData[] AppearancePresentList;//[Offset: 0xf8, Size: 12]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x104, Size: 4]
	AppearanceMeshData[] AppearanceMeshDataList;//[Offset: 0x108, Size: 12]
	ScreenParticleEffectData[] ScreenParticleEffectList;//[Offset: 0x114, Size: 12]
	FName ScreenPlane;//[Offset: 0x120, Size: 8]
	MltAppearanceMatData[] MultiAppearancePresentList;//[Offset: 0x128, Size: 12]
	AppearanceMatData[] CurAppearanceList;//[Offset: 0x134, Size: 12]
	CameraComponent* CurActiveCameraCache;//[Offset: 0x140, Size: 4]
	MultiAppearanceMeshData[] MultiAppearanceMeshData;//[Offset: 0x150, Size: 12]
	void UpdateMultiAppearancePresentList(float DeltaTime);// 0x224f86c
	void StopScreenParticleEffectByName(FString ScreenParticleName);// 0x224f7b0
	void StopScreenParticleEffect(byte EffectType);// 0x224f738
	void StopScreenAppearance(FString AppearanceName, bool StopFromPlayFunc);// 0x224f630
	void StopAllScreenParticleEffect();// 0x224f61c
	void StopAllScreenAppearance();// 0x224f608
	void SetTextureParameterValue(FString AppearanceName, FName ParamName, Texture* Tex);// 0x224f4c4
	void SetScreenParticleParam(byte EffectType, float InEffectValue);// 0x224f408
	bool SetScalarParam(FString AppearanceName, FName ParamName, float ParamValue);// 0x224f2b4
	void SetAppearanceActive(out const FName AppearanceName, bool bNewActive, bool bReset);// 0x224f188
	void SetAllAppearancesActive(bool bNewActive, bool bReset);// 0x224f0b8
	void SetAllAppearanceMeshHiddenInGame(bool bNewHid);// 0x224f038
	void PlayScreenParticleEffectByName(FString ScreenParticleName, float InEffectValue);// 0x224ef38
	void PlayScreenParticleEffect(byte EffectType, float InEffectValue);// 0x224ee7c
	MaterialInstanceDynamic* PlayPresentScreenAppearance(FString AppearanceName);// 0x224ed1c
	void PlayGraduallyShowOut(FString AppearanceKey, float Frag, float DelayTime);// 0x224eb3c
	void PlayGraduallyShowIn(FString AppearanceKey, float Frag, float DelayTime, float BeginAlpha);// 0x224e914
	MaterialInstanceDynamic* PlayCustomScreenAppearance(FString AppearanceName, MaterialInterface* MatToPlay, float LifeSpan, bool HideUI, FName InMatInstParamName, CurveFloat* InParamCurve);// 0x224e6e4
	void OnAsyncLoadingFinished(int AppearancePresentIndex);// 0x224e66c
	bool IsScreenAppearancePlaying(FString AppearanceName);// 0x224e5a8
	void HandleEffectLoadFinishByName(FString ScreenParticleName);// 0x224e450
	void HandleEffectLoadFinish(byte EffectType);// 0x224e3d8
	bool GetScalarParam(FString AppearanceName, FName ParamName, out float ParamValue);// 0x224e274

--------------------------------
Class: AppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 12]
	float LifeSpan;//[Offset: 0xc, Size: 4]
	bool IgnoreIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool HideUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x18, Size: 40]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x40, Size: 4]
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x44, Size: 4]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x50, Size: 48]
	FName MatInstParamName;//[Offset: 0x80, Size: 8]
	CurveFloat* ParamCurve;//[Offset: 0x88, Size: 4]

--------------------------------
Class: AppearanceMeshData
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x0, Size: 4]

--------------------------------
Class: ScreenParticleEffectData
	byte EffectType;//[Offset: 0x0, Size: 1]
	FString ScreenParticleEffectName;//[Offset: 0x4, Size: 12]
	ParticleSystem* ParticleEffect;//[Offset: 0x10, Size: 40]
	FName ParticleParamName;//[Offset: 0x38, Size: 8]
	FString[] ExtraScreenAppearanceList;//[Offset: 0x40, Size: 12]
	Vector ScreenParticleEffectLoc;//[Offset: 0x4c, Size: 12]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x58, Size: 4]
	bool KeepWorldRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	float CurrentParamValue;//[Offset: 0x60, Size: 4]
	byte DisableDeviceLevel;//[Offset: 0x64, Size: 1]

--------------------------------
Class: MltAppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 12]
	FName AppearanceTag;//[Offset: 0x10, Size: 8]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x20, Size: 48]
	MaterialInterface* ParentMaterial;//[Offset: 0x50, Size: 4]
	float MatialAlpha;//[Offset: 0x54, Size: 4]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x58, Size: 4]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x5c, Size: 4]
	bool IsLogicShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool IsShowOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	bool IsShowIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 1]
	float GradualFrag;//[Offset: 0x64, Size: 4]
	float DelayTime;//[Offset: 0x68, Size: 4]

--------------------------------
Class: MultiAppearanceMeshData
	StaticMeshComponent* MultiAppearanceMesh;//[Offset: 0x0, Size: 4]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x5c4, Size: 12]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x4405538
	Vector GetUnscaledBoxExtent();// 0x440550c
	Vector GetScaledBoxExtent();// 0x44054b4

--------------------------------
Class: NightVisionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Transform TPPRelativeTransform;//[Offset: 0x6a0, Size: 48]
	Transform FPPRelativeTransform;//[Offset: 0x6d0, Size: 48]
	Transform ScopeRelativeTransform;//[Offset: 0x700, Size: 48]
	void SetActivate(bool _IsActivate);// 0x2072b30

--------------------------------
Class: CustomParticleSystemComponent.ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor*[] CollisionIgnoreActors;//[Offset: 0x7b4, Size: 12]
	bool bShowImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 1]
	void AddCollisionIgnoreActor(Actor* IgnoreActor);// 0x1f87dec

--------------------------------
Class: SpringArmParams
	CameraParams CameraParam;//[Offset: 0x0, Size: 8]
	SceneComponent* ParentComp;//[Offset: 0x8, Size: 4]
	FName ParentSocketName;//[Offset: 0x10, Size: 8]
	float TargetArmALength;//[Offset: 0x18, Size: 4]
	Vector SocketOffset;//[Offset: 0x1c, Size: 12]
	Vector TargetOffset;//[Offset: 0x28, Size: 12]
	Vector RelativeLocation;//[Offset: 0x34, Size: 12]
	float ProbeSize;//[Offset: 0x40, Size: 4]
	byte ProbeChannel;//[Offset: 0x44, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 1]
	float CameraLagSpeed;//[Offset: 0x48, Size: 4]
	bool bEnableCustomSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]

--------------------------------
Class: CameraParams
	float FieldOfView;//[Offset: 0x0, Size: 4]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: AirAttackLocatorComponent.ActorComponent.Object
	float AALOpenMotionSensibility;//[Offset: 0xbc, Size: 4]
	float AALOpenSensibility;//[Offset: 0xc0, Size: 4]
	float OpenAALFOV;//[Offset: 0xc4, Size: 4]
	int MaxDist;//[Offset: 0xc8, Size: 4]
	int minDist;//[Offset: 0xcc, Size: 4]
	int DangerDist;//[Offset: 0xd0, Size: 4]
	ParticleSystem* FreeArrowParticle;//[Offset: 0xd8, Size: 40]
	class AirAttackLocatorCalledActor* AirAttackActorTemplate;//[Offset: 0x100, Size: 40]
	AirAttackLocatorCalledActor* AirAttackLocatorCalledActor;//[Offset: 0x128, Size: 4]
	ParticleSystemComponent* FreeArrowComp;//[Offset: 0x12c, Size: 4]
	ParticleSystemComponent* FixedArrowComp;//[Offset: 0x130, Size: 4]
	float FixArrowScaleDistance;//[Offset: 0x138, Size: 4]
	float ArrowScaleFactor1;//[Offset: 0x13c, Size: 4]
	float ArrowScalePlus1;//[Offset: 0x140, Size: 4]
	float ArrowScaleFactor2;//[Offset: 0x144, Size: 4]
	float ArrowScalePlus2;//[Offset: 0x148, Size: 4]
	float ShortDis;//[Offset: 0x14c, Size: 4]
	byte ChannelType;//[Offset: 0x150, Size: 1]
	Vector TargetLocation;//[Offset: 0x154, Size: 12]
	void SetItemExsist(bool bExsist);// 0x1ecb4f0
	void SetFinalLocation();// 0x1ecb4dc
	void SetAALFov(bool bOpen);// 0x1ecb45c
	void ServerSetAirAttackLocation(Vector BeginLocation, Vector EndLocation);// 0x1ecb344
	void OnFreeArrowLoadFinsh();// 0x1ecb330
	void OnCalledActorLoadFinsh(Vector Location);// 0x1ecb2c0
	float GetTargetDistance();// 0x1ecb298
	bool GetAALAvaliable();// 0x1ecb270

--------------------------------
Class: AirAttackLocatorCalledActor.Pawn.Actor.Object
	float DestoryTime;//[Offset: 0x340, Size: 4]
	float AirAttackDelayTime;//[Offset: 0x344, Size: 4]
	int SkillID;//[Offset: 0x348, Size: 4]
	int IconID;//[Offset: 0x34c, Size: 4]
	float AttackAreaRadius;//[Offset: 0x350, Size: 4]

--------------------------------
Class: FanPickerConfigData
	float Radius;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]
	float CapsuleRadius;//[Offset: 0x8, Size: 4]
	Vector Offset;//[Offset: 0xc, Size: 12]
	bool Random;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool IsCheckHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool IsHeadJudgeWithoutOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bPickUpMonsters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIgnoreAimCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	class Actor[] IgnoredActors;//[Offset: 0x20, Size: 12]
	bool bForwardHitAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	enum PickerType;//[Offset: 0x2d, Size: 1]
	enum PickerTargetType;//[Offset: 0x2e, Size: 1]
	int PickerMaxCount;//[Offset: 0x30, Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	Actor*[] IgnoreTargets;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: ActivityAnimationRepData
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 4]

--------------------------------
Class: ActivityActorBase.CustomDecoratorActor.DecoratorActor.LuaActor.Actor.Object
	Character* ClientMainCharacter;//[Offset: 0x400, Size: 8]
	Character* CurActiveCharacter;//[Offset: 0x408, Size: 8]
	bool bIsInFightingUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	bool bActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 1]
	bool bClientActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x412, Size: 1]
	bool bIsCoolingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x413, Size: 1]
	bool bIsOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	bool bButtonShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 1]
	MeshComponent* Mesh;//[Offset: 0x418, Size: 4]
	ShapeComponent* ShapeCollision;//[Offset: 0x41c, Size: 4]
	delegate OnActorReset;//[Offset: 0x420, Size: 12]
	bool bActivityEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	bool bUseDSOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42d, Size: 1]
	bool bEanbleSimulatedInteractive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42e, Size: 1]
	FString actorName;//[Offset: 0x430, Size: 12]
	FString ActivityName;//[Offset: 0x43c, Size: 12]
	int SkillIndex;//[Offset: 0x448, Size: 4]
	enum SkillEntry;//[Offset: 0x44c, Size: 1]
	AnimMontage* SoftAnimMontage;//[Offset: 0x450, Size: 40]
	bool bShowButtonWhenActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	bool bButtonShowWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 1]
	int ButtonShowTextID;//[Offset: 0x47c, Size: 4]
	FString ButtonShowAdditionalTextString;//[Offset: 0x480, Size: 12]
	Object* ButtonShowPic;//[Offset: 0x490, Size: 40]
	int ButtonShowConsumeItemID;//[Offset: 0x4b8, Size: 4]
	int CancleButtonShowTextID;//[Offset: 0x4bc, Size: 4]
	Object* CancleButtonShowPic;//[Offset: 0x4c0, Size: 40]
	enum[] SpecialInteractivePawnState;//[Offset: 0x4e8, Size: 12]
	bool bIsIgnoreShootHistoryLocusVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 1]
	bool bEnablePickupInActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f5, Size: 1]
	bool bEnableSyncControllerRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f6, Size: 1]
	bool bButtonShowCheckObstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f7, Size: 1]
	float CoolDownTime;//[Offset: 0x4f8, Size: 4]
	int ConsumeItemType;//[Offset: 0x4fc, Size: 4]
	int ConsumeItemID;//[Offset: 0x500, Size: 4]
	int ConsumeItemNum;//[Offset: 0x504, Size: 4]
	bool bShouldOccupy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	float OccupiedStateTimeout;//[Offset: 0x50c, Size: 4]
	int NetRegionSize;//[Offset: 0x510, Size: 4]
	bool bUseDefautInteractiveBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 1]
	bool bUseCodeKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x515, Size: 1]
	int CodeKey;//[Offset: 0x518, Size: 4]
	delegate OnOccupyDelegate;//[Offset: 0x534, Size: 12]
	delegate OnCoolDownDelegate;//[Offset: 0x540, Size: 12]
	delegate OnUpdateButton;//[Offset: 0x54c, Size: 12]
	delegate OnActivityEnableUpdated;//[Offset: 0x558, Size: 12]
	void UpdateButtonInfo(Character* Character, bool bShow, bool bForce);// 0x1eb9bd0
	void TriggerSkillEvent(Character* Character);// 0x1eb9b50
	void StartOccupied();// 0x1eb9b3c
	void StartCoolDown();// 0x1eb9b28
	void SetEnable(bool bIsEnable);// 0x1eb9aa8
	void OnRep_bIsOccupied();// 0x1eb9a94
	void OnRep_bIsCoolingDown();// 0x1eb9a80
	void OnRep_bActivityEnable();// 0x1eb9a6c
	void OnRep_bActived();// 0x1eb9a58
	void OnOccupyFinished();// 0x1eb9a44
	void OnNotifyActivityOverlap(Character* Character, bool IsBegin);// 0x1eb9980
	void OnHandleSkillEndEvent(Character* Character, enum StopReason, int SkillID);// 0x1eb9878
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1eb9728
	void OnCoolDownFinished();// 0x1eb9714
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1eb9510
	void NotifyActivityOverlap(Character* Character, bool IsBegin);// 0x1eb944c
	bool LocalStartActive(Character* Character);// 0x1eb93c4
	void LocalReset(Character* Character);// 0x1eb9344
	bool LocalInterruptActive(Character* Character);// 0x1eb92bc
	bool LocalActiveFinished(Character* Character);// 0x1eb9234
	bool IsOccupied();// 0x1eb920c
	bool IsCoolingDown();// 0x1eb91e4
	bool IsConsumeItemEnough();// 0x1eb91bc
	bool IsCharaterInActived(Character* InCharacter);// 0x1eb9134
	bool IsAllowInteractive(Character* Character, out int Reason, bool bEanbleSimulated);// 0x1eb9010
	void GetRegionID(out RegionID OutRegionID);// 0x1eb8f68
	bool GetRegionBasedNetConsideration();// 0x1eb8f38
	MeshComponent* GetMesh();// 0x1eb8f1c
	Character* GetMainCharacter();// 0x1eb8ef4
	byte GetIsWeakNetUpdate();// 0x1eb8ec4
	int GetConsumeItemNum();// 0x1eb8e9c
	int GetConsumeItemID();// 0x1eb8e74
	int GetConsumeItemCurCount();// 0x1eb8e4c
	Character* GetActivedCharacter();// 0x1eb8e1c
	void ForceNetConsider();// 0x1eb8e00
	bool ClientClickCancleButton(Character* Character, out int OutReason);// 0x1eb8d2c
	bool ClientClickButton(Character* Character, out int OutReason);// 0x1eb8c50
	void CheckedActivityOverlap(Character* Character, bool IsServerOverlaped, bool IsBegin);// 0x1eb8b34
	void CheckActivityOverlap(Character* Character, bool IsBegin);// 0x1eb8a70
	void BPUpdateInteractiveUI(Character* Character);// 0x1eb89f0
	void BPUpdateButtonInfo();// 0x2bb69b8
	bool BPStartActive(Character* Character, bool bSuccess, bool bClient);// 0x1eb88cc
	bool BPShowButton(Character* Character, bool bShow);// 0x1eb87f8
	void BPReset(Character* Character);// 0x1eb8778
	void BPOnCharacterAttached(Character* InCharacter);// 0x1eb86f8
	bool BPInterruptActive(Character* Character, bool bSuccess, bool bClient);// 0x1eb85d4
	AnimMontage* BPGetSoftAnimMontage(Character* InCharacter);// 0x1eb84e8
	bool BPClientClickCancleButton(Character* Character, int Reason);// 0x2bb69b8
	bool BPClientClickButtonFailed(Character* Character, int Reason);// 0x2bb69b8
	bool BPClickButton(Character* Character, int Reason);// 0x1eb841c
	bool BPAllowShowButton(Character* Character, out int Reason);// 0x1eb8340
	bool BPAllowInteractive(Character* Character);// 0x1eb82b8
	bool BPAllowClickButton(Character* Character);// 0x1eb8230
	void BPActiveStateChange();// 0x2bb69b8
	bool BPActiveFinished(Character* Character, bool bSuccess, bool bClient);// 0x1eb810c
	bool AllowShowButton(Character* Character, out int Reason);// 0x1eb8030
	bool AllowInteractive(Character* Character, out int Reason);// 0x1eb7f54
	bool AllowClickButton(Character* Character, out int Reason);// 0x1eb7e78

--------------------------------
Class: CustomDecoratorActor.DecoratorActor.LuaActor.Actor.Object
	int[] CustomIntValueArray;//[Offset: 0x3f0, Size: 12]
	bool SetCustomIntValue(int Index, int Value);// 0x1f86920
	int GetCustomIntValue(int Index);// 0x1f868a0

--------------------------------
Class: DecoratorActor.LuaActor.Actor.Object
	int resID;//[Offset: 0x3c8, Size: 4]
	int TlogID;//[Offset: 0x3cc, Size: 4]
	int Health;//[Offset: 0x3d0, Size: 4]
	int TeamID;//[Offset: 0x3d4, Size: 4]
	int IconID;//[Offset: 0x3d8, Size: 4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	bool bDisableCollisionOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd, Size: 1]
	delegate OnHealthChangeNotify;//[Offset: 0x3e0, Size: 12]
	bool bShowBulletImpactEffectInOnlyAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ee, Size: 1]
	void ShowIconInPlayerMap(uint32 PlayerKey);// 0x1f98c94
	void ShowIconInMap();// 0x1f98c80
	bool ShouldTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x1f98b04
	void SetHealth(int ToHealth);// 0x1f98a90
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x1f98980
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x1f98844
	void OnRep_Health();// 0x1f98830
	void OnDie();// 0x1f98814
	void OnBPRespawned();// 0x1ecd2bc
	bool IsDead();// 0x1f987ec
	void HideIconInMap();// 0x1f987d8
	int GetHitBodyType(FString HitPart);// 0x1f98670
	int GetActorResId();// 0x1f98654
	void EatEffectMulticast(FString DriverKey);// 0x1f98590
	void Client_OnEatEffect(FString DriverKey);// 0x2bb69b8
	float BPTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, out const HitResult HitResult);// 0x1f983a8

--------------------------------
Class: LuaActor.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x340, Size: 60]
	FString LuaFilePath;//[Offset: 0x37c, Size: 12]
	void UnRegistLuaTick();// 0x5238ebc
	void RegistLuaTick(float TickInterval);// 0x5238e44

--------------------------------
Class: RegionID

--------------------------------
Class: InteractiveComponentBase.LuaActorComponent.ActorComponent.Object
	delegate OnAllowToInteract;//[Offset: 0x150, Size: 16]
	delegate OnInteractionEffective;//[Offset: 0x160, Size: 16]
	delegate OnClientShowInteractiveUI;//[Offset: 0x170, Size: 12]
	delegate OnServerAddOrDeleteComponent;//[Offset: 0x17c, Size: 12]
	delegate OnServerRPCSetOccupied;//[Offset: 0x188, Size: 12]
	delegate OnServerClickInteractiveButton;//[Offset: 0x194, Size: 12]
	delegate OnStartCoolDown;//[Offset: 0x1a0, Size: 12]
	delegate OnRepOccupied;//[Offset: 0x1ac, Size: 12]
	delegate OnRepCoolDown;//[Offset: 0x1b8, Size: 12]
	delegate OnRepCurrentCharacter;//[Offset: 0x1c4, Size: 12]
	delegate OnRepCurrentCharacterArray;//[Offset: 0x1d0, Size: 12]
	delegate OnRepEnabled;//[Offset: 0x1dc, Size: 12]
	delegate OnResetSkillAction;//[Offset: 0x1e8, Size: 12]
	delegate OnStartedSkillAction;//[Offset: 0x1f4, Size: 12]
	delegate OnFinishedSkillAction;//[Offset: 0x200, Size: 12]
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x20c, Size: 4]
	PrimitiveComponent*[] PrimitiveComponentArray;//[Offset: 0x210, Size: 12]
	Character* OccupyingCharacter;//[Offset: 0x21c, Size: 8]
	Character*[] OccupyingCharacterArray;//[Offset: 0x224, Size: 12]
	bool bIsCooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	int CoolDownLeftTimeForShow;//[Offset: 0x234, Size: 4]
	bool bOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 1]
	FName PrimitiveComponentTag;//[Offset: 0x240, Size: 8]
	int CollisionsNum;//[Offset: 0x248, Size: 4]
	bool bShowedMultiplayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	bool bOnlyInFightingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 1]
	bool bCheckBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 1]
	bool bCanInteractInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f, Size: 1]
	bool bCanInteractWhenNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	bool bCanInteractInCarryBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 1]
	bool bAllowWhenCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252, Size: 1]
	int TipsIdWhenClickedInCoolDown;//[Offset: 0x254, Size: 4]
	float CoolDownTime;//[Offset: 0x258, Size: 4]
	float MaxOccupyingTime;//[Offset: 0x25c, Size: 4]
	int MaxOccupyingCharacterNum;//[Offset: 0x260, Size: 4]
	int TLogKey;//[Offset: 0x264, Size: 4]
	Volume* CustomTriggerVolume;//[Offset: 0x268, Size: 4]
	int DebugParameter;//[Offset: 0x26c, Size: 4]
	int SkillID;//[Offset: 0x270, Size: 4]
	bool bResetSkillData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	float LoadingDuration;//[Offset: 0x278, Size: 4]
	AnimMontage* FPS_AnimMontage_Stand;//[Offset: 0x280, Size: 40]
	AnimMontage* FPS_AnimMontage_Crouch;//[Offset: 0x2a8, Size: 40]
	AnimMontage* FPS_AnimMontage_Prone;//[Offset: 0x2d0, Size: 40]
	AnimMontage* FPS_AnimMontage_Vehicle;//[Offset: 0x2f8, Size: 40]
	AnimMontage* TPS_AnimMontage_Stand;//[Offset: 0x320, Size: 40]
	AnimMontage* TPS_AnimMontage_Crouch;//[Offset: 0x348, Size: 40]
	AnimMontage* TPS_AnimMontage_Prone;//[Offset: 0x370, Size: 40]
	AnimMontage* TPS_AnimMontage_Vehicle;//[Offset: 0x398, Size: 40]
	void SetOccupied(Character* Character, bool bOccupied);// 0x20280ec
	void SetEnable(bool bIsEnable);// 0x202806c
	void ServerAddOrDeleteInteractiveComponent(Character* Character, bool bAdd);// 0x2027fa8
	void OnRep_Occupied();// 0x2027f94
	void OnRep_Enabled();// 0x2027f80
	void OnRep_CurrentCharacterArray();// 0x2027f6c
	void OnRep_CurrentCharacter();// 0x2027f58
	void OnRep_CoolDown();// 0x2027f44
	void OnEndOverlap(PrimitiveComponent* SelfComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, int OtherBodyIndex);// 0x2027dfc
	void OnBeginOverlap(PrimitiveComponent* SelfComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2027c00
	bool IsOverlappingByCharacter(Character* Character);// 0x2027b80
	bool IsEnabled();// 0x2027b58
	bool IsCoolingDown();// 0x2027b30
	int GetInteractiveCharacterNum();// 0x2027b08
	void GetCurrentOccupyingCharacterArray(out Character*[] OutActors);// 0x2027a3c
	Character* GetCurrentOccupyingCharacter();// 0x2027a14
	int GetCoolDownLeftTimeForShow();// 0x20279ec
	void GetAllInteractiveCharacters(out Character*[] OutActors);// 0x2027920

--------------------------------
Class: AngledSightRepData
	byte AngledSightType;//[Offset: 0x0, Size: 1]
	bool IsOnlyTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: ActicityDisallowedData
	enum[] DisallowedStates;//[Offset: 0x0, Size: 12]
	int ActivityID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WarteringAreaCPP.UAERegionActor.Actor.Object
	delegate OnPlayerBeforeAttachedToThisDelegate;//[Offset: 0x350, Size: 12]
	delegate OnPlayerAttachedToThisDelegate;//[Offset: 0x35c, Size: 12]
	delegate OnPlayerDettachedFromThisDelegate;//[Offset: 0x368, Size: 12]
	bool bModifyCharacterMeshTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	bool bForceSkipCharacterMeshRotCheckWhenHasThisMiniTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375, Size: 1]
	bool bCanEnterVehicleWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x376, Size: 1]
	bool bCanPickUpWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x377, Size: 1]
	BunnyDanceSyncData DanceTimeStamp;//[Offset: 0x378, Size: 12]
	float CurrentScale;//[Offset: 0x384, Size: 4]
	int CurActTime;//[Offset: 0x388, Size: 4]
	PlayerController*[] PlayerCDTable;//[Offset: 0x38c, Size: 12]
	bool bIsInMasterCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	FName SocketBaseTags;//[Offset: 0x3a0, Size: 8]
	float CurrentCarouselRotationAccel;//[Offset: 0x3a8, Size: 4]
	float CurrentCarouselRotation;//[Offset: 0x3ac, Size: 4]
	int CurrentInteractingPlayerCount;//[Offset: 0x3b0, Size: 4]
	int PlayerNumberForTriggerEvent;//[Offset: 0x3b4, Size: 4]
	SocketAttachmentInternalData[] OccupiedSockets;//[Offset: 0x3b8, Size: 12]
	SocketAttachmentNameTable[] SocketNames;//[Offset: 0x3c4, Size: 12]
	int AttachedNumber;//[Offset: 0x3d4, Size: 4]
	<SceneComponent*,int> SkeletalMeshAttachCounter;//[Offset: 0x3d8, Size: 60]
	SkeletalAnimationSyncData[] SkeletalAnimationSyncData;//[Offset: 0x414, Size: 12]
	Vector[] DropOffLocations;//[Offset: 0x42c, Size: 12]
	enum DropOffLocationType;//[Offset: 0x438, Size: 1]
	bool bDropOffRelativeUseLocationOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 1]
	int AssociatedSkillIndex;//[Offset: 0x43c, Size: 4]
	STExtraBaseCharacter*[] AttachedPlayers;//[Offset: 0x440, Size: 12]
	byte IsDayTime;//[Offset: 0x44c, Size: 1]
	bool ShowRabbitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44d, Size: 1]
	Pawn*[] PawnDoneList;//[Offset: 0x450, Size: 12]
	bool bUseFixedDropPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 1]
	enum FixedDropOffLocationType;//[Offset: 0x45d, Size: 1]
	Vector[] FixedRelativeDropPositions;//[Offset: 0x460, Size: 12]
	bool bCanBePicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c, Size: 1]
	bool UseDropFixedPosition();// 0x22f3890
	void StopDancing_Multicast(const Actor*[] Players);// 0x22f379c
	void StartDancing_Multicast(int MontageIndex, const Actor*[] Players);// 0x22f3660
	void SpawnTreeParticleCPP_Multicast(PlayerController* PlayerController);// 0x22f35ac
	static void SetupMinimapDisplay(UAEPlayerController* PController, out const LoveTreeData[] treeData);// 0x22f34a4
	void SetCDFlagByPC(PlayerController* PlayerController);// 0x22f342c
	void ServerDoWaterLogic(PlayerController* PlayerController, FString ExMsg);// 0x2bb69b8
	void ResetPCByTime(PlayerController* PlayerController, float cdTime);// 0x22f3370
	void OnTimeStampRep(out const BunnyDanceSyncData SyncData);// 0x22f32cc
	void OnStopDancing(out const Actor*[] Players);// 0x22f31f8
	void OnStartDancing(int MontageIndex, out const Actor*[] Players);// 0x22f30e0
	void OnSpawnTreeParticleCPP(PlayerController* PlayerController);// 0x22f3060
	void OnSkeletalAnimationSyncData(out const SkeletalAnimationSyncData InSkeletalAnimationSyncData);// 0x2bb69b8
	void OnSkeletalAnimationStateChanged(SceneComponent* AttachedComponent, bool bShouldStartAnimation);// 0x2bb69b8
	void OnRep_TimeStamp(out const BunnyDanceSyncData SyncData);// 0x22f2fc4
	void OnRep_SkeletalAnimationSyncData();// 0x22f2fb0
	void OnRep_ShowRabbitAnim();// 0x1ecd2bc
	void OnRep_PawnDoneList();// 0x1f3ed9c
	void OnRep_IsDayTime();// 0x1ecd2d8
	void OnRep_CurrentScaleCPP();// 0x22f2f9c
	void OnRep_CurrentScaleBP();// 0x2bb69b8
	void OnRep_CurrentInteractingPlayerCount();// 0x22f2f48
	void OnRep_CurActTimeCPP();// 0x22f2ef4
	void OnRep_CurActTimeBP();// 0x2bb69b8
	void OnRep_AttachedNumber();// 0x22f2e94
	void OnPlayersDance(out const Actor*[] Players, int MontageIndex, float JoinTime);// 0x22f2d34
	void OnPlayerNumberChanged(int Number);// 0x2bb69b8
	void OnPlayerDetached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x2bb69b8
	void OnPlayerAttached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x2bb69b8
	void OnPCCDCleared(PlayerController* PlayerController);// 0x2bb69b8
	void OnClientCurrentInteractingPlayerCountChanged();// 0x2bb69b8
	bool IsDropFixedRelativePositionSetUp();// 0x22f2d04
	bool GetIsPCInCD(PlayerController* PlayerController);// 0x22f2c84
	Vector GetDropFixedRelativePosition(Actor* DropOwner);// 0x22f2bec
	void DispatchPlayerDance_Multicast(const Actor*[] Players, int MontageIndex, float JoinTime);// 0x22f2a68
	bool CanTriggertEvent(Pawn* CurPawn);// 0x2bb69b8
	int CacheAssociatedSkillIndex();// 0x2bb69b8

--------------------------------
Class: UAERegionActor.Actor.Object
	bool bStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	enum RegionSize;//[Offset: 0x301, Size: 1]
	bool bNeedUpdateNetworkInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302, Size: 1]

--------------------------------
Class: BunnyDanceSyncData
	int CurrentIndex;//[Offset: 0x0, Size: 4]
	bool bIsDancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float TimeStamp;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SocketAttachmentInternalData
	FName SocketName;//[Offset: 0x0, Size: 8]
	SceneComponent* SocketBase;//[Offset: 0x8, Size: 4]
	Actor* AttachedPlayer;//[Offset: 0xc, Size: 4]
	Vector OffsetLoc;//[Offset: 0x10, Size: 12]
	Rotator OffsetRot;//[Offset: 0x1c, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x28, Size: 4]

--------------------------------
Class: SocketAttachmentNameTable
	FName SocketName;//[Offset: 0x0, Size: 8]
	Vector OffsetLoc;//[Offset: 0x8, Size: 12]
	Rotator OffsetRot;//[Offset: 0x14, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x20, Size: 4]

--------------------------------
Class: SkeletalAnimationSyncData
	SceneComponent* SocketBase;//[Offset: 0x0, Size: 4]
	bool Status;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: LoveTreeData
	int ID;//[Offset: 0x0, Size: 4]
	Vector Loc;//[Offset: 0x4, Size: 12]
	float minRate;//[Offset: 0x10, Size: 4]
	float maxRate;//[Offset: 0x14, Size: 4]

--------------------------------
Class: PlayerRoleCacheFrameData

--------------------------------
Class: PlayerTombBox.LuaActor.Actor.Object
	delegate OnPickUpListWrapperDataEmptyDelegate;//[Offset: 0x3cc, Size: 12]
	FName TombName;//[Offset: 0x3d8, Size: 8]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x3e4, Size: 4]
	STExtraBaseCharacter* DamageCauser;//[Offset: 0x3e8, Size: 4]
	ItemDefineID KillByItemDefineID;//[Offset: 0x3f0, Size: 24]
	int DeadTime;//[Offset: 0x408, Size: 4]
	int BoxLifeSpan;//[Offset: 0x40c, Size: 4]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x414, Size: 12]
	byte AttackRules;//[Offset: 0x420, Size: 1]
	Actor* AttachedActor;//[Offset: 0x424, Size: 4]
	bool bIsLastDiedInTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	enum BoxType;//[Offset: 0x429, Size: 1]
	ItemTombParticle[] TombBoxItemEffect;//[Offset: 0x42c, Size: 12]
	uint32 OwnerUniqueID;//[Offset: 0x438, Size: 4]
	int TargetPlayerKey;//[Offset: 0x43c, Size: 4]
	bool bAutoShowItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	float AirDropBoxNetCullDistanceSquaredRate;//[Offset: 0x444, Size: 4]
	bool bBoxVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	bool bDropEffectVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 1]
	bool bAirDropWrapperDynamicRegionNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44a, Size: 1]
	int AvatarID;//[Offset: 0x44c, Size: 4]
	Character* BoxOwner;//[Offset: 0x450, Size: 4]
	PickUpListWrapperActor* BoxPickupWrapperActor;//[Offset: 0x454, Size: 8]
	PickUpListWrapperActor* ItemEffectBoxPickupWrapperActor;//[Offset: 0x45c, Size: 8]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x464, Size: 4]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 1]
	int DropGroupID;//[Offset: 0x46c, Size: 4]
	Vector DropStartLocation;//[Offset: 0x470, Size: 12]
	void SwitchToDeadTombBox();// 0x1ecd2bc
	void SetVisible(bool IsVisible);// 0x20a577c
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x20a5614
	void RegisterToPlayerPickUpList();// 0x20a5600
	void RegisterToCurveAnimComponent();// 0x1f7d404
	void OpenListenUIEvent(bool bOpen);// 0x2bb69b8
	void OnRep_VisibilityChange();// 0x20a55ec
	void OnRep_ItemEffectBoxPickupWrapperActor();// 0x20a55d8
	void OnRep_ChangeBoxMesh();// 0x1ee1bb4
	void OnRep_BoxLifeSpan();// 0x20a55c4
	void OnRep_AvatarId();// 0x1fadc30
	void OnRep_AttachmentReplication();// 0x1ff4a28
	void OnRep_AttachedActor();// 0x20a55b0
	void OnRefreshItemEffect();// 0x20a559c
	void HideDeadTombApparence();// 0x1f3ed9c
	int GetUniqueInstanceID();// 0x20a5574
	int GetTombboxLifespan();// 0x20a554c
	PickUpListWrapperActor* GetPickupWrapperActor();// 0x20a5530
	void GetDropItemListFromPlayer(out PickUpItemData[] ItemDataList);// 0x20a5484
	PickUpListWrapperActor* GetBoxPickupWrapperActor();// 0x20a5454
	int GetAvatarId();// 0x20a542c
	void GenerateTreasureBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName);// 0x20a5310
	void GeneratePlayerBackpackWrappers();// 0x20a52fc
	PickUpListWrapperActor* GenerateBoxWrappersInner(class Object WrapperClass, out const PickUpItemData[] DataList, FName BoxName, bool AttachToBox);// 0x20a5164
	void GenerateBoxWrappersByPickUpItemDataList(out const PickUpItemData[] DataList, FName BoxName);// 0x20a5068
	void GenerateBoxWrappersByItemDataList(out const PickUpItemData[] DataList, FName BoxName, bool IsInAirDropBox);// 0x20a4f20
	void GenerateAirDropBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName, int AirDropBoxID);// 0x20a4dc0
	bool CanPickByPawn(Pawn* Pawn);// 0x1f3ba28

--------------------------------
Class: ItemTombParticle
	ParticleSystem* SoftPS;//[Offset: 0x0, Size: 40]
	ParticleSystemComponent* PS;//[Offset: 0x28, Size: 4]
	<int> ItemSpecificIDArray;//[Offset: 0x2c, Size: 60]

--------------------------------
Class: PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0x684, Size: 12]
	enum BoxType;//[Offset: 0x69c, Size: 1]
	void RPC_Broadcast_NotifyAllClientsModifyCount(int ItemInstanceID, int RetCount);// 0x2089b58
	void RPC_Broadcast_ForceSyncAllData(const PickUpItemData[] DataList);// 0x2089a84
	void OnWrapperEmptyDelegate__DelegateSignature();// 0x2bb69b8
	void OnSomeonePickItemDelegate__DelegateSignature(uint32 PlayerKey);// 0x2bb69b8
	void OnRep_PickUpDataList();// 0x2089a70
	void OnPickUpDataListChangedDelegate__DelegateSignature();// 0x2bb69b8
	void OnBoxEmptyDelegate__DelegateSignature(int boxId);// 0x2bb69b8
	PickUpItemData[] GetDataList();// 0x2089a04
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x20898b4

--------------------------------
Class: PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	float NetCullDistanceSquaredRate;//[Offset: 0x3dc, Size: 4]
	bool DestroyStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	ItemDefineID DefineID;//[Offset: 0x3e8, Size: 24]
	int Count;//[Offset: 0x400, Size: 4]
	bool bCanBePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x406, Size: 1]
	FString[] ForbitPickPlayerNameList;//[Offset: 0x408, Size: 12]
	bool bForceDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	bool bIsInAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 1]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x416, Size: 1]
	FName OwnerName;//[Offset: 0x418, Size: 8]
	uint32 OwnerUniqueID;//[Offset: 0x420, Size: 4]
	float OwnerTime;//[Offset: 0x424, Size: 4]
	bool bUseAttachedRelLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x42c, Size: 12]
	Actor* AttachedActor;//[Offset: 0x438, Size: 4]
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x43c, Size: 12]
	bool bForceRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x44c, Size: 4]
	float PickUpColdCountDown;//[Offset: 0x450, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x478, Size: 4]
	bool IsTrainModeSingleCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	float SingleTrainingModePickUpColdCD;//[Offset: 0x480, Size: 4]
	ItemSpotSceneComponent* ItemSpotSceneComponent;//[Offset: 0x484, Size: 4]
	FString ItemValue;//[Offset: 0x488, Size: 12]
	FString ItemCategory;//[Offset: 0x494, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 1]
	bool bForceNotRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a1, Size: 1]
	delegate OnWrapperPickedUp;//[Offset: 0x4a8, Size: 12]
	StaticMeshComponent* PickupMesh;//[Offset: 0x4b8, Size: 4]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x4bc, Size: 4]
	int ObjectPoolSize;//[Offset: 0x4c0, Size: 4]
	bool ObjectPoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c5, Size: 1]
	int InBoxEffectDurationTime;//[Offset: 0x4c8, Size: 4]
	FString EffectPath;//[Offset: 0x4cc, Size: 12]
	FString DurationTime;//[Offset: 0x4d8, Size: 12]
	int ItemId;//[Offset: 0x4e4, Size: 4]
	Color DefaultColor;//[Offset: 0x4e8, Size: 4]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 1]
	DropGroundEffectInfo DropGroundEffectInfo;//[Offset: 0x4f0, Size: 128]
	DropGroundEffectInfo DropTrailEffectInfo;//[Offset: 0x570, Size: 128]
	ParticleSystemComponent* DropGroundEffectComp;//[Offset: 0x5f0, Size: 4]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x630, Size: 4]
	SoftObjectPath PickUpEffectPath;//[Offset: 0x640, Size: 24]
	UAENetDriver* NetDriver;//[Offset: 0x658, Size: 4]
	int SpotDataIndex;//[Offset: 0x660, Size: 4]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 1]
	int DropGroupID;//[Offset: 0x670, Size: 4]
	Vector DropStartLocation;//[Offset: 0x674, Size: 12]
	void UpdateAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x208ebd0
	FString ToDetailString();// 0x208eb08
	void ShowMesh(bool bShow);// 0x208ea88
	void ShowActor();// 0x208ea74
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x208e90c
	void SetDefineIDWhenDroped(out const ItemDefineID DID);// 0x208e87c
	void SetDefineID(out const ItemDefineID DID);// 0x208e7ec
	void SetCountOnServerAfterSpawn(int _Count);// 0x208e774
	void SetActorToGround(Actor* IgnoreActor);// 0x208e6c0
	void ServerResetShowActor();// 0x208e6ac
	void RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList(const BattleItemAdditionalData[] DataList);// 0x208e550
	void RPC_Broadcast_NotifyAllClientsHideActorForSomeTime(float Time);// 0x208e49c
	void RegisterToCurveAnimComponent();// 0x208e488
	void PickUpWrapperShow__DelegateSignature();// 0x2bb69b8
	void PickUpWrapperHide__DelegateSignature(float InRefreshTimeStamp);// 0x2bb69b8
	void OnWrapperPickedDelegate__DelegateSignature();// 0x2bb69b8
	void OnSpawned();// 0x1f7acc8
	void OnRespawnedEvent();// 0x1ecd2a0
	void OnRep_PickUpColdCountDown();// 0x208e474
	void OnRep_Owner();// 0x2087384
	void OnRep_DropGroundEffectInfo();// 0x208e460
	void OnRep_DefindID();// 0x208e44c
	void OnRep_Count();// 0x1ecd2d8
	void OnRep_AttachmentReplication();// 0x1ff4a28
	void OnRep_AttachedActor();// 0x208e438
	void OnLoadDropEffectFinish(DropGroundEffectInfo effectInfo);// 0x208e220
	void OnHideActor(bool bHide);// 0x208e190
	void OnDestroyed();// 0x208e174
	void OnActorDestroyed();// 0x208e158
	void ModifyData(int _Count);// 0x208e0e0
	void MarkPlayerPlayerInfoByDropped(STExtraBaseCharacter* InDroppedPlayer);// 0x208e068
	void MarkIsDropedByPlayerOnServer(bool Ret, Actor* AttachTarget);// 0x208dfa0
	bool LoadDynamicMeshInst(StaticMesh* InStaticMesh);// 0x208df20
	bool LoadDynamicMesh(FString MeshPath);// 0x208de5c
	bool LoadDynamicMaterialInst(MaterialInstance* InMaterialInst);// 0x208dddc
	bool LoadDynamicMaterial(FString MaterialPath);// 0x208dd18
	bool IsCanPickup(out const ItemDefineID InItemID, STExtraBaseCharacter* InFirstPlayer);// 0x208dc34
	void InitData(ItemSpotSceneComponent* Component, int ItemCount, FString Value, FString Category, bool RepeatGenerateItem);// 0x208d8dc
	bool HasWrapperContainsAttachment(int AttachmentID);// 0x1f64f34
	StaticMeshComponent* GetPickupMesh();// 0x208d8b4
	int GetNetGUIDOffsetValue();// 0x208d88c
	int GetItemType();// 0x208d85c
	int GetItemId();// 0x208d82c
	bool GetHasBeenPickedUp();// 0x208d7fc
	PickUpItemData[] GetDataList();// 0x2089a04
	void ForceNetUpdate();// 0x208d7e0
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x20898b4
	void ColdTimeCountDown();// 0x208d7cc
	void ClientResetShowActor();// 0x208d7b8
	bool CheckPickUpDataIsWeapon();// 0x208d790
	void BroadcastResetShowActor();// 0x208d734
	void BroadcastDataToAllClients(int Count_New);// 0x208d680
	void AsyncLoadPickUpEffectDone(bool bFirstCreate);// 0x208d600
	void AddAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x208d3ec

--------------------------------
Class: UAENetActor.LuaActor.Actor.Object
	int iRegionActor;//[Offset: 0x390, Size: 4]
	bool bStaticAddNetworkActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396, Size: 1]

--------------------------------
Class: ItemSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int AIGroupID;//[Offset: 0x278, Size: 4]
	bool bForceSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 1]
	byte SpotGroupType;//[Offset: 0x27e, Size: 1]
	float RepeatGenerateItemCD;//[Offset: 0x280, Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x284, Size: 4]
	ItemGenerateSpawnClass[] AllItems;//[Offset: 0x288, Size: 12]
	GroupSpotSceneComponent* GroupSpotSceneComponent;//[Offset: 0x294, Size: 4]
	<FString,int> CacheItemValeCategory;//[Offset: 0x298, Size: 60]
	Actor*[] CacheItems;//[Offset: 0x2d4, Size: 12]
	void SetSpotProperty(int CompositionID, byte GroupType, ItemGeneratorComponent* Generator, out const SpotTypeProperty Property, GroupSpotSceneComponent* Component, bool RepeatGenerateItem);// 0x27bbbfc
	void RepeatSpotProperty(out const SpotTypeProperty Property);// 0x27bbb44
	bool GenerateSpot();// 0x27bbb14
	void GenerateItems(out ItemGenerateSpawnClass[] AllItemClass);// 0x27bba10
	void DoPickUp(FString ItemValue, FString ItemCategory);// 0x27bb7a0
	int CountCacheItemValeCategory();// 0x27bb778
	void ClearCacheItems();// 0x27bb764

--------------------------------
Class: SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotType;//[Offset: 0x25d, Size: 1]
	int ID;//[Offset: 0x260, Size: 4]
	int WorldCompositionID;//[Offset: 0x264, Size: 4]
	float HalfHeight;//[Offset: 0x268, Size: 4]
	int SpotProbability;//[Offset: 0x26c, Size: 4]
	float LineOffsetZ;//[Offset: 0x270, Size: 4]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool bIsSpotValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	void SetSpotValid(bool Valid);// 0x2110e14
	bool LineTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, bool bTraceComplex, out const Actor*[] ActorsToIgnore, out HitResult OutHit, bool bIgnoreSelf);// 0x27c795c
	bool IsSpotValid();// 0x27c792c
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x27c7760
	bool GenerateSpot();// 0x27bbb14
	Actor* GenerateActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod);// 0x27c75e8

--------------------------------
Class: ItemSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ItemGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
	Vector ItemGenerateOffset;//[Offset: 0x20c, Size: 12]
	byte BornIslandGroupType;//[Offset: 0x218, Size: 1]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 1]
	ItemGenerateStatisticsData ItemStatisticsData;//[Offset: 0x21c, Size: 208]
	<FString> IgnoreItemClassPathSet;//[Offset: 0x2ec, Size: 60]
	SpotGroupProperty[] SpotGroupPropertys;//[Offset: 0x328, Size: 12]
	bool UseSpotGroupPropertysEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	bool UseAreaID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 1]
	FString[] AreaIDList;//[Offset: 0x338, Size: 12]
	ItemRegionCircle[] ReplacedGeneratorRegionMap;//[Offset: 0x344, Size: 12]
	SpotGroupProperty[] SpotGroupPropertysEx;//[Offset: 0x350, Size: 12]
	ExtraItemSpawn[] ExtraSpawnItemsList;//[Offset: 0x35c, Size: 12]
	<byte,SpotGroupProperty> SpotGroupPropertysDic;//[Offset: 0x368, Size: 60]
	SpotGroupProperty DefaultSpotGroupProperty;//[Offset: 0x3a4, Size: 32]
	CurveFloat* SpotRateCurve;//[Offset: 0x3c4, Size: 4]
	CurveFloat* ItemRateCurve;//[Offset: 0x3c8, Size: 4]
	<FString,float> CategoryRates;//[Offset: 0x3cc, Size: 60]
	<FString,ItemGenerateSpawnDataArray> ItemGenerateSpawnDatas;//[Offset: 0x408, Size: 60]
	Actor*[] BornIslandItems;//[Offset: 0x444, Size: 12]
	ItemGroupSpotSceneComponent*[] AllValidGroups;//[Offset: 0x450, Size: 12]
	bool bIsGenerateBornIslandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 1]
	bool bIsGenerateMainlandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45d, Size: 1]
	bool bIsGenerateWorldTileItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45e, Size: 1]
	DateTime GenerateBornIslandTime;//[Offset: 0x460, Size: 8]
	DateTime GenerateMainlandTime;//[Offset: 0x468, Size: 8]
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	RepeatItemSpotData[] AllRepeatItemSpotData;//[Offset: 0x4b0, Size: 12]
	ItemGenerateSpawnClass[] AllItemSpotDataToTick;//[Offset: 0x4c8, Size: 12]
	FString CookedBandFilePath;//[Offset: 0x510, Size: 12]
	bool bIsAreaItemLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	AreaItemsLimitEdit[] AreaItemsLimit;//[Offset: 0x55c, Size: 12]
	<RegionID,AreaItemsLimit> AreaItemsLimitMaps;//[Offset: 0x568, Size: 60]
	int DSSwitchSyncLoadId;//[Offset: 0x5a4, Size: 4]
	bool bUseDynamicSpotConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	DynamicSpotConfig[] DynamicSpotConfigs;//[Offset: 0x5ac, Size: 12]
	void WriteItemSpotStatisticsDatas();// 0x27b9a58
	void WriteItemClassStatisticsDatas_V15();// 0x1ee1bb4
	void WriteItemClassStatisticsDatas();// 0x27b9a44
	void WriteGroupStatisticsDatas();// 0x27b9a30
	void WriteBuildingStatisticsDatas();// 0x27b9a1c
	void WriteAreaItemStatisticsDatas();// 0x27b9a08
	void WriteAllStatisticsDatasToLog();// 0x1eefb8c
	void WriteAllStatisticsDatas();// 0x1f76428
	void SetCatetoryRate(<FString,float> Rates);// 0x27b985c
	void RegisterItemGenerateSpawnData(ItemGenerateSpawnData Data);// 0x27b9778
	void RegisterBornIslandItem(Actor* Item);// 0x27b96f8
	UAEDataTable* ReadItemGenerateTable(FString TablePath);// 0x27b9598
	ItemGroupSpotSceneComponent* RandomSingleGroup(out GroupSpotSceneComponent*[] Groups, out const SpotGroupProperty GroupProperty);// 0x27b93e0
	ItemGenerateSpawnData RandomItemGenerateSpawnData(out ItemGenerateSpawnData[] Items);// 0x27b91b4
	void RandomGroupsByType(out const SpotGroupProperty GroupProperty);// 0x27b909c
	void RandomBornIslandGroups();// 0x1eef854
	void OnAsyncLoadItemClassFinish(class Actor ActorClassPtr, ItemGenerateSpawnClass SpawnClass, byte SpotGroupType, byte SpotType);// 0x27b8dc0
	void LuaCustomFunctionAfterGenerate(out ItemGenerateSpawnClass SpawnClass, Actor* ItemActor);// 0x27b8c80
	bool LuaAddRandomItemClassArray(ItemGenerateSpawnClass SpawnClass);// 0x27b8b68
	void LoadItemGenerateTable();// 0x1f3151c
	bool IsCatetoryEnabled();// 0x27b8b40
	void InitCatetorys();// 0x27b8b2c
	void InitCategoryEx();// 0x27b8b18
	SpotGroupProperty GetSpotGroupPropertyByGroupType(byte SpotGroupType);// 0x27b89f0
	bool GetRandomItemClassArray(out FString Value, out FString Category, out ItemGenerateSpawnClass[] Results, bool RepeatGenerateItem, ItemSpotSceneComponent* SpotComponent);// 0x27b8710
	int GetItemDefineID(class Object PickUpClass);// 0x2bb69b8
	float GetCatetoryRate(FString Catetory);// 0x27b8648
	void GenerateSpotOnTick(float DeltaTime);// 0x1f62880
	Vector FindASpawnLoc(World* InWorld, const Vector TraceStart);// 0x27b8570
	void EnableDynamicSpotConfigByIndex(int DynamicIndex);// 0x27b84f8
	void DoPickUp(int ItemSpotDataIndex, FString Value, FString Category);// 0x27b836c
	void DeleteBornIslandItems();// 0x27b8358
	bool CheckShouldGenerateItem(int ItemId);// 0x27b82d0
	void CheckRecoverItems();// 0x27b82bc
	void AddIgnoreItemClassPath(out const FString[] IgnoreItemClassList);// 0x27b8188

--------------------------------
Class: BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
	bool bWorldTileGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 1]
	bool bModeStateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 1]
	int GenerateSpotCountPerTick;//[Offset: 0x14c, Size: 4]
	FString ItemTableName;//[Offset: 0x150, Size: 12]
	FString[] ItemSpawnTableList;//[Offset: 0x15c, Size: 12]
	UAEDataTable* ItemTable;//[Offset: 0x168, Size: 4]
	bool IsWriteStatisticsToLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	<byte,GroupSpotComponentArray> AllGroupSpots;//[Offset: 0x170, Size: 60]
	SpotSceneComponent*[] AllSpotsToTick;//[Offset: 0x1ac, Size: 12]
	<int,WorldTileSpotArray> WorldTileSpots;//[Offset: 0x1b8, Size: 60]
	FString CookedFilePath;//[Offset: 0x1f4, Size: 12]
	FString[] CookedFileAddPathArray;//[Offset: 0x200, Size: 12]
	void RegisterWorldTileSpot(SpotSceneComponent* Spot);// 0x1f62900
	void RegisterSpotComponentToTick(SpotSceneComponent* SpotComponent);// 0x1f619e0
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x1f61750
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x279f2a4
	void GeneratorWorldTileSpots(out WorldTileSpotArray SpotArray);// 0x279f1d8
	void GenerateSpots();// 0x2066168
	void GenerateSpotOnTick(float DeltaTime);// 0x1f62880
	Actor* GeneratePickupActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x279ef90
	void CheckTileLevelsVisible();// 0x279ef7c

--------------------------------
Class: ItemActorComponent.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: UAEDataTable.DataTable.Object
	<FString,Property*> NameToProperty;//[Offset: 0x7c, Size: 60]
	bool SetTableData_String(FString KeyValue, FString TagName, FString Value);// 0x45c60e0
	bool SetTableData_Int32(FString KeyValue, FString TagName, int Value);// 0x45c5f54
	bool SetTableData_Float(FString KeyValue, FString TagName, float Value);// 0x45c5dc8
	FString GetTableName();// 0x45c5d08
	FString GetRealTableName(FString tableName);// 0x45c5bc4
	bool ConditionAddEmptyRow(out const FName RowName);// 0x45c5b30

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: GroupSpotComponentArray
	byte GroupType;//[Offset: 0x0, Size: 1]
	GroupSpotSceneComponent*[] AllGroupComponents;//[Offset: 0x4, Size: 12]

--------------------------------
Class: GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte GroupType;//[Offset: 0x25d, Size: 1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 1]
	int WorldCompositionID;//[Offset: 0x260, Size: 4]
	float LastGenerateItemTime;//[Offset: 0x264, Size: 4]
	float GenerateItemTimeCD;//[Offset: 0x268, Size: 4]
	bool bPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	bool bIsValidGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e, Size: 1]
	void SetGroupValid(bool Valid);// 0x27b49c8
	bool IsValidGroup();// 0x2110574
	int FindWorldCompositionID();// 0x27b49a0
	void DoPickUp();// 0x27b498c

--------------------------------
Class: WorldTileSpotArray
	int WorldCompositionID;//[Offset: 0x0, Size: 4]
	SpotSceneComponent*[] AllSpotComponents;//[Offset: 0x4, Size: 12]

--------------------------------
Class: SpotWeight
	FString Name;//[Offset: 0x0, Size: 12]
	int Weight;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ItemGenerateSpawnClass
	int ID;//[Offset: 0x0, Size: 4]
	class Object* ItemClass;//[Offset: 0x4, Size: 4]
	int ItemCount;//[Offset: 0x8, Size: 4]
	FString MetaData;//[Offset: 0xc, Size: 12]
	FString ItemValue;//[Offset: 0x18, Size: 12]
	FString ItemCategory;//[Offset: 0x24, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool IsNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	Vector SpotGenerateLoc;//[Offset: 0x34, Size: 12]
	Vector SpotGroupLoc;//[Offset: 0x40, Size: 12]
	Rotator SpotRotator;//[Offset: 0x4c, Size: 12]
	int SpotPercent;//[Offset: 0x58, Size: 4]
	Actor* HostActor;//[Offset: 0x6c, Size: 4]
	Actor* AttachedActor;//[Offset: 0x70, Size: 4]
	int SpotIndex;//[Offset: 0x8c, Size: 4]
	bool Random;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	bool IsStickToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 1]
	Vector RelativeLoc;//[Offset: 0x94, Size: 12]

--------------------------------
Class: ItemGenerateStatisticsData
	int AllGroupSpotCount;//[Offset: 0x0, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x4, Size: 4]
	int AllSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 4]
	<byte,ItemGroupStatisticsData> GroupStatisticsData;//[Offset: 0x10, Size: 60]
	<FString,BuildingStatisticsData> BuildingStatisticsData;//[Offset: 0x4c, Size: 60]
	<FString,ItemClassStatisticsData> ItemStatisticsData;//[Offset: 0x88, Size: 60]
	AreaItemStatisticsData[] AreaItemStatisticsData;//[Offset: 0xc4, Size: 12]

--------------------------------
Class: ItemGroupStatisticsData.TableRowBase
	byte SpotGroupType;//[Offset: 0x4, Size: 1]
	int AllGroupSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0xc, Size: 4]
	int AllSpotCount;//[Offset: 0x10, Size: 4]
	int AllValidSpotCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BuildingStatisticsData.TableRowBase
	FString BuildingName;//[Offset: 0x4, Size: 12]
	float BuildingLocationX;//[Offset: 0x10, Size: 4]
	float BuildingLocationY;//[Offset: 0x14, Size: 4]
	int AllGroupSpotCount;//[Offset: 0x18, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x1c, Size: 4]
	int AllSpotCount;//[Offset: 0x20, Size: 4]
	int AllValidSpotCount;//[Offset: 0x24, Size: 4]
	<byte,ItemSpotStatisticsData> SpotStatisticsData;//[Offset: 0x28, Size: 60]

--------------------------------
Class: ItemSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4, Size: 1]
	int AllSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ItemClassStatisticsData.TableRowBase
	FString ItemPath;//[Offset: 0x4, Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int ItemCount;//[Offset: 0x14, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x18, Size: 12]
	int ItemTogetherCount;//[Offset: 0x24, Size: 4]
	bool bValidTogetherPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: AreaItemStatisticsData.TableRowBase
	FString ItemName;//[Offset: 0x4, Size: 12]
	int UId;//[Offset: 0x10, Size: 4]
	int ItemId;//[Offset: 0x14, Size: 4]
	int GroupType;//[Offset: 0x18, Size: 4]
	int SpotType;//[Offset: 0x1c, Size: 4]
	FString AreaName;//[Offset: 0x20, Size: 12]
	Vector Location;//[Offset: 0x2c, Size: 12]
	float X;//[Offset: 0x38, Size: 4]
	float Y;//[Offset: 0x3c, Size: 4]
	int GameTime;//[Offset: 0x40, Size: 4]

--------------------------------
Class: SpotGroupProperty
	byte SpotGroupType;//[Offset: 0x0, Size: 1]
	int SpotGroupPercent;//[Offset: 0x4, Size: 4]
	SpotTypeProperty[] SpotTypeProperties;//[Offset: 0x8, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float RepeatGenerateItemCDMin;//[Offset: 0x18, Size: 4]
	float RepeatGenerateItemCDMax;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: SpotTypeProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	int SpotPercentMin;//[Offset: 0x4, Size: 4]
	int SpotPercentMax;//[Offset: 0x8, Size: 4]
	int SpotPercentDot;//[Offset: 0xc, Size: 4]
	int ItemPerSpotMin;//[Offset: 0x10, Size: 4]
	int ItemPerSpotMax;//[Offset: 0x14, Size: 4]
	SpotWeight[] WeightsPerValue;//[Offset: 0x18, Size: 12]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x24, Size: 12]

--------------------------------
Class: ItemRegionCircle
	Vector Center;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float RadiusSquared2D;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ExtraItemSpawn
	int SpawnPercent;//[Offset: 0x0, Size: 4]
	FString SpawnItemValue;//[Offset: 0x4, Size: 12]
	FString SpawnItemCategory;//[Offset: 0x10, Size: 12]

--------------------------------
Class: ItemGenerateSpawnDataArray
	FString ValueCatetory;//[Offset: 0x0, Size: 12]
	ItemGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ItemGenerateSpawnData
	int KeyID;//[Offset: 0x0, Size: 4]
	FString ItemValue;//[Offset: 0x4, Size: 12]
	FString ItemCategory;//[Offset: 0x10, Size: 12]
	int ItemWeight;//[Offset: 0x1c, Size: 4]
	FString ItemPath;//[Offset: 0x20, Size: 12]
	int ItemStackCount;//[Offset: 0x2c, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x30, Size: 12]
	int ItemTogetherStackCount;//[Offset: 0x3c, Size: 4]
	int ItemTogetherCountMin;//[Offset: 0x40, Size: 4]
	int ItemTogetherCountMax;//[Offset: 0x44, Size: 4]

--------------------------------
Class: ItemGroupSpotSceneComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x270, Size: 4]
	ItemSpotSceneComponent*[] SpotsCacheCur;//[Offset: 0x274, Size: 12]
	ItemSpotSceneComponent*[] SpotsCacheAll;//[Offset: 0x280, Size: 12]
	void SetGroupProperty(ItemGeneratorComponent* Generator, out const SpotGroupProperty Property);// 0x27bb2fc
	void RepeatSpots();// 0x27bb2e8
	void RepeatSingleSpot(ItemSpotSceneComponent* Spot);// 0x27bb270
	void RandomSpotByType(byte SpotType, out ItemSpotSceneComponent*[] AllSpots, out const SpotTypeProperty Property);// 0x27bb0d4
	void RandomSingleSpot(out ItemSpotSceneComponent*[] Spots, out const SpotTypeProperty Property);// 0x27baf84
	float RandomRepeatGenerateItemCD(out const SpotGroupProperty GroupProperty);// 0x27bae60

--------------------------------
Class: DateTime

--------------------------------
Class: RepeatItemSpotData
	float RepeatGenerateCD;//[Offset: 0xa0, Size: 4]
	int64 LastGenerateItemTime;//[Offset: 0xa8, Size: 8]
	<FString,int> CacheItemValeCategory;//[Offset: 0xb0, Size: 60]

--------------------------------
Class: AreaItemsLimitEdit
	int AreaX;//[Offset: 0x0, Size: 4]
	int AreaY;//[Offset: 0x4, Size: 4]
	GenerateItemLimit[] ItemsMaxLimitEdit;//[Offset: 0x8, Size: 12]
	GenerateItemLimit[] ItemsMinLimitEdit;//[Offset: 0x14, Size: 12]

--------------------------------
Class: GenerateItemLimit
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemNum;//[Offset: 0x4, Size: 4]
	FString WrapperPath;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AreaItemsLimit
	RegionID RegionID;//[Offset: 0x0, Size: 12]
	bool IsBeginGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool IsCheckRecoverItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	Vector[] AvailablePosi;//[Offset: 0x10, Size: 12]
	<int,AreaItemsNum> ItemsMaxLimit;//[Offset: 0x1c, Size: 60]
	<int,AreaItemsNum> ItemsMinLimit;//[Offset: 0x58, Size: 60]

--------------------------------
Class: AreaItemsNum
	int LimitNum;//[Offset: 0x0, Size: 4]
	int CurNum;//[Offset: 0x4, Size: 4]
	FString WrapperPath;//[Offset: 0x8, Size: 12]

--------------------------------
Class: DynamicSpotConfig
	FString DynamicSpotPath;//[Offset: 0x0, Size: 12]
	SpotGroupProperty[] SpotGroupProperties;//[Offset: 0xc, Size: 12]

--------------------------------
Class: PickUpItemData
	ItemDefineID ID;//[Offset: 0x0, Size: 24]
	int Count;//[Offset: 0x18, Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x1c, Size: 12]
	int InstanceID;//[Offset: 0x28, Size: 4]

--------------------------------
Class: DropGroundEffectInfo
	float GroundEffectLifeSpan;//[Offset: 0x0, Size: 4]
	Transform EffectTransform;//[Offset: 0x10, Size: 48]
	ParticleSystem* GroundEffect;//[Offset: 0x40, Size: 40]
	FString EffectPath;//[Offset: 0x68, Size: 12]
	bool bShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool bEffectActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]

--------------------------------
Class: UAENetDriver.IpNetDriver.NetDriver.Object
	float NetCullChangeTime;//[Offset: 0x524, Size: 4]
	bool bEnableCollectNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	bool bEnableResetNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 1]

--------------------------------
Class: IpNetDriver.NetDriver.Object
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a0, Size: 1]
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a0, Size: 1]
	uint32 MaxPortCountToTry;//[Offset: 0x4a4, Size: 4]
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x4b4, Size: 4]
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x4b8, Size: 4]
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x4bc, Size: 4]
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x4c0, Size: 4]
	float RecreateSocketCooldownTime;//[Offset: 0x514, Size: 4]
	float RecreateSocketMaxTryCount;//[Offset: 0x518, Size: 4]
	bool bResolveRemoteHostOnRecreateSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	bool bContinueProcessWhenReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 1]
	bool bContinueProcessWhenConReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51e, Size: 1]

--------------------------------
Class: AirDropBoxGenerateWrapperItemData
	class Actor* WrapperClass;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x260, Size: 4]
	Vector SocketOffset;//[Offset: 0x264, Size: 12]
	Vector TargetOffset;//[Offset: 0x270, Size: 12]
	float ProbeSize;//[Offset: 0x27c, Size: 4]
	byte ProbeChannel;//[Offset: 0x280, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x281, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x281, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x281, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x281, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x281, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x281, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x281, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x281, Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x282, Size: 1]
	float CameraLagSpeed;//[Offset: 0x284, Size: 4]
	float CameraRotationLagSpeed;//[Offset: 0x288, Size: 4]
	float CameraLagMaxTimeStep;//[Offset: 0x28c, Size: 4]
	float CameraLagMaxDistance;//[Offset: 0x290, Size: 4]
	void SetActive(bool bNewActive, bool bReset);// 0x43dee78
	Rotator GetTargetRotation();// 0x222a6e4

--------------------------------
Class: STExtraAnimInstance.STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	STExtraAnimInstanceProxy Proxy;//[Offset: 0x810, Size: 1088]
	bool CanDumpThisAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc50, Size: 1]
	Rotator OwnerAimRotation;//[Offset: 0xc54, Size: 12]
	Rotator C_SightAngledRotOffset;//[Offset: 0xc60, Size: 12]
	bool C_bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6c, Size: 1]
	bool C_MovingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6d, Size: 1]
	bool C_SkillFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6e, Size: 1]
	bool C_MovingOnGroundAndMovbale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6f, Size: 1]
	bool C_IsSwimUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc70, Size: 1]
	bool C_ReloadProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc71, Size: 1]
	bool C_IsObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc72, Size: 1]
	bool C_IsGrenadeModeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc73, Size: 1]
	bool C_IsWeaponBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc74, Size: 1]
	Rotator SwimRotate;//[Offset: 0xc78, Size: 12]
	bool C_ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc84, Size: 1]
	bool C_IsHealing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc85, Size: 1]
	float C_SwimSpeed;//[Offset: 0xc88, Size: 4]
	float C_ProneHandleAlpha;//[Offset: 0xc8c, Size: 4]
	bool C_IsLeanOutVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc90, Size: 1]
	float LeftHandShouldNotIKAlpha;//[Offset: 0xc94, Size: 4]
	bool C_SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc98, Size: 1]
	bool C_IsCrouchingOrMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc99, Size: 1]
	byte C_SeatSpecialType;//[Offset: 0xc9a, Size: 1]
	int WeaponReloadSlotIndex;//[Offset: 0xc9c, Size: 4]
	bool C_IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca0, Size: 1]
	bool C_IsDoingReaload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca1, Size: 1]
	float NeckTurnUILeftAngle;//[Offset: 0xca4, Size: 4]
	float NeckTurnUIRightAngle;//[Offset: 0xca8, Size: 4]
	float NeckTurnUIUPAngle;//[Offset: 0xcac, Size: 4]
	float NeckTurnUIDownAngle;//[Offset: 0xcb0, Size: 4]
	float NeckNotTurnAngle;//[Offset: 0xcb4, Size: 4]
	float NeckMapAngleDefault_Horizon;//[Offset: 0xcb8, Size: 4]
	float NeckMapAngleDefault_Portrait;//[Offset: 0xcbc, Size: 4]
	float NeckMapAngleLeft;//[Offset: 0xcc0, Size: 4]
	float NeckMapAngleRight;//[Offset: 0xcc4, Size: 4]
	float NeckMapAngleUp;//[Offset: 0xcc8, Size: 4]
	float NeckMapAngleDown;//[Offset: 0xccc, Size: 4]
	float NeckMapCrouchAngleDefault_Horizon;//[Offset: 0xcd0, Size: 4]
	float NeckMapCrouchAngleDefault_Portrait;//[Offset: 0xcd4, Size: 4]
	float NeckMapCrouchAngleLeft;//[Offset: 0xcd8, Size: 4]
	float NeckMapCrouchAngleRight;//[Offset: 0xcdc, Size: 4]
	float NeckMapCrouchAngleUp;//[Offset: 0xce0, Size: 4]
	float NeckMapCrouchAngleDown;//[Offset: 0xce4, Size: 4]
	float NeckTurnSpeed;//[Offset: 0xce8, Size: 4]
	enum C_ParachuteState;//[Offset: 0xcec, Size: 1]
	Rotator C_HeadRotOffset;//[Offset: 0xcf0, Size: 12]
	Rotator DeltaViewOffset;//[Offset: 0xcfc, Size: 12]
	bool C_UseFlareGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd08, Size: 1]
	bool C_ShouldAdditiveFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd09, Size: 1]
	bool C_ShouldAdditiveForegripObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0a, Size: 1]
	bool C_ShouldPlayObstructedAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0b, Size: 1]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0c, Size: 1]
	float C_HoldingShieldAlpha;//[Offset: 0xd10, Size: 4]
	float C_HoldingShieldAdditive;//[Offset: 0xd14, Size: 4]
	BlendSpace* C_ObstructedAnim;//[Offset: 0xd18, Size: 4]
	AnimSequence* C_ShieldAddtive;//[Offset: 0xd1c, Size: 4]
	AnimMontage* C_RevivalMontage;//[Offset: 0xd20, Size: 4]
	BlendSpace* C_BSFreeFalling;//[Offset: 0xd24, Size: 4]
	BlendSpace* C_BSFreeFalling_Turn;//[Offset: 0xd28, Size: 4]
	AnimSequence* C_FreeFalling_Shake;//[Offset: 0xd2c, Size: 4]
	BlendSpace* C_BSParachute;//[Offset: 0xd30, Size: 4]
	AnimSequence* C_ParachuteEnter;//[Offset: 0xd34, Size: 4]
	AnimSequence* C_ParachuteLand;//[Offset: 0xd38, Size: 4]
	AnimMontage* C_FreeFallingStartMontage;//[Offset: 0xd3c, Size: 4]
	bool bIsHelicoptorDirver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd41, Size: 1]
	Vector C_MoveDirExt;//[Offset: 0xd44, Size: 12]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation;//[Offset: 0xd50, Size: 12]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation_Yaw;//[Offset: 0xd5c, Size: 12]
	Rotator r_C_ComponentRotationRelToControlRotation;//[Offset: 0xd68, Size: 12]
	bool b_C_IsOnVehicle_AND_C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd74, Size: 1]
	bool b_C_PoseType_EQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd75, Size: 1]
	bool b_C_Move_OR_C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd76, Size: 1]
	bool b_OnVehicle_LeanOut_NarrowSeat_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd77, Size: 1]
	bool b_OnVehicle_LeanOut_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd78, Size: 1]
	bool b_C_ParachuteState_EQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd79, Size: 1]
	bool b_C_ParachuteState_NEQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7a, Size: 1]
	bool b_C_ParachuteState_EQ_Landing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7b, Size: 1]
	bool b_C_ParachuteState_FreeFallShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7c, Size: 1]
	bool b_UnarmedFallingToRifleFallLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7d, Size: 1]
	bool b_UnarmedFallingToRifleCombatFallLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7e, Size: 1]
	bool b_C_LastMovementMode_EQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7f, Size: 1]
	bool b_C_LastMovementMode_NEQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd80, Size: 1]
	bool b_C_LastMovementMode_NEQ_Falling_OR_HoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd81, Size: 1]
	float f_C_MoveVelocity_Div_SwimSpeed_X;//[Offset: 0xd84, Size: 4]
	float f_C_MoveVelocity_Div_SwimSpeed_Y;//[Offset: 0xd88, Size: 4]
	bool b_C_NotUseGeneralHeadAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8c, Size: 1]
	bool b_C_MoveVelocity_SightSlow_High;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8d, Size: 1]
	bool b_C_MoveVelocity_SightSlow_Low;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8e, Size: 1]
	bool b_C_DoingPickup_Or_DoingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8f, Size: 1]
	enum[] DisallowedEyeRotationWithHeadList;//[Offset: 0xd90, Size: 12]
	float C_LeanOut_AimAngle;//[Offset: 0xda0, Size: 4]
	float LeanOutL_AimAngle;//[Offset: 0xda8, Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0xdac, Size: 4]
	bool bIsLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb0, Size: 1]
	bool bForcePlayMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc8, Size: 1]
	bool bEnableStanbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdca, Size: 1]
	bool bEnableArmedStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdcb, Size: 1]
	float EnableArmedStandbyAnimPitchMin;//[Offset: 0xdcc, Size: 4]
	float EnableArmedStandbyAnimPitchMax;//[Offset: 0xdd0, Size: 4]
	float StandbyAnimTimeInterval;//[Offset: 0xdd4, Size: 4]
	enum[] StandbyAnimPawnStateExclusion;//[Offset: 0xdd8, Size: 12]
	int[] ColdGameModeIDList;//[Offset: 0xde4, Size: 12]
	enum[] StandbyGameModeType;//[Offset: 0xdf0, Size: 12]
	bool bIsPlayRandomAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdfc, Size: 1]
	AnimMontage* CurStandbyAnimMontage;//[Offset: 0xe0c, Size: 4]
	STExtraBaseCharacter* C_AttachParentCharacter;//[Offset: 0xe10, Size: 4]
	Vector C_AttachParentPawnMoveVelocity;//[Offset: 0xe14, Size: 12]
	bool b_C_CarryBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe20, Size: 1]
	bool b_C_BeCarriedBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe21, Size: 1]
	float f_C_CarryBackBSTimeAccumulator;//[Offset: 0xe24, Size: 4]
	void TryToFireFlareGun();// 0x21457e4
	void TryPlayStandbyAnim();// 0x21457d0
	bool ShouldDestoryParachuteAnimAsset();// 0x21457a8
	void SetVelocityZFactor(float NewFactor);// 0x2145730
	void SetC_ViewRotation(Rotator NewRotator, float DeltaTime);// 0x214566c
	void PostCacheParamList(float DeltaSeconds);// 0x2bb69b8
	void PendingKillParachuteAnim(Object* InObject);// 0x21455f4
	void OnEmoteAnimFinished(int EmoteIndex, int StopReason);// 0x2145538
	void InterrupteStandbyAnim(STExtraBaseCharacter* SelfRef);// 0x21454c0
	void HandlePlayerPickUp();// 0x21454a4
	void HandlePerspectiveChanged(bool IsFPP);// 0x2145424
	FString[] GetAnimUngroupsEntry();// 0x21452c8
	FString[] GetAnimSyncGroupsEntry();// 0x214516c
	void DumpAllProperties();// 0x2145158
	void DumpAllAnimInstancesInThisWorld();// 0x1ee1bb4
	void ClearStandbyAnimState();// 0x214513c
	void ClearParachuteAnimVars();// 0x2145128
	AnimParamList CacheParamList(float DeltaSeconds);// 0x2144fc8
	void CacheParachuteAnimVars(bool bForceRefresh);// 0x2144f48
	Object* CacheParachuteAnimVar_Internal(int ParachuteAnimType, class Object TargetClass);// 0x2144e84
	PlayerAnimList CacheAnimVarList();// 0x2144d70
	void AsyncAnimStandbyCallback(AnimationAsset* RetAsset);// 0x2144cf8

--------------------------------
Class: STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	bool C_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 1]
	bool C_MovementChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37a, Size: 1]
	bool C_IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37b, Size: 1]
	bool C_Scoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	bool C_IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 1]
	bool C_IsCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37e, Size: 1]
	bool C_SightSlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37f, Size: 1]
	bool C_ShouldPlayTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	bool C_ShouldSlowMoveAnimX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 1]
	bool C_ShouldSlowMoveAnimY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x382, Size: 1]
	bool C_IdleAddtiveValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x383, Size: 1]
	bool C_IsHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	bool C_IsGrenadeTypeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x385, Size: 1]
	bool C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x386, Size: 1]
	bool C_Hurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x387, Size: 1]
	bool C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	bool C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 1]
	bool b_WalkToUnarmedFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a, Size: 1]
	bool b_WalkToRifleJumpStationStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38b, Size: 1]
	bool b_C_IsFallingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	bool b_Move_PistolOrRifleGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 1]
	bool b_C_PeekFrameRate_NEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38e, Size: 1]
	bool b_C_PeekFrameRate_NEQ_0_OR_C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38f, Size: 1]
	bool b_C_PeekFrameRateNEQ0_AND_C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	bool C_IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 1]
	bool b_WeaponState_EQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 1]
	bool b_WeaponState_NEQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x393, Size: 1]
	bool b_Crouch_SwitchWeapon_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	bool C_ForegripAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 1]
	bool C_EnableForegripAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396, Size: 1]
	bool b_P_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x397, Size: 1]
	bool b_C_PoseType_NEQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a, Size: 1]
	bool C_ShouldAdditiveForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39b, Size: 1]
	bool C_NoAimOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	bool C_ShouldIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 1]
	bool C_IsEnteringNearDeathAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39e, Size: 1]
	bool C_UseHairAnimDynamics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39f, Size: 1]
	bool bWalkToJumpStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool bJumpStartToWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	bool bFallingToLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]
	byte C_LODLevel;//[Offset: 0x3a3, Size: 1]
	float f_C_MoveVelocityLengthSquard;//[Offset: 0x3a4, Size: 4]
	float C_SightSlowBlendStandBaseAlpha;//[Offset: 0x3a8, Size: 4]
	bool b_C_MoveVelocityLengthSquard_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	Vector C_MoveVelocityInWorldSpaceReverse;//[Offset: 0x3b0, Size: 12]
	float MoveVelocityLength2D;//[Offset: 0x3bc, Size: 4]
	byte C_PoseType;//[Offset: 0x3c0, Size: 1]
	byte C_LastMovementMode;//[Offset: 0x3c1, Size: 1]
	byte C_CustomMovementMode;//[Offset: 0x3c2, Size: 1]
	byte C_WeaponType;//[Offset: 0x3c3, Size: 1]
	byte C_WeaponHoldType;//[Offset: 0x3c4, Size: 1]
	byte C_WeaponState;//[Offset: 0x3c5, Size: 1]
	bool b_C_WeaponState_EQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c6, Size: 1]
	float f_C_WeaponState_EQ_Reload;//[Offset: 0x3c8, Size: 4]
	bool b_C_WeaponState_NEQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	bool b_C_WeaponState_EQ_PreFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cd, Size: 1]
	bool C_IsReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ce, Size: 1]
	bool C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cf, Size: 1]
	enum C_VehicleType;//[Offset: 0x3d0, Size: 1]
	bool C_IsShoudlerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 1]
	float C_IsReloadAnimAdditive_Alpha;//[Offset: 0x3d4, Size: 4]
	float C_CharacterYawRotateRate;//[Offset: 0x3d8, Size: 4]
	float C_CharacterYawRotateRate_Reverse;//[Offset: 0x3dc, Size: 4]
	float C_MaxFallingSpeed;//[Offset: 0x3e0, Size: 4]
	float C_FireAlpha;//[Offset: 0x3e4, Size: 4]
	float b_WalkAdditiveAlpha;//[Offset: 0x3e8, Size: 4]
	float f_FallingVelocityZFactor;//[Offset: 0x3ec, Size: 4]
	float f_C_MoveVelocity_X_FallingZFactor;//[Offset: 0x3f0, Size: 4]
	float PeekFrameRate;//[Offset: 0x3f4, Size: 4]
	float PeekSpeed;//[Offset: 0x3f8, Size: 4]
	float f_C_ViewRotation_IN_C_Scoping;//[Offset: 0x3fc, Size: 4]
	float C_ForegripAnimParam;//[Offset: 0x400, Size: 4]
	float C_HandleFolderFactor;//[Offset: 0x404, Size: 4]
	float MoveDirParachuteLerpSpeed;//[Offset: 0x408, Size: 4]
	float MoveDirNormalLerpSpeed;//[Offset: 0x40c, Size: 4]
	float ScopeVelocityInterpSpeed;//[Offset: 0x410, Size: 4]
	Transform C_Foot_R_Target_Transform;//[Offset: 0x420, Size: 48]
	Transform C_Foot_L_Target_Transform;//[Offset: 0x450, Size: 48]
	Transform C_Hand_R_Target_Transform;//[Offset: 0x480, Size: 48]
	Transform C_Hand_L_Target_Transform;//[Offset: 0x4b0, Size: 48]
	Vector C_MoveVelocity;//[Offset: 0x4e4, Size: 12]
	Vector C_MoveInputVelocity;//[Offset: 0x4f0, Size: 12]
	Vector C_MoveInputVelocityUnit;//[Offset: 0x4fc, Size: 12]
	Vector C_MoveDir;//[Offset: 0x508, Size: 12]
	Vector C_HurtDir;//[Offset: 0x514, Size: 12]
	Vector C_FirstAnimSpine_StandAndCrouch;//[Offset: 0x520, Size: 12]
	Vector C_FirstAnimSpine_Prone;//[Offset: 0x52c, Size: 12]
	Vector C_FPPStandOffsetLocation;//[Offset: 0x538, Size: 12]
	Vector ScopeAimSpine03TranslationModify;//[Offset: 0x544, Size: 12]
	Rotator ScopeAimSpine03RotationModifiy;//[Offset: 0x550, Size: 12]
	Rotator r_C_FPPStandOffsetRotation_half;//[Offset: 0x55c, Size: 12]
	Rotator r_C_FPPCrouchOffsetRotation_half;//[Offset: 0x568, Size: 12]
	Rotator r_C_FPPProneOffsetRotation_half;//[Offset: 0x574, Size: 12]
	Rotator C_OwnerRotation;//[Offset: 0x580, Size: 12]
	Rotator C_ControlRotation;//[Offset: 0x58c, Size: 12]
	Rotator C_LastControlRotation;//[Offset: 0x598, Size: 12]
	Rotator C_ViewRotation;//[Offset: 0x5a4, Size: 12]
	Rotator C_FPPStandOffsetRotation;//[Offset: 0x5b0, Size: 12]
	Rotator C_FPPCrouchOffsetRotation;//[Offset: 0x5bc, Size: 12]
	Rotator C_FPPProneOffsetRotation;//[Offset: 0x5c8, Size: 12]
	Rotator RecoilADSRotation_CP;//[Offset: 0x5d4, Size: 12]
	Vector C_MoveVelocityInWorldSpace;//[Offset: 0x5e0, Size: 12]
	Vector C_FPPCrouchOffsetLocation;//[Offset: 0x5ec, Size: 12]
	Vector C_FPPProneOffsetLocation;//[Offset: 0x5f8, Size: 12]
	Rotator C_ScopeAimOffsetStand;//[Offset: 0x604, Size: 12]
	CurveFloat* C_FallingIKCurve;//[Offset: 0x610, Size: 4]
	Rotator OwnerRotation;//[Offset: 0x614, Size: 12]
	bool Shoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 1]
	Rotator ShovelingRotation;//[Offset: 0x624, Size: 12]
	float ShovelingRotationoffset;//[Offset: 0x630, Size: 4]
	Rotator UpShovelingRotationAdd;//[Offset: 0x634, Size: 12]
	Rotator FloorRotation;//[Offset: 0x640, Size: 12]
	byte Role;//[Offset: 0x64c, Size: 1]
	bool AutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64d, Size: 1]
	bool ShovelingToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64e, Size: 1]
	bool ShovelMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64f, Size: 1]
	bool ShovelGenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 1]
	bool b_C_SlideFly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x651, Size: 1]
	bool C_ClimbAnimSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x652, Size: 1]
	float C_ClimbAnimTransTime;//[Offset: 0x654, Size: 4]
	float C_ClimbAnimTime_A;//[Offset: 0x658, Size: 4]
	float C_ClimbAnimTime_B;//[Offset: 0x65c, Size: 4]
	AimOffsetBlendSpace* C_AimBlendSpace;//[Offset: 0x660, Size: 4]
	BlendSpace* C_MovementBSCache_Stand;//[Offset: 0x664, Size: 4]
	BlendSpace* C_MovementBSCache_Crouch;//[Offset: 0x668, Size: 4]
	BlendSpace* C_MovementBSCache_Prone;//[Offset: 0x66c, Size: 4]
	AnimSequence* C_SwitchPose_Stand_To_Crouch;//[Offset: 0x670, Size: 4]
	AnimSequence* C_SwitchPose_Stand_To_Prone;//[Offset: 0x674, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Stand;//[Offset: 0x678, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Prone;//[Offset: 0x67c, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Stand;//[Offset: 0x680, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Crouch;//[Offset: 0x684, Size: 4]
	BlendSpace* C_MovementBSCache_Stand_Dest;//[Offset: 0x688, Size: 4]
	BlendSpace* C_MovementBSCache_Crouch_Dest;//[Offset: 0x68c, Size: 4]
	BlendSpace* C_MovementBSCache_Prone_Dest;//[Offset: 0x690, Size: 4]
	<FName,float> C_MovementBS_Stand_SourceTransTime;//[Offset: 0x694, Size: 60]
	<FName,float> C_MovementBS_Stand_DestTransTime;//[Offset: 0x6d0, Size: 60]
	AnimSequence* C_SwitchPose_Stand_To_Crouch_Dest;//[Offset: 0x70c, Size: 4]
	AnimSequence* C_SwitchPose_Stand_To_Prone_Dest;//[Offset: 0x710, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Stand_Dest;//[Offset: 0x714, Size: 4]
	AnimSequence* C_SwitchPose_Crouch_To_Prone_Dest;//[Offset: 0x718, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Stand_Dest;//[Offset: 0x71c, Size: 4]
	AnimSequence* C_SwitchPose_Prone_To_Crouch_Dest;//[Offset: 0x720, Size: 4]
	float StandSwitchToPronePoseAnimDuration;//[Offset: 0x724, Size: 4]
	float StandSwitchFromPronePoseAnimDuration;//[Offset: 0x728, Size: 4]
	float CrouchSwitchToPronePoseAnimDuration;//[Offset: 0x72c, Size: 4]
	float CrouchSwitchFromPronePoseAnimDuration;//[Offset: 0x730, Size: 4]
	float StandSwitchToPronePoseAnimDelay;//[Offset: 0x734, Size: 4]
	float StandSwitchFromPronePoseAnimDelay;//[Offset: 0x738, Size: 4]
	float CrouchSwitchToPronePoseAnimDelay;//[Offset: 0x73c, Size: 4]
	float CrouchSwitchFromPronePoseAnimDelay;//[Offset: 0x740, Size: 4]
	float SwitchingPoseTimer;//[Offset: 0x744, Size: 4]
	float SwitchingPoseTimerInternal;//[Offset: 0x748, Size: 4]
	byte C_InterruptCachePose;//[Offset: 0x74c, Size: 1]
	bool C_UseInterruptPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74d, Size: 1]
	float InterruptPoseInternal;//[Offset: 0x750, Size: 4]
	bool C_IsSwitchingPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x754, Size: 1]
	byte C_RecoverCharPose;//[Offset: 0x755, Size: 1]
	float SwitchPoseTransTime;//[Offset: 0x760, Size: 4]
	bool C_IsPlayMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x764, Size: 1]
	bool C_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x765, Size: 1]
	bool b_C_MoveVelocity_Turning_NotScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	AnimSequence* C_IdleAddtive;//[Offset: 0x774, Size: 4]
	AnimSequence* C_ShoulderIdleAddtive;//[Offset: 0x778, Size: 4]
	BlendSpace1D* C_FallingBS;//[Offset: 0x77c, Size: 4]
	AnimSequence* C_JumpStart;//[Offset: 0x780, Size: 4]
	AnimSequence* C_LandLight;//[Offset: 0x784, Size: 4]
	AnimSequence* C_LandHeavy;//[Offset: 0x788, Size: 4]
	BlendSpace1D* MovementUpBodyOverride;//[Offset: 0x78c, Size: 4]
	BlendSpace* MovementLowerBodyOverride;//[Offset: 0x790, Size: 4]
	AnimSequence* C_TurnAnim;//[Offset: 0x794, Size: 4]
	AnimSequence* C_StandScopeBlendAnim;//[Offset: 0x798, Size: 4]
	AnimSequence* C_CrouchScopeBlendAnim;//[Offset: 0x79c, Size: 4]
	BlendSpace* C_HitBlendSpace;//[Offset: 0x7a0, Size: 4]
	BlendSpace1D* C_PeekAnim;//[Offset: 0x7a4, Size: 4]
	BlendSpace1D* C_ForegripAnim;//[Offset: 0x7a8, Size: 4]
	AimOffsetBlendSpace* C_PeekAnimLeftRight;//[Offset: 0x7ac, Size: 4]
	AnimMontage* C_MontageRescue;//[Offset: 0x7b0, Size: 4]
	AnimMontage* C_MontageDead;//[Offset: 0x7b4, Size: 4]
	AnimMontage* C_MontageDead_Stand;//[Offset: 0x7b8, Size: 4]
	AnimMontage* C_MontageDead_Crouch;//[Offset: 0x7bc, Size: 4]
	AnimMontage* C_MontageDead_Prone;//[Offset: 0x7c0, Size: 4]
	AnimSequence* C_ShovelPhaseEnter;//[Offset: 0x7c4, Size: 4]
	AnimSequence* C_ShovePhaseShoveling;//[Offset: 0x7c8, Size: 4]
	AnimSequence* C_ShovelPhaseLeave;//[Offset: 0x7cc, Size: 4]
	AnimSequence* C_Climb_FrameAnim_A;//[Offset: 0x7d0, Size: 4]
	AnimSequence* C_Climb_FrameAnim_B;//[Offset: 0x7d4, Size: 4]
	enum AnimInstanceType;//[Offset: 0x7d8, Size: 1]
	bool MovementUpBodyOverrideIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d9, Size: 1]
	float MovementUpBodyBlentWeight;//[Offset: 0x7dc, Size: 4]
	bool MovementLowerBodyOverrideIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 1]
	float MovementLowerBodyBlentWeight;//[Offset: 0x7e4, Size: 4]
	bool C_bSkeletonMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 1]
	byte LastPoseTypeCache;//[Offset: 0x7e9, Size: 1]
	int ForceLODLevel;//[Offset: 0x7f8, Size: 4]
	void SwitchingPoseFinishCallback();// 0x21478f4
	void SetInterruptPose(bool bUseInterrupPose, byte InterruptPose);// 0x214782c
	void SetClimbAnimation(AnimSequence* AnimSequence, bool bFlag);// 0x2147768
	void RefreshPeekState();// 0x2147754
	void PlaySwitchWeaponAnimation(bool bWantsEquip);// 0x21476d4
	void PlayPostReloadWeaponAnimation();// 0x21476c0
	void PlayPostFillGasWeaponAnimation();// 0x21476ac
	void PlayPlayerDeadAnimation();// 0x2147698
	void PlayAnimationByEventType(byte Type);// 0x2147620
	void OnRespawned_BP();// 0x1ef1dac
	void OnRecycled_BP();// 0x1ef1918
	bool IsAssetSkeletonMatch(AnimationAsset* CheckAnimAsset, SkeletalMeshComponent* MeshComp);// 0x214755c
	void HandlePlayerWeaponStateChanged(byte NewState);// 0x21474dc
	void HandlePlayerPoseChange(byte LastPose, byte NewPose);// 0x2147418
	void HandlePlayerPickUp();// 0x21454a4
	void HandlePlayerEnterRescueState(bool bBeginRescueing);// 0x2147390
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);// 0x2bb69b8
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x21471e8
	void HandleOwnerAnimEvent(FName EventMsg);// 0x2147168
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime);// 0x2146fbc
	byte GetRole();// 0x2146f94
	void FillShovelAnimation(out const PlayerAnimList AnimList);// 0x2146dc8
	void EnableAnimFlag(enum PlayFlag);// 0x2146d50
	void DisableAnimFlag(enum PlayFlag);// 0x2146cd8
	void ClearStandbyAnimState();// 0x214513c

--------------------------------
Class: STPawnAnimInstanceBase.AnimInstance.Object
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x368, Size: 4]
	FString LuaFilePath;//[Offset: 0x36c, Size: 12]
	void OnNotifyMontagePlayingEvent_BluePrint(FName NotifyName);// 0x2bb69b8
	void OnNotifyMontagePlayingEvent(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointPayload);// 0x224c8f4
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x21471e8
	void HandleOwnerAnimEvent(FName EventMsg);// 0x2147168
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime);// 0x2146fbc

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0xf8, Size: 1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float AnimLength;//[Offset: 0x64, Size: 4]
	InterpolationParameter InterpolationParam;//[Offset: 0x68, Size: 8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0x80, Size: 4]
	byte NotifyTriggerMode;//[Offset: 0x84, Size: 1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0x88, Size: 12]
	int SampleIndexWithMarkers;//[Offset: 0x94, Size: 4]
	BlendSample[] SampleData;//[Offset: 0x98, Size: 12]
	EditorElement[] GridSamples;//[Offset: 0xa4, Size: 12]
	BlendParameter BlendParameters;//[Offset: 0xb0, Size: 24]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 4]
	byte InterpolationType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float InterpolationSpeedPerSec;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 4]
	Vector SampleValue;//[Offset: 0x4, Size: 12]
	float RateScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 4]
	float Weights;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 12]
	float Min;//[Offset: 0xc, Size: 4]
	float Max;//[Offset: 0x10, Size: 4]
	int GridNum;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
Class: PlayerAnimList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	PlayerAnimData MovementAnim;//[Offset: 0x4, Size: 8]
	PlayerAnimData AimAnim;//[Offset: 0xc, Size: 8]
	PlayerAnimData ReloadAnim;//[Offset: 0x14, Size: 8]
	PlayerAnimData FillGasAnim;//[Offset: 0x1c, Size: 8]
	PlayerAnimData EquipWeaponAnim;//[Offset: 0x24, Size: 8]
	PlayerAnimData ChangePoseAnim;//[Offset: 0x2c, Size: 8]
	PlayerAnimData PickUpAnim;//[Offset: 0x34, Size: 8]
	PlayerAnimData FireAnim;//[Offset: 0x3c, Size: 8]
	PlayerAnimData HurtAnim;//[Offset: 0x44, Size: 8]
	PlayerAnimData TurnAnim;//[Offset: 0x4c, Size: 8]
	PlayerAnimData PullingPlugAnim;//[Offset: 0x54, Size: 8]
	PlayerAnimData PutDownWeaponAnim;//[Offset: 0x5c, Size: 8]
	PlayerAnimData WeaponIdle;//[Offset: 0x64, Size: 8]
	PlayerAnimData ForegripAnim;//[Offset: 0x6c, Size: 8]
	PlayerAnimData ShoudlerWeaponIdle;//[Offset: 0x74, Size: 8]
	PlayerAnimData BeCarriedBackMoveAnim;//[Offset: 0x7c, Size: 8]
	PlayerAnimData BeCarriedBackPickUpAnim;//[Offset: 0x84, Size: 8]
	PlayerAnimData[] JumpAnimList;//[Offset: 0x8c, Size: 12]
	PlayerAnimData[] ShovelAnimList;//[Offset: 0x98, Size: 12]
	PlayerAnimData[] ExtraAnimList;//[Offset: 0xa4, Size: 12]

--------------------------------
Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0, Size: 4]
	float Rate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraAnimInstanceProxy.AnimInstanceProxy
	STExtraBaseCharacter* OwnerPawn;//[Offset: 0x420, Size: 4]
	STExtraAnimInstanceBase* ParentAnimInst;//[Offset: 0x424, Size: 4]

--------------------------------
Class: AnimInstanceProxy
	AnimInstance*[] SubAnimInstances;//[Offset: 0x414, Size: 12]

--------------------------------
Class: AnimParamList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	Vector Velocity;//[Offset: 0x4, Size: 12]
	Vector movedir;//[Offset: 0x10, Size: 12]
	byte MovementMode;//[Offset: 0x1c, Size: 1]
	byte CustomMovementMode;//[Offset: 0x1d, Size: 1]
	byte PoseType;//[Offset: 0x1e, Size: 1]
	Rotator ViewRotation;//[Offset: 0x20, Size: 12]
	Rotator ControlRotation;//[Offset: 0x2c, Size: 12]
	byte WeaponType;//[Offset: 0x38, Size: 1]
	byte WeaponHoldType;//[Offset: 0x39, Size: 1]
	byte WeaponState;//[Offset: 0x3a, Size: 1]
	byte WeaponReloadMethod;//[Offset: 0x3b, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	byte SightType;//[Offset: 0x3d, Size: 1]
	float RecoilKickADS;//[Offset: 0x40, Size: 4]
	float ForegripParam;//[Offset: 0x44, Size: 4]
	Vector OffsetFPPLocation;//[Offset: 0x4c, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0x58, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0x64, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x70, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0x7c, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0x88, Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0x94, Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xa0, Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xac, Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xb8, Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xc4, Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xd0, Size: 12]
	bool bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	bool IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	bool IsRescueing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf, Size: 1]
	bool IsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	Vector HurtDir;//[Offset: 0xe4, Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	byte JumpType;//[Offset: 0xf2, Size: 1]
	enum ParachuteState;//[Offset: 0xf3, Size: 1]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	bool bFreeFallingShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6, Size: 1]
	bool IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7, Size: 1]
	bool IsDisableAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	float HandleFolderFactor;//[Offset: 0xfc, Size: 4]
	float CharacterYawRotateRate;//[Offset: 0x100, Size: 4]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	bool bCarryBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 1]
	float CarryBlendTimeAccumulator;//[Offset: 0x108, Size: 4]
	bool bHasTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]

--------------------------------
Class: WeaponSyncData
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	uint32 ClipID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraVehicleWeaponsOnSeat
	VehicleShootWeapon*[] WeaponsOnSeat;//[Offset: 0x0, Size: 12]

--------------------------------
Class: STExtraVehicleAttachment
	FName AttachSocket;//[Offset: 0x0, Size: 8]
	class VehicleAttachmentBase* VehicleAttachementClass;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleAttachmentBase.Actor.Object
	bool bEnableModifyHitDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	float HitSelfModifier;//[Offset: 0x308, Size: 4]
	float HitSelfImpactReduce;//[Offset: 0x30c, Size: 4]
	float HitOthersModifier;//[Offset: 0x310, Size: 4]
	float HitOthersImpactRaise;//[Offset: 0x314, Size: 4]
	float HitCharacterModifier;//[Offset: 0x318, Size: 4]

--------------------------------
Class: VehicleDamageComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	CurveFloat* VehicleHitCharacterDamageCurve;//[Offset: 0x14c, Size: 4]
	float LaunchVelocityFactorOnHitCharacter;//[Offset: 0x150, Size: 4]
	float ImpactModifier;//[Offset: 0x154, Size: 4]
	float ImpactAbsorption;//[Offset: 0x158, Size: 4]
	float ImpactAbsorptionPassenger;//[Offset: 0x15c, Size: 4]
	float ImpactModifierUpsideDown;//[Offset: 0x160, Size: 4]
	float ImpactAbsorptionUpsideDown;//[Offset: 0x164, Size: 4]
	float ImpactAbsorptionPassengerUpsideDown;//[Offset: 0x168, Size: 4]
	float HitIgnoreImpulseThreshold;//[Offset: 0x16c, Size: 4]
	class Actor[] HitIgnoreClasses;//[Offset: 0x170, Size: 12]
	bool PushCharacterSides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 1]
	float PushCharacterForwardVectorStrength;//[Offset: 0x180, Size: 4]
	float PushCharacterRightVectorStrength;//[Offset: 0x184, Size: 4]
	float PushCharacterTopVectorStrength;//[Offset: 0x188, Size: 4]
	float ApplyImpluseSpeed;//[Offset: 0x18c, Size: 4]
	<Actor*,float> VehicleImpluseCharacterTimes;//[Offset: 0x190, Size: 60]
	float VehicleImpluseCharacterCooldownTime;//[Offset: 0x1cc, Size: 4]
	float DamageCharacterCD;//[Offset: 0x1d0, Size: 4]
	float PassengerProtectTime;//[Offset: 0x1d4, Size: 4]
	float DamageSelfCD;//[Offset: 0x1dc, Size: 4]
	bool bIgnoreVehicleSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	float HitDamageSelfMaxFactor;//[Offset: 0x1e8, Size: 4]
	float HitDamagePassengerMaxHP;//[Offset: 0x1ec, Size: 4]
	bool bApplyDamageToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	float AllowedMaxHitDistanceSqAtServer;//[Offset: 0x1f4, Size: 4]
	float DamageReduce;//[Offset: 0x1f8, Size: 4]
	float fHitEventInterval;//[Offset: 0x1fc, Size: 4]
	delegate OnVehicleHitOthers;//[Offset: 0x204, Size: 12]
	float ExplosionBaseDamage;//[Offset: 0x210, Size: 4]
	float ExplosionMinimumDamage;//[Offset: 0x214, Size: 4]
	float ExplosionRadiusInner;//[Offset: 0x218, Size: 4]
	float ExplosionRadiusOuter;//[Offset: 0x21c, Size: 4]
	float ExplosionDamageFalloff;//[Offset: 0x220, Size: 4]
	float ExplosionBaseMomentumMag;//[Offset: 0x224, Size: 4]
	class DamageType* ExplosionDamageType;//[Offset: 0x228, Size: 4]
	bool OnlyBreakWindowThroughDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 1]
	class DamageType* VehicleDamageTypeClass;//[Offset: 0x230, Size: 4]
	<Actor*,float> VehicleDamageCharacterTimes;//[Offset: 0x234, Size: 60]
	bool bProcessVehicleDamageCharacterOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	float VehicleDamageCharacterCooldownTime;//[Offset: 0x274, Size: 4]
	float HitStoneVelocityDamp;//[Offset: 0x278, Size: 4]
	RigidBodyState CachedRigidBodyState;//[Offset: 0x280, Size: 64]
	bool bEnableVehicleHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	CurveFloat* VehicleHitVehicleDamageCurve;//[Offset: 0x2c4, Size: 4]
	Vector2D ImpactModifierVehicle;//[Offset: 0x2c8, Size: 8]
	Vector2D ImpactModifierOtherVehicle;//[Offset: 0x2d0, Size: 8]
	float ImpactAbsorptionVehicle;//[Offset: 0x2d8, Size: 4]
	float ImpactAbsorptionAmplitude;//[Offset: 0x2dc, Size: 4]
	float DotProductFrontThreshold;//[Offset: 0x2e0, Size: 4]
	float DotProductRearThreshold;//[Offset: 0x2e4, Size: 4]
	float ImpactModifierFront;//[Offset: 0x2e8, Size: 4]
	float ImpactModifierRear;//[Offset: 0x2ec, Size: 4]
	float ImpactModifierFrontSide;//[Offset: 0x2f0, Size: 4]
	float ImpactModifierRearSide;//[Offset: 0x2f4, Size: 4]
	Vector2D DamageCorrection;//[Offset: 0x2f8, Size: 8]
	float SameCampDamangeAttenuationCoefficient;//[Offset: 0x300, Size: 4]
	float SameCampDamangeLimit;//[Offset: 0x304, Size: 4]
	<Actor*,float> CustomImpulseHitTimes;//[Offset: 0x308, Size: 60]
	bool bProcessCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	bool bOnlyPlayerCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 1]
	float CustomImpulseCooldownTime;//[Offset: 0x348, Size: 4]
	<FString,VehicleCustomImpulse> CustomImpulseComponentMap;//[Offset: 0x34c, Size: 60]
	VehicleCustomImpulseFilter mFilter;//[Offset: 0x388, Size: 32]
	void SendHitCaveStoneToServer(Actor* OtherActor, const RigidBodyState InHitBodyState);// 0x22ce0c0
	bool ScriptShouldCauseDamage(float InDamage, PrimitiveComponent* InPrimComp, STExtraBaseCharacter* InCharacter);// 0x2bb69b8
	void OnCustomImpulseComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x22cdef8
	void HandleOnVehicleHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x22cdd90

--------------------------------
Class: RigidBodyState
	Vector_NetQuantize100 Position;//[Offset: 0x0, Size: 12]
	Quat Quaternion;//[Offset: 0x10, Size: 16]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20, Size: 12]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c, Size: 12]
	byte Flags;//[Offset: 0x38, Size: 1]

--------------------------------
Class: VehicleCustomImpulse
	class Actor[] IgnoreClasses;//[Offset: 0x0, Size: 12]
	VehicleCustomImpulseFilter[] ImpulseFilters;//[Offset: 0xc, Size: 12]
	class DamageType* DamageType;//[Offset: 0x18, Size: 4]
	bool bApplyImpulseWhileDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bApplyImpulseWhileStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bUseHitActorAsDamageInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]

--------------------------------
Class: VehicleCustomImpulseFilter
	class Actor* ImpulseAbsorberType;//[Offset: 0x0, Size: 4]
	bool bApplyRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bApplyImpulseAsVelocityChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	float MaxDamagingImpulseMagnituge;//[Offset: 0x8, Size: 4]
	float MaxImpulseDamage;//[Offset: 0xc, Size: 4]
	float ImpulseStrength;//[Offset: 0x10, Size: 4]
	float RadialImpulseStrength;//[Offset: 0x14, Size: 4]
	float ImpulseRadius;//[Offset: 0x18, Size: 4]
	byte ImpulseFalloffType;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: VehicleCommonComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate VehicleHPChangedDelegate;//[Offset: 0x14c, Size: 12]
	delegate VehicleFuelChangedDelegate;//[Offset: 0x158, Size: 12]
	delegate VehicleWheelsHPChangedDelegate;//[Offset: 0x164, Size: 12]
	delegate VehicleHPFuelChangedDelegate;//[Offset: 0x170, Size: 12]
	delegate OnHPPreChange;//[Offset: 0x17c, Size: 12]
	delegate UnmannedVehicleHPChangedDelegate;//[Offset: 0x188, Size: 12]
	delegate UnmannedVehicleFuelChangedDelegate;//[Offset: 0x194, Size: 12]
	bool DontDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	float HPMax;//[Offset: 0x1a4, Size: 4]
	float HP;//[Offset: 0x1a8, Size: 4]
	float[] WheelsCurrentHP;//[Offset: 0x1ac, Size: 12]
	bool DontConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	float FuelMax;//[Offset: 0x1bc, Size: 4]
	float Fuel;//[Offset: 0x1c0, Size: 4]
	float DelayDestroySeconds;//[Offset: 0x1c4, Size: 4]
	float FuelConsumeFactor;//[Offset: 0x1c8, Size: 4]
	MaterialDamage[] MaterialDamageConfig;//[Offset: 0x1cc, Size: 12]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x1d8, Size: 12]
	VehicleDamageRecord[] DamageRecords;//[Offset: 0x1e4, Size: 12]
	void VehicleTakeDamage(float Damage, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x22cbc5c
	void TranslateFuelToReplicatedRatio();// 0x22cbc48
	void TakeDamageByHitPart(float Damage, byte HitPart, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x22cba44
	void TakeDamageByBoneNameInner(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x22cb828
	void TakeDamageByBoneName(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x22cb60c
	void SetHPFuel(float InHp, float InFuel);// 0x22cb550
	void SetFuel(float InFuel);// 0x22cb4d8
	void RefreshWheelState();// 0x22cb4c4
	void OnRep_WheelsCurrentHP();// 0x22cb4b0
	void OnRep_HP();// 0x22cb49c
	void OnRep_Fuel();// 0x22cb488
	bool NoFuel();// 0x22cb460
	void Maintenance(float addpercenthp, bool fixtire);// 0x22cb39c
	bool IsDontDamage();// 0x22cb380
	bool IsDontConsumeFuel();// 0x22cb364
	bool IsDestroyed();// 0x22cb33c
	int GetWheelsHPNum();// 0x22cb314
	float GetWheelHPMax(int WheelIdx);// 0x22cb294
	float GetWheelHP(int WheelIdx);// 0x22cb214
	float GetVehicleHPMax();// 0x22cb1ec
	float GetVehicleHP();// 0x22cb1c4
	float GetFuelMax();// 0x22cb19c
	float GetFuelConsumeFactor();// 0x22cb174
	float GetFuel();// 0x22cb14c
	void CalculateDestroyVehicleWheelFlow(Controller* Instigator);// 0x22cb0d4

--------------------------------
Class: MaterialDamage
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 4]
	float DamageScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraVehicleWheelHP
	float HPMax;//[Offset: 0x0, Size: 4]
	bool DontDamageWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FName BoneName;//[Offset: 0x8, Size: 8]
	FName[] AssociationBoneName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleDamageRecord
	Controller* Instigator;//[Offset: 0x0, Size: 4]
	float Time;//[Offset: 0x4, Size: 4]
	float Damage;//[Offset: 0x8, Size: 4]
	int DamageType;//[Offset: 0xc, Size: 4]
	int AdditionalParam;//[Offset: 0x10, Size: 4]

--------------------------------
Class: BuoyancyForceComponent.SceneComponent.ActorComponent.Object
	delegate OnContactWater;//[Offset: 0x260, Size: 12]
	delegate OnEnterWater;//[Offset: 0x26c, Size: 12]
	bool bUseBuoyancyEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	OceanManager* OceanManager;//[Offset: 0x27c, Size: 4]
	float MeshDensity;//[Offset: 0x280, Size: 4]
	float FluidDensity;//[Offset: 0x284, Size: 4]
	float FluidLinearDamping;//[Offset: 0x288, Size: 4]
	float FluidAngularDamping;//[Offset: 0x28c, Size: 4]
	Vector VelocityDamper;//[Offset: 0x290, Size: 12]
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	float MaxUnderwaterVelocity;//[Offset: 0x2a0, Size: 4]
	float TestPointRadius;//[Offset: 0x2a4, Size: 4]
	Vector[] TestPoints;//[Offset: 0x2a8, Size: 12]
	bool ApplyForceToBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 1]
	bool SnapToSurfaceIfNoPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 1]
	bool TwoGerstnerIterations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b6, Size: 1]
	float[] PointDensityOverride;//[Offset: 0x2b8, Size: 12]
	StructBoneOverride[] BoneOverride;//[Offset: 0x2c4, Size: 12]
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	bool DrawDebugSeaLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 1]
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 1]
	float StayUprightStiffness;//[Offset: 0x2d4, Size: 4]
	float StayUprightDamping;//[Offset: 0x2d8, Size: 4]
	Rotator StayUprightDesiredRotation;//[Offset: 0x2dc, Size: 12]
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	float WaveForceMultiplier;//[Offset: 0x2ec, Size: 4]
	SceneComponent* UpdatedComponent;//[Offset: 0x2f0, Size: 4]
	byte TickGroup;//[Offset: 0x2f4, Size: 1]
	bool EnableCustomWaveForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 1]
	Vector CustomWaveForceTestPointOffset;//[Offset: 0x2f8, Size: 12]
	WaterBoxComponent*[] CandidateWaterBoxes;//[Offset: 0x304, Size: 12]
	PhysicsConstraintComponent* UprightConstraintComp;//[Offset: 0x4b0, Size: 4]
	void TickBuoyancyForce(float DeltaTime);// 0x20272b4
	void OnEnterWaterDelegate__DelegateSignature(bool IsUnderWater);// 0x2bb69b8
	void OnContactWaterDelegate__DelegateSignature(bool IsContactingWater);// 0x2bb69b8
	void NativeSetEnableCustomWaveForce(bool bEnable);// 0x4f1ab44
	bool IsEntirelyUnderWater();// 0x4f1ab0c
	bool IsContactedWater();// 0x4f1aae4
	void EndableUprightConstraint(bool bEnable);// 0x4f1aa64
	bool CheckPointInWater(Vector Point, bool isWorldPosition);// 0x4f1a998

--------------------------------
Class: OceanManager.Actor.Object
	bool EnableGerstnerWaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 1]
	Vector GlobalWaveDirection;//[Offset: 0x300, Size: 12]
	float GlobalWaveSpeed;//[Offset: 0x30c, Size: 4]
	float GlobalWaveAmplitude;//[Offset: 0x310, Size: 4]
	float DistanceCheckAbove;//[Offset: 0x314, Size: 4]
	float DistanceCheckBelow;//[Offset: 0x318, Size: 4]
	WaveParameter[] WaveClusters;//[Offset: 0x31c, Size: 12]
	WaveSetParameters[] WaveSetOffsetsOverride;//[Offset: 0x328, Size: 12]
	float NetWorkTimeOffset;//[Offset: 0x334, Size: 4]
	bool bEnableLandscapeModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	float ModulationStartHeight;//[Offset: 0x33c, Size: 4]
	float ModulationMaxHeight;//[Offset: 0x340, Size: 4]
	float ModulationPower;//[Offset: 0x344, Size: 4]
	Landscape* Landscape;//[Offset: 0x348, Size: 4]
	Texture2D* HeightmapTexture;//[Offset: 0x34c, Size: 4]
	bool bShouldCorrectTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	float CorrectTimeInterval;//[Offset: 0x374, Size: 4]
	float ReplicatedWorldRealTimeSeconds;//[Offset: 0x37c, Size: 4]
	float ServerWorldRealTimeSecondsDelta;//[Offset: 0x380, Size: 4]
	delegate OnReplicatedWorldRealTimeSeconds;//[Offset: 0x384, Size: 12]
	bool bEnableWaterBoxModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	Box[] WaterBoxes;//[Offset: 0x394, Size: 12]
	bool bEnableWaterTransformModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	Transform[] WaterTransforms;//[Offset: 0x3a8, Size: 12]
	Vector[] WaterBoxExtends;//[Offset: 0x3b4, Size: 12]
	void OnRep_ReplicatedWorldRealTimeSeconds();// 0x4f1bf28
	void LoadLandscapeHeightmap(Texture2D* Tex2D);// 0x4f1beb0
	LinearColor GetHeightmapPixel(float U, float V);// 0x4f1bde0

--------------------------------
Class: WaveParameter
	float Rotation;//[Offset: 0x0, Size: 4]
	float Length;//[Offset: 0x4, Size: 4]
	float Amplitude;//[Offset: 0x8, Size: 4]
	float Steepness;//[Offset: 0xc, Size: 4]
	float TimeScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WaveSetParameters
	WaveParameter Wave01;//[Offset: 0x0, Size: 20]
	WaveParameter Wave02;//[Offset: 0x14, Size: 20]
	WaveParameter Wave03;//[Offset: 0x28, Size: 20]
	WaveParameter Wave04;//[Offset: 0x3c, Size: 20]
	WaveParameter Wave05;//[Offset: 0x50, Size: 20]
	WaveParameter Wave06;//[Offset: 0x64, Size: 20]
	WaveParameter Wave07;//[Offset: 0x78, Size: 20]
	WaveParameter Wave08;//[Offset: 0x8c, Size: 20]

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x2fc, Size: 4]
	Guid LandscapeGuid;//[Offset: 0x300, Size: 16]
	IntPoint LandscapeSectionOffset;//[Offset: 0x310, Size: 8]
	int MaxLODLevel;//[Offset: 0x318, Size: 4]
	float LODDistanceFactor;//[Offset: 0x31c, Size: 4]
	byte LODFalloff;//[Offset: 0x320, Size: 1]
	bool bUseScreenSizeLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 1]
	float LOD0DistributionSetting;//[Offset: 0x324, Size: 4]
	float LODDistributionSetting;//[Offset: 0x328, Size: 4]
	byte NearMaxLOD_Baked;//[Offset: 0x32c, Size: 1]
	float NearFactor_Baked;//[Offset: 0x330, Size: 4]
	float NearExtent_Baked;//[Offset: 0x334, Size: 4]
	float FarFactor_Baked;//[Offset: 0x338, Size: 4]
	float LandscapeRoughness;//[Offset: 0x33c, Size: 4]
	bool EnableImproveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	float[] ImproveLODValues;//[Offset: 0x344, Size: 12]
	byte NearMaxLOD;//[Offset: 0x350, Size: 1]
	float NearFactor;//[Offset: 0x354, Size: 4]
	float NearExtent;//[Offset: 0x358, Size: 4]
	float FarFactor;//[Offset: 0x35c, Size: 4]
	int StaticLightingLOD;//[Offset: 0x360, Size: 4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x364, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x368, Size: 4]
	bool bCacheHeightData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x36c, Size: 1]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x370, Size: 4]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x374, Size: 4]
	<FName,MaterialInterface*> OtherMaterials;//[Offset: 0x378, Size: 60]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b4, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x3b8, Size: 12]
	float MinGrassWeightThreshold;//[Offset: 0x3c4, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x3c8, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x3cc, Size: 4]
	Texture2D* GrassColor_WorldMaskNoiseTexture;//[Offset: 0x3d0, Size: 4]
	Vector2D GrassColor_UVScale_WorldMaskNoise;//[Offset: 0x3d4, Size: 8]
	Vector2D GrassColor_Center_WorldMaskNoise;//[Offset: 0x3dc, Size: 8]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x3e4, Size: 12]
	LandscapeAOTextureDataAsset* LandscapeAOTextureDataAsset;//[Offset: 0x3f0, Size: 4]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x3f4, Size: 12]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x400, Size: 12]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 1]
	float StaticLightingResolution;//[Offset: 0x458, Size: 4]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45c, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x45c, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x45c, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x45d, Size: 1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45e, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x45e, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x460, Size: 4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x464, Size: 24]
	int CollisionMipLevel;//[Offset: 0x47c, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x480, Size: 4]
	float CollisionThickness;//[Offset: 0x484, Size: 4]
	BodyInstance BodyInstance;//[Offset: 0x488, Size: 320]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c8, Size: 1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c8, Size: 1]
	bool bUseHoleConsistent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c8, Size: 1]
	int ComponentSizeQuads;//[Offset: 0x5cc, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x5d0, Size: 4]
	int NumSubsections;//[Offset: 0x5d4, Size: 4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d8, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x5d9, Size: 1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5da, Size: 1]
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer);// 0x3668260
	void ChangeLODDistributionSettingConsoleVariable();// 0x1f3ed9c
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x1edacf4
	void ChangeLOD0DistributionSettingConsoleVariable();// 0x1edac58
	void ChangebUseScreenSizeLOD(bool InbUseScreenSizeLOD);// 0x200cfa4

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x5b4, Size: 12]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x5c0, Size: 12]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x5cc, Size: 12]

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	float Width;//[Offset: 0x34, Size: 4]
	float SideFalloff;//[Offset: 0x38, Size: 4]
	float EndFalloff;//[Offset: 0x3c, Size: 4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x40, Size: 12]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x4c, Size: 12]
	Box Bounds;//[Offset: 0x58, Size: 28]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x74, Size: 4]

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 4]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x20, Size: 16]
	InterpCurveVector SplineInfo;//[Offset: 0x40, Size: 20]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x54, Size: 12]
	Box Bounds;//[Offset: 0x60, Size: 28]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0x7c, Size: 12]

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 4]
	float TangentLen;//[Offset: 0x4, Size: 4]
	FName SocketName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 12]
	Vector Left;//[Offset: 0xc, Size: 12]
	Vector Right;//[Offset: 0x18, Size: 12]
	Vector FalloffLeft;//[Offset: 0x24, Size: 12]
	Vector FalloffRight;//[Offset: 0x30, Size: 12]
	float StartEndFalloff;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x1c, Size: 12]
	StaticMesh* GrassMesh;//[Offset: 0x28, Size: 4]
	float GrassDensity;//[Offset: 0x2c, Size: 4]
	float PlacementJitter;//[Offset: 0x30, Size: 4]
	int StartCullDistance;//[Offset: 0x34, Size: 4]
	int EndCullDistance;//[Offset: 0x38, Size: 4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 4]
	float GrassDensity;//[Offset: 0x4, Size: 4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float PlacementJitter;//[Offset: 0xc, Size: 4]
	int StartCullDistance;//[Offset: 0x10, Size: 4]
	int EndCullDistance;//[Offset: 0x14, Size: 4]
	int MinLOD;//[Offset: 0x18, Size: 4]
	enum Scaling;//[Offset: 0x1c, Size: 1]
	FloatInterval ScaleX;//[Offset: 0x20, Size: 8]
	FloatInterval ScaleY;//[Offset: 0x28, Size: 8]
	FloatInterval ScaleZ;//[Offset: 0x30, Size: 8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x3b, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 4]
	float Max;//[Offset: 0x4, Size: 4]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x5b4, Size: 4]
	int SectionBaseY;//[Offset: 0x5b8, Size: 4]
	int ComponentSizeQuads;//[Offset: 0x5bc, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x5c0, Size: 4]
	int NumSubsections;//[Offset: 0x5c4, Size: 4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x5c8, Size: 4]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x5cc, Size: 4]
	<FName,MaterialInterface*> OverrideOtherMaterials;//[Offset: 0x5d0, Size: 60]
	OverridePhyxMaterial OverridePhyxMaterial;//[Offset: 0x60c, Size: 24]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x624, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x628, Size: 12]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x634, Size: 12]
	<FName,MaterialInstanceConstant*> OtherMaterialInstances;//[Offset: 0x640, Size: 60]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x67c, Size: 12]
	Texture2D*[] WeightmapTextures;//[Offset: 0x688, Size: 12]
	int VisibilityLayerChannel;//[Offset: 0x694, Size: 4]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x698, Size: 4]
	Vector4 WeightmapScaleBias;//[Offset: 0x6a0, Size: 16]
	float WeightmapSubsectionOffset;//[Offset: 0x6b0, Size: 4]
	Vector4 HeightmapScaleBias;//[Offset: 0x6c0, Size: 16]
	Texture2D* HeightmapTexture;//[Offset: 0x6d0, Size: 4]
	<FString,VisibilityData> MultiVisibilityTextureData;//[Offset: 0x6d4, Size: 60]
	FString VisibleVisibilityLayer;//[Offset: 0x710, Size: 12]
	Box CachedLocalBox;//[Offset: 0x71c, Size: 28]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x738, Size: 28]
	Guid MapBuildDataId;//[Offset: 0x754, Size: 16]
	Guid[] IrrelevantLights;//[Offset: 0x764, Size: 12]
	int CollisionMipLevel;//[Offset: 0x770, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x774, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x778, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x77c, Size: 4]
	float StaticLightingResolution;//[Offset: 0x780, Size: 4]
	int ForcedLOD;//[Offset: 0x784, Size: 4]
	int LODBias;//[Offset: 0x788, Size: 4]
	float[] LODDeltaVertex;//[Offset: 0x798, Size: 12]
	float MaxDeltaVertex;//[Offset: 0x7a4, Size: 4]
	Guid stateID;//[Offset: 0x7a8, Size: 16]
	Guid BakedTextureMaterialGuid;//[Offset: 0x7b8, Size: 16]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x7c8, Size: 4]
	StaticMesh* OccluderMesh;//[Offset: 0x7cc, Size: 4]
	byte MobileBlendableLayerMask;//[Offset: 0x7d0, Size: 1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x7d4, Size: 4]
	<FName,MaterialInterface*> OtherMobileMaterialInterfaces;//[Offset: 0x7d8, Size: 60]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x814, Size: 12]
	Texture2D* MobileWeightNormalmapTexture;//[Offset: 0x820, Size: 4]
	uint16[] CachedHeightData;//[Offset: 0x824, Size: 12]
	FName UsedOtherMaterialName;//[Offset: 0x888, Size: 8]

--------------------------------
Class: OverridePhyxMaterial
	PhysicalMaterial*[] OriginalPhysxMaterial;//[Offset: 0x0, Size: 12]
	PhysicalMaterial*[] OverridePhysxMaterial;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 4]
	byte WeightmapTextureIndex;//[Offset: 0x4, Size: 1]
	byte WeightmapTextureChannel;//[Offset: 0x5, Size: 1]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x20, Size: 8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x28, Size: 4]
	float Hardness;//[Offset: 0x2c, Size: 4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x30, Size: 16]

--------------------------------
Class: VisibilityData
	byte[] VisibilityData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x5b4, Size: 12]
	int SectionBaseX;//[Offset: 0x5c0, Size: 4]
	int SectionBaseY;//[Offset: 0x5c4, Size: 4]
	int CollisionSizeQuads;//[Offset: 0x5c8, Size: 4]
	float CollisionScale;//[Offset: 0x5cc, Size: 4]
	int SimpleCollisionSizeQuads;//[Offset: 0x5d0, Size: 4]
	byte[] CollisionQuadFlags;//[Offset: 0x5d4, Size: 12]
	Guid HeightfieldGuid;//[Offset: 0x5e0, Size: 16]
	Box CachedLocalBox;//[Offset: 0x5f0, Size: 28]
	LandscapeComponent* RenderComponent;//[Offset: 0x60c, Size: 28]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x634, Size: 12]

--------------------------------
Class: LandscapeAOTextureDataAsset.DataAsset.Object
	uint32 DataSize;//[Offset: 0x20, Size: 4]
	byte[] LandscapeAOPlatformData;//[Offset: 0x24, Size: 12]

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x790, Size: 12]
	int NumBuiltInstances;//[Offset: 0x79c, Size: 4]
	Box BuiltInstanceBounds;//[Offset: 0x7a4, Size: 28]
	Box UnbuiltInstanceBounds;//[Offset: 0x7c0, Size: 28]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x7dc, Size: 12]
	int[] UnbuiltInstanceIndexList;//[Offset: 0x7e8, Size: 12]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7f4, Size: 1]
	int OcclusionLayerNumNodes;//[Offset: 0x814, Size: 4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x818, Size: 28]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x839, Size: 1]
	int MinInstancesToSplitNode;//[Offset: 0x83c, Size: 4]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x444bf30

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x6a0, Size: 12]
	int InstancingRandomSeed;//[Offset: 0x6ac, Size: 4]
	int InstanceStartCullDistance;//[Offset: 0x6b0, Size: 4]
	int InstanceEndCullDistance;//[Offset: 0x6b4, Size: 4]
	int[] InstanceReorderTable;//[Offset: 0x6b8, Size: 12]
	int[] RemovedInstances;//[Offset: 0x6c4, Size: 12]
	bool UseDynamicInstanceBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 1]
	bool KeepInstanceBufferCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d1, Size: 1]
	PhysicsSerializer* PhysicsSerializer;//[Offset: 0x730, Size: 4]
	<int,Matrix> StashInstanceTransform;//[Offset: 0x734, Size: 60]
	int NumPendingLightmaps;//[Offset: 0x774, Size: 4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x778, Size: 12]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x4456210
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x4456154
	bool RemoveInstance(int InstanceIndex);// 0x44560cc
	bool HideInstance(out const int[] InstanceIndices);// 0x4455ff0
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x4455e80
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x4455cc8
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x4455b30
	int GetInstanceCount();// 0x20565b4
	void ClearInstances();// 0x1f42844
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x4455a50
	int AddInstance(out const Transform InstanceTransform);// 0x4455960

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 64]

--------------------------------
Class: PhysicsSerializer.Object

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: StructBoneOverride
	FName BoneName;//[Offset: 0x0, Size: 8]
	float Density;//[Offset: 0x8, Size: 4]
	float TestRadius;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WaterBoxComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float AcceptHigherZ;//[Offset: 0x5d0, Size: 4]
	Vector Direction;//[Offset: 0x5d4, Size: 12]
	float SpeedValue;//[Offset: 0x5e0, Size: 4]
	float WaveForceMultiplier;//[Offset: 0x5e4, Size: 4]
	TrippleWaveParameter[] TrippleWaveClusters;//[Offset: 0x5e8, Size: 12]
	float TimeScaleOffset;//[Offset: 0x5f4, Size: 4]
	float Offset;//[Offset: 0x5f8, Size: 4]
	bool UseSplineDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fc, Size: 1]
	float SpeedAttenuationFromSpline;//[Offset: 0x600, Size: 4]
	bool UseSplineZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604, Size: 1]
	float ZOffset;//[Offset: 0x608, Size: 4]
	float CellSizeX;//[Offset: 0x60c, Size: 4]
	float CellSizeY;//[Offset: 0x610, Size: 4]
	<float,WaterBoxCell> Cells;//[Offset: 0x614, Size: 60]
	int KeyFactor;//[Offset: 0x650, Size: 4]

--------------------------------
Class: TrippleWaveParameter
	WaveParameter WaveCluster0;//[Offset: 0x0, Size: 20]
	WaveAdjust WaveAdjust0;//[Offset: 0x14, Size: 8]
	WaveParameter WaveCluster1;//[Offset: 0x1c, Size: 20]
	WaveAdjust WaveAdjust1;//[Offset: 0x30, Size: 8]
	WaveParameter WaveCluster2;//[Offset: 0x38, Size: 20]
	WaveAdjust WaveAdjust2;//[Offset: 0x4c, Size: 8]

--------------------------------
Class: WaveAdjust
	float TimeScaleOffset;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WaterBoxCell
	Vector WaveDirection;//[Offset: 0x0, Size: 12]
	float WaveZ;//[Offset: 0xc, Size: 4]
	Vector PushForceDirection;//[Offset: 0x10, Size: 12]
	float Speed;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x260, Size: 4]
	ConstrainComponentPropName ComponentName1;//[Offset: 0x268, Size: 8]
	Actor* ConstraintActor2;//[Offset: 0x270, Size: 4]
	ConstrainComponentPropName ComponentName2;//[Offset: 0x278, Size: 8]
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x290, Size: 4]
	delegate OnConstraintBroken;//[Offset: 0x294, Size: 12]
	ConstraintInstance ConstraintInstance;//[Offset: 0x2a0, Size: 416]
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x44f0fc8
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x44f0f48
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x44f0e8c
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x44f0dd0
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x44f0d14
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0x44f0c90
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x44f0b70
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0x44f0aec
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x44f09cc
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x44f08cc
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x44f0804
	void SetDisableCollision(bool bDisableCollision);// 0x44f0784
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0x44f06bc
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0x44f05a0
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0x44f0480
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x44f0320
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0x44f029c
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x44f01cc
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x44f014c
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x44f007c
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x44effc0
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x44eff04
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x44efe48
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0x44efdc4
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x44efcf4
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x44efbf4
	void SetAngularDriveMode(byte DriveMode);// 0x44efb7c
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x44efab4
	bool IsBroken();// 0x44efa8c
	float GetCurrentTwist();// 0x44efa64
	float GetCurrentSwing2();// 0x44efa3c
	float GetCurrentSwing1();// 0x44efa14
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0x44ef93c
	void BreakConstraint();// 0x44ef928

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: VehicleSyncComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate OnActorHit;//[Offset: 0x14c, Size: 12]
	float MinCorrectionInterval;//[Offset: 0x158, Size: 4]
	float MinSendingStateChangedIntervalAtClient;//[Offset: 0x15c, Size: 4]
	float MinDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x160, Size: 4]
	float MaxDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x164, Size: 4]
	float SendingToServerIntervalAtClient;//[Offset: 0x168, Size: 4]
	float SendingReliableHitToServerInterval;//[Offset: 0x16c, Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x170, Size: 4]
	float AllowMaxLinearSpeedRatio;//[Offset: 0x174, Size: 4]
	float StationaryCorrectIntervalAtClient;//[Offset: 0x178, Size: 4]
	float StationaryCorrectSpeedThresholdSq;//[Offset: 0x17c, Size: 4]
	float StationaryCorrectThresholdDistanceSq;//[Offset: 0x180, Size: 4]
	float MinCorrectionDistanceSqAtClient;//[Offset: 0x184, Size: 4]
	float MinCorrectionVelocitySqAtClient;//[Offset: 0x188, Size: 4]
	float MinCorrectionAngleVelocitySqAtClient;//[Offset: 0x18c, Size: 4]
	float IdleForceUpdateThreshold;//[Offset: 0x190, Size: 4]
	float IdleForceSyncInterval;//[Offset: 0x194, Size: 4]
	bool bUseStaticRotFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	float StaticFixLocation;//[Offset: 0x19c, Size: 4]
	float StaticFixAngel;//[Offset: 0x1a0, Size: 4]
	float StaticStopFixTorelence;//[Offset: 0x1a4, Size: 4]
	float MaxCalculatedStartZVeolcity;//[Offset: 0x1a8, Size: 4]
	bool bVehicleNeedFlyVelCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 1]
	bool SendClientMoveToServerOverLapUseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ae, Size: 1]
	bool AutonomousPullUpWhilePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1af, Size: 1]
	float AutonomousPullUpWhilePassWallZThres;//[Offset: 0x1b0, Size: 4]
	float SimulatedFloorUpDistance;//[Offset: 0x1b4, Size: 4]
	STExtraVehicleBase* VehicleOwner;//[Offset: 0x1b8, Size: 4]
	VehicleSyncPostPhysxTick PostPhysxComponentTick;//[Offset: 0x2ac, Size: 60]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x22dc184
	void SendServerMoveToClient(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x22dbfc8
	void SendClientMoveToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x22dbdd0
	void SendClientMoveToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x22dbbd8
	int SendClientMoveToServerInternal(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity, const bool InShouldDelay);// 0x22db97c
	void SendClientMoveToServer_WithDelay(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x22db770
	int SendClientMoveToServer_DoWork(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x22db560
	void SendClientHitToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x22db28c
	void SendClientHitToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x22dafb8
	void SendClientHitPointToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const Vector_NetQuantize100 HitPoint);// 0x22dace0
	void OnHitAtServer(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x22dab78
	void OnHitAtClient(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x22daa10
	void OnDriverRide();// 0x22da9fc
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x22da8f4
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x22da75c
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x2025a24
	STExtraBaseCharacter*[] GetRiders();// 0x22da69c
	float GetLanscapeHeight(out const Vector ClientLocation);// 0x22da610
	bool GetFloorPosition(out const Vector Location, out Vector OutFloorLocation);// 0x22da530
	void DragUnderGround();// 0x22da51c
	void Correct(bool bIsSnap, bool bPlayerChannel, float ZAdjustValue);// 0x22da404
	void ClientHitActor(Actor* OtherActor, out const Vector_NetQuantize100 NormalImpulse, out const HitResult Hit);// 0x22da2d0
	bool CheckAndLoadLandscape(float DeltaTime);// 0x20cee90
	void ApplyRigidBodyState(out RigidBodyState NewState);// 0x22da200
	bool AdjustFloorPosition(out const Vector ClientLocation, out const STExtraBaseCharacter*[] Riders, out Vector OutLocation);// 0x22da084

--------------------------------
Class: VehicleSyncPostPhysxTick.TickFunction

--------------------------------
Class: LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	bool GM_VerifyProjectileBulletShootPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	bool GM_VerifyProjectileBulletShootPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 1]
	bool GM_VerifyShooterAndMuzzleDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 1]
	bool bVerifyShooterMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf, Size: 1]
	bool bVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool bEnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	bool bVerifyGunPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 1]
	bool bVerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 1]
	bool bVerifyShootRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	bool bVerifyShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 1]
	bool GM_VerifyServerShooterPosDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 1]
	bool bVerifyShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 1]
	bool bVerifyBulletImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool bVerifyClientHitAndBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	bool bVerifyCharacterImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 1]
	bool bVerifyHistoryLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 1]
	bool bVerifyInParachuteShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	int TolerateMuzzleAndCharacterDisSquare;//[Offset: 0xd0, Size: 4]
	int TolerateMuzzleAndVehicleDisSquare;//[Offset: 0xd4, Size: 4]
	float TolerateShootPointDistanceSqured;//[Offset: 0xd8, Size: 4]
	float TolerateShootPointDistanceVehicleSqured;//[Offset: 0xdc, Size: 4]
	float TolerateShootPointScaleOnFast;//[Offset: 0xe0, Size: 4]
	bool GM_VerifyShootPointByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0xe8, Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSquredOnVehicle;//[Offset: 0xec, Size: 4]
	float TolerateMuzzleDistanceSqured;//[Offset: 0xf0, Size: 4]
	float TolerateMuzzleDistanceVehicleSqured;//[Offset: 0xf4, Size: 4]
	float MaxGunPosZHeight;//[Offset: 0xf8, Size: 4]
	float MaxGunPosLength;//[Offset: 0xfc, Size: 4]
	float TolerateBulletImpactOffsetDistSqured;//[Offset: 0x100, Size: 4]
	float TolerateOwnerAndBulletDist;//[Offset: 0x104, Size: 4]
	ShootVerifyConfig VictimShootVerify;//[Offset: 0x108, Size: 16]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x118, Size: 4]
	bool bAllowShortReverseDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x120, Size: 4]
	float TolerateShootRange;//[Offset: 0x124, Size: 4]
	bool bTimeCompensationDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	float TolerateLocusSingle;//[Offset: 0x12c, Size: 4]
	float TolerateLocusDist;//[Offset: 0x130, Size: 4]
	float TolerateLocusSegment;//[Offset: 0x134, Size: 4]
	float TolerateBoxExpand;//[Offset: 0x138, Size: 4]
	float TolerateLocusZOffsetUp;//[Offset: 0x13c, Size: 4]
	float TolerateLocusZOffsetDown;//[Offset: 0x140, Size: 4]
	float LocusSearchBackTime;//[Offset: 0x144, Size: 4]
	float LocusZHistoryUpInVehicle;//[Offset: 0x148, Size: 4]
	float BonePointTorelate;//[Offset: 0x14c, Size: 4]
	Vector VerifiedBoneScale;//[Offset: 0x150, Size: 12]
	float TolerateMaxWeaponAimAndOwnerHeadHeight;//[Offset: 0x15c, Size: 4]
	float TolerateMinWeaponAimAndOwnerHeadHeight;//[Offset: 0x160, Size: 4]
	float TolerateMinMuzzleFloorHeight;//[Offset: 0x164, Size: 4]
	float TolerateWeaponAimAndOwnerHeadDis;//[Offset: 0x168, Size: 4]
	float TolerateWeaponAndOwnerHeadDis;//[Offset: 0x16c, Size: 4]
	bool GM_VerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	bool bVerifyShootPointPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 1]
	int MaxBlockLineTraceTimes;//[Offset: 0x174, Size: 4]
	float TolerateFlyDis;//[Offset: 0x178, Size: 4]
	float VehiclePosCheckInterval;//[Offset: 0x17c, Size: 4]
	float MaxVehicleSpeed;//[Offset: 0x180, Size: 4]
	float TolerateVehicleDis;//[Offset: 0x184, Size: 4]
	float MaxTolerateVehicleDis;//[Offset: 0x188, Size: 4]
	float CharacterPosCheckInterval;//[Offset: 0x18c, Size: 4]
	float MaxCharacterSpeed;//[Offset: 0x190, Size: 4]
	float TolerateCharacterDis;//[Offset: 0x194, Size: 4]
	float MaxTolerateCharacterDis;//[Offset: 0x198, Size: 4]
	float SimVehiclePosCheckInterval;//[Offset: 0x19c, Size: 4]
	float SimTolerateVehicleDis;//[Offset: 0x1a0, Size: 4]
	float SimMaxTolerateVehicleDis;//[Offset: 0x1a4, Size: 4]
	float SimCharacterPosCheckInterval;//[Offset: 0x1a8, Size: 4]
	float SimTolerateCharacterDis;//[Offset: 0x1ac, Size: 4]
	float SimMaxTolerateCharacterDis;//[Offset: 0x1b0, Size: 4]
	float SimMaxVictmPosChangeSpeed;//[Offset: 0x1b4, Size: 4]
	float TolerateNetDelay;//[Offset: 0x1b8, Size: 4]
	float TolerateMaxVictmPosDis;//[Offset: 0x1bc, Size: 4]
	float GrayWeaponAndShootAngle;//[Offset: 0x1c0, Size: 4]
	uint32 GrayCharacterImpactMaxOffset;//[Offset: 0x1c4, Size: 4]
	float GrayImpactPointChangeMinSqured;//[Offset: 0x1c8, Size: 4]
	float GrayBulletImpactOffsetMaxDist;//[Offset: 0x1cc, Size: 4]
	ServerCheckBox[] PoseCheckBoxesCfg;//[Offset: 0x1d0, Size: 12]
	ServerCheckBox[] PoseCheckBoxesHighPrecision;//[Offset: 0x1dc, Size: 12]
	float fBoundBoxScaleMillisecondMin;//[Offset: 0x1e8, Size: 4]
	float fBoundBoxScaleMillisecondMax;//[Offset: 0x1ec, Size: 4]
	Character* CharacterOwner;//[Offset: 0x1f0, Size: 4]
	WeaponAntiData CacheWeaponAntiData;//[Offset: 0x1f4, Size: 24]
	Vector LastImpactPoint;//[Offset: 0x20c, Size: 12]
	bool bDebugShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	bool bDrawHitBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x225, Size: 1]
	float SimulatedCharacterServerTime();// 0x2033248
	void RPC_DrawHeadBox(CharacterHistoryData DataToDraw);// 0x203316c
	void GrayVerify(STExtraShootWeapon* Weapon, out const BulletHitInfoUploadData ShootData);// 0x2033060
	float GetTolerateSimuPosOffsetByNetDelay(Pawn* TargetPawn, float NetDelay);// 0x2032f9c
	float GetTolerateServerVictmPosTolerateByNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x2032ed8
	float GetTolerateServerVictmPosByNearMaxNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x2032e14
	float GetTolerateServerShooterPosDisByNetDelay(Pawn* AttackerPawn);// 0x2032d94
	float GetTolerateAutonomousPosOffsetByNetDelay(Pawn* TargetPawn, float NetDelay);// 0x2032cd0
	float GetNearMaxNetDelay(Pawn* TargetPawn, float NearTime);// 0x2032c0c

--------------------------------
Class: EntityAntiCheatComponent.ActorComponent.Object

--------------------------------
Class: ShootVerifyConfig
	float ClientMuzzleHeightMax;//[Offset: 0x0, Size: 4]
	float ClientPureMuzzleHeightMax;//[Offset: 0x4, Size: 4]
	float VehicleWeaponClientMuzzleHeightMax;//[Offset: 0x8, Size: 4]
	float VehicleWeaponClientPureMuzzleHeightMax;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ServerCheckBox
	byte PoseID;//[Offset: 0x0, Size: 1]
	Vector BodyBoundBoxExtent;//[Offset: 0x4, Size: 12]
	Vector HeadBoundBoxExtent;//[Offset: 0x10, Size: 12]
	Vector Offset;//[Offset: 0x1c, Size: 12]
	Vector PitchOffset;//[Offset: 0x28, Size: 12]
	float ReferenceHSlope;//[Offset: 0x34, Size: 4]
	float ReferenceVSlope;//[Offset: 0x38, Size: 4]
	float HMinScale;//[Offset: 0x3c, Size: 4]
	float VMinScale;//[Offset: 0x40, Size: 4]
	float HMaxScale;//[Offset: 0x44, Size: 4]
	float VMaxScale;//[Offset: 0x48, Size: 4]

--------------------------------
Class: WeaponAntiData
	uint16 MuzzleFloorHeight;//[Offset: 0x0, Size: 2]
	int16 MuzzleActorHeadHeight;//[Offset: 0x2, Size: 2]
	uint16 ImplactPointAndActorDis;//[Offset: 0x4, Size: 2]
	uint16 ImplactPointAndBulletDis;//[Offset: 0x6, Size: 2]
	uint16 ImplactPoinPosChange;//[Offset: 0x8, Size: 2]
	uint16 BulletAndGunAngle;//[Offset: 0xa, Size: 2]
	uint16 NetDelay;//[Offset: 0xc, Size: 2]
	uint32 ShooterPosDis;//[Offset: 0x10, Size: 4]
	uint32 VictmPosDis;//[Offset: 0x14, Size: 4]

--------------------------------
Class: CharacterHistoryData
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	Box BoundBox;//[Offset: 0x18, Size: 28]
	Box HeadBoundBox;//[Offset: 0x34, Size: 28]
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	Vector VehicleLocation;//[Offset: 0x54, Size: 12]
	enum MoveBaseState;//[Offset: 0x60, Size: 1]

--------------------------------
Class: VehBackpackItem
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraVehicleSfxLoop.STExtraVehicleSfxLoopBase
	AkAudioEvent* AkEvent;//[Offset: 0x40, Size: 4]

--------------------------------
Class: STExtraVehicleSfxLoopBase
	AkComponent* AkComp;//[Offset: 0x0, Size: 4]
	<uint32,float> MapRTPC;//[Offset: 0x4, Size: 60]

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x260, Size: 4]
	FString EarlyReflectionAuxBusName;//[Offset: 0x264, Size: 12]
	int EarlyReflectionOrder;//[Offset: 0x270, Size: 4]
	float EarlyReflectionBusSendGain;//[Offset: 0x274, Size: 4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x278, Size: 4]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280, Size: 1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	bool bIsUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x282, Size: 1]
	bool bAllIsInstanceSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x282, Size: 1]
	float AttenuationScalingFactor;//[Offset: 0x284, Size: 4]
	float OcclusionRefreshInterval;//[Offset: 0x288, Size: 4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x28c, Size: 4]
	FString EventName;//[Offset: 0x290, Size: 12]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x4ecd0f8
	void UseEarlyReflections(AkAuxBus* AuxBus, bool Left, bool Right, bool floor, bool Ceiling, bool Back, bool Front, bool SpotReflectors, FString AuxBusName);// 0x4eccdc4
	void StopPlayingID(int StopEventID);// 0x4eccd4c
	void Stop();// 0x4eccd38
	int SetSwitch(FString SwitchGroup, FString SwitchState);// 0x4eccac0
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x4ecca40
	void SetRTPCValueGlobally(FString RTPC, float Value);// 0x4ecc8a4
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x4ecc6c4
	void SetOutputBusVolume(float BusVolume);// 0x4ecc64c
	void SetListeners(out const AkComponent*[] Listeners);// 0x4ecc580
	void SetEarlyReflectionOrder(int NewEarlyReflectionOrder);// 0x4ecc508
	void SetAutoDestroy(bool in_AutoDestroy);// 0x4ecc48c
	void SetAttenuationScalingFactor(float Value);// 0x4ecc414
	int SeekOnEvent(FString in_EventName, int in_iPosition);// 0x4ecc30c
	void PostTrigger(FString Trigger);// 0x4ecc1b4
	int PostAssociatedAkEvent();// 0x4ecc18c
	int PostAkEventByName(FString in_EventName);// 0x4ecc0c8
	int PostAkEvent(AkAudioEvent* AkEvent, FString in_EventName);// 0x4ecbfc0
	float GetAttenuationRadius();// 0x4ecbf98

--------------------------------
Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: VehicleSimViewData
	byte ViewPitch;//[Offset: 0x0, Size: 1]
	byte ViewYaw;//[Offset: 0x1, Size: 1]
	byte ViewRoll;//[Offset: 0x2, Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]

--------------------------------
Class: VehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float MinForwardSpeedToRotationKMH;//[Offset: 0x318, Size: 4]
	float ForwardSpeedToRotSpeed;//[Offset: 0x31c, Size: 4]
	float StayTimeBeforeReturning;//[Offset: 0x320, Size: 4]
	bool bNeverAutoReturnSmartCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	float ArmOriginProbeSize;//[Offset: 0x328, Size: 4]
	Rotator RelativeToOwnerRotator;//[Offset: 0x32c, Size: 12]
	Rotator SmartCamRotationExtra;//[Offset: 0x338, Size: 12]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	float MinPitch;//[Offset: 0x350, Size: 4]
	float MaxPitch;//[Offset: 0x354, Size: 4]
	bool bDontFollowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	float RevoerTimefromFreeTime;//[Offset: 0x35c, Size: 4]
	float ResultMinPitch;//[Offset: 0x39c, Size: 4]
	float ResultMaxPitch;//[Offset: 0x3a0, Size: 4]
	Vector ArmOriginOffset;//[Offset: 0x3a4, Size: 12]
	CameraComponent* CameraComponent;//[Offset: 0x3b0, Size: 4]
	bool bIsAccelerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	float SocketOffsetInterpSpeed;//[Offset: 0x3d8, Size: 4]
	float CurAdditiveOffsetFov;//[Offset: 0x3dc, Size: 4]
	float FieldOfViewInterpSpeed;//[Offset: 0x3e0, Size: 4]
	float LeaveMaxDistance;//[Offset: 0x3e4, Size: 4]
	float LeaveMaxTime;//[Offset: 0x3e8, Size: 4]
	float MaxDistanceStayTime;//[Offset: 0x3f4, Size: 4]
	float ApproachTime;//[Offset: 0x3fc, Size: 4]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x40c, Size: 4]
	float FreeCamRotationReturnRate;//[Offset: 0x410, Size: 4]
	bool bUseReverseMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	void SetSmartCameraInput(float Yaw, float Pitch);// 0x22d7cd8
	void SetSmartCameraAutoReturn(bool bEnabled);// 0x22d7c58
	void SetFreeCameraInput(Rotator deltaRot);// 0x22d7be8
	void SetFreeCameraAutoReturn(bool bEnabled);// 0x22d7b68
	void ResetSmartCamera();// 0x22d7b54
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x1f8a028
	void DelayRotationLagEnabledEnd();// 0x1ee1bb4
	void DelayRotationLagEnabled(bool bEnabled, float Time, Rotator _RelativeRotator);// 0x22d7a48
	void AddSmartCameraInput(float Yaw, float Pitch);// 0x22d798c

--------------------------------
Class: VehicleAntiCheatTask.Object

--------------------------------
Class: ESTAINoiseEventParams
	enum NoiseType;//[Offset: 0x0, Size: 1]
	float Loudness;//[Offset: 0x4, Size: 4]
	float StartAttenuationDist;//[Offset: 0x8, Size: 4]
	float MaxRange;//[Offset: 0xc, Size: 4]

--------------------------------
Class: STBuffSystemComponent.ActorComponent.Object
	float RPCSyncInterval;//[Offset: 0xbc, Size: 4]
	delegate OnClientAddBuffEvent;//[Offset: 0xc0, Size: 12]
	delegate OnClientRemoveBuffEvent;//[Offset: 0xcc, Size: 12]
	delegate OnClientUpdateBuffEvent;//[Offset: 0xd8, Size: 12]
	STBuff*[] Buffs;//[Offset: 0xe4, Size: 12]
	int SyncBriefNum;//[Offset: 0xf0, Size: 4]
	ClientSyncBrief SyncBriefs;//[Offset: 0xf4, Size: 32]
	ClientSyncBrief SyncRefBriefs;//[Offset: 0x1b4, Size: 32]
	<int,STBuff*> MaxPowerBuffs;//[Offset: 0x274, Size: 60]
	<int> BriefRemoveInstIds;//[Offset: 0x2b0, Size: 60]
	bool UpdateServerSyncBuff(STBuff* Buff, bool bRemove);// 0x23d1d28
	void UpdateClientBuff(int InstID, int BuffID, int LayerCount, int CauseSkillID, Actor* CauseActor, float DSEndTime);// 0x23d1b54
	void UpdateBriefs();// 0x23d1b40
	void RPC_Server_ReqBriefs();// 0x23d1ae4
	void RPC_Client_SyncBrief(ClientSyncBrief Brief);// 0x23d1a30
	void RPC_Client_RspBriefs(const ClientSyncBrief[] Briefs);// 0x23d196c
	void RemoveClientBuff(int InstID);// 0x23d18f4
	STBuff* RemoveBuffInner(int BuffID, int LayerCount, Actor* Causer, int CauseSkillID);// 0x23d17a4
	void RemoveBuff(int BuffID, int LayerCount, Actor* Causer, int CauseSkillID);// 0x23d165c
	void RemoveAndFindMaxPowerBuff(STBuff* RemoveBuff);// 0x23d15e4
	void RemoveAllBuffs();// 0x23d15d0
	void OnRep_SyncBriefs();// 0x23d15bc
	void OnClientUpdateBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x2bb69b8
	void OnClientRemoveBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x2bb69b8
	void OnClientBuffCreated(STBuff* Buff, int BuffID, int CauseSkillID, int InstID, float DSEndTime);// 0x23d142c
	void OnClientAsyncLoaded(FString Path, int BuffID, Actor* Causer, int LayerCount, int CauseSkillID, int InstID, float DSEndTime);// 0x23d1134
	void OnClientAddBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x2bb69b8
	bool HasSkillID(int SkillID);// 0x23d10b4
	bool HasBuff(int BuffID);// 0x23d1034
	void HandleCauserSkill(STBuff* Buff, int SkillID);// 0x23d0f78
	bool HandleBuffTypeMutex(int BuffID);// 0x23d0ef8
	void HandleBuffTypeExclude(int BuffID);// 0x23d0e80
	void HandleBuffLayer(STBuff* Buff, int AddLayerCount, bool IsNewBuff);// 0x23d0d78
	BuffConfigSubsystem* GetSubsystem();// 0x23d0d50
	STBuff*[] GetBuffs();// 0x23d0c90
	float GetBuffDuration(int BuffID, int CauseSkillID);// 0x23d0bcc
	STBuff* GetBuffByBuffID(int BuffID);// 0x23d0b4c
	void EnabledRemove(STBuff* Buff, int BuffArrayIndex);// 0x23d0a90
	STBuff* CreateBuffWithClass(class Object Class, int BuffID, Actor* Causer, int LayerCount, int CauseSkillID);// 0x23d08fc
	void CreateBuffAsync(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID, int InstID, float DSEndTime);// 0x23d0728
	STBuff* CreateBuff(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID);// 0x23d05d8
	void CompareBuffPower(STBuff* Buff);// 0x23d0560
	bool ClientGetBuffInfo(int BuffID, out ClientSyncBrief OutBuff);// 0x23d0474
	void ClearBuffs(bool IsClearAll);// 0x23d03f4
	bool CheckBuffTargetClient(STBuff* Buff);// 0x23d0374
	bool AddBuff(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID);// 0x23d0224

--------------------------------
Class: STBuff.Object
	FString BuffName;//[Offset: 0x1c, Size: 12]
	FString Desc;//[Offset: 0x28, Size: 12]
	int LayerMax;//[Offset: 0x34, Size: 4]
	int InitialLayerCount;//[Offset: 0x38, Size: 4]
	float Duration;//[Offset: 0x3c, Size: 4]
	float ClientSyncInterval;//[Offset: 0x40, Size: 4]
	enum ClientSyncType;//[Offset: 0x44, Size: 1]
	enum TargetType;//[Offset: 0x45, Size: 1]
	enum RefreshType;//[Offset: 0x46, Size: 1]
	enum ReActionType;//[Offset: 0x47, Size: 1]
	enum MultiCauserHandleType;//[Offset: 0x48, Size: 1]
	enum MultiSkillHandleType;//[Offset: 0x49, Size: 1]
	bool IsExecuteOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 1]
	bool RemoveAllLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 1]
	STBuffAction*[] Actions;//[Offset: 0x4c, Size: 12]
	bool bNeedShowBuffInBuffList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int LocalizeDescID;//[Offset: 0x5c, Size: 4]
	FString IconPath;//[Offset: 0x60, Size: 12]
	int TipsOnAddBuff;//[Offset: 0x6c, Size: 4]
	DataProviderBase*[] DataProviders;//[Offset: 0x70, Size: 12]
	int InstID;//[Offset: 0x7c, Size: 4]
	int BuffID;//[Offset: 0x80, Size: 4]
	int LayerCount;//[Offset: 0x84, Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	float EndTime;//[Offset: 0x8c, Size: 4]
	float DSEndTime;//[Offset: 0x90, Size: 4]
	Actor* Causer;//[Offset: 0x94, Size: 8]
	Actor* Owner;//[Offset: 0x9c, Size: 8]
	int CauseSkillID;//[Offset: 0xa4, Size: 4]
	STBuffSystemComponent* OwnerSystem;//[Offset: 0xa8, Size: 8]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	float PowerValue;//[Offset: 0xb4, Size: 4]
	float LastSyncClientTime;//[Offset: 0xb8, Size: 4]
	bool IsNeedSyncClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	bool IsClientOwnLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 1]
	UAEBlackboard* Blackborad;//[Offset: 0xc0, Size: 4]
	int LastLayerCount;//[Offset: 0x13c, Size: 4]
	void Tick(float DetalTime, float TimeSeconds);// 0x23cd950
	void ResetActionExecute();// 0x23cd93c
	void RefreshEndTime();// 0x23cd928
	void Initialize();// 0x23cd914
	void HandleLayer(int AddLayerCount, bool IsNewBuff);// 0x23cd850
	void End();// 0x23cd83c
	void EnabledRemove();// 0x23cd828
	void Destroy();// 0x23cd814
	bool CopyActions();// 0x23cd7ec
	void CheckOnceBuffForClient();// 0x23cd7d8
	void ChangeNotify();// 0x23cd7c4
	void ChangeDuration(float NewDuration);// 0x23cd74c

--------------------------------
Class: STBuffAction.Object
	float ExecuteDelay;//[Offset: 0x1c, Size: 4]
	STBuff* OwnerBuff;//[Offset: 0x20, Size: 8]
	int ArrayIndex;//[Offset: 0x28, Size: 4]
	void Tick(float DetalTime);// 0x23ce1b8
	void SetEnabled(bool Enabled);// 0x23ce138
	void ResetExecute(bool IgnoreEnd);// 0x1ef5338
	void OnTick(float DetalTime);// 0x2116c14
	void OnInitialize();// 0x208734c
	void OnExecute();// 0x2087368
	void OnEnd();// 0x1ef5680
	void OnDestroy();// 0x2117930
	void OnChangeNotify();// 0x1fb0074
	void Initialize();// 0x23ce124
	STBuff* GetOwnerBuff();// 0x23ce0fc
	Actor* GetOwner();// 0x211a0ac
	bool GetIsExecute();// 0x23ce0e0
	Actor* GetCauser();// 0x23ce0b8
	void End();// 0x23ce0a4
	void Destroy();// 0x23ce090
	STBuffAction* CopyAction(Object* Outer);// 0x22d823c
	void ChangeNotify();// 0x23ce07c

--------------------------------
Class: DataProviderBase.Object

--------------------------------
Class: UAEBlackboard.Object
	UAEBlackboardContainer UAEBlackboardContainer;//[Offset: 0x1c, Size: 720]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x5393bcc
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x5393af8
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x5393944
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator VectorValue);// 0x5393870
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x539379c
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x53936c8
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x53935f4
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x5393520
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x539344c
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x5393378
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x539329c
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x5393208
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x5393174
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x53930e0
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x539304c
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x5392fb8
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x5392f24
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x5392e90
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x5392dfc
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x5392d68
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x5392cd4
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x5392c40
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x5392bac
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x5392ac8
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x5392a24
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x5392908
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x5392864
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x53927d0
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x5392734
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x53926a0
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x539260c
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x5392578
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x53924e4
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x5392450
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x539236c
	void AddValueByParam(out const UAEBlackboardParameter NewParam);// 0x53921c0

--------------------------------
Class: UAEBlackboardContainer
	<FName,Object*> ObjectParamMap;//[Offset: 0x0, Size: 60]
	<FName,Object*> WeakObjectParamMap;//[Offset: 0x3c, Size: 60]
	<FName,class Object> ClassParamMap;//[Offset: 0x78, Size: 60]
	<FName,byte> EnumParamMap;//[Offset: 0xb4, Size: 60]
	<FName,int> IntParamMap;//[Offset: 0xf0, Size: 60]
	<FName,uint32> UIntParamMap;//[Offset: 0x12c, Size: 60]
	<FName,float> FloatParamMap;//[Offset: 0x168, Size: 60]
	<FName,bool> BoolParamMap;//[Offset: 0x1a4, Size: 60]
	<FName,FString> StringParamMap;//[Offset: 0x1e0, Size: 60]
	<FName,FName> NameParamMap;//[Offset: 0x21c, Size: 60]
	<FName,Vector> VectorParamMap;//[Offset: 0x258, Size: 60]
	<FName,Rotator> RotatorParamMap;//[Offset: 0x294, Size: 60]

--------------------------------
Class: UAEBlackboardKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: UAEBlackboardParameter
	FName Name;//[Offset: 0x0, Size: 8]
	byte Type;//[Offset: 0x8, Size: 1]
	UAEBlackboardParameterDefaultValue DefaultValue;//[Offset: 0x10, Size: 136]

--------------------------------
Class: UAEBlackboardParameterDefaultValue
	Object* DefaultObject;//[Offset: 0x0, Size: 40]
	class Class* DefaultClass;//[Offset: 0x28, Size: 40]
	byte DefaultEnum;//[Offset: 0x50, Size: 1]
	int DefaultInt;//[Offset: 0x54, Size: 4]
	float DefaultFloat;//[Offset: 0x58, Size: 4]
	bool DefaultBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	FString DefaultString;//[Offset: 0x60, Size: 12]
	FName DefaultName;//[Offset: 0x70, Size: 8]
	Vector DefaultVector;//[Offset: 0x78, Size: 12]

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: ClientSyncBrief
	int InstID;//[Offset: 0x0, Size: 4]
	byte LayerCount;//[Offset: 0x4, Size: 1]
	int BuffID;//[Offset: 0x8, Size: 4]
	int CauseSkillID;//[Offset: 0xc, Size: 4]
	Actor* CauseActor;//[Offset: 0x10, Size: 4]
	float SyncTime;//[Offset: 0x14, Size: 4]
	float EndTime;//[Offset: 0x18, Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: BuffConfigSubsystem.GameInstanceSubsystem.Subsystem.Object
	<int,BuffTableRow> Table;//[Offset: 0x44, Size: 60]
	<FString,class Object> BuffClassMap;//[Offset: 0x80, Size: 60]

--------------------------------
Class: BuffTableRow
	int BuffID;//[Offset: 0x0, Size: 4]
	int MaxLayer;//[Offset: 0x4, Size: 4]
	float Duration;//[Offset: 0x8, Size: 4]
	FString BuffType;//[Offset: 0xc, Size: 12]
	FString Name;//[Offset: 0x18, Size: 12]
	FString IconPath;//[Offset: 0x24, Size: 12]
	FString BPPath;//[Offset: 0x30, Size: 12]
	FString Desc;//[Offset: 0x3c, Size: 12]
	<FString> MutexBuffTypes;//[Offset: 0x48, Size: 60]
	<FString> ExcludeBuffTypes;//[Offset: 0x84, Size: 60]
	enum RefreshType;//[Offset: 0xc0, Size: 1]
	enum ReActionType;//[Offset: 0xc1, Size: 1]
	enum TargetType;//[Offset: 0xc2, Size: 1]
	enum MultiCauserHanleType;//[Offset: 0xc3, Size: 1]
	enum MultiSkillHandleType;//[Offset: 0xc4, Size: 1]
	enum ClientSyncType;//[Offset: 0xc5, Size: 1]
	float ClientSyncInterval;//[Offset: 0xc8, Size: 4]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool IsOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool IsClientOwnLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	bool bNeedShowInUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 1]
	int LocalizeDescID;//[Offset: 0xd0, Size: 4]
	int TipsOnAddBuff;//[Offset: 0xd4, Size: 4]
	int ModeOpen;//[Offset: 0xd8, Size: 4]
	FString ModeStrings;//[Offset: 0xdc, Size: 12]

--------------------------------
Class: VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate VehicleAvatarEqiuped;//[Offset: 0x3b0, Size: 12]
	delegate OnVehicleAvatarPreChange;//[Offset: 0x3bc, Size: 12]
	delegate OnEndChangeItemAvatar;//[Offset: 0x3c8, Size: 12]
	delegate OnServerAvatarEquiped;//[Offset: 0x3d4, Size: 12]
	bool bHasLightEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	bool CanChangeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 1]
	delegate VehicleLoadedBrokenMat;//[Offset: 0x3e4, Size: 12]
	bool bFPPMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	delegate VehicleLoadedFPPMesh;//[Offset: 0x3f4, Size: 12]
	FName FrontMatSlotName;//[Offset: 0x400, Size: 8]
	FName TailMatSlotName;//[Offset: 0x408, Size: 8]
	FName FPPMatSlotName;//[Offset: 0x410, Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x418, Size: 4]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x41c, Size: 4]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x420, Size: 4]
	VehicleAvatarPropretyHandle* DefaultPropertyHandle;//[Offset: 0x424, Size: 4]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x428, Size: 4]
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	void WakeUpVehicle();// 0x22c1ea0
	void VehicleAvatarPreChangeDelegate__DelegateSignature(int AvatarID);// 0x2bb69b8
	bool TriggerSelectRandomAvatar();// 0x22c5e6c
	void PreChangeVehicleBrokenAvatar();// 0x22c5e58
	void PreChangeVehicleAvatar(int InItemID);// 0x200e620
	void PreChangeItemAvatar(int InItemID);// 0x1f912b8
	void PreChangeAvatarFPP();// 0x22c5e44
	void PostChangeItemAvatar(bool bProcessRenderPipeline);// 0x200e598
	void OverrideVehiclePhysX();// 0x22c5e30
	void OnServerAvatarEquipedDelegate__DelegateSignature();// 0x2bb69b8
	SoftObjectPath GetVehicleFPPStaticMeshPath();// 0x22c5dac
	SoftObjectPath GetVehicleFPPSkeletalMeshPath();// 0x22c5d28
	ItemAvatarMatPath[] GetVehicleFPPMatPath();// 0x22c5cc4
	ItemAvatarMatPath[] GetVehicleBrokenMatPath();// 0x22c5c60
	FName GetReflectionCubeName_Lobby();// 0x2bb69b8
	FName GetReflectionCubeName();// 0x22c5c20
	FString GetItemAvatarHandlePath(int ItemId);// 0x2bb69b8
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId);// 0x2bb69b8
	int GetDefaultAvatarID();// 0x22c5bf8
	BackpackVehicleAvatarHandle* GetDefaultAvatarHandle();// 0x22c5bd0
	int GetCurrentAvatarID();// 0x22c5bb4
	void ExitFPPVehicle();// 0x22c5ba0
	void EnterFPPVehicle(bool InEnterFPPInVehicle);// 0x22c5b20
	void EndChangeItemAvatarDelegate__DelegateSignature();// 0x2bb69b8
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x1f91140
	void ClearVehicleLightEffect();// 0x2bb69b8
	bool CheckIsNeedEnterFPPVehicle();// 0x22c5af8
	bool CheckBrokenMesh();// 0x22c5ad0
	bool CheckAvatarChanged();// 0x22c5aa8
	void AsyncLoadPropertyHandle();// 0x22c5a94
	void ApplyReflectionCubemap(MeshComponent* MeshComp);// 0x22c5a1c
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x1f90dc4

--------------------------------
Class: VehicleAvatarPropretyHandle.Object
	int AvatarID;//[Offset: 0x20, Size: 4]
	VehicleAvatarProperty AvatarProperty;//[Offset: 0x28, Size: 168]
	class STExtraVehicleBase* OwnerVehicleClass;//[Offset: 0xd0, Size: 40]

--------------------------------
Class: VehicleAvatarProperty
	SkeletalMesh* TPPMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* FPPMesh;//[Offset: 0x28, Size: 40]
	WheelSetup[] WheelSetups;//[Offset: 0x50, Size: 12]
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x5c, Size: 12]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x68, Size: 12]
	VehicleTransmissionData GearSetup;//[Offset: 0x74, Size: 40]
	Vector CenterOfMassOffset;//[Offset: 0x9c, Size: 12]

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x8, Size: 8]
	Vector AdditionalOffset;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x1c, Size: 4]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	Vector Offset;//[Offset: 0x24, Size: 12]
	float ShapeRadius;//[Offset: 0x30, Size: 4]
	float ShapeWidth;//[Offset: 0x34, Size: 4]
	float Mass;//[Offset: 0x38, Size: 4]
	float DampingRate;//[Offset: 0x3c, Size: 4]
	float SteerAngle;//[Offset: 0x40, Size: 4]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	TireType* TireType;//[Offset: 0x48, Size: 4]
	TireConfig* TireConfig;//[Offset: 0x4c, Size: 4]
	float LatStiffMaxLoad;//[Offset: 0x50, Size: 4]
	float LatStiffValue;//[Offset: 0x54, Size: 4]
	float LongStiffValue;//[Offset: 0x58, Size: 4]
	float SuspensionForceOffset;//[Offset: 0x5c, Size: 4]
	float SuspensionMaxRaise;//[Offset: 0x60, Size: 4]
	float SuspensionMaxDrop;//[Offset: 0x64, Size: 4]
	float SuspensionNaturalFrequency;//[Offset: 0x68, Size: 4]
	float SuspensionDampingRatio;//[Offset: 0x6c, Size: 4]
	byte SweepType;//[Offset: 0x70, Size: 1]
	float MaxBrakeTorque;//[Offset: 0x74, Size: 4]
	float MaxHandBrakeTorque;//[Offset: 0x78, Size: 4]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x7c, Size: 4]
	int WheelIndex;//[Offset: 0x80, Size: 4]
	float DebugLongSlip;//[Offset: 0x84, Size: 4]
	float DebugLatSlip;//[Offset: 0x88, Size: 4]
	float DebugNormalizedTireLoad;//[Offset: 0x8c, Size: 4]
	float DebugWheelTorque;//[Offset: 0x94, Size: 4]
	float DebugLongForce;//[Offset: 0x98, Size: 4]
	float DebugLatForce;//[Offset: 0x9c, Size: 4]
	Vector Location;//[Offset: 0xa0, Size: 12]
	Vector OldLocation;//[Offset: 0xac, Size: 12]
	Vector Velocity;//[Offset: 0xb8, Size: 12]
	bool IsInAir();// 0x561dde4
	float GetSuspensionOffset();// 0x561ddbc
	float GetSteerAngle();// 0x561dd94
	float GetRotationAngle();// 0x561dd6c

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x20, Size: 4]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x24, Size: 12]

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 4]
	float FrictionScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 1]
	WheelSetup[] WheelSetups;//[Offset: 0x12c, Size: 12]
	float Mass;//[Offset: 0x138, Size: 4]
	float DragCoefficient;//[Offset: 0x13c, Size: 4]
	float ChassisWidth;//[Offset: 0x140, Size: 4]
	float ChassisHeight;//[Offset: 0x144, Size: 4]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	float DragArea;//[Offset: 0x14c, Size: 4]
	float EstimatedMaxEngineSpeed;//[Offset: 0x150, Size: 4]
	float MaxEngineRPM;//[Offset: 0x154, Size: 4]
	float DebugDragMagnitude;//[Offset: 0x158, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x15c, Size: 12]
	float MinNormalizedTireLoad;//[Offset: 0x168, Size: 4]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x16c, Size: 4]
	float MaxNormalizedTireLoad;//[Offset: 0x170, Size: 4]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x174, Size: 4]
	float ThresholdLongitudinalSpeed;//[Offset: 0x178, Size: 4]
	int LowForwardSpeedSubStepCount;//[Offset: 0x17c, Size: 4]
	int HighForwardSpeedSubStepCount;//[Offset: 0x180, Size: 4]
	VehicleWheel*[] Wheels;//[Offset: 0x184, Size: 12]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c, Size: 1]
	float RVOAvoidanceRadius;//[Offset: 0x1a0, Size: 4]
	float RVOAvoidanceHeight;//[Offset: 0x1a4, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x1a8, Size: 4]
	float RVOSteeringStep;//[Offset: 0x1ac, Size: 4]
	float RVOThrottleStep;//[Offset: 0x1b0, Size: 4]
	int AvoidanceUID;//[Offset: 0x1b4, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1b8, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1bc, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1c0, Size: 4]
	float AvoidanceWeight;//[Offset: 0x1c4, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x1c8, Size: 12]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x1d4, Size: 20]
	float RawSteeringInput;//[Offset: 0x1ec, Size: 4]
	float RawThrottleInput;//[Offset: 0x1f0, Size: 4]
	float RawBrakeInput;//[Offset: 0x1f4, Size: 4]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 1]
	float SteeringInput;//[Offset: 0x1fc, Size: 4]
	float ThrottleInput;//[Offset: 0x200, Size: 4]
	float BrakeInput;//[Offset: 0x204, Size: 4]
	float HandbrakeInput;//[Offset: 0x208, Size: 4]
	float IdleBrakeInput;//[Offset: 0x20c, Size: 4]
	float StopThreshold;//[Offset: 0x210, Size: 4]
	float WrongDirectionThreshold;//[Offset: 0x214, Size: 4]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x218, Size: 8]
	VehicleInputRate BrakeInputRate;//[Offset: 0x220, Size: 8]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x228, Size: 8]
	VehicleInputRate SteeringInputRate;//[Offset: 0x230, Size: 8]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 1]
	void SetUseAutoGears(bool bUseAuto);// 0x561eef8
	void SetThrottleInput(float Throttle);// 0x2100348
	void SetTargetGear(int GearNum, bool bImmediate);// 0x561ee34
	void SetSteeringInput(float Steering);// 0x561edb4
	void SetPhysActive(bool bActive);// 0x561ed34
	void SetHandbrakeInput(bool bNewHandbrake);// 0x44ca8cc
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x561ecb0
	void SetGroupsToIgnore(int GroupFlags);// 0x561ec38
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x561ebb4
	void SetGroupsToAvoid(int GroupFlags);// 0x561eb3c
	void SetGearUp(bool bNewGearUp);// 0x561eabc
	void SetGearDown(bool bNewGearDown);// 0x561ea3c
	void SetBrakeInput(float Brake);// 0x561e9bc
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x561e938
	void SetAvoidanceGroup(int GroupFlags);// 0x561e8c0
	void SetAvoidanceEnabled(bool bEnable);// 0x561e840
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0x561e65c
	bool GetUseAutoGears();// 0x561e634
	int GetTargetGear();// 0x561e60c
	float GetForwardSpeed();// 0x561e5e4
	float GetEngineRotationSpeed();// 0x561e5bc
	float GetEngineMaxRotationSpeed();// 0x561e594
	int GetCurrentGear();// 0x561e56c

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0, Size: 4]
	float ThrottleInput;//[Offset: 0x4, Size: 4]
	float BrakeInput;//[Offset: 0x8, Size: 4]
	float HandbrakeInput;//[Offset: 0xc, Size: 4]
	int CurrentGear;//[Offset: 0x10, Size: 4]

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 4]
	float FallRate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WheelHubSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 4]
	FName TireBoneName;//[Offset: 0x8, Size: 8]
	FName[] AssociationBoneName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float GearSwitchTime;//[Offset: 0x4, Size: 4]
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 4]
	float FinalRatio;//[Offset: 0xc, Size: 4]
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 12]
	float ReverseGearRatio;//[Offset: 0x1c, Size: 4]
	float NeutralGearUpRatio;//[Offset: 0x20, Size: 4]
	float ClutchStrength;//[Offset: 0x24, Size: 4]

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0, Size: 4]
	float DownRatio;//[Offset: 0x4, Size: 4]
	float UpRatio;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BackpackVehicleAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum[] SupportChangeTypes;//[Offset: 0x17c, Size: 12]
	ItemAvatarData[] BrokenMatData;//[Offset: 0x188, Size: 12]
	SkeletalMesh* SkeletalMeshBroken;//[Offset: 0x198, Size: 40]
	StaticMesh* StaticMeshBroken;//[Offset: 0x1c0, Size: 40]
	SkeletalMesh* FPPSkeletalMesh;//[Offset: 0x1e8, Size: 40]
	StaticMesh* FPPStaticMesh;//[Offset: 0x210, Size: 40]
	ItemAvatarData[] FPPMatData;//[Offset: 0x238, Size: 12]
	<FName,ParticleSoftWrapperArray> ParticleSfx;//[Offset: 0x244, Size: 60]
	ParticleSystem* ExplosionParticle;//[Offset: 0x280, Size: 40]
	class STExtraVehicleBase* lobbyWheeledVehicle;//[Offset: 0x2a8, Size: 40]
	ParticleSystem* LightEffect;//[Offset: 0x2d0, Size: 40]
	<FName,Texture*> RefelectionCubemaps;//[Offset: 0x2f8, Size: 60]
	bool IsLowDeviceLODBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	VehCharAnimDataWrapper[] VehCharAnimData;//[Offset: 0x338, Size: 12]
	class AnimInstance* VehicleAnim;//[Offset: 0x348, Size: 40]

--------------------------------
Class: VehCharAnimDataWrapper
	FName AnimCompTag;//[Offset: 0x0, Size: 8]
	VehCharAnimData[] VehCharAnimDataList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: VehCharAnimData
	byte VehAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* VehAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	bool bAvatarFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67d, Size: 1]
	bool bAvatarBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67e, Size: 1]
	int MasterCompLODLevel;//[Offset: 0x680, Size: 4]
	int VehicleSkinID;//[Offset: 0x684, Size: 4]
	bool bMasterBaseMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 1]
	SkeletalMesh* MasterBaseMesh;//[Offset: 0x690, Size: 40]
	class AnimInstance* BaseAnimBP;//[Offset: 0x6b8, Size: 40]
	VehicleStyleData[] LogicStyleData;//[Offset: 0x6e0, Size: 12]
	delegate OnStyleEquippedEvent;//[Offset: 0x6ec, Size: 12]
	delegate OnStyleUnequippedEvent;//[Offset: 0x6f8, Size: 12]
	delegate OnServerAvatarEquiped;//[Offset: 0x704, Size: 12]
	enum[] AccessoryPartSlotTypes;//[Offset: 0x710, Size: 12]
	FName FrontMatSlotName;//[Offset: 0x720, Size: 8]
	FName TailMatSlotName;//[Offset: 0x728, Size: 8]
	FName FPPMatSlotName;//[Offset: 0x730, Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x738, Size: 4]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x73c, Size: 4]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x740, Size: 4]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x744, Size: 4]
	void WakeUpVehicle();// 0x22c1ea0
	void UpdateStaticMeshLOD(int MasterLODLevel);// 0x22c1e28
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x1f68de0
	void SetVehicleAvatarNormalMode();// 0x22c1e14
	void SetVehicleAvatarFPPMode();// 0x22c1e00
	void SetVehicleAvatarBroken();// 0x22c1dec
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow, bool bWithLog);// 0x1f68828
	void SetMasterBaseMeshPath(FString InPath);// 0x22c1d30
	void SetMasterBaseMeshAnimBP(FString InPath);// 0x22c1c74
	void ResetAdvanceVehicleSkinID();// 0x22c1c58
	void RemoveAllEquippedStyle();// 0x22c1c44
	bool ProcessHandleUnequip(enum InSlotType);// 0x22c1bc4
	bool ProcessHandleEquip(enum InSlotType);// 0x22c1b44
	void PreProcessBeforeLoadMesh();// 0x1f67e9c
	void PostProcessAfterLoadMesh();// 0x1f67e80
	void PerChangeVehicleAvatar_Old(int InVehicleSkinID);// 0x22c1acc
	void PerChangeVehicleAvatar(int InVehicleSkinID);// 0x22c1a54
	void OverrideVehiclePhysX();// 0x22c1a40
	void OnStyleUnequippedEvent__DelegateSignature(int OldStyleID);// 0x2bb69b8
	void OnStyleEquippedEvent__DelegateSignature(int NewStyleID, int OldStyleID);// 0x2bb69b8
	void OnServerAvatarEquipedDelegate__DelegateSignature();// 0x2bb69b8
	void OnRep_BodySlotStateChanged();// 0x1f67d70
	VehicleStyleData MakeVehicleStyleData(int InStyleID);// 0x2bb69b8
	bool IsValidAvatar();// 0x22c1a18
	int IsStyleHasModelConfig(out const VehicleStyleData InStyleData);// 0x22c193c
	bool IsAvatarFPPMode();// 0x22c1914
	bool IsAvatarBroken();// 0x22c18ec
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x1f8c448
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x20ffc40
	bool InitVehicleAvatarBySkinID_Old(int InVehicleSkinID);// 0x22c1864
	bool InitVehicleAvatarBySkinID(int InVehicleSkinID);// 0x1eb8230
	bool InitVehicleAvatar_Old(out const VehicleAvatarData InVehicleAvatarData);// 0x22c1758
	bool InitVehicleAvatar(out const VehicleAvatarData InVehicleAvatarData, bool bUpdateFlag);// 0x22c1600
	void InitMasterComponent();// 0x22c15ec
	void Initialize();// 0x1f66a10
	void InitialAvatarParam();// 0x1ee1bb4
	int HasStyleEquipped(int InStyleID);// 0x22c156c
	int HasEquippedSameStyle(int InStyleID);// 0x22c14ec
	bool HandleUnequipStyle(int InStyleID);// 0x22c146c
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x20ffb7c
	bool HandleEquipStyle(int InStyleID);// 0x22c13ec
	SkeletalMeshComponent* GetVehicleWheelMeshComp();// 0x22c13c4
	MeshComponent* GetVehicleBodyMeshComp();// 0x22c139c
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x1f6615c
	FName GetReflectionCubeName_Lobby();// 0x2bb69b8
	FName GetReflectionCubeName();// 0x22c135c
	bool CanBeMeshMerge(int SlotID);// 0x22c12dc
	void ApplyReflectionCubemap(MeshComponent* MeshComp, ItemHandleBase* InItemHandle);// 0x22c1220

--------------------------------
Class: VehicleStyleData
	int StyleID;//[Offset: 0x0, Size: 4]
	enum SlotType;//[Offset: 0x4, Size: 1]
	VehicleStyle[] MutilStyles;//[Offset: 0x8, Size: 12]

--------------------------------
Class: VehicleStyle
	enum StyleType;//[Offset: 0x0, Size: 1]
	int StyleValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleAvatarData
	int VehicleSkinID;//[Offset: 0x0, Size: 4]
	int[] VehicleStyleIDList;//[Offset: 0x4, Size: 12]
	VehicleAvatarStyle[] VehicleAvatarStyle;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleAvatarStyle
	int ModelID;//[Offset: 0x0, Size: 4]
	int ColorID;//[Offset: 0x4, Size: 4]
	int PatternID;//[Offset: 0x8, Size: 4]
	int ParticleID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: IdeaDecalActor.Actor.Object
	SceneComponent* DecalRootComp;//[Offset: 0x2fc, Size: 4]
	int DecalId;//[Offset: 0x300, Size: 4]
	int TeamID;//[Offset: 0x304, Size: 4]
	IdeaDecalInfo DecalInfo;//[Offset: 0x310, Size: 128]
	STExtraPlayerState* OwnerPS;//[Offset: 0x390, Size: 4]
	STExtraVehicleBase* Vehicle;//[Offset: 0x394, Size: 8]
	AkComponent* AkComponent;//[Offset: 0x39c, Size: 4]
	int PostEventID;//[Offset: 0x3a0, Size: 4]
	void RemoveSelfByParent();// 0x201e124
	void OnRep_DecalInfo();// 0x201e110
	void OnDamageableActorDestroyed(Vector LogicAreaLoc, bool bDefaultWalkable);// 0x201e04c

--------------------------------
Class: IdeaDecalInfo
	int ID;//[Offset: 0x0, Size: 4]
	Transform Transform;//[Offset: 0x10, Size: 48]
	enum ParentType;//[Offset: 0x5d, Size: 1]
	PrimitiveComponent* Parent;//[Offset: 0x60, Size: 8]

--------------------------------
Class: STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	int CommonRank;//[Offset: 0xc74, Size: 4]
	FString IniTeamLeaderName;//[Offset: 0xc78, Size: 12]
	enum LiveState;//[Offset: 0xc84, Size: 1]
	CharacterAutoFollowStruct AutoFollowInfo;//[Offset: 0xc88, Size: 8]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0xc90, Size: 4]
	STExtraBaseCharacter* SpectatingCharacterOwner;//[Offset: 0xc94, Size: 4]
	float PlayerHealth;//[Offset: 0xc98, Size: 4]
	float PlayerHealthMax;//[Offset: 0xc9c, Size: 4]
	float PlayerTemperature;//[Offset: 0xca0, Size: 4]
	float PlayerTemperatureMax;//[Offset: 0xca4, Size: 4]
	CharacterLocAndRot SelfLocAndRot;//[Offset: 0xca8, Size: 24]
	CharacterLocAndRot UAVLocAndRot;//[Offset: 0xcc0, Size: 24]
	enum EUAVUseType;//[Offset: 0xcd8, Size: 1]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd9, Size: 1]
	enum eCurVehicleType;//[Offset: 0xcda, Size: 1]
	enum EUAVCharacterMsgType;//[Offset: 0xcdb, Size: 1]
	Vector PlayerDeadLocation;//[Offset: 0xcdc, Size: 12]
	Vector PlayerBoxLocation;//[Offset: 0xce8, Size: 12]
	Vector MapMark;//[Offset: 0xcf4, Size: 12]
	bool IsRestartAtPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd00, Size: 1]
	Vector RestartLocation;//[Offset: 0xd04, Size: 12]
	Rotator RestartRotate;//[Offset: 0xd10, Size: 12]
	<int,int> UseQuickMsgMap;//[Offset: 0xd1c, Size: 60]
	<int,int> UseWheelMsgMap;//[Offset: 0xd58, Size: 60]
	byte PlayerUseQuickSight;//[Offset: 0xd94, Size: 1]
	byte PlayerUseShoulderCnt;//[Offset: 0xd95, Size: 1]
	byte ShowMsgCnt;//[Offset: 0xd96, Size: 1]
	byte UserConfirmCnt;//[Offset: 0xd97, Size: 1]
	byte UserCancelCnt;//[Offset: 0xd98, Size: 1]
	byte UserDoNothingCnt;//[Offset: 0xd99, Size: 1]
	float FPSBeforeAdapt;//[Offset: 0xd9c, Size: 4]
	float FPSAfterAdapt;//[Offset: 0xda0, Size: 4]
	int AirDropBoxFirstPickUpNum;//[Offset: 0xdbc, Size: 4]
	STExtraPlayerState*[] TeamMatePlayerStateList;//[Offset: 0xdc0, Size: 12]
	int PlayerLayerID;//[Offset: 0xdcc, Size: 4]
	VisualFieldInfo VisualFieldInfo;//[Offset: 0xdd0, Size: 16]
	int Breath;//[Offset: 0xde0, Size: 4]
	DriveCarNotify DriveCarNotify;//[Offset: 0xde4, Size: 12]
	float EnegyBuffStage1;//[Offset: 0xdf0, Size: 4]
	float EnegyBuffStage2;//[Offset: 0xdf4, Size: 4]
	float EnegyBuffStage3;//[Offset: 0xdf8, Size: 4]
	float EnegyBuffStage4;//[Offset: 0xdfc, Size: 4]
	float EnegyBuffReduceSpeedPerSec;//[Offset: 0xe00, Size: 4]
	float CurEnegyBuff;//[Offset: 0xe04, Size: 4]
	float EnegyBuffStage1RecoverHealthTime;//[Offset: 0xe08, Size: 4]
	float EnegyBuffStage1RecoverHealthVal;//[Offset: 0xe0c, Size: 4]
	float EnegyBuffStage2RecoverHealthTime;//[Offset: 0xe10, Size: 4]
	float EnegyBuffStage2RecoverHealthVal;//[Offset: 0xe14, Size: 4]
	float EnegyBuffStage3RecoverHealthTime;//[Offset: 0xe18, Size: 4]
	float EnegyBuffStage3RecoverHealthVal;//[Offset: 0xe1c, Size: 4]
	float EnegyBuffStage4RecoverHealthTime;//[Offset: 0xe20, Size: 4]
	float EnegyBuffStage4RecoverHealthVal;//[Offset: 0xe24, Size: 4]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0xe28, Size: 12]
	delegate OnPlayerKillsChangeDelegate;//[Offset: 0xe34, Size: 12]
	bool IsShowingRescueingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe41, Size: 1]
	bool isReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4c, Size: 1]
	bool isLostConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4d, Size: 1]
	int[] TeamMatesExitState;//[Offset: 0xe50, Size: 12]
	bool PlayerGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5c, Size: 1]
	bool bGodSon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5d, Size: 1]
	bool bHasEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5e, Size: 1]
	uint32 LastInstigatorEnemyKey;//[Offset: 0xe64, Size: 4]
	int PlayersCountOnPlane;//[Offset: 0xe68, Size: 4]
	GameModePlayerAliasShowInfo[] playerAliasShowInfoList;//[Offset: 0xe6c, Size: 12]
	float SingleRoundTotalDamage;//[Offset: 0xe78, Size: 4]
	int ContinuousKillsNum;//[Offset: 0xe7c, Size: 4]
	delegate OnInfectionRoundDamageChange;//[Offset: 0xe80, Size: 12]
	MonsterTreasureBoxData[] MonsterTreasureBoxDatas;//[Offset: 0xe8c, Size: 12]
	int MonsterTreasureBoxGetNum;//[Offset: 0xe98, Size: 4]
	int MonsterTreasureBoxDefendNum;//[Offset: 0xe9c, Size: 4]
	int OpnedMosnterBoxNum;//[Offset: 0xea0, Size: 4]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea4, Size: 1]
	BuildMaterialData[] BuildMat_GetList;//[Offset: 0xea8, Size: 12]
	BuildMaterialData[] BuildMat_UseList;//[Offset: 0xeb4, Size: 12]
	int MaxDecalCount;//[Offset: 0xed8, Size: 4]
	IdeaDecalActor*[] DecalActorList;//[Offset: 0xedc, Size: 12]
	PlayerStaticInfoInOB[] KickListTotalPlayers;//[Offset: 0xf3c, Size: 12]
	float SignalHP;//[Offset: 0xf48, Size: 4]
	delegate OnSignalHPChange;//[Offset: 0xf4c, Size: 12]
	float SignalHPRemainingTime;//[Offset: 0xf58, Size: 4]
	float LeanOutL_AimAngle;//[Offset: 0xf5c, Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0xf60, Size: 4]
	CharacterBuffRecord[] CharacterBuffRecords;//[Offset: 0xf64, Size: 12]
	int RemainingRevivalTime;//[Offset: 0xf70, Size: 4]
	int RemainingRevivalCount;//[Offset: 0xf74, Size: 4]
	bool IsIDCardCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf78, Size: 1]
	bool IsInWaittingRevivalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf79, Size: 1]
	bool IsInRevivingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7a, Size: 1]
	bool IsGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7b, Size: 1]
	bool bHasRevivalSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7c, Size: 1]
	int SelfRevivalCountdown;//[Offset: 0xf80, Size: 4]
	bool bInRevivalArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf84, Size: 1]
	int64 RevivalCardCreateTime;//[Offset: 0xf88, Size: 8]
	delegate OnRevivalStateChangeDelegate;//[Offset: 0xf90, Size: 12]
	delegate OnRevivalRemainingTimeChangeDelegate;//[Offset: 0xf9c, Size: 12]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xfa8, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xfb4, Size: 12]
	MarkSyncData[] SyncMarkDispatchData_Self;//[Offset: 0xfc0, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData_Self;//[Offset: 0xfcc, Size: 12]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0xfd8, Size: 12]
	<int> LastMarkInstanceID;//[Offset: 0xfe4, Size: 60]
	<int> CurrentMarkInstanceID;//[Offset: 0x1020, Size: 60]
	<int,MarkSyncData> CurrentMarkInstanceIDMap;//[Offset: 0x105c, Size: 60]
	<int,MarkSyncData> LastMarkInstanceIDMap;//[Offset: 0x1098, Size: 60]
	float KdValue;//[Offset: 0x10d4, Size: 4]
	Vector LastVehicleLocation;//[Offset: 0x10ec, Size: 12]
	delegate OnMapMultiMarkChange;//[Offset: 0x1100, Size: 12]
	delegate OnPlayerUnderAttack;//[Offset: 0x110c, Size: 12]
	delegate OnSetPlane;//[Offset: 0x1118, Size: 12]
	Vector[] MapMultiMark;//[Offset: 0x1124, Size: 12]
	bool bForceHideTeamatePositionItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116c, Size: 1]
	Vector AirplaneStartLoc;//[Offset: 0x1170, Size: 12]
	Vector AirplaneStopLoc;//[Offset: 0x117c, Size: 12]
	Vector AirplaneCanJumpLoc;//[Offset: 0x1188, Size: 12]
	Vector AirplaneForceJumpLoc;//[Offset: 0x1194, Size: 12]
	Vector LastValidAirplaneCanJumpLoc;//[Offset: 0x11a0, Size: 12]
	Vector LastValidAirplaneForceJumpLoc;//[Offset: 0x11ac, Size: 12]
	Actor* Plane;//[Offset: 0x11b8, Size: 4]
	int FlightNo;//[Offset: 0x11bc, Size: 4]
	bool IsAIShouldIgnoreSenseEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c0, Size: 1]
	FName[] CurMapTags;//[Offset: 0x11c4, Size: 12]
	FName[] ShowingMapTags;//[Offset: 0x11d0, Size: 12]
	delegate OnMapTagsChangedDelegate;//[Offset: 0x11dc, Size: 12]
	void UpdateSelfHealthDataOnServer();// 0x220fc28
	void UpdateDeliveryData(uint32 InDeliverPlayerKey, byte DeliveryAIType);// 0x220fb64
	void SyncAirplaneRoute(Vector StartLoc, Vector StopLoc, Vector CanJumpLoc, Vector ForceJumpLoc);// 0x220fa14
	void SetPlayerMapMultiMark(Vector Loc, bool bAdd, int MaxNum, bool bClearAll);// 0x220f8bc
	void SetPlayerGiveUp(bool InGiveUp);// 0x220f83c
	void SetLastValidAirplaneInfo();// 0x220f828
	void SetForceSyncTeammateData(bool IsForCE);// 0x220f7ac
	void SetCurMapTags(const FName[] mapTags);// 0x220f6b8
	void SetAirplaneStopLoc(Vector StopLoc);// 0x220f638
	void SetAirplaneStartLoc(Vector StarLoc);// 0x220f5b8
	void SetAirplaneForceJumpLoc(Vector ForceJumpLoc);// 0x220f538
	void SetAirplaneCanJumpLoc(Vector CanJumpLoc);// 0x220f4b8
	void SaveBuffData();// 0x220f49c
	void RPC_OnPlayerUnderAttack();// 0x2132334
	void RestoreBuffData();// 0x220f480
	void RespondToPawnRescueingStatusChange(Character* _helpWho, Character* _ownerPawn, bool IsTurningInto, float RemainingRescueTime, bool IsFirstPlayerHelper);// 0x220f2dc
	void RespondToPawnCanRescueOtherStatusChange(STExtraBaseCharacter* _helpWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x220f1d4
	void RespondToPawnCanCarryOtherStatusChange(STExtraBaseCharacter* _carryWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x220f0cc
	void RespondToPawnCanCaptivateOtherStatusChange(STExtraBaseCharacter* _carryWho, STExtraBaseCharacter* _ownerPawn, bool bIsBegged);// 0x220efc4
	void RespondToPawnBreathChange(float _health, byte _healthStatus, STExtraBaseCharacter* param2);// 0x220eec4
	void RemovePaintDecal(IdeaDecalActor* DecalActor);// 0x220ee4c
	void RefreshRevivalState();// 0x220ee38
	void RefreshFollowMark();// 0x220ee24
	void RefreshAirplaneRoute();// 0x220ee10
	void PlayerStateSetPlane__DelegateSignature(Actor* Plane);// 0x2bb69b8
	int PlayersCountOnMyPlane();// 0x220ede8
	void OnRevivalStateChangeDelegate__DelegateSignature(bool InRevivalState, bool IsIDCapPick, bool PlayAniAndSound);// 0x2bb69b8
	void OnRevivalRemainingTimeChangeDelegate__DelegateSignature(int RemainingTime, int MaxTime);// 0x2bb69b8
	void OnRep_VisualFieldInfo();// 0x220edd4
	void OnRep_UpdateKillMonsterNum();// 0x220edb8
	void OnRep_TeamMatePlayerStateList();// 0x220eda4
	void OnRep_SingleRoundTotalDamage();// 0x220ed90
	void OnRep_SignalHP();// 0x220ed7c
	void OnRep_RemainingRevivalTime();// 0x220ed68
	void OnRep_RemainingRevivalCount();// 0x2bb69b8
	void OnRep_RankNotify();// 0x220ed54
	void OnRep_PlayerTemperatureChanged();// 0x220ed40
	void OnRep_PlayersCountOnPlane();// 0x220ed2c
	void OnRep_PlayerReconnectEvent();// 0x220ed18
	void OnRep_PlayerName();// 0x1f3cb34
	void OnRep_PlayerLostConnectionEvent();// 0x220ed04
	void OnRep_PlayerLiveStateInternal();// 0x220ecf0
	void OnRep_PlayerLiveState();// 0x220ecd4
	void OnRep_PlayerKillsChange();// 0x21e8534
	void OnRep_PlayerIsFollowing();// 0x220ecc0
	void OnRep_PlayerGiveUp();// 0x201dda4
	void OnRep_PlayerGameOver();// 0x220ecac
	void OnRep_PlayerExitGameEvent();// 0x220ec98
	void OnRep_PlayerAliasShowInfoList();// 0x220ec84
	void OnRep_Plane();// 0x220ec70
	void OnRep_MarkSyncData();// 0x220ec5c
	void OnRep_MarkSelfSyncData();// 0x220ec48
	void OnRep_MapMarkNotify();// 0x220ec34
	void OnRep_LastVehicleLocation();// 0x220ec20
	void OnRep_IsIDCardCaptured();// 0x220ec0c
	void OnRep_HPChanged();// 0x1ee1bb4
	void OnRep_HasRevivalSign();// 0x220ebf0
	void OnRep_HasEscaped();// 0x220ebdc
	void OnRep_CurMapTags();// 0x220ebc8
	void OnRep_ChangeRevivalState();// 0x220ebac
	void OnRep_ChangeInRevivingState();// 0x220eb98
	void OnRep_BreathChanged();// 0x220eb84
	void OnRep_BPS();// 0x220eb70
	void OnRep_AirplaneStopLoc();// 0x220eb5c
	void OnRep_AirplaneStartLoc();// 0x220eb48
	void OnRep_AirplaneForceJumpLoc();// 0x220eb34
	void OnRep_AirplaneCanJumpLoc();// 0x220eb20
	void OnPlayerUnderAttack__DelegateSignature(FString PUID);// 0x2bb69b8
	void OnPlayerKillsChangeDelegate__DelegateSignature();// 0x2bb69b8
	void OnNewRound();// 0x20c3c2c
	void OnMapTagsChangedDelegate__DelegateSignature(STExtraPlayerState* CurPlayerState);// 0x2bb69b8
	void OnMapMultiMarkChange__DelegateSignature(Vector[] MapMultiMark);// 0x2bb69b8
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x2bb69b8
	void OnClientVeteranRecruitIndexUpdated();// 0x220eb04
	void OnClientRemoveBuff(int BuffID, int SkillID);// 0x20c3b68
	void OnClientAddBuff(int BuffID, int SkillID);// 0x20c3aa4
	void LuaReceiveBeginPlay();// 0x220eae8
	void Kill(int ScoreNum, Character* VictimPawn);// 0x220ea24
	bool IsSinglePlayer();// 0x220e9fc
	bool IsLocalPlayerState();// 0x220e9d4
	bool IsInGame();// 0x220e9a4
	bool IsInBetrayState();// 0x220e974
	bool IsAlive();// 0x220e94c
	uint32 GetUserIDByMemberID(int memberID);// 0x220e8c4
	void GetTeamMatePlayerUIDList(out FString[] OutList, bool bIsExcludeMyself);// 0x220e738
	void GetTeamMatePlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x220e614
	STExtraPlayerState* GetTeamMatePlayerStateFromPlayerKey(uint32 InPlayerKey);// 0x220e594
	STExtraPlayerState* GetTeammatePlayerState(int TeammateIndex);// 0x220e514
	int GetTeamMateIndexByName(FString TeammateName);// 0x220e450
	int GetTeamMateIndex(STExtraPlayerState* Teammate);// 0x220e3d0
	int GetTeammateCount();// 0x220e3a8
	STExtraPlayerState* GetTeammateByName(FString TeammateName);// 0x220e2e4
	FString GetStringPlayerKey();// 0x220e224
	float GetPlayerTemperature();// 0x220e1fc
	int GetPlayerTeamIndex();// 0x220e1d4
	float GetPlayerMaxTemperature();// 0x220e1ac
	float GetPlayerMaxHealth();// 0x220e184
	int GetPlayerIndexInTeam();// 0x220e15c
	float GetPlayerHealthPercent();// 0x220e134
	float GetPlayerHealth();// 0x220e10c
	STExtraBaseCharacter* GetPlayerCharacter();// 0x220e0e4
	void GetPlayerAliasInfoList(out GameModePlayerAliasShowInfo[] OutList);// 0x220e038
	float GetMaxEnegyBuff();// 0x220dfe8
	MarkSyncData GetMarkDataByInstanceID(int InInstanceID);// 0x220de68
	Vector GetMapMark3DLocation();// 0x220de20
	Vector GetLastValidAirplaneForceJumpLoc();// 0x220ddf0
	Vector GetLastValidAirplaneCanJumpLoc();// 0x220ddc0
	Vector GetForceJumpLoc();// 0x220dd90
	Vector GetCanJumpLoc();// 0x220dd60
	void GetCampMatePlayerList(out STExtraBaseCharacter*[] playerList, bool includeTeammate);// 0x220dc44
	float GetBreathPercentage();// 0x220dc1c
	int GetBountyGold();// 0x2bb69b8
	Vector2D GetAutoParachuteJumpPlaneLoc();// 0x220dbdc
	MarkSyncData[] GetAllSelfMarkData();// 0x220db78
	void GetAllPlayerStates(out STExtraPlayerState*[] OutList);// 0x220daac
	void GetAllPlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x220d988
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x220d8dc
	void GetAlertDataByIndex(int Index, out int IconID, out int AlertID, out Vector Location, out enum Status);// 0x220d708
	Vector GetAirplaneStopLoc();// 0x220d6d8
	Vector GetAirplaneStartLoc();// 0x220d6a8
	Vector2D GetAirplaneForward2D();// 0x220d668
	void ForceNotifyAlertUpdate();// 0x220d654
	void FollowInitialTeamParachuteLeaderAndShowTips(FString LeaderName);// 0x220d4fc
	void FadeTeammatesMapMark();// 0x220d4e8
	void DispatchPlayerExitEvent();// 0x220d4cc
	Vector2D ConverMapMarkTo2D(out const Vector MapMark3D);// 0x220d438
	void ClientSyncRoute(Vector StartLoc, Vector StopLoc);// 0x220d370
	void ClientDisplayGameTipWithMsgID(int ID, FString param1, FString param2);// 0x220d1ac
	void ChangeFadeMapMarkDist(float NewDist);// 0x220d130
	bool CanSelfRevive();// 0x220d100
	bool CanRevivalTeammate();// 0x220d0d8
	bool CanBeRevival();// 0x1f65640
	byte CalculateEnegyStage();// 0x220d0b0
	void BPKill(Character* VictimPawn);// 0x220d030
	void AddOneAssist();// 0x220d014
	void AddInDamageAmount(Actor* Causor, float FinalDamage);// 0x220cf50
	void AddEnegySafety(float AddVal);// 0x220ced8
	void AddDamager(STExtraBaseCharacter* Damager, int DamageType);// 0x220ce14
	void AddDamageAmount(Character* VictimPawn, float FinalDamage, bool bHitHead);// 0x220cd04

--------------------------------
Class: UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	float surviveTime;//[Offset: 0x3ec, Size: 4]
	float Pronetime;//[Offset: 0x3f0, Size: 4]
	float marchDistance;//[Offset: 0x3fc, Size: 4]
	float travelDistance;//[Offset: 0x400, Size: 4]
	float DriveDistance;//[Offset: 0x404, Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x408, Size: 4]
	int destroyVehicleNum;//[Offset: 0x40c, Size: 4]
	int rescueTimes;//[Offset: 0x410, Size: 4]
	int NormalItemsNum;//[Offset: 0x414, Size: 4]
	int SeniorItemsNum;//[Offset: 0x418, Size: 4]
	int GVMemberID;//[Offset: 0x41c, Size: 4]
	FName PlayerType;//[Offset: 0x420, Size: 8]
	uint64 FinalTeamleaderUID;//[Offset: 0x428, Size: 8]
	uint32 PlayerKey;//[Offset: 0x430, Size: 4]
	FString PlayerUID;//[Offset: 0x434, Size: 12]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	FString iconUrl;//[Offset: 0x444, Size: 12]
	int gender;//[Offset: 0x450, Size: 4]
	int PlayerLevel;//[Offset: 0x454, Size: 4]
	int SegmentLevel;//[Offset: 0x458, Size: 4]
	int AceImprintShowId;//[Offset: 0x45c, Size: 4]
	int AceImprintBaseId;//[Offset: 0x460, Size: 4]
	int AvatarBoxId;//[Offset: 0x464, Size: 4]
	int CampID;//[Offset: 0x468, Size: 4]
	int resID;//[Offset: 0x46c, Size: 4]
	uint64 UId;//[Offset: 0x470, Size: 8]
	FString OpenID;//[Offset: 0x478, Size: 12]
	FString Nation;//[Offset: 0x484, Size: 12]
	int TeamID;//[Offset: 0x490, Size: 4]
	int64 IdxInTeam;//[Offset: 0x498, Size: 8]
	int PlayerBornPointID;//[Offset: 0x4a0, Size: 4]
	int Kills;//[Offset: 0x4a4, Size: 4]
	int KillsBeforeDie;//[Offset: 0x4a8, Size: 4]
	int Knockouts;//[Offset: 0x4ac, Size: 4]
	int Assists;//[Offset: 0x4b8, Size: 4]
	byte PlatformGender;//[Offset: 0x4bc, Size: 1]
	int MatchStrategyLabel;//[Offset: 0x4c0, Size: 4]
	int MatchLabel;//[Offset: 0x4c4, Size: 4]
	uint32 Killer;//[Offset: 0x4c8, Size: 4]
	uint32 KillerIGPlayerKey;//[Offset: 0x4cc, Size: 4]
	FString BeKilledOpenID;//[Offset: 0x4d0, Size: 12]
	FString KillerName;//[Offset: 0x4dc, Size: 12]
	uint64 MisKillTeammatePlayerKey;//[Offset: 0x4e8, Size: 8]
	int ShootWeaponShotNum;//[Offset: 0x4f0, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x4f4, Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x4f8, Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x4fc, Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x500, Size: 4]
	int HeadShotNum;//[Offset: 0x504, Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x508, Size: 4]
	int KillNumByGrende;//[Offset: 0x50c, Size: 4]
	int UseFragGrenadeNum;//[Offset: 0x510, Size: 4]
	int UseSmokeGrenadeNum;//[Offset: 0x514, Size: 4]
	int MaxKillDistance;//[Offset: 0x518, Size: 4]
	int HealTimes;//[Offset: 0x51c, Size: 4]
	float DamageAmount;//[Offset: 0x520, Size: 4]
	float VehicleDamageAmount;//[Offset: 0x524, Size: 4]
	float HealAmount;//[Offset: 0x528, Size: 4]
	FString[] KillFlow;//[Offset: 0x52c, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x538, Size: 12]
	KnockOutData[] KnockOutList;//[Offset: 0x544, Size: 12]
	float InDamageAmount;//[Offset: 0x550, Size: 4]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x560, Size: 12]
	bool bIsForbidItemFlowMerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0x570, Size: 60]
	AIDeliveryTlogData TLog_AIDeliveryTlogData;//[Offset: 0x5b0, Size: 72]
	bool bHasSendAIDeliverData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 1]
	<int,bool> TLog_PickUpItemIdMap;//[Offset: 0x5fc, Size: 60]
	GameModeLikeResultData[] Like;//[Offset: 0x638, Size: 12]
	uint32 Switch;//[Offset: 0x644, Size: 4]
	uint32[] Self;//[Offset: 0x648, Size: 12]
	GameModeTeammateLableCheckData[] LabelCheck;//[Offset: 0x654, Size: 12]
	UseItemFlow[] UseItemFlow;//[Offset: 0x660, Size: 12]
	UseBuffFlow[] UseBuffFlow;//[Offset: 0x66c, Size: 12]
	BuildingEnterFlow[] BuildingEnterFlow;//[Offset: 0x678, Size: 12]
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x684, Size: 12]
	<int,int> TLog_BulletCount;//[Offset: 0x690, Size: 60]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x6cc, Size: 8]
	bool bIsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d4, Size: 1]
	float OutsideBlueCircleTime;//[Offset: 0x6d8, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x6dc, Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x6e8, Size: 4]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x6ec, Size: 4]
	int FirstOpenedTreasureBoxNum;//[Offset: 0x6f0, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x6f4, Size: 4]
	int[] BuildFlow;//[Offset: 0x6f8, Size: 12]
	int[] DestroyShelterFlow;//[Offset: 0x704, Size: 12]
	float ShelterTakeDamage;//[Offset: 0x710, Size: 4]
	float HitShelterDamage;//[Offset: 0x714, Size: 4]
	Vector LandLocation;//[Offset: 0x718, Size: 12]
	Vector ParachuteLocation;//[Offset: 0x724, Size: 12]
	int LandTime;//[Offset: 0x730, Size: 4]
	Vector DeadLocation;//[Offset: 0x734, Size: 12]
	FString DeadDamangeType;//[Offset: 0x740, Size: 12]
	int PveDeadAttacker;//[Offset: 0x74c, Size: 4]
	int PveStageId;//[Offset: 0x750, Size: 4]
	FString DeadTimeStr;//[Offset: 0x754, Size: 12]
	int NearDeathDamageType;//[Offset: 0x760, Size: 4]
	uint32 NearDeathCauserId;//[Offset: 0x764, Size: 4]
	bool NearDeathIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 1]
	int BeDownTimes;//[Offset: 0x76c, Size: 4]
	int BeSavedTimes;//[Offset: 0x770, Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x774, Size: 80]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cc, Size: 1]
	int GamePlayingTime;//[Offset: 0x7d0, Size: 4]
	int ObserverTime;//[Offset: 0x7d4, Size: 4]
	int TouchDownAreaID;//[Offset: 0x7d8, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x7dc, Size: 4]
	int[] TouchDownAreaList;//[Offset: 0x7e0, Size: 12]
	bool bHasTouchDownAreaList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ec, Size: 1]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x7f0, Size: 12]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x7fc, Size: 12]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x808, Size: 12]
	int[] SecretAreaIDList;//[Offset: 0x814, Size: 12]
	SpecialPickItemState[] CollectItemRecord;//[Offset: 0x820, Size: 12]
	float DrivingHelicopterTime;//[Offset: 0x82c, Size: 4]
	float InHelicopterTime;//[Offset: 0x830, Size: 4]
	int RevivalNum;//[Offset: 0x834, Size: 4]
	int BeRevivedNum;//[Offset: 0x838, Size: 4]
	int KillNumInVehicle;//[Offset: 0x83c, Size: 4]
	float MaxVehicleToLandHeight;//[Offset: 0x840, Size: 4]
	float MaxVehicleInAirInterval;//[Offset: 0x844, Size: 4]
	int KillPlayerNum;//[Offset: 0x848, Size: 4]
	int KillAINum;//[Offset: 0x84c, Size: 4]
	float TotalSprintDistance;//[Offset: 0x850, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x854, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x858, Size: 4]
	DestroyVehicleWheelFlow[] DestroyVehicleWheelFlow;//[Offset: 0x85c, Size: 12]
	int ProneTimes;//[Offset: 0x868, Size: 4]
	int CrouchTimes;//[Offset: 0x86c, Size: 4]
	int JumpTimes;//[Offset: 0x870, Size: 4]
	int KillMonsterNum;//[Offset: 0x874, Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0x878, Size: 60]
	float TotalDamageAmountToMonsters;//[Offset: 0x8b4, Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x8b8, Size: 4]
	<int,float> DamageAmountToMonsters;//[Offset: 0x8bc, Size: 60]
	<int,float> DamageAmountFromMonsters;//[Offset: 0x8f8, Size: 60]
	int MonsterHeadShotKilledTimes;//[Offset: 0x934, Size: 4]
	int BeMonsterDownTimes;//[Offset: 0x938, Size: 4]
	int LightCandleNum;//[Offset: 0x93c, Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0x940, Size: 60]
	ActivityEventReportData[] ActivityEventRecordList;//[Offset: 0x97c, Size: 12]
	float BattleStateTime;//[Offset: 0x988, Size: 4]
	bool bIsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98c, Size: 1]
	float DriveWithTeammateDistance;//[Offset: 0x990, Size: 4]
	int FistKillingCount;//[Offset: 0x994, Size: 4]
	int OpenedAirDropBoxNum;//[Offset: 0x998, Size: 4]
	<uint32,uint32> VehicleUsedMap;//[Offset: 0x99c, Size: 60]
	FString[] DestroyVehicleFlow;//[Offset: 0x9d8, Size: 12]
	int UseHelicoperNum;//[Offset: 0x9e4, Size: 4]
	TLog_KillInfo[] PlayerKillAIInfo;//[Offset: 0x9e8, Size: 12]
	TLog_KillInfo[] PlayerNearDeathDuoToAI;//[Offset: 0x9f4, Size: 12]
	TLog_KillInfo AIKillPlayerInfo;//[Offset: 0xa00, Size: 32]
	float UseHelicoperDistance;//[Offset: 0xa20, Size: 4]
	byte CharmRankIndex;//[Offset: 0xa24, Size: 1]
	<uint32> UseHelicoperRecord;//[Offset: 0xa28, Size: 60]
	int SnowBoardJumpActionCount;//[Offset: 0xa68, Size: 4]
	int EmoteOnTelpherCount;//[Offset: 0xa6c, Size: 4]
	int KillMagicWalkAI;//[Offset: 0xa70, Size: 4]
	int SendMagicWalkAI;//[Offset: 0xa74, Size: 4]
	int[] FindBlackMonsterIDs;//[Offset: 0xa78, Size: 12]
	int KillSnowManCount;//[Offset: 0xa84, Size: 4]
	uint64 LuckmateUID;//[Offset: 0xa88, Size: 8]
	<enum,int> EventCounterMap;//[Offset: 0xa90, Size: 60]
	<int,int> GeneralCounterMap;//[Offset: 0xacc, Size: 60]
	int VeteranRecruitIndex;//[Offset: 0xb08, Size: 4]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0xb0c, Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0xb18, Size: 52]
	int MemberIdInVoiceRoom;//[Offset: 0xb4c, Size: 4]
	bool PlayerVoiceEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb50, Size: 1]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0xb54, Size: 44]
	int UpassShow;//[Offset: 0xb80, Size: 4]
	int upassKeepBuy;//[Offset: 0xb84, Size: 4]
	int upassCurValue;//[Offset: 0xb88, Size: 4]
	bool UpassIsBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8c, Size: 1]
	TLog_Micphone MicphoneTlog;//[Offset: 0xb90, Size: 24]
	float TeammateMicrophoneTime;//[Offset: 0xba8, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0xbac, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0xbb0, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xbb4, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0xbb8, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0xbbc, Size: 4]
	float MicrophoneUseTimeStamp;//[Offset: 0xbc0, Size: 4]
	float SpeakerUseTimeStamp;//[Offset: 0xbc4, Size: 4]
	bool IsOnline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbec, Size: 1]
	GameBaseInfo GameBaseInfo;//[Offset: 0xc08, Size: 104]
	int CollectedEventType;//[Offset: 0xc70, Size: 4]
	void SetGVMemberIDServerCall(int memberID);// 0x27e491c
	void SetGVMemberID(int memberID);// 0x27e48a4
	void SetDeliveryResult(uint32 InDeliverPlayerKey, bool bInSuccess, int EventTypeId);// 0x27e4798
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x27e4688
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x27e454c
	void ReportTaskExtInfo(int TaskId, FString ExtInfo);// 0x27e43ac
	void ReportTaskData(int TaskId, int process);// 0x27e42f0
	void ReportSpecialCollection(int ItemId, int Count);// 0x27e4234
	void ReportSecretAreaID(int SecretAreaID);// 0x27e41bc
	void ReportLikeTeammate(int64 BeLikeUID, int LikeType);// 0x27e40fc
	void ReportLikeSwitch(int SwitchSetting);// 0x27e4084
	void ReportLikeSelf(int LikeType);// 0x27e400c
	void ReportLandLocType(int TouchDownLocType);// 0x27e3f94
	void ReportLandAreaList(out int[] TouchDownAreaIDs);// 0x27e3ec8
	void ReportLandArea(int TouchDownArea);// 0x27e3e50
	void ReportLabelCheck(int TeammateUID, int Result);// 0x27e3d94
	void RecordUseHelicoper(uint32 UseHelicoperId);// 0x27e3d1c
	void OnRepCampIDBP();// 0x2bb69b8
	void OnRep_VeteranRecruitIndex();// 0x27e3d08
	void OnRep_UpdateKillMonsterNum();// 0x220edb8
	void OnRep_UID();// 0x27e3cf4
	void OnRep_PlayerKillsChange();// 0x21e8534
	void OnRep_MatchLabel();// 0x1ee1bb4
	void OnRep_CollectItemRecord();// 0x27e3ce0
	void OnRep_CampID();// 0x27e3ccc
	void OnRep_AliasInfo();// 0x27e3cb8
	void OnClientVeteranRecruitIndexUpdated();// 0x220eb04
	bool IsSpecialPickItemCollectionCompleted(int ItemId);// 0x27e3c38
	bool IsSpecialPickItem(int ItemId);// 0x27e3bb8
	bool IsItemForbidMerge(int ItemResId);// 0x27e3b30
	bool IsForceNetRelevantFor(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0x27e3a14
	bool IsDeathDamageInfoValid();// 0x27e39ec
	void GetWeaponRecordData(out OnePlayerWeapon OutWeaponInfo);// 0x27e3908
	int GetVeteranPlayerLevel();// 0x2245158
	uint32 GetUserIDByMemberID(int memberID);// 0x220e8c4
	FString GetUIDString();// 0x27e3848
	GameModeTeammateBattleResultData GetTeammateBattleResultData();// 0x27e37dc
	uint32 GetPlayerKey();// 0x27e37b4
	GameModePlayerBattleResultData_SuperCold GetPlayerBattleResultData_SuperCold();// 0x27e36d0
	GameModePlayerBattleResultData GetPlayerBattleResultData();// 0x27e3660
	enum GetMentorPlayerType();// 0x27e3630
	DamageInfo GetDeathDamageInfo();// 0x27e35e4
	void ForceUpdateCampCharacterList();// 0x27e35c8
	void ClearTlogData();// 0x27e35ac
	void ChangeCollectItemRecord(int InItemID, bool InNewState);// 0x27e34e8
	void AddGeneralCount(int ID, int InCount, bool bReset);// 0x27e33e0
	void AddEventCount(byte EventId, int InCount, bool bReset);// 0x27e32d8

--------------------------------
Class: LuaPlayerState.PlayerState.Info.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x3a4, Size: 60]
	FString LuaFilePath;//[Offset: 0x3e0, Size: 12]

--------------------------------
Class: KnockOutData
	uint64 AttackerID;//[Offset: 0x0, Size: 8]
	int Times;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TLog_PickUpItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]
	int SourceType;//[Offset: 0x14, Size: 4]
	int AdditionalParam;//[Offset: 0x18, Size: 4]
	FString TimeStr;//[Offset: 0x1c, Size: 12]
	uint64 InstanceID;//[Offset: 0x28, Size: 8]

--------------------------------
Class: TLog_BornLandGrenadeData
	int PickupCount;//[Offset: 0x0, Size: 4]
	int ThrowCount;//[Offset: 0x4, Size: 4]
	int HitOthersCount;//[Offset: 0x8, Size: 4]
	int HitedByOthersCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AIDeliveryTlogData
	uint64 UId;//[Offset: 0x0, Size: 8]
	<uint32,AIDeliveryInfo> DeliveryMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: AIDeliveryInfo
	int DeliveryStartTime;//[Offset: 0x0, Size: 4]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int DeliveryArrivalTime;//[Offset: 0x8, Size: 4]
	int EventTypeId;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameModeLikeResultData
	uint32[] Like;//[Offset: 0x0, Size: 12]
	uint64 UId;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameModeTeammateLableCheckData
	uint32 Mask;//[Offset: 0x0, Size: 4]
	uint64 UId;//[Offset: 0x8, Size: 8]

--------------------------------
Class: UseItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: UseBuffFlow
	int BuffID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: BuildingEnterFlow
	int BuildingID;//[Offset: 0x0, Size: 4]
	int EnterCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: TLog_PropEquipUnequipFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	enum SlotType;//[Offset: 0x4, Size: 1]
	bool bEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	FString TimeStr;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TLog_SpecialStats
	float MonsterDamageInNight1;//[Offset: 0x0, Size: 4]
	float MonsterDamageInNight2;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleDriveDisData
	uint64 DriverID;//[Offset: 0x0, Size: 8]
	int VehicleType;//[Offset: 0x8, Size: 4]
	int AvatarID;//[Offset: 0xc, Size: 4]
	float DriveDistance;//[Offset: 0x10, Size: 4]
	float DriveTime;//[Offset: 0x14, Size: 4]
	float VehicleJumpDistanceMax;//[Offset: 0x18, Size: 4]
	uint64[] PeopleInCar;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: EquipmentData
	int HelmetID;//[Offset: 0x0, Size: 4]
	int ArmorID;//[Offset: 0x4, Size: 4]
	int BackPackID;//[Offset: 0x8, Size: 4]
	int MainWeapon1ID;//[Offset: 0xc, Size: 4]
	int[] MainWeapon1AttachmentsID;//[Offset: 0x10, Size: 12]
	int MainWeapon2ID;//[Offset: 0x1c, Size: 4]
	int[] MainWeapon2AttachmentsID;//[Offset: 0x20, Size: 12]
	int ViceWeaponID;//[Offset: 0x2c, Size: 4]
	int[] ViceWeaponAttachmentsID;//[Offset: 0x30, Size: 12]
	int CloseWeaponID;//[Offset: 0x3c, Size: 4]
	int[] ThrowWeaponsID;//[Offset: 0x40, Size: 12]
	int8 IsLuckyClothing;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: GameModePlayerTaskData
	int task_id;//[Offset: 0x0, Size: 4]
	int process;//[Offset: 0x4, Size: 4]
	FString ext_info;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ReportCollection
	int item_id;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponDamageRecord
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int FireCount;//[Offset: 0x8, Size: 4]
	int HeadShootCount;//[Offset: 0xc, Size: 4]
	int LimbsShootCount;//[Offset: 0x10, Size: 4]
	int BodyShootCount;//[Offset: 0x14, Size: 4]
	int HandShootCount;//[Offset: 0x18, Size: 4]
	int FootShootCount;//[Offset: 0x1c, Size: 4]
	int UniqueHitCount;//[Offset: 0x20, Size: 4]
	int[] HitDistanceArray;//[Offset: 0x24, Size: 12]
	int TotalUseTime;//[Offset: 0x30, Size: 4]
	int TotalOwnTime;//[Offset: 0x34, Size: 4]
	int KillCount;//[Offset: 0x38, Size: 4]
	int KnockNumber;//[Offset: 0x3c, Size: 4]
	int[] Associations;//[Offset: 0x40, Size: 12]
	int AvatarID;//[Offset: 0x4c, Size: 4]
	int DIYPlanID;//[Offset: 0x50, Size: 4]

--------------------------------
Class: SpecialPickItemState
	int item_id;//[Offset: 0x0, Size: 4]
	bool bIsCollectionCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: DestroyVehicleWheelFlow
	int AreaID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ActivityEventReportData
	byte EventId;//[Offset: 0x0, Size: 1]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TLog_KillInfo
	int FakePlayerID;//[Offset: 0x0, Size: 4]
	int DeadTime;//[Offset: 0x4, Size: 4]
	int AILastFightTime;//[Offset: 0x8, Size: 4]
	int[] PlayerAreas;//[Offset: 0xc, Size: 12]
	int ArmorID;//[Offset: 0x18, Size: 4]
	int HelmetID;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PlayEmoteData
	int EmoteIndex;//[Offset: 0x0, Size: 4]
	int AreaID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerAliasInfo
	int AliasID;//[Offset: 0x0, Size: 4]
	FString AliasTitle;//[Offset: 0x4, Size: 12]
	FString AliasNation;//[Offset: 0x10, Size: 12]
	int AliasRank;//[Offset: 0x1c, Size: 4]
	FString AliasPartnerName;//[Offset: 0x20, Size: 12]
	int AliasPartnerRelation;//[Offset: 0x2c, Size: 4]
	int AliasRankID;//[Offset: 0x30, Size: 4]

--------------------------------
Class: GameModePlayerUpassInfo
	int updateTime;//[Offset: 0x0, Size: 4]
	int upassLevel;//[Offset: 0x4, Size: 4]
	int upassScore;//[Offset: 0x8, Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	FString iconUrl;//[Offset: 0x10, Size: 12]
	bool mainSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int upassKeepBuy;//[Offset: 0x20, Size: 4]
	int upassCurValue;//[Offset: 0x24, Size: 4]
	int nUpassPrimePlusCard;//[Offset: 0x28, Size: 4]

--------------------------------
Class: TLog_Micphone
	float TeammateMicrophoneTime;//[Offset: 0x0, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0x4, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0x8, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xc, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0x10, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: GameBaseInfo
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	FString GameAppID;//[Offset: 0xc, Size: 12]
	FString OpenID;//[Offset: 0x18, Size: 12]
	uint16 AreaID;//[Offset: 0x24, Size: 2]
	int8 PlatID;//[Offset: 0x26, Size: 1]
	FString ZoneID;//[Offset: 0x28, Size: 12]
	uint64 BattleID;//[Offset: 0x38, Size: 8]
	FString UserName;//[Offset: 0x40, Size: 12]
	uint64 RoleID;//[Offset: 0x50, Size: 8]
	int8 RoleType;//[Offset: 0x58, Size: 1]
	FString PicUrl;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: OnePlayerWeapon
	FString PlayerID;//[Offset: 0x0, Size: 12]
	WeaponReport[] Weapons;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WeaponReport
	int WeaponId;//[Offset: 0x0, Size: 4]
	int FireCount;//[Offset: 0x4, Size: 4]
	int HitCount;//[Offset: 0x8, Size: 4]
	int UniqueHitCount;//[Offset: 0xc, Size: 4]
	int KillCount;//[Offset: 0x10, Size: 4]
	float TotalDamage;//[Offset: 0x14, Size: 4]
	float TotalMonsterDamage;//[Offset: 0x18, Size: 4]
	int TotalOwnTime;//[Offset: 0x1c, Size: 4]
	int TotalUseTime;//[Offset: 0x20, Size: 4]
	int KnockDownCount;//[Offset: 0x24, Size: 4]
	int HeadShootCount;//[Offset: 0x28, Size: 4]
	int KillAICount;//[Offset: 0x2c, Size: 4]
	int KnockDownAICount;//[Offset: 0x30, Size: 4]
	int HeadShootAICount;//[Offset: 0x34, Size: 4]
	int HitAICount;//[Offset: 0x38, Size: 4]
	int UniqueHitAICount;//[Offset: 0x3c, Size: 4]
	int UseCount;//[Offset: 0x40, Size: 4]
	HitFlow[] HitFlow;//[Offset: 0x44, Size: 12]

--------------------------------
Class: HitFlow
	int AimType;//[Offset: 0x0, Size: 4]
	int Distance;//[Offset: 0x4, Size: 4]
	int IsKill;//[Offset: 0x8, Size: 4]
	float Damage;//[Offset: 0xc, Size: 4]
	bool bFallOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte[] PlayerStates;//[Offset: 0x14, Size: 12]
	byte HitPos;//[Offset: 0x20, Size: 1]
	bool IsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: GameModeTeammateBattleResultData
	FString Name;//[Offset: 0x0, Size: 12]
	uint64 UId;//[Offset: 0x10, Size: 8]
	int Kill;//[Offset: 0x18, Size: 4]
	int AIKills;//[Offset: 0x1c, Size: 4]
	FString State;//[Offset: 0x20, Size: 12]
	float travelDistance;//[Offset: 0x2c, Size: 4]
	float marchDistance;//[Offset: 0x30, Size: 4]
	float DriveDistance;//[Offset: 0x34, Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x38, Size: 4]
	float DamageAmount;//[Offset: 0x3c, Size: 4]
	float HealAmount;//[Offset: 0x40, Size: 4]
	int AssistNum;//[Offset: 0x44, Size: 4]
	int HeadShotNum;//[Offset: 0x48, Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x4c, Size: 4]
	float surviveTime;//[Offset: 0x50, Size: 4]
	int rescueTimes;//[Offset: 0x54, Size: 4]
	int DestroyVehicles;//[Offset: 0x58, Size: 4]
	FString[] KillFlow;//[Offset: 0x5c, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x68, Size: 12]
	float OutsideBlueCircleTime;//[Offset: 0x74, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x78, Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x84, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x88, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x8c, Size: 4]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0x90, Size: 12]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x9c, Size: 4]
	float InDamageAmount;//[Offset: 0xa0, Size: 4]
	int ProneTimes;//[Offset: 0xa4, Size: 4]
	int CrouchTimes;//[Offset: 0xa8, Size: 4]
	int JumpTimes;//[Offset: 0xac, Size: 4]
	int KillMonsterNum;//[Offset: 0xb0, Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0xb4, Size: 60]
	int LightCandleNum;//[Offset: 0xf0, Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0xf4, Size: 60]
	float TotalDamageAmountToMonsters;//[Offset: 0x130, Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x134, Size: 4]
	int MonsterHeadShotKilledTimes;//[Offset: 0x138, Size: 4]
	int BeMonsterDownTimes;//[Offset: 0x13c, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	int mainWeaponID;//[Offset: 0x144, Size: 4]
	float MaxWeaponAccurate;//[Offset: 0x148, Size: 4]
	float MaxWeaponHeadShotRate;//[Offset: 0x14c, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData_SuperCold
	int MakeFiresNum;//[Offset: 0x0, Size: 4]
	int DeerBBQNum;//[Offset: 0x4, Size: 4]
	int ChichenBBQNum;//[Offset: 0x8, Size: 4]
	int UseKFNum;//[Offset: 0xc, Size: 4]
	int UseUAVNum;//[Offset: 0x10, Size: 4]
	int KFUsingTime;//[Offset: 0x14, Size: 4]
	int UAVUsingTime;//[Offset: 0x18, Size: 4]
	int SkateboardUsingCount;//[Offset: 0x1c, Size: 4]
	int SkateboardUsingTime;//[Offset: 0x20, Size: 4]
	int SkateboardUsingDistance;//[Offset: 0x24, Size: 4]
	KillAnimalData[] AnimalKillFlow;//[Offset: 0x28, Size: 12]

--------------------------------
Class: KillAnimalData
	byte AnimalType;//[Offset: 0x0, Size: 1]
	int KillNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData
	FString Reason;//[Offset: 0x0, Size: 12]
	int RemainingPlayerCount;//[Offset: 0xc, Size: 4]
	int TotalPlayerCount;//[Offset: 0x10, Size: 4]
	int RemainingTeamCount;//[Offset: 0x14, Size: 4]
	int TotalTeamCount;//[Offset: 0x18, Size: 4]
	bool IsSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool IsSafeExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	uint64 Killer;//[Offset: 0x20, Size: 8]
	uint64 killer_ig_uid;//[Offset: 0x28, Size: 8]
	FString KillerName;//[Offset: 0x30, Size: 12]
	FString BeKilledOpenID;//[Offset: 0x3c, Size: 12]
	int ShootWeaponShotNum;//[Offset: 0x48, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x4c, Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x50, Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x54, Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x58, Size: 4]
	int HealTimes;//[Offset: 0x5c, Size: 4]
	FString[] KillFlow;//[Offset: 0x60, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x6c, Size: 12]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x78, Size: 12]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0x84, Size: 60]
	<int,int> TLog_BulletCount;//[Offset: 0xc0, Size: 60]
	uint64 parachute_leader_uid;//[Offset: 0x100, Size: 8]
	UseItemFlow[] UseItemFlow;//[Offset: 0x108, Size: 12]
	UseBuffFlow[] UseBuffFlow;//[Offset: 0x114, Size: 12]
	BuildingEnterFlow[] BuildingEnterFlow;//[Offset: 0x120, Size: 12]
	DestroyVehicleWheelFlow[] DestroyVehicleWheelFlow;//[Offset: 0x12c, Size: 12]
	int destroyVehicleNum;//[Offset: 0x138, Size: 4]
	int is_escape;//[Offset: 0x13c, Size: 4]
	TLog_KillInfo[] PlayerKillAIInfo;//[Offset: 0x140, Size: 12]
	TLog_KillInfo[] PlayerNearDeathDuoToAI;//[Offset: 0x14c, Size: 12]
	TLog_KillInfo AIKillPlayerInfo;//[Offset: 0x158, Size: 32]
	GameModeTeammateBattleResultData[] TeammateList;//[Offset: 0x178, Size: 12]
	GameModeLikeResultData[] Like;//[Offset: 0x184, Size: 12]
	uint32 Switch;//[Offset: 0x190, Size: 4]
	uint32[] Self;//[Offset: 0x194, Size: 12]
	GameModeTeammateLableCheckData[] LabelCheck;//[Offset: 0x1a0, Size: 12]
	Vector LandLocation;//[Offset: 0x1ac, Size: 12]
	int LandTime;//[Offset: 0x1b8, Size: 4]
	Vector ParachuteLocation;//[Offset: 0x1bc, Size: 12]
	Vector DeadLocation;//[Offset: 0x1c8, Size: 12]
	FString DeadDamangeType;//[Offset: 0x1d4, Size: 12]
	int PveDeadAttacker;//[Offset: 0x1e0, Size: 4]
	int PveStageId;//[Offset: 0x1e4, Size: 4]
	FString DeadTimeStr;//[Offset: 0x1e8, Size: 12]
	FString logoutime;//[Offset: 0x1f4, Size: 12]
	float Pronetime;//[Offset: 0x200, Size: 4]
	float BeInWaterTime;//[Offset: 0x204, Size: 4]
	float SwimmingDistance;//[Offset: 0x208, Size: 4]
	int BeDownTimes;//[Offset: 0x20c, Size: 4]
	int BeSavedTimes;//[Offset: 0x210, Size: 4]
	int PickUpAirDrops;//[Offset: 0x214, Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x218, Size: 80]
	int Rank;//[Offset: 0x268, Size: 4]
	int TotalScore;//[Offset: 0x26c, Size: 4]
	int ProneTimes;//[Offset: 0x270, Size: 4]
	int CrouchTimes;//[Offset: 0x274, Size: 4]
	int JumpTimes;//[Offset: 0x278, Size: 4]
	int TouchDownAreaID;//[Offset: 0x27c, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x280, Size: 4]
	int[] TouchDownAreaList;//[Offset: 0x284, Size: 12]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x290, Size: 12]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x29c, Size: 12]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x2a8, Size: 12]
	GrenadeDamageRecord GrenadeDamageRecord;//[Offset: 0x2b4, Size: 28]
	KniveDamageRecord KniveDamageRecord;//[Offset: 0x2d0, Size: 32]
	int[] SecretAreaIDList;//[Offset: 0x2f0, Size: 12]
	int KillNumInVehicle;//[Offset: 0x2fc, Size: 4]
	float TotalSprintDistance;//[Offset: 0x300, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x304, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x308, Size: 4]
	int[] BuildFlow;//[Offset: 0x30c, Size: 12]
	int[] DestroyShelterFlow;//[Offset: 0x318, Size: 12]
	float ShelterTakeDamage;//[Offset: 0x324, Size: 4]
	float HitShelterDamage;//[Offset: 0x328, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x32c, Size: 12]
	KnockOutData[] KnockOutList;//[Offset: 0x338, Size: 12]
	bool IsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	int KillMonsterNum;//[Offset: 0x348, Size: 4]
	int LightCandleNum;//[Offset: 0x34c, Size: 4]
	int KillMagicWalkAI;//[Offset: 0x350, Size: 4]
	int SendMagicWalkAI;//[Offset: 0x354, Size: 4]
	float BattleStateTime;//[Offset: 0x358, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 1]
	<int,int> ActivityButtonCount;//[Offset: 0x360, Size: 60]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x39c, Size: 8]
	float TotalDamage;//[Offset: 0x3a4, Size: 4]
	float VehicleDamageAmount;//[Offset: 0x3a8, Size: 4]
	int OpenAirDropBoxesNum;//[Offset: 0x3ac, Size: 4]
	int FollowState;//[Offset: 0x3b0, Size: 4]
	FString[] DestroyVehicleFlow;//[Offset: 0x3b4, Size: 12]
	int UseHelicoperNum;//[Offset: 0x3c0, Size: 4]
	float UseHelicoperDistance;//[Offset: 0x3c4, Size: 4]
	int RevivalNum;//[Offset: 0x3c8, Size: 4]
	int BeRevivedNum;//[Offset: 0x3cc, Size: 4]
	int DrivingHelicopterTime;//[Offset: 0x3d0, Size: 4]
	int InHelicopterTime;//[Offset: 0x3d4, Size: 4]
	int SnowBoardJumpActionCount;//[Offset: 0x3d8, Size: 4]
	int EmoteOnTelpherCount;//[Offset: 0x3dc, Size: 4]
	int[] FindBlackMonsterIDs;//[Offset: 0x3e0, Size: 12]
	int KillSnowManCount;//[Offset: 0x3ec, Size: 4]
	<enum,int> EventCounterMap;//[Offset: 0x3f0, Size: 60]
	<int,int> GeneralCounterMap;//[Offset: 0x42c, Size: 60]
	TLog_Micphone MicphoneTlog;//[Offset: 0x468, Size: 24]
	int NormalItemNum;//[Offset: 0x480, Size: 4]
	int SeniorItemNum;//[Offset: 0x484, Size: 4]
	SpecialWeaponRecord[] SpecicalWeaponRecordList;//[Offset: 0x488, Size: 12]

--------------------------------
Class: GrenadeDamageRecord
	int HitCount;//[Offset: 0x0, Size: 4]
	int[] HitDistanceArray;//[Offset: 0x4, Size: 12]
	GrenadeDamageRecordItem[] Grenades;//[Offset: 0x10, Size: 12]

--------------------------------
Class: GrenadeDamageRecordItem
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int FireCount;//[Offset: 0x8, Size: 4]
	int KillCount;//[Offset: 0xc, Size: 4]
	int KnockNumber;//[Offset: 0x10, Size: 4]
	int AvatarID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: KniveDamageRecord
	int HeadShootCount;//[Offset: 0x0, Size: 4]
	int LimbsShootCount;//[Offset: 0x4, Size: 4]
	int BodyShootCount;//[Offset: 0x8, Size: 4]
	int HandShootCount;//[Offset: 0xc, Size: 4]
	int FootShootCount;//[Offset: 0x10, Size: 4]
	KniveDamageRecordItem[] Knives;//[Offset: 0x14, Size: 12]

--------------------------------
Class: KniveDamageRecordItem
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int KillCount;//[Offset: 0x8, Size: 4]
	int KnockNumber;//[Offset: 0xc, Size: 4]
	int AvatarID;//[Offset: 0x10, Size: 4]
	int TotalUseTime;//[Offset: 0x14, Size: 4]
	int TotalOwnTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SpecialWeaponRecord
	int WeaponId;//[Offset: 0x0, Size: 4]
	int FireCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DamageInfo
	uint32 DamageType;//[Offset: 0x0, Size: 4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float Distance;//[Offset: 0x8, Size: 4]
	uint32 Time;//[Offset: 0xc, Size: 4]
	uint32 DamageValue;//[Offset: 0x10, Size: 4]
	uint32 AttackerID;//[Offset: 0x14, Size: 4]
	Vector AttackerLoc;//[Offset: 0x18, Size: 12]
	uint32 AttackerBulletNumInClip;//[Offset: 0x24, Size: 4]
	uint32 AttackerSightType;//[Offset: 0x28, Size: 4]
	uint32 AttackerWeaponType;//[Offset: 0x2c, Size: 4]
	uint32 AttackerShotTimes;//[Offset: 0x30, Size: 4]
	uint64 AttackerState;//[Offset: 0x38, Size: 8]
	bool bAttackerMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	uint64 VictimID;//[Offset: 0x48, Size: 8]
	Vector VictimLoc;//[Offset: 0x50, Size: 12]
	uint32 VictimState;//[Offset: 0x5c, Size: 4]
	bool bVictimInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	int VictimVehicleType;//[Offset: 0x64, Size: 4]
	uint32 AttackerAreaID;//[Offset: 0x68, Size: 4]
	uint32 AlivePlayerNum;//[Offset: 0x6c, Size: 4]
	uint32 VictimTeamID;//[Offset: 0x70, Size: 4]
	int FloorType;//[Offset: 0x74, Size: 4]
	uint32 AttackerWeaponAvatarID;//[Offset: 0x78, Size: 4]
	uint32 AttackerVehicleShapeType;//[Offset: 0x7c, Size: 4]

--------------------------------
Class: CharacterAutoFollowStruct
	bool IsFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Target;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterLocAndRot
	Vector Loc;//[Offset: 0x0, Size: 12]
	Rotator Rot;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VisualFieldInfo
	int ViewerLayerID;//[Offset: 0x0, Size: 4]
	VisualFieldMetaInfo[] VisualFieldMetaInfoList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VisualFieldMetaInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	int LayerID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DriveCarNotify
	byte DriveCar;//[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Character;//[Offset: 0x4, Size: 4]
	STExtraWheeledVehicle* Vehicle;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	STVehicleWheelDustConfig* DustConfig;//[Offset: 0xf70, Size: 4]
	ParticleSystemComponent* DustPSC;//[Offset: 0xf74, Size: 4]
	ParticleSystemComponent*[] PSCs;//[Offset: 0xf84, Size: 12]
	class TrailMarkActor* TrailMarkClass;//[Offset: 0xf90, Size: 40]
	TrailMarkActor* WeakTrailMarkActor;//[Offset: 0xfb8, Size: 8]
	STExtraVehicleMovementComponent4W* VehicleMovement;//[Offset: 0xfc0, Size: 4]
	float TorqueMultiplierforBoosting;//[Offset: 0xfc8, Size: 4]
	float WheelEffectUpdateInterval;//[Offset: 0xfcc, Size: 4]
	bool bWheelEffectUseSocketBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd0, Size: 1]
	int ValidTransformMinWheelNum;//[Offset: 0xfd4, Size: 4]
	delegate OnVehicleWheelLanded;//[Offset: 0xfd8, Size: 12]
	float MinLandingWheelSuspensionOffset;//[Offset: 0xfe4, Size: 4]
	delegate OnVehicleGearChanged;//[Offset: 0xfe8, Size: 12]
	AkAudioEvent* Sfx_MoveConcrete;//[Offset: 0xffc, Size: 4]
	AkAudioEvent* Sfx_MoveMud;//[Offset: 0x1000, Size: 4]
	AkAudioEvent* Sfx_MoveWater;//[Offset: 0x1004, Size: 4]
	AkAudioEvent* Sfx_Slip;//[Offset: 0x1008, Size: 4]
	AkAudioEvent* Sfx_TireExplosion;//[Offset: 0x100c, Size: 4]
	AkAudioEvent* Sfx_GearUp;//[Offset: 0x1010, Size: 4]
	AkAudioEvent* Sfx_GearDown;//[Offset: 0x1014, Size: 4]
	CurveFloat* Sfx_RPMRelativeCurve;//[Offset: 0x1018, Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x101c, Size: 4]
	STExtraVehicleSfxLoop WheelSlipSfxLoop;//[Offset: 0x1020, Size: 92]
	STExtraVehicleWheelSfxOnSurface WheelSfxOnSurface;//[Offset: 0x107c, Size: 76]
	AkComponent* AkComp_WheelFriction;//[Offset: 0x10c8, Size: 4]
	float RTPC_Throttle_InterpSpeed_Up;//[Offset: 0x10e0, Size: 4]
	float RTPC_Throttle_InterpSpeed_Down;//[Offset: 0x10e4, Size: 4]
	float WheelSfxUpdateInterval;//[Offset: 0x110c, Size: 4]
	ParticleSystem* PlumeSmokeTemplate;//[Offset: 0x1114, Size: 4]
	FString LoopSmokeCmpName;//[Offset: 0x1118, Size: 12]
	STReplicatedVehicleState STReplicatedState;//[Offset: 0x1124, Size: 12]
	bool ShouldDestroyPhysxWhileFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1130, Size: 1]
	float ExtraBoostFactor;//[Offset: 0x1134, Size: 4]
	FName IsStoppedBlackboardKeyName;//[Offset: 0x1188, Size: 8]
	FName TargetLocationBlackboardKeyName;//[Offset: 0x1190, Size: 8]
	FName PathingLocationBlackboardKeyName;//[Offset: 0x1198, Size: 8]
	FName PathInputLocationBlackboardKeyName;//[Offset: 0x11a0, Size: 8]
	void STServerUpdateState(int8 InSteeringInput, int8 InThrottleInput, int8 InBrakeInput, int8 InHandbrakeInput, int8 CurrentGear);// 0x2248360
	void SetHandBrake(float Rate);// 0x1f378cc
	void SetBoosting(bool bEnalbed);// 0x222e0ec
	void PostLoadFPPMesh();// 0x2163628
	void OnWheelsLanded();// 0x224834c
	void OnRep_ReplicatedState();// 0x1ee1bb4
	void OnGearChanged(bool bIsUp);// 0x22482cc
	void MulticastDrawNavigationDebug(float DeltaSeconds, Vector TargetLocation, Vector PathingLocation, Vector PathInputLocation);// 0x2248174
	void MulticastDrawAvoidanceDebugLineTraceSingle(float DeltaSeconds, Vector LineTraceStart, Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x2247fe0
	void MulticastDrawAvoidanceDebugLineTraceMulti(float DeltaSeconds, Vector LineTraceStart, Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x2247e4c
	void MulticastDrawAvoidanceDebugBoxTraceSingle(float DeltaSeconds, Vector BoxTraceStart, Vector BoxTraceEnd, Vector BoxHalfSize, Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x2247bf8
	void MulticastDrawAvoidanceDebugBoxTraceMulti(float DeltaSeconds, Vector BoxTraceStart, Vector BoxTraceEnd, Vector BoxHalfSize, Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x22479a4
	void MoveRight(float Rate);// 0x2247924
	void MoveForward(float Rate);// 0x22478a4
	float GetVehicleSpeed();// 0x224787c
	float GetVehicleSlip();// 0x224784c
	Vector GetRotationInputDir();// 0x2143b40
	int GetCurrentGear(float MinRot);// 0x22477cc
	float GetBoostFactor();// 0x224779c
	void BroadcastClientVehicleWheelDestroyEffect();// 0x2247780

--------------------------------
Class: STVehicleWheelDustConfig.DataAsset.Object
	STVehicleWheelDust[] WheelDusts;//[Offset: 0x20, Size: 12]

--------------------------------
Class: STVehicleWheelDust
	byte ContactSurface;//[Offset: 0x0, Size: 1]
	ParticleSystem* MoveFx;//[Offset: 0x4, Size: 4]
	ParticleSystem* SlipFx;//[Offset: 0x8, Size: 4]
	ParticleSystem* HubFx;//[Offset: 0xc, Size: 4]
	float minSpeed;//[Offset: 0x10, Size: 4]

--------------------------------
Class: TrailMarkActor.Actor.Object
	int MaxQuadNum;//[Offset: 0x2fc, Size: 4]
	float MaxQuadLength;//[Offset: 0x300, Size: 4]
	float QuadDirectionAcceptAngle;//[Offset: 0x304, Size: 4]
	MaterialInterface* TrailMarkMaterial;//[Offset: 0x308, Size: 4]
	float DefaultTrailWidth;//[Offset: 0x30c, Size: 4]
	bool bUseTrailLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	float DefaultTrailLength;//[Offset: 0x314, Size: 4]
	float TextureLength;//[Offset: 0x318, Size: 4]
	int USegmentNum;//[Offset: 0x31c, Size: 4]
	int CoordU;//[Offset: 0x320, Size: 4]
	int SlippingCoordU;//[Offset: 0x324, Size: 4]
	int BrokenCoordU;//[Offset: 0x328, Size: 4]
	bool bUseAdditionalType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	float AdditionalTrailWidth;//[Offset: 0x330, Size: 4]
	float AdditionalTextureLength;//[Offset: 0x334, Size: 4]
	int AdditionalCoordU;//[Offset: 0x338, Size: 4]
	int AdditionalSlippingCoordU;//[Offset: 0x33c, Size: 4]
	int AdditionalBrokenCoordU;//[Offset: 0x340, Size: 4]
	bool bDeferUpdateTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	RuntimeMeshComponent* TrailMesh;//[Offset: 0x348, Size: 4]
	void UpdateInput(out const TrailMarkInputData[] NewInput);// 0x2264d5c
	void StopUpdate();// 0x2264d48
	bool IsUpdating();// 0x2264d20

--------------------------------
Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate CollisionUpdated;//[Offset: 0x5d8, Size: 12]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e4, Size: 1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e5, Size: 1]
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e6, Size: 1]
	enum CollisionMode;//[Offset: 0x5e7, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x5e8, Size: 4]
	RuntimeMeshCollisionSection[] MeshCollisionSections;//[Offset: 0x60c, Size: 12]
	RuntimeConvexCollisionSection[] ConvexCollisionSections;//[Offset: 0x618, Size: 12]
	BoxSphereBounds LocalBounds;//[Offset: 0x624, Size: 28]
	RuntimeMeshComponentPrePhysicsTickFunction PrePhysicsTick;//[Offset: 0x640, Size: 60]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x67c, Size: 12]
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles);// 0x52fe070
	void SetSectionTessellationTriangles(int SectionIndex, out const int[] TessellationTriangles, bool bShouldMoveArray);// 0x52fdf10
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x52fde4c
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x52fdd88
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x52fdcc4
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x52fdb1c
	void RuntimeMeshCollisionUpdatedDelegate__DelegateSignature();// 0x2bb69b8
	bool IsMeshSectionVisible(int SectionIndex);// 0x52fda9c
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x52fda1c
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x52fd99c
	int GetNumSections();// 0x52fd974
	int GetLastSectionIndex();// 0x52fd94c
	int FirstAvailableMeshSectionIndex();// 0x52fd924
	void EndBatchUpdates();// 0x52fd910
	bool DoesSectionExist(int SectionIndex);// 0x52fd890
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles, enum UpdateFrequency);// 0x52fd2a0
	void CookCollisionNow();// 0x52fd28c
	void ClearMeshSection(int SectionIndex);// 0x52fd214
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x52fd19c
	void ClearCollisionConvexMeshes();// 0x52fd188
	void ClearAllMeshSections();// 0x52fd174
	void ClearAllMeshCollisionSections();// 0x52fd160
	void BeginBatchUpdates();// 0x52fd144
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x52fcfe8

--------------------------------
Class: RuntimeMeshCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 12]
	int[] IndexBuffer;//[Offset: 0xc, Size: 12]

--------------------------------
Class: RuntimeConvexCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 12]
	Box BoundingBox;//[Offset: 0xc, Size: 28]

--------------------------------
Class: RuntimeMeshComponentPrePhysicsTickFunction.TickFunction

--------------------------------
Class: RuntimeMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 12]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: TrailMarkInputData
	bool bContainValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Vector Normal;//[Offset: 0x40, Size: 12]
	enum Type;//[Offset: 0x4c, Size: 1]
	bool bBackWheel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]

--------------------------------
Class: STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x36c, Size: 12]
	FName[] ExtraOptBoneNames;//[Offset: 0x378, Size: 12]
	bool bHideWheelPhyBodyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	float DebugVehicleSettingInterval;//[Offset: 0x394, Size: 4]
	VehicleWheel*[] WheelHubs;//[Offset: 0x398, Size: 12]
	STExtraVehicleBase* CharacterOwner;//[Offset: 0x3ac, Size: 4]
	float MaxRPMLimit;//[Offset: 0x4d4, Size: 4]
	float TorqueRate;//[Offset: 0x4d8, Size: 4]
	byte[] SpecialModifyCollisionList;//[Offset: 0x4dc, Size: 12]
	int[] SpecialModifyShapeIndexList;//[Offset: 0x4e8, Size: 12]
	FName RootBodyName;//[Offset: 0x4f8, Size: 8]
	bool bAllowCollisionWeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 1]
	bool IsInAir_bServerCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x501, Size: 1]
	bool IsInAir_bClientCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x502, Size: 1]
	int IsInAir_ShapeIndexToQuery;//[Offset: 0x504, Size: 4]
	float IsInAir_QueryInterval;//[Offset: 0x508, Size: 4]
	float IsInAir_QueryLength;//[Offset: 0x50c, Size: 4]
	delegate OnIsInAirChange;//[Offset: 0x510, Size: 12]
	bool IsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	bool DynamicChangeDragCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 1]
	float DragCoefficientInAir;//[Offset: 0x528, Size: 4]
	void SetVehicleToRestState();// 0x2240f8c
	void SetTransmissionSetup(out const VehicleTransmissionData NewTransmissionSetup);// 0x2240ec0
	void SetSuspensionIgnoreMask(int InIgnoreMask);// 0x2240e48
	void SetEngineSetup(out const VehicleEngineData NewEngineSetup);// 0x2240ce0
	void SetDragCoefficient(float InDragCoefficient);// 0x2240c60
	void SetDifferentialSetup(out const VehicleDifferential4WData NewDifferentialSetup);// 0x2240bdc
	void SetBoosting(float Rate);// 0x1eb8778
	void RefreshBodyCollision();// 0x2240bc8
	void OnExpoldeStopWheel();// 0x2240bb4
	void MoveWheelShapeHeight(float Height);// 0x2240b3c
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x2240a3c
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x22408b0
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x22407b0
	int GetSuspensionIgnoreMask();// 0x2240788
	int GetNumWheelsNotInAir();// 0x2240760
	Vector GetLinearVelocity();// 0x2240718
	Transform GetCMassLocalPose();// 0x22406b8
	void ForceWheelsRotate(float DriveTorque);// 0x2240640
	void ClearDestroyedWheel();// 0x224062c
	void ChangeDragCoefficientInInAir();// 0x2240618

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x260, Size: 108]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x2cc, Size: 28]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x2e8, Size: 40]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x310, Size: 88]
	float AckermannAccuracy;//[Offset: 0x368, Size: 4]

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 88]
	float MaxRPM;//[Offset: 0x58, Size: 4]
	float MOI;//[Offset: 0x5c, Size: 4]
	float DampingRateFullThrottle;//[Offset: 0x60, Size: 4]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x64, Size: 4]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x68, Size: 4]

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0, Size: 1]
	float FrontRearSplit;//[Offset: 0x4, Size: 4]
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 4]
	float RearLeftRightSplit;//[Offset: 0xc, Size: 4]
	float CentreBias;//[Offset: 0x10, Size: 4]
	float FrontBias;//[Offset: 0x14, Size: 4]
	float RearBias;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WheelSfxConfig.DataAsset.Object
	WheelSfxOnSurface[] WheelSfxOnSurface;//[Offset: 0x20, Size: 12]

--------------------------------
Class: WheelSfxOnSurface
	PhysicalMaterial* SurfaceMaterial;//[Offset: 0x0, Size: 4]
	AkAudioEvent* EventStart;//[Offset: 0x4, Size: 4]
	AkAudioEvent* EventStop;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraVehicleWheelSfxOnSurface.STExtraVehicleSfxLoopBase
	PhysicalMaterial* LastSurfaceMaterial;//[Offset: 0x40, Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x44, Size: 4]

--------------------------------
Class: STReplicatedVehicleState
	int8 SteeringInput;//[Offset: 0x0, Size: 1]
	int8 ThrottleInput;//[Offset: 0x1, Size: 1]
	int8 BrakeInput;//[Offset: 0x2, Size: 1]
	int8 HandbrakeInput;//[Offset: 0x3, Size: 1]
	int8 CurrentGear;//[Offset: 0x4, Size: 1]
	int Flag;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameModePlayerAliasShowInfo
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x0, Size: 52]
	FString PlayerName;//[Offset: 0x34, Size: 12]
	STExtraBaseCharacter* Character;//[Offset: 0x40, Size: 4]

--------------------------------
Class: MonsterTreasureBoxData
	float BoxStartTime;//[Offset: 0x0, Size: 4]
	Vector BoxLocation;//[Offset: 0x4, Size: 12]
	uint64 BoxStartPlayer;//[Offset: 0x10, Size: 8]

--------------------------------
Class: BuildMaterialData
	int MatID;//[Offset: 0x0, Size: 4]
	int MatCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerStaticInfoInOB
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PlayerOpenID;//[Offset: 0xc, Size: 12]
	FString PicUrl;//[Offset: 0x18, Size: 12]
	int TeamID;//[Offset: 0x24, Size: 4]
	FString TeamName;//[Offset: 0x28, Size: 12]
	uint64 UId;//[Offset: 0x38, Size: 8]
	uint32 PlayerKey;//[Offset: 0x40, Size: 4]

--------------------------------
Class: CharacterBuffRecord
	int BuffID;//[Offset: 0x0, Size: 4]
	int CauseSkillID;//[Offset: 0x4, Size: 4]
	int LayerCount;//[Offset: 0x8, Size: 4]
	Actor* Causer;//[Offset: 0xc, Size: 8]

--------------------------------
Class: MarkSyncData
	enum Status;//[Offset: 0x0, Size: 1]
	int TypeId;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]
	Rotator Rotation;//[Offset: 0x14, Size: 12]
	int InstanceID;//[Offset: 0x20, Size: 4]
	CustomMarkEventData CustomMarkEvent;//[Offset: 0x24, Size: 28]
	enum MapAdded;//[Offset: 0x40, Size: 1]
	int ActorUniqueID;//[Offset: 0x44, Size: 4]
	Actor* Actor;//[Offset: 0x48, Size: 8]
	bool bIsLuaConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool bLocalData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	Property*[] DeltaProperties;//[Offset: 0x54, Size: 12]

--------------------------------
Class: CustomMarkEventData
	float CreateTime;//[Offset: 0x0, Size: 4]
	int CustomState;//[Offset: 0x4, Size: 4]
	FString CustomString;//[Offset: 0x8, Size: 12]
	enum InWhichMap;//[Offset: 0x14, Size: 1]
	int CustomCanvasTag;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WeaponManagerBaseComponent.WeaponManagerComponent.ActorComponent.Object
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x4dc, Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x4e8, Size: 12]
	DefaultWeaponHolderInfo[] WeaponInfoList;//[Offset: 0x4f4, Size: 12]
	bool StopFireFilter(STExtraShootWeapon* ShootWeapon);// 0x23000c8
	void StopFire(STExtraShootWeapon* ShootWeapon);// 0x2300050
	bool StartFireFilter(STExtraShootWeapon* ShootWeapon);// 0x22fffc8
	void StartFireBySlot(byte Slot, byte ShootMode);// 0x22fff0c
	STExtraWeapon* SpawnWeaponOnServer(class STExtraWeapon Template, int WeaponType, int WeaponId, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x22ffccc
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x22ffab8
	bool ReloadWeaponFilter(STExtraShootWeapon* ShootWeapon);// 0x22ffa30
	bool ReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x22ff9b0
	void OnRep_CurrentWeaponReplicated();// 0x207de08
	void OnReconnectOnServer();// 0x1eefba8
	void LocalStopFire(STExtraShootWeapon* ShootWeapon);// 0x22ff938
	void LocalStartFire(STExtraShootWeapon* ShootWeapon, byte ShootMode, Vector SimpleShootTarget, Vector2D ClientScreenSize);// 0x22ff7ec
	void LocalStartBarrel(STExtraShootWeapon* ShootWeapon);// 0x22ff774
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x22ff6c4
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x22ff608
	void DoAutoReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x22ff590
	void DelayFire(float DelayTime, byte ShootMode);// 0x2278848

--------------------------------
Class: WeaponManagerComponent.ActorComponent.Object
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0xf4, Size: 60]
	FName LeftLogicSocketName;//[Offset: 0x130, Size: 8]
	FName RightLogicSocketName;//[Offset: 0x138, Size: 8]
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x140, Size: 60]
	<FName,byte> LogicSocketToPropSlotMap;//[Offset: 0x17c, Size: 60]
	<FName,class STExtraWeapon> GrenadeLogicSocketToWeaponClassMap;//[Offset: 0x1b8, Size: 60]
	float CheckHasAnyGrenadeTimerSetting;//[Offset: 0x1f4, Size: 4]
	bool ShowMainWeaponModelOnBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	FName CurUseWeaponLogicSocket;//[Offset: 0x200, Size: 8]
	FName CurUseShieldWeaponLogicSocket;//[Offset: 0x208, Size: 8]
	FName NextUseWeaponLogicSocket;//[Offset: 0x210, Size: 8]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x220, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x228, Size: 8]
	bool bUIHasBoundDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	bool bClientHasFinishedHandleSpawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 1]
	bool EnableResyncSpawnPolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232, Size: 1]
	float ResyncTimeBias;//[Offset: 0x234, Size: 4]
	float NextResyncTimestamp;//[Offset: 0x238, Size: 4]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x240, Size: 12]
	delegate ChangeCurrentUsingWeaponDelegate;//[Offset: 0x24c, Size: 12]
	delegate ChangeInventoryDataDelegate;//[Offset: 0x258, Size: 12]
	delegate LocalEquipWeaponFromBackpackFinishedDelegate;//[Offset: 0x264, Size: 12]
	delegate SwapWeaponByPropSlotFinishedDelegate;//[Offset: 0x270, Size: 12]
	delegate SimulatedWeaponChangedDelegate;//[Offset: 0x27c, Size: 12]
	delegate NextUseWeaponChangedDelegate;//[Offset: 0x294, Size: 12]
	<FName,STExtraWeapon*> InventoryData;//[Offset: 0x2a0, Size: 60]
	<FName,ItemDefineID> GrenadeLogicSlotAndDefineIDData;//[Offset: 0x2dc, Size: 60]
	STExtraWeapon*[] BackpackPistolList;//[Offset: 0x318, Size: 12]
	WeaponCreateInstance[] TargetCreateArray;//[Offset: 0x328, Size: 12]
	SpawnAndBackpackWeaponReplicatedData[] WeaponCreatePool;//[Offset: 0x338, Size: 12]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot1;//[Offset: 0x348, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot2;//[Offset: 0x380, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSubSlot;//[Offset: 0x3b8, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientMeleeSlot;//[Offset: 0x3f0, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientHandPropSlot;//[Offset: 0x428, Size: 56]
	STExtraWeapon* CurrentWeaponReplicated;//[Offset: 0x464, Size: 4]
	STExtraWeapon* TemporaryWeaponReplicated;//[Offset: 0x468, Size: 4]
	STExtraWeapon* CurrentWeaponSimulate;//[Offset: 0x46c, Size: 4]
	STExtraWeapon* CurrentShieldWeaponReplicated;//[Offset: 0x470, Size: 4]
	STExtraWeapon* CurrentShieldWeaponSimulate;//[Offset: 0x474, Size: 4]
	STExtraWeapon* OldGrenadeWeaponNeedDestroy;//[Offset: 0x4a4, Size: 4]
	void WeaponSystemDataChangedDelegate__DelegateSignature(out WeaponSystemDataOnSimulateClient TargetChangeSlot);// 0x2bb69b8
	void UpdateOwnerClientCreateWeapon();// 0x23024a4
	void TickHideWeapon();// 0x2302490
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation);// 0x23023cc
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x23023b8
	void SwapWeaponByPropSlotFinishedDelegate__DelegateSignature(byte Slot1, byte Slot2);// 0x2bb69b8
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x22ffab8
	void SimulatedWeaponChangedDelegate__DelegateSignature();// 0x2bb69b8
	void SetNextUseWeaponSlot(byte Slot);// 0x2302340
	void SetGrenadeLogicSocketToWeaponClassMap(<FName,class STExtraWeapon> GrenadeLogicToWeaponClass);// 0x2302194
	void SetCurrentTemporaryWeapon(STExtraWeapon* InVehicleWeapon, bool IsServerCall);// 0x23020d0
	void RefreshWeaponLogicSocketInSpawnDataCacheByPropSlotOnServer(byte Slot);// 0x2302058
	void PushAutoTriggerWeaponEventTaskWhenEquipWeapon(out const AutoTriggerWeaponEventParam Param);// 0x2301f70
	int OverrideShootWeaponInitClip__DelegateSignature(int nWeaponSlot, int nSpecificID);// 0x2bb69b8
	void OnRep_WeaponSystemDataOnSimulateMeleeSlot();// 0x2301f5c
	void OnRep_WeaponSystemDataOnSimulateHandPropSlot();// 0x2301f48
	void OnRep_WeaponSystemDataOnSimulateClientSubSlot();// 0x2301f34
	void OnRep_WeaponSystemDataOnSimulateClientSlot2();// 0x2301f20
	void OnRep_WeaponSystemDataOnSimulateClientSlot1();// 0x2301f0c
	void OnRep_TemporaryWeaponReplicated(STExtraWeapon* LastVehicleWeapon);// 0x2301e94
	void OnRep_NextUseWeaponLogicSocket();// 0x2301e80
	void OnRep_CurrentWeaponReplicated();// 0x207de08
	void OnRep_CurrentWeaponLogicSocket();// 0x2301e6c
	void OnRep_CurrentShieldWeaponReplicated();// 0x2301e58
	void OnReconnectOnServer();// 0x1eefba8
	void OnReconnectOnClient();// 0x1f70088
	void NextUseWeaponChangedDelegate__DelegateSignature();// 0x2bb69b8
	void LogInventoryDataInfo();// 0x2301e44
	bool LocalSwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x2301d34
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x22ff6c4
	void LocalForceFinishSwitchWeapon();// 0x2301d20
	void LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();// 0x2bb69b8
	void LocalEquipWeaponFromBackpackFinishedCallback();// 0x2301d0c
	bool LocalDestroyWeapon(FName SocketName, bool bEnableBroadcast);// 0x2301c30
	void LocalBackpackCurerrentWeaponFinishedCallback();// 0x2301c1c
	void LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();// 0x2bb69b8
	bool IsWeaponSpawnDataCacheIsEmpty();// 0x2301bf4
	bool IsCreatingWeaponOnServer();// 0x2301bc0
	static void InitializeTable(FString MainWeaponTableName);// 0x2301a70
	void HideAllWeapon(bool Hidden, byte HideMask, STExtraWeapon* IgnoreWeapon);// 0x2301964
	void HandleGetWeaponFinished(byte Slot);// 0x20deb70
	FName GetShieldWeaponSlot();// 0x2301924
	STExtraWeapon* GetShieldWeapon();// 0x23018fc
	byte GetPropSlotByLogicSocket(FName LogicSocket);// 0x230187c
	byte GetNextUseWeaponSlot();// 0x2301854
	static MainWeaponTableStruct GetMainWeaponTableRow(int ID);// 0x230174c
	FName GetLogicSocketBySlot(byte Slot);// 0x23016c4
	STExtraWeapon* GetLastUsedWeapon();// 0x2301694
	STExtraWeapon* GetInventoryWeaponByPropSlotOnServerOrAutonomousClient(byte Slot);// 0x2301614
	STExtraWeapon* GetInventoryWeaponByPropSlot(byte Slot);// 0x2301594
	STExtraWeapon* GetInventoryWeaponByLogicSocket(FName LogicSocket);// 0x2301514
	STExtraWeapon* GetInventoryWeaponByDefineID(ItemDefineID DefineID);// 0x2301484
	FName GetGrenadeSpecificSlotNameByWeapon(STExtraWeapon* Weapon);// 0x23013fc
	ItemDefineID GetGrenadeDefindIDBySlot(FName LogicSlot);// 0x2301364
	STExtraWeapon* GetCurrentUsingWeapon();// 0x230133c
	byte GetCurrentUsingPropSlot();// 0x2301314
	FName GetCurrentUsingLogicSocketOnServer();// 0x23012d4
	FName GetCurrentUsingLogicSocket();// 0x23012d4
	STExtraWeapon* GetCurrentTemporaryWeapon();// 0x23012ac
	int GetBagLevel();// 0x1eed008
	STExtraWeapon*[] GetAllInventoryWeaponList(bool bForceUseMapData);// 0x230119c
	ItemDefineID[] GetAllInventoryWeaponIDList(bool bForceUseMapData);// 0x230108c
	void ForceBroadcastChangeAllInventoryDataEvent();// 0x2301078
	void EnableAllBroadcast(bool bEnable);// 0x2300ffc
	void DropWeapon(STExtraWeapon* Weapon, enum Reason);// 0x2300f38
	void DeleteGrenadeSlotAndDefindID(FName LogicSlot);// 0x2300ec0
	void DebugReconnectToClientOnServer();// 0x2300eac
	void DebugDisconnetToServerOnClient();// 0x2300e98
	void ChangeInventoryDataDelegate__DelegateSignature(byte TargetChangeSlot, byte EChangeType);// 0x2bb69b8
	void ChangeCurrentUsingWeaponDelegate__DelegateSignature(byte TargetChangeSlot);// 0x2bb69b8
	void AddOrSetGrenadeSlotAndDefindID(FName LogicSlot, ItemDefineID ID);// 0x2300dc4

--------------------------------
Class: WeaponCreateInstance
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int SyncTicket;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WeaponSystemDataOnSimulateClient
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	FName LogicSocket;//[Offset: 0x8, Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	int OperationIndex;//[Offset: 0x30, Size: 4]
	int BagLevel;//[Offset: 0x34, Size: 4]

--------------------------------
Class: AutoTriggerWeaponEventParam
	int TargetOwnerRole;//[Offset: 0x0, Size: 4]
	enum TargetEvent;//[Offset: 0x4, Size: 1]
	ItemDefineID TargetWeaponID;//[Offset: 0x8, Size: 24]
	bool bIgnoreItemIDInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	enum[] ForceExitPawnStateList;//[Offset: 0x24, Size: 12]

--------------------------------
Class: WeaponReconnectReplicateDataWrapper
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x0, Size: 104]
	STExtraWeapon* Weapon;//[Offset: 0x68, Size: 4]

--------------------------------
Class: DefaultWeaponHolderInfo
	class STExtraWeapon* WeaponClass;//[Offset: 0x0, Size: 4]
	FName WeaponSocket;//[Offset: 0x8, Size: 8]
	int WeaponSepcificID;//[Offset: 0x10, Size: 4]
	int WeaponTypeID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: EffectComponent.ActorComponent.Object
	void S2Sim_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x1fa5640
	void S2C_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x1fa541c
	void S2A_EndEffectGraph(int UId);// 0x1ebef5c
	void C2S_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x1fa51b0

--------------------------------
Class: VehicleAIComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate VehicleAINavStateChangedDelegate;//[Offset: 0x14c, Size: 12]
	delegate VehicleAINavStateAllowableDistanceChangedDelegate;//[Offset: 0x158, Size: 12]
	STExtraVehicleAIController* VehicleAIController;//[Offset: 0x198, Size: 4]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x19c, Size: 4]
	AINavStateData AutoDriver_AINavStateData;//[Offset: 0x1a0, Size: 44]
	bool AutoDriver_EnableNoDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	float AutoDriver_MaxAllowableDistanceSquared;//[Offset: 0x1d0, Size: 4]
	float CheckAllowableDistanceInter;//[Offset: 0x1d4, Size: 4]
	Vector[] AutoDrive_RouteList;//[Offset: 0x1d8, Size: 12]
	int[] AutoDrive_BestWaypoint;//[Offset: 0x1e4, Size: 12]
	void StopMoveByHandrake();// 0x22c3218
	void StopAutoDriving();// 0x22c3204
	bool StartAutoDriving();// 0x22c31dc
	void ServerSetAutoDriverTarget(Vector TargetPosition);// 0x22c3130
	void OnRep_AutoDriver_AINavStateData();// 0x22c311c
	bool IsReachDest();// 0x22c30f4
	bool IsAutoDriving();// 0x22c30cc
	bool HasAutoDriveTarget();// 0x22c30a4
	STExtraVehicleAIManager* GetVehicleAIManager();// 0x22c307c
	STExtraVehicleAIController* GetVehicleAIController();// 0x22c3054
	int GetCurrentTargetWaypointIdx();// 0x22c302c
	Vector GetAutoDriveTarget();// 0x22c2fe4
	void EndAutoDriving();// 0x22c2fd0
	void ClearAutoDriveTarget();// 0x22c2fbc
	bool CanAutoDrivingNoDriver();// 0x22c2f94
	bool CanAutoDriving();// 0x22c2f6c
	bool AllowableDistanceAutoDriving(bool CheckDriveTarget);// 0x22c2ee4

--------------------------------
Class: STExtraVehicleAIController.AIController.Controller.Actor.Object
	FName IsDestroyedBlackboardKeyName;//[Offset: 0x3a8, Size: 8]
	FName AIPawnTag;//[Offset: 0x3b0, Size: 8]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x3b8, Size: 4]
	VehicleAIComponent* VehicleAIComp;//[Offset: 0x3bc, Size: 4]
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x2232ba8
	STExtraVehicleAIManager* GetVehicleAIManager();// 0x2232b80
	VehicleAIComponent* GetVehicleAIComp();// 0x2232b58

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x368, Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x368, Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x368, Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x368, Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x368, Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x36c, Size: 4]
	BrainComponent* BrainComponent;//[Offset: 0x370, Size: 4]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x374, Size: 4]
	PawnActionsComponent* ActionsComp;//[Offset: 0x378, Size: 4]
	BlackboardComponent* Blackboard;//[Offset: 0x37c, Size: 4]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x380, Size: 4]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x384, Size: 4]
	delegate ReceiveMoveCompleted;//[Offset: 0x388, Size: 12]
	bool UseGameplayTasksComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 1]
	bool bShareNavigationSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396, Size: 1]
	Vector ShareNavSysOffset;//[Offset: 0x398, Size: 12]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x3a28828
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x3a287b0
	void SetMoveBlockDetection(bool bEnable);// 0x3a28730
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x3a286a8
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x2bb69b8
	void OnUnpossess(Pawn* UnpossessedPawn);// 0x2bb69b8
	void OnPossess(Pawn* PossessedPawn);// 0x2bb69b8
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x3a285e4
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x3a2833c
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x3a280f4
	void K2_SetFocus(Actor* NewFocus);// 0x3a2807c
	void K2_SetFocalPoint(Vector FP);// 0x3a2800c
	void K2_ClearFocus();// 0x3a27ff8
	bool HasPartialPath();// 0x3a27fd0
	PathFollowingComponent* GetPathFollowingComponent();// 0x3a27fb4
	byte GetMoveStatus();// 0x3a27f8c
	Vector GetImmediateMoveDestination();// 0x3a27f44
	Actor* GetFocusActor();// 0x3a27f1c
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x3a27e84
	Vector GetFocalPoint();// 0x3a27e3c
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x3a27e20
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x3a27da8

--------------------------------
Class: STExtraVehicleAIManager.Actor.Object
	bool bOnlySpawnInSafetyZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 1]
	bool bQueueSpawns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 1]
	DataTable* VehicleSpawnDataTable;//[Offset: 0x300, Size: 40]
	FName AIPawnTag;//[Offset: 0x328, Size: 8]
	int MaxConcurrentVehicles;//[Offset: 0x330, Size: 4]
	int MaxVehiclesPerGame;//[Offset: 0x334, Size: 4]
	float SpawnPointCooldown;//[Offset: 0x33c, Size: 4]
	FName CurrentPathKeyName;//[Offset: 0x340, Size: 8]
	FName CurrentPathInputKeyKeyName;//[Offset: 0x348, Size: 8]
	FName PreviousPathInputKeyKeyName;//[Offset: 0x350, Size: 8]
	FName IsPathingInReverseKeyName;//[Offset: 0x358, Size: 8]
	FName IsStoppedKeyName;//[Offset: 0x360, Size: 8]
	FName IsDebugForceStoppedKeyName;//[Offset: 0x368, Size: 8]
	enum AvoidanceMode;//[Offset: 0x370, Size: 1]
	float InitRetryDelay;//[Offset: 0x374, Size: 4]
	int MaxInitRetries;//[Offset: 0x378, Size: 4]
	QueuedVehicleSpawn[] QueuedVehicleSpawns;//[Offset: 0x388, Size: 12]
	STExtraVehicleAISpawner*[] VehicleSpawns;//[Offset: 0x394, Size: 12]
	STExtraAIWaypointSegment*[] VehiclePaths;//[Offset: 0x3a0, Size: 12]
	<PathPoint,bool> PathPointPlayZoneStatus;//[Offset: 0x3ac, Size: 60]
	<PathPoint,PathInputPlayZoneDistanceQuery> PathPointPlayZoneDistances;//[Offset: 0x3e8, Size: 60]
	<STExtraVehicleAISpawner*,float> LastVehicleSpawnTimes;//[Offset: 0x424, Size: 60]
	<FString,float> AllVehiclesDestroyedTimeMap;//[Offset: 0x460, Size: 60]
	float PreviousMatchTime;//[Offset: 0x49c, Size: 4]
	<FName,Object*> CacheUObjectMap;//[Offset: 0x4a0, Size: 60]
	<FString,ActiveVehicleList> ActiveVehiclesMap;//[Offset: 0x4e8, Size: 60]
	AutoDriveAIDataRow[] AutoDriveAIADataSet;//[Offset: 0x734, Size: 12]
	STExtraAIWaypointSegment* SegmentStart;//[Offset: 0x740, Size: 4]
	int SegmentPointIdxStart;//[Offset: 0x744, Size: 4]
	STExtraAIWaypointSegment* SegmentEnd;//[Offset: 0x748, Size: 4]
	int SegmentPointIdxEnd;//[Offset: 0x74c, Size: 4]
	bool bVehicleAIForcecNoActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 1]
	bool bVehicleAIShowIconInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x751, Size: 1]
	float fVehicleHPScaleForTowTeam;//[Offset: 0x754, Size: 4]
	float fVehicleHPScaleForFourTeam;//[Offset: 0x758, Size: 4]
	bool bSyncBuildPathGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75c, Size: 1]
	bool bDebugAllWayPointKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75d, Size: 1]
	bool bDebugAllLinkPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75e, Size: 1]
	bool bDebugFindPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75f, Size: 1]
	int DSSwitchId_SemiTruck;//[Offset: 0x760, Size: 4]
	int DSSwitchId_ModelY;//[Offset: 0x764, Size: 4]
	void ProcessPathPlayZoneStatus();// 0x2233850
	void MulticastDrawPathPointDebug(Vector PointLocation, int ForwardPlayZoneDistance, int ReversePlayZoneDistance);// 0x2233744

--------------------------------
Class: QueuedVehicleSpawn
	Guid ID;//[Offset: 0x0, Size: 16]
	FString SpawnId;//[Offset: 0x10, Size: 12]
	class Pawn* VehicleClass;//[Offset: 0x1c, Size: 4]
	BehaviorTree* BehaviorTree;//[Offset: 0x20, Size: 4]
	BlackboardData* BlackboardData;//[Offset: 0x24, Size: 4]
	SpawnFilter SpawnSettings;//[Offset: 0x28, Size: 28]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x1c, Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0x20, Size: 4]
	BTDecorator*[] RootDecorators;//[Offset: 0x24, Size: 12]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x30, Size: 12]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x3c, Size: 12]
	BTService*[] Services;//[Offset: 0x48, Size: 12]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x20, Size: 12]
	BehaviorTree* TreeAsset;//[Offset: 0x2c, Size: 4]
	BTCompositeNode* ParentNode;//[Offset: 0x30, Size: 4]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 4]
	BTTaskNode* ChildTask;//[Offset: 0x4, Size: 4]
	BTDecorator*[] Decorators;//[Offset: 0x8, Size: 12]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x14, Size: 12]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x3c, Size: 12]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float interval;//[Offset: 0x3c, Size: 4]
	float RandomDeviation;//[Offset: 0x40, Size: 4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 1]
	byte FlowAbortMode;//[Offset: 0x3d, Size: 1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 1]
	uint16 Number;//[Offset: 0x2, Size: 2]

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x20, Size: 4]
	BlackboardEntry[] Keys;//[Offset: 0x24, Size: 12]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 4]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: SpawnFilter
	bool bLimitSpawnPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName[] ValidSpawnPoints;//[Offset: 0x4, Size: 12]
	FName[] InvalidSpawnPoints;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STExtraVehicleAISpawner.Actor.Object
	Guid ID;//[Offset: 0x2fc, Size: 16]
	FString SpawnTag;//[Offset: 0x30c, Size: 12]
	bool bIsSingleUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	SceneComponent* SpawnPoint;//[Offset: 0x31c, Size: 4]
	WaypointNetworkConnection StartingPath;//[Offset: 0x320, Size: 12]
	float InitializeVehicleBehaviorDelay;//[Offset: 0x32c, Size: 4]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	PathPoint[] spawnWayPaths;//[Offset: 0x334, Size: 12]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x340, Size: 4]
	void PostSpawnAI(Pawn* SpawnedVehicle);// 0x1edacf4
	void OnSpawnAI(Pawn* SpawnedVehicle);// 0x1edac74

--------------------------------
Class: WaypointNetworkConnection
	STExtraAIWaypointSegment* ConnectedSegment;//[Offset: 0x0, Size: 4]
	int WaypointIndex;//[Offset: 0x4, Size: 4]
	bool bPathSegmentInReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: STExtraAIWaypointSegment.Actor.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 1]
	bool bAlwaysDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 1]
	SplineComponent* WaypointsSpline;//[Offset: 0x300, Size: 4]
	<int,WaypointNetworkConnectionList> ConnectedSegments;//[Offset: 0x304, Size: 60]
	<int,NodeTargetSpeedOverrides> TargetSpeedOverridesMap;//[Offset: 0x340, Size: 60]
	Pawn*[] PawnsOnForwardPath;//[Offset: 0x37c, Size: 12]
	Pawn*[] PawnsOnReversePath;//[Offset: 0x388, Size: 12]
	void DrawDebug(float DrawTime);// 0x1fa0fcc

--------------------------------
Class: WaypointNetworkConnectionList
	WaypointNetworkConnection[] Connections;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NodeTargetSpeedOverrides
	float ForwardTargetSpeedOverride;//[Offset: 0x0, Size: 4]
	float ForwardMaxSpeedOverride;//[Offset: 0x4, Size: 4]
	float ReverseTargetSpeedOverride;//[Offset: 0x8, Size: 4]
	float ReverseMaxSpeedOverride;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PathPoint
	STExtraAIWaypointSegment* Path;//[Offset: 0x0, Size: 4]
	int InputKey;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PathInputPlayZoneDistanceQuery
	int ForwardDistance;//[Offset: 0x0, Size: 4]
	bool bForwardQueryMade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int ReverseDistance;//[Offset: 0x8, Size: 4]
	bool bReverseQueryMade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: ActiveVehicleList
	Pawn*[] Vehicles;//[Offset: 0x10, Size: 12]

--------------------------------
Class: AutoDriveAIDataRow
	class Pawn* VehicleClass;//[Offset: 0x0, Size: 40]
	BehaviorTree* BehaviorTreeAsset;//[Offset: 0x28, Size: 40]
	BlackboardData* BlackboardDataAsset;//[Offset: 0x50, Size: 40]

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xf0, Size: 4]
	NavigationData* MyNavData;//[Offset: 0xfc, Size: 4]
	void OnNavDataRegistered(NavigationData* NavData);// 0x3a455f8
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3a45488
	Vector GetPathDestination();// 0x3a45440
	byte GetPathActionType();// 0x3a45418

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xc0, Size: 4]
	AIController* AIOwner;//[Offset: 0xc4, Size: 4]
	void StopLogic(FString Reason);// 0x3a34a8c
	void RestartLogic();// 0x1ebefdc
	bool IsRunning();// 0x3a34a5c
	bool IsPaused();// 0x1eed13c

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xbc, Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 4]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xdc, Size: 12]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x3a32f64
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x3a32da8
	void SetValueAsRotator(out const FName KeyName, Rotator RotatorValue);// 0x3a32ccc
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x3a32bf0
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x3a32b14
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x3a32a38
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x3a3295c
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x3a32880
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x3a327a4
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x3a326c0
	bool IsVectorValueSet(out const FName KeyName);// 0x3a3262c
	Vector GetValueAsVector(out const FName KeyName);// 0x3a32588
	FString GetValueAsString(out const FName KeyName);// 0x3a3246c
	Rotator GetValueAsRotator(out const FName KeyName);// 0x3a323c8
	Object* GetValueAsObject(out const FName KeyName);// 0x3a32334
	FName GetValueAsName(out const FName KeyName);// 0x3a32298
	int GetValueAsInt(out const FName KeyName);// 0x3a32204
	float GetValueAsFloat(out const FName KeyName);// 0x3a32170
	byte GetValueAsEnum(out const FName KeyName);// 0x3a320dc
	class Object GetValueAsClass(out const FName KeyName);// 0x3a32048
	bool GetValueAsBool(out const FName KeyName);// 0x3a31fb4
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x3a31ecc
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x3a31de4
	void ClearValue(out const FName KeyName);// 0x3a31d58

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xbc, Size: 12]
	class AISense* DominantSense;//[Offset: 0xc8, Size: 4]
	AIController* AIOwner;//[Offset: 0xe0, Size: 4]
	delegate OnPerceptionUpdated;//[Offset: 0x140, Size: 12]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x14c, Size: 12]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x3a2a684
	void RequestStimuliListenerUpdate();// 0x3a2a670
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x3a2a5b4
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x3a2a4e8
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3a2a3d8
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3a2a2c8
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3a2a1b8
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x3a2a090

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x1c, Size: 4]
	float MaxAge;//[Offset: 0x20, Size: 4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x1c, Size: 4]
	enum NotifyType;//[Offset: 0x20, Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x24, Size: 4]

--------------------------------
Class: AIPerceptionSystem.Object
	AISense*[] Senses;//[Offset: 0x5c, Size: 12]
	float PerceptionAgingRate;//[Offset: 0x68, Size: 4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x3a2b63c
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x3a2b5c4
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x3a2b4c4
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x3a2b408
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x3a2b234

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 4]
	float ExpirationAge;//[Offset: 0x4, Size: 4]
	float Strength;//[Offset: 0x8, Size: 4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 12]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 12]
	FName Tag;//[Offset: 0x28, Size: 8]
	int iExtraData;//[Offset: 0x40, Size: 4]
	int iExtraData;//[Offset: 0x44, Size: 4]
	int iExtraData;//[Offset: 0x48, Size: 4]
	float fExtraData;//[Offset: 0x4c, Size: 4]
	float fExtraData;//[Offset: 0x50, Size: 4]
	float fExtraData;//[Offset: 0x54, Size: 4]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 4]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x4, Size: 12]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xbc, Size: 4]
	PawnActionStack[] ActionStacks;//[Offset: 0xc0, Size: 12]
	PawnActionEvent[] ActionEvents;//[Offset: 0xcc, Size: 12]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 4]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x3a46df8
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x3a46cf0
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x3a46c70
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x3a46bf0

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 4]

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x1c, Size: 4]
	PawnAction* ParentAction;//[Offset: 0x20, Size: 4]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x24, Size: 4]
	Object* Instigator;//[Offset: 0x28, Size: 4]
	BrainComponent* BrainComp;//[Offset: 0x2c, Size: 4]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 1]
	byte GetActionPriority();// 0x3a45cd4
	void Finish(byte WithResult);// 0x3a45c4c
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x3a45b90

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 4]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 12]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xcc, Size: 12]
	GameplayTask*[] TickingTasks;//[Offset: 0xe4, Size: 12]
	GameplayTask*[] KnownTasks;//[Offset: 0xf0, Size: 12]
	delegate OnClaimedResourcesChange;//[Offset: 0x100, Size: 12]
	void OnRep_SimulatedTasks();// 0x3978c58
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x39788e4

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x20, Size: 8]
	enum ResourceOverlapPolicy;//[Offset: 0x2a, Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x44, Size: 4]
	void ReadyForActivation();// 0x3976f64
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x2bb69b8
	void EndTask();// 0x3976f50

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x1c, Size: 4]
	int8 AutoResourceID;//[Offset: 0x20, Size: 1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: AINavStateData
	int CurrentTargetWaypointIdx;//[Offset: 0x0, Size: 4]
	Vector TargetPosition;//[Offset: 0x4, Size: 12]
	Vector StartPosition;//[Offset: 0x10, Size: 12]
	int[] PathWayPoints;//[Offset: 0x1c, Size: 12]
	int PathWayPointNum;//[Offset: 0x28, Size: 4]

--------------------------------
Class: VehicleTriggerComponent.SceneComponent.ActorComponent.Object
	float TriggerRadius;//[Offset: 0x260, Size: 4]
	float TriggerInterval;//[Offset: 0x264, Size: 4]
	float MaxAllowedValidationDiff;//[Offset: 0x268, Size: 4]
	void OnTriggered();// 0x2bb69b8

--------------------------------
Class: STExtraSimpleCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	int iRegionSimpleCharacter;//[Offset: 0xce0, Size: 4]
	int ForceLifePeriodTime;//[Offset: 0xce4, Size: 4]
	bool bClientRegionForceClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce8, Size: 1]
	bool bDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce9, Size: 1]
	bool bIsPreClientDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcea, Size: 1]
	delegate OnDeath;//[Offset: 0xcec, Size: 12]
	float DelayHideDuration;//[Offset: 0xcf8, Size: 4]
	float AnimDeathLifeSpan;//[Offset: 0xcfc, Size: 4]
	bool bForcePlayDeadAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd00, Size: 1]
	float DelayHideDurationByHeadShoot;//[Offset: 0xd04, Size: 4]
	float AnimDeathLifeSpanByHeadShoot;//[Offset: 0xd08, Size: 4]
	float DelayHideDurationByVehicleHit;//[Offset: 0xd0c, Size: 4]
	float AnimDeathLifeSpanByVehicleHit;//[Offset: 0xd10, Size: 4]
	ParticleSystem* HeadShootFX_Red;//[Offset: 0xd14, Size: 4]
	ParticleSystem* HeadShootFX_Green;//[Offset: 0xd18, Size: 4]
	class PlayerTombBox* DropTomb;//[Offset: 0xd1c, Size: 4]
	int MonsterSpawnTime;//[Offset: 0xd20, Size: 4]
	int MonsterDeathTime;//[Offset: 0xd24, Size: 4]
	int IdleBlendSpaceValue;//[Offset: 0xd28, Size: 4]
	bool IsLeftRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2c, Size: 1]
	float AnimBornLifeSpan;//[Offset: 0xd30, Size: 4]
	bool BornOnCeiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd34, Size: 1]
	float AnimLand_Hard_VelocitySquared_Threshold;//[Offset: 0xd38, Size: 4]
	float AnimLand_Hard_LifeSpan;//[Offset: 0xd3c, Size: 4]
	float AnimLand_Light_LifeSpan;//[Offset: 0xd40, Size: 4]
	float AnimActiveLifeSpan;//[Offset: 0xd44, Size: 4]
	SimpleCharAnimParamList CurAnimParamList;//[Offset: 0xd5c, Size: 88]
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0xdb4, Size: 4]
	float MinTimeLockTarget;//[Offset: 0xdb8, Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0xdbc, Size: 4]
	float SensedRadius;//[Offset: 0xdc0, Size: 4]
	float MinTimeLockHeardEnemy;//[Offset: 0xdc4, Size: 4]
	float HeardRadius;//[Offset: 0xdc8, Size: 4]
	float EnableAnimOnDSDistanceSq;//[Offset: 0xdcc, Size: 4]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0xdd0, Size: 4]
	MobAdvancedMovement* MobAdvancedMovement;//[Offset: 0xdd4, Size: 4]
	MobPerceptionController* MobPerceptionController;//[Offset: 0xdd8, Size: 4]
	STExtraSimpleCharacterPhysics* SimpleCharacterPhysics;//[Offset: 0xddc, Size: 4]
	UnitAttrComponent* UnitAttrComp;//[Offset: 0xde0, Size: 4]
	CircleMgrComponent* CircleMgr;//[Offset: 0xdf0, Size: 4]
	int SyncAIState;//[Offset: 0xdf4, Size: 4]
	int AIState;//[Offset: 0xe00, Size: 4]
	float HurtAnimTime;//[Offset: 0xe04, Size: 4]
	float BackAnimPerc;//[Offset: 0xe08, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0xe0c, Size: 4]
	delegate OnEnterAIState;//[Offset: 0xe1c, Size: 12]
	delegate OnLeaveAIState;//[Offset: 0xe28, Size: 12]
	delegate OnBPEnterAIState;//[Offset: 0xe34, Size: 12]
	delegate OnBPLeaveAIState;//[Offset: 0xe40, Size: 12]
	delegate OnChangeAnimParam;//[Offset: 0xe4c, Size: 12]
	delegate OnAnimInstanceAssetLoaded;//[Offset: 0xe58, Size: 12]
	delegate OnAnimListComponentAssetLoaded;//[Offset: 0xe64, Size: 12]
	delegate OnCharacterHitPointDelgate;//[Offset: 0xe84, Size: 12]
	bool bCanSkillSpeedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe90, Size: 1]
	int FlowId;//[Offset: 0xe94, Size: 4]
	FString MonsterName;//[Offset: 0xe98, Size: 12]
	FString MonsterNameID;//[Offset: 0xea4, Size: 12]
	int MonsterSyncID;//[Offset: 0xeb0, Size: 4]
	bool bEnableAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb4, Size: 1]
	int Gold;//[Offset: 0xeb8, Size: 4]
	int SuperGold;//[Offset: 0xebc, Size: 4]
	int[] BornSkill;//[Offset: 0xec0, Size: 12]
	int[] AloneSkillIdList;//[Offset: 0xecc, Size: 12]
	int HealthBarCount;//[Offset: 0xed8, Size: 4]
	bool bIsCrawlChar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xedc, Size: 1]
	int NeedSendAttackFlow;//[Offset: 0xee0, Size: 4]
	float TakeDamageScale;//[Offset: 0xee4, Size: 4]
	float DamageScale;//[Offset: 0xee8, Size: 4]
	Actor* AttackTarget;//[Offset: 0xeec, Size: 8]
	int[] DecalIndexArray;//[Offset: 0xef4, Size: 12]
	<byte,ParticleSystem*> ImpactFXMap;//[Offset: 0xf00, Size: 60]
	<byte,AkAudioEvent*> ImpactSoundMap;//[Offset: 0xf3c, Size: 60]
	byte HitPartJudgment;//[Offset: 0xf78, Size: 1]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0xf7c, Size: 60]
	BodyTypeDef StandBodyDef;//[Offset: 0xfb8, Size: 8]
	PVELagCompensationComponent* PVELagCompensationComponent;//[Offset: 0xfc0, Size: 4]
	CapsuleComponent* ProneCapsuleComponent;//[Offset: 0xfc4, Size: 4]
	float IdleWalkSpeedRatio;//[Offset: 0xfc8, Size: 4]
	float AttackWalkSpeedRatio;//[Offset: 0xfcc, Size: 4]
	float SprintRunSpeedRatio;//[Offset: 0xfd0, Size: 4]
	float SidewaysSpeedRatio;//[Offset: 0xfd4, Size: 4]
	float MaxSpeedModeRatio;//[Offset: 0xfd8, Size: 4]
	float[] CircleDamageRate;//[Offset: 0xfdc, Size: 12]
	int ObjectPoolSize;//[Offset: 0xfe8, Size: 4]
	int LifePeriodTime;//[Offset: 0xfec, Size: 4]
	float KilledDisCircleEdge;//[Offset: 0xff0, Size: 4]
	int MaxHPStageForBroadcast;//[Offset: 0xff4, Size: 4]
	bool bEnableMaxAllowedDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff8, Size: 1]
	float MaxAllowedDistanceFromSpawnPoint;//[Offset: 0xffc, Size: 4]
	bool bMaxAllowedDistanceCheckIn2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1000, Size: 1]
	bool IsHeadShootDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1008, Size: 1]
	int RageLevel;//[Offset: 0x1024, Size: 4]
	float AloneRageTimerRate;//[Offset: 0x1030, Size: 4]
	float ImpluseScale;//[Offset: 0x1034, Size: 4]
	float ImpluseZScale;//[Offset: 0x1038, Size: 4]
	bool EnableOverlapImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103c, Size: 1]
	bool EnableOverlapDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103d, Size: 1]
	float OverlapVehicleDamageRate;//[Offset: 0x1040, Size: 4]
	float OverlapAgainstVehicleDamageRate;//[Offset: 0x1044, Size: 4]
	float MinDamageInterval;//[Offset: 0x1048, Size: 4]
	float MovementTickInterval;//[Offset: 0x104c, Size: 4]
	float DsActorTickInterval;//[Offset: 0x1050, Size: 4]
	bool IsNavWalkMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1054, Size: 1]
	AkAudioEvent* MonsterBornSound;//[Offset: 0x105c, Size: 4]
	AkAudioEvent* MonsterDeadSound;//[Offset: 0x1060, Size: 4]
	AkAudioEvent* MonsterIdleSound;//[Offset: 0x1064, Size: 4]
	AkAudioEvent* MonsterRunSound;//[Offset: 0x1068, Size: 4]
	float NoPathToTargetTimer;//[Offset: 0x106c, Size: 4]
	enum AnimGroupMask;//[Offset: 0x1070, Size: 1]
	bool bEnableTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1071, Size: 1]
	bool bEnableDSTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1072, Size: 1]
	bool ExplodeBeforeDieEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1078, Size: 1]
	int ExplodeSkillID;//[Offset: 0x107c, Size: 4]
	float ExplodeSkillDuration;//[Offset: 0x1080, Size: 4]
	bool CloseCollisionForMeshOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1084, Size: 1]
	AkComponent* SoundComp;//[Offset: 0x1088, Size: 4]
	float LagCompensationRecordInterval;//[Offset: 0x1150, Size: 4]
	float HearRadius;//[Offset: 0x1194, Size: 4]
	float MinTimeLockHeardPos;//[Offset: 0x1198, Size: 4]
	bool bIgnoreNetRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a0, Size: 1]
	bool bSimulateMovementByCharacterMovementComponentOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a1, Size: 1]
	bool bNotifyLuaDamageEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a2, Size: 1]
	bool TestPathSyncToLocation(Vector Location);// 0x2223968
	bool TestPathSyncToActor(Actor* Actor);// 0x22238e8
	void StopMovementMode();// 0x2163470
	void StartMovementMode();// 0x2163f8c
	void ShowHeadShootDeadEffect();// 0x22238d4
	void SetCopyBoneSimpleChar(STExtraSimpleCharacter* InSimpleChar);// 0x222385c
	void ResetCharAnimParam();// 0x2223848
	void OnSmoothComponentSnapshotPreReplicate();// 0x2223834
	void OnRep_SyncAIState();// 0x2223820
	void OnRep_ReplicatedMovement();// 0x1eed16c
	void OnRep_RageLevel();// 0x222380c
	void OnRep_MonsterSyncID();// 0x22237f8
	void OnRep_MonsterNameID();// 0x22237e4
	void OnRep_IsLeftRightMove();// 0x22237c8
	void OnRep_IdleBlendSpaceValue();// 0x22237b4
	void NotifyInitial();// 0x22237a0
	void MulticastPlayerSoundByID(int SoundID);// 0x22236ec
	void LeaveAIState(enum NewState, bool bIsNotify);// 0x2223628
	bool IsSameTeam(Pawn* Other);// 0x21611ac
	bool IsInActiveState();// 0x2223600
	bool IsEnableBroadcastDamage(out const DamageEvent DamageEvent, float Damage);// 0x2223514
	bool IsCanCopyBone();// 0x22234ec
	bool IsBoss();// 0x22234c4
	bool IsBigBoss();// 0x222349c
	bool IsBehemoth();// 0x2223474
	void InitCharAnimParam();// 0x2223460
	bool HasAIState(enum NewState);// 0x22233e0
	void HandleHitByBullet(Actor* Causer);// 0x2223368
	void GotoEarthAndDie();// 0x222334c
	Vector GetVelocity();// 0x22232fc
	AkComponent* GetSoundComponent();// 0x22232d4
	Vector GetServerHeadLocation();// 0x222328c
	STExtraPlayerController* GetPlayerControllerSafety();// 0x215f02c
	int GetMonsterType();// 0x2223270
	FString GetMonsterName();// 0x22231a8
	float GetHitBoxRadius();// 0x222318c
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x2223018
	ExFootIKComponent* GetExFootIKComponent();// 0x2222fe8
	class PlayerTombBox GetDropTomb();// 0x2222fb8
	int GetDeactiveMonsterCount();// 0x2222f90
	byte GetCurHitPartJugementType();// 0x2222f68
	STExtraSimpleCharacter* GetCopyBoneSimpleChar();// 0x2222f40
	SimpleCharAnimParamList GetAnimParam();// 0x2222eb4
	int GetAliveTimeSeconds();// 0x2222e98
	int GetActiveMonsterCount();// 0x2222e70
	void ExplodeBeforeDie(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, Vector _hitImpulseDir, HitResult _hitInfo, bool bIsHeadshot);// 0x2222bb4
	void EnterAIState(enum NewState, bool bIsNotify);// 0x2222af0
	void EnableDSAnim(bool bEnable);// 0x2222a70
	void DisappearOnDeath();// 0x2222a5c
	void DieAfterExplode();// 0x2222a48
	void DelayHidden();// 0x215c318
	void ClearOnDeath(Controller* EventInstigater, out const DamageEvent DamageEvent);// 0x2222968
	bool CheckPlayerNeedUpdateAnimation();// 0x2222940
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x2222834
	void ChangeSourceType(byte NewSourceType);// 0x22227bc
	void BroadcastReliableLeaveAIState(enum NewState, bool bIsNotify);// 0x22226ac
	void BroadcastReliableEnterAIState(enum NewState, bool bIsNotify);// 0x222259c
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2222320
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2222038
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2221dbc
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2221b40
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x22218b0
	void BroadcastClientsSimulateLastPointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2221634
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x22213b8
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x222113c
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2220eb4
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2220bcc
	void BroadcastClientsGMTestDamage(float Damage, float CurHealth, int DamageClassID, byte HitPart);// 0x2220a38
	void BroadcastClientsDebugSpeed(float Speed);// 0x2220984
	void BroadcastClientsDebugOutputDamage(float OutputDmg);// 0x22208d0
	void BPSetEyeEffect(float Switch, LinearColor Color);// 0x2bb69b8
	void BPPreRespawned();// 0x202a924
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x2bb69b8
	void BPNotifyInitial();// 0x2bb69b8
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x2bb69b8
	void BPMonsterInitTableDone();// 0x2bb69b8
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x222075c
	bool BP_HasAIState(enum NewState);// 0x22206dc
	RoadPointInfo[] BleCallGetRoadPoints();// 0x2220614
	bool AllowAIState(enum NewState);// 0x20cee90
	void AddWeaponDamageAddition(byte WeaponType);// 0x222059c

--------------------------------
Class: SimpleCharAnimParamList
	Vector Velocity;//[Offset: 0x0, Size: 12]
	Vector movedir;//[Offset: 0xc, Size: 12]
	byte MovementMode;//[Offset: 0x18, Size: 1]
	Rotator ViewRotation;//[Offset: 0x1c, Size: 12]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	Vector HurtDir;//[Offset: 0x2c, Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 1]
	bool IsLeftRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int RandomAnimID;//[Offset: 0x40, Size: 4]
	int IdleBlendSpaceValue;//[Offset: 0x44, Size: 4]
	float AdditiveYaw;//[Offset: 0x48, Size: 4]

--------------------------------
Class: SimulateSyncSmoothComponent.ActorComponent.Object
	RepSnapshot RepSnapshot;//[Offset: 0xbc, Size: 56]
	RepSnapshot Snapshot;//[Offset: 0xf4, Size: 56]
	float TolerateLocationDiffSqAtServer;//[Offset: 0x12c, Size: 4]
	float TolerateRotationInDegreeAtServer;//[Offset: 0x130, Size: 4]
	float TolerateLinearVelocityDiffSqAtServer;//[Offset: 0x134, Size: 4]
	float TolerateAngularVelocityDiffSqAtServer;//[Offset: 0x138, Size: 4]
	float ForceUpdateLocationDiffSqAtServer;//[Offset: 0x13c, Size: 4]
	float ForceUpdateLinearVelocityDiffSqAtServer;//[Offset: 0x140, Size: 4]
	float FindFloorUpOffset;//[Offset: 0x144, Size: 4]
	float FindFloorDownOffset;//[Offset: 0x148, Size: 4]
	float CapsuleHalfHeight;//[Offset: 0x14c, Size: 4]
	bool bUseFindFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	int CurrentDeviceLevel;//[Offset: 0x154, Size: 4]
	int FindFloorDeviceLevel;//[Offset: 0x158, Size: 4]
	delegate OnSnapshotPreReplicate;//[Offset: 0x15c, Size: 12]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x16c, Size: 212]
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	bool bOpenServerForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 1]
	bool bNoPredict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x242, Size: 1]
	bool bOnlyUpdateRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x243, Size: 1]
	bool bAutonomousProxyEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	bool bIsReplayRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 1]
	delegate OnActorTeleportFinish;//[Offset: 0x248, Size: 12]
	bool bEnableTurnAnimationNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 1]
	bool FlipTurnRightFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x256, Size: 1]
	float MoveMaxSpeedWhenTuring;//[Offset: 0x258, Size: 4]
	bool bAutoUpdateVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	float TurnThreshold;//[Offset: 0x284, Size: 4]
	CurveFloat* TurnTimeCurve;//[Offset: 0x288, Size: 4]
	float TurnSpeed;//[Offset: 0x28c, Size: 4]
	void TeleportNextSync();// 0x20f11c0
	void StopPredict();// 0x20f11ac
	void SetVelocity(out const Vector Velocity);// 0x20f1128
	void SetEnable(bool bInEnable, bool bForceReinit);// 0x20f1058
	void SetAngularVelocity(float PitchSpeed, float YawSpeed, float RollSpeed);// 0x20f0f58
	void OnRep_Snapshot();// 0x20f0f44
	Vector GetVelocity();// 0x20f0efc
	bool GetEnable();// 0x20f0ee0
	Vector FindFloor(const Vector InLocation);// 0x20f0e4c

--------------------------------
Class: RepSnapshot
	float TimeStamp;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize Location;//[Offset: 0x4, Size: 12]
	Rotator Rotation;//[Offset: 0x10, Size: 12]
	Vector_NetQuantize LinearVelocity;//[Offset: 0x1c, Size: 12]
	Vector_NetQuantize AngularVelocity;//[Offset: 0x28, Size: 12]
	bool IsTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: SimulateSyncSmooth
	float MaxPredictMoveTime;//[Offset: 0x0, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x4, Size: 4]
	float SmoothNetUpdateTime;//[Offset: 0x8, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MobAdvancedMovement.ActorComponent.Object
	float WallClimb_AcceptableFaceAngle;//[Offset: 0xbc, Size: 4]
	float WallClimb_TurnFaceSpeed;//[Offset: 0xc0, Size: 4]
	float WallClimb_KeepDistanceToWall;//[Offset: 0xc4, Size: 4]
	float WallClimb_JumpToWallSpeed;//[Offset: 0xc8, Size: 4]
	float WallClimb_JumpToWallHeightOffset;//[Offset: 0xcc, Size: 4]
	float WallClimb_MoveUpSpeed;//[Offset: 0xd0, Size: 4]
	float WallClimb_MoveUpHeightOffset;//[Offset: 0xd4, Size: 4]
	float WallClimb_ClimbToStand_Duration;//[Offset: 0xd8, Size: 4]
	CurveFloat* Curve_ClimbToStand_Forward;//[Offset: 0xdc, Size: 4]
	CurveFloat* Curve_ClimbToStand_Height;//[Offset: 0xe0, Size: 4]
	float WallJump_JumpSpeed;//[Offset: 0xe4, Size: 4]
	float WallJump_JumpAngle;//[Offset: 0xe8, Size: 4]
	float WallJump_ZVelocity;//[Offset: 0xec, Size: 4]
	float Stride_AcceptableFaceAngle;//[Offset: 0xf0, Size: 4]
	float Stride_Duration;//[Offset: 0xf4, Size: 4]
	float Stride_KeepDistanceToWall;//[Offset: 0xf8, Size: 4]
	float Stride_HeightOffset;//[Offset: 0xfc, Size: 4]
	float Stride_ForwardOffset;//[Offset: 0x100, Size: 4]
	float Stride_LineTraceOffset;//[Offset: 0x104, Size: 4]
	CurveFloat* Curve_Stride_Forward;//[Offset: 0x108, Size: 4]
	CurveFloat* Curve_Stride_Height;//[Offset: 0x10c, Size: 4]
	bool Stride_JumpInstead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	int iWallClimbState;//[Offset: 0x114, Size: 4]
	int iWallJumpState;//[Offset: 0x118, Size: 4]
	int iStrideState;//[Offset: 0x11c, Size: 4]
	void WindowJump(Vector DstLoacation, Vector originLocation, float WindowHeight);// 0x204f948
	void WallJump(Vector DstLocation);// 0x204f8d8
	void WallClimbExit();// 0x204f8c4
	void WallClimb(Vector DstLocation, Vector originLocation, float WindowHeight);// 0x204f7bc
	void TickWallJump_Turn(float DeltaTime);// 0x204f744
	void TickWallJump(float DeltaTime);// 0x204f6cc
	void TickWallClimb_Turn(float DeltaTime);// 0x204f654
	void TickWallClimb_JumpToWall(float DeltaTime);// 0x204f5dc
	void TickWallClimb_ClimbUp(float DeltaTime);// 0x204f564
	void TickWallClimb_ClimbToStand(float DeltaTime);// 0x204f4ec
	void TickWallClimb(float DeltaTime);// 0x204f474
	void TickStride_Turn(float DeltaTime);// 0x204f3fc
	void TickStride_Stride(float DeltaTime);// 0x204f384
	void TickStride_MoveToWall(float DeltaTime);// 0x204f30c
	void TickStride(float DeltaTime);// 0x204f294
	void StrideJump();// 0x204f280
	void StrideExit();// 0x204f26c
	void Stride(out Vector DstLocation, out Vector originLocation);// 0x204f194
	void OnMobDie();// 0x204f180
	void NotifyClientsWallClimbSyncState(Vector pos, Rotator Rotator, int nowWallClimbState);// 0x204f074
	void NotifyClientsWallClimbStartClimbToStand(Vector pos, Rotator Rotator, int nowWallClimbState);// 0x204ef68
	void NotifyClientsStrideState(Vector pos, Rotator Rotator, int nowStrideState);// 0x204ee5c
	void NotifyClientsStartStride(Vector pos, Rotator Rotator, int nowStrideState, Vector originLocation, Vector DstLocation, float heightLength, float forwardLength);// 0x204ec08
	bool IsInAdvancedMovement();// 0x204ebe0
	int GetWallJumpState();// 0x204ebb8
	int GetWallClimbState();// 0x204eb90
	int GetStrideState();// 0x204eb68
	void BPWallJump(Vector DstLocation);// 0x204eaf0
	void BPWallClimb(Vector DstLocation);// 0x204ea78

--------------------------------
Class: MobPerceptionController.ActorComponent.Object
	float AcceptableNoiseLoudness;//[Offset: 0xbc, Size: 4]
	enum[] AcceptableNoiseType;//[Offset: 0xc0, Size: 12]
	enum NoiseAttenuationModel;//[Offset: 0xcc, Size: 1]
	int NoisePoolSize;//[Offset: 0xd0, Size: 4]
	float NoiseRememberTime;//[Offset: 0xd4, Size: 4]
	float NoiseUpdateFrequency;//[Offset: 0xd8, Size: 4]
	bool SearchNoise(out NoiseInfo NoiseInfo, enum searchType, BehaviorTreeComponent* BehaviorTree, bool CheckDistance, bool CheckDeadOrDestoryed);// 0x205276c
	void OnPerceptionSenseUpdated(AIPerceptionComponent* PerceptionComponent, out Actor*[] UpdatedActors);// 0x205265c
	void OnMobDie();// 0x2052648
	void ClearNoisePool();// 0x2052648
	NoiseCheckResult CheckNoise(out AIStimulus Stimulus);// 0x20524a8
	float Attenuation(out AIStimulus Stimulus);// 0x2052310
	void AddToNoisePool(Actor* Instigator, out AIStimulus Stimulus, float LoudnessHeard);// 0x20520f4

--------------------------------
Class: NoiseInfo
	enum NoiseType;//[Offset: 0x0, Size: 1]
	Actor* Instigator;//[Offset: 0x4, Size: 8]
	Vector NoiseLocation;//[Offset: 0xc, Size: 12]
	float LoudnessAtStart;//[Offset: 0x18, Size: 4]
	float LoudnessHeard;//[Offset: 0x1c, Size: 4]
	float HeardTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x110, Size: 12]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x3a313bc
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x3a3133c
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x3a31228

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: NoiseCheckResult
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum NoiseType;//[Offset: 0x1, Size: 1]
	float LoudnessHeard;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraSimpleCharacterPhysics.ActorComponent.Object
	float VelocityDampingOnGround;//[Offset: 0xbc, Size: 4]
	float VelocityDampingInMidAir;//[Offset: 0xc0, Size: 4]
	float StepHeight;//[Offset: 0xc4, Size: 4]
	float VehicleHitFeedBack;//[Offset: 0xc8, Size: 4]
	float VehicleImpluseScale;//[Offset: 0xcc, Size: 4]
	float HorizontalVelocitySquaredForSimulate;//[Offset: 0xd0, Size: 4]
	float ResetSimulatePreventPenetrationTime;//[Offset: 0xd4, Size: 4]
	bool bPreventPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x114, Size: 4]
	bool StopSkillSimulate();// 0x22285fc
	bool StartSkillSimulate(Vector InVelocity, bool PreventPenetration);// 0x2228530
	void SetVelocity(Vector InVelocity);// 0x22284c0
	void SetSimulatePhysics(bool bInEnabled);// 0x2228444
	void SetEnabled(bool InEnabled);// 0x22283c8
	void SetCharacterMovementActive(bool _bIsActive);// 0x2228348
	bool IsOnGround();// 0x2228320
	Vector GetVelocity();// 0x22282d8
	bool FindGround();// 0x22282b0
	void AddVelocity(Vector InVelocity);// 0x2228240
	void ActivatePhysics();// 0x222822c

--------------------------------
Class: UnitAttrComponent.ActorComponent.Object
	byte Category;//[Offset: 0xbc, Size: 1]
	byte Type;//[Offset: 0xbd, Size: 1]
	int TypeId;//[Offset: 0xc0, Size: 4]
	void SetActorVisible(bool bEnable);// 0x1f2cc6c

--------------------------------
Class: CircleMgrComponent.TimerRegistComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x148, Size: 12]
	bool GM_IsEnableNarrowCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	bool IsInActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 1]
	bool bIsNotMultiCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x156, Size: 1]
	bool bMakePainToHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x157, Size: 1]
	bool bUseDIYCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	int CustomBeginIndex;//[Offset: 0x15c, Size: 4]
	bool IsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	CirCleCfg[] CircleConfigs;//[Offset: 0x164, Size: 12]
	float DestinyThreshold;//[Offset: 0x170, Size: 4]
	int RoundNum;//[Offset: 0x174, Size: 4]
	bool bEnableDebugMultiCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bEnableLowProbCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	Vector2D LowProbCenter;//[Offset: 0x17c, Size: 8]
	float LowProbCenterRadius;//[Offset: 0x184, Size: 4]
	float LowProbRatio;//[Offset: 0x188, Size: 4]
	bool bEnableInnerCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	class Actor* InnerCircleClass;//[Offset: 0x190, Size: 4]
	float TimeForForbidMakePain;//[Offset: 0x194, Size: 4]
	Actor* InnerCircle;//[Offset: 0x198, Size: 4]
	Vector InnerCircleInfo;//[Offset: 0x19c, Size: 12]
	bool bEnablePrecalculateCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	Vector BlueCircle;//[Offset: 0x1d4, Size: 12]
	Vector WhiteCircle;//[Offset: 0x1e0, Size: 12]
	int CurrentIndex;//[Offset: 0x1ec, Size: 4]
	Actor* ContainActor;//[Offset: 0x1f0, Size: 4]
	bool bCircleCenterInExtend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	delegate OnCircleBegin;//[Offset: 0x2e4, Size: 12]
	delegate OnCircleSizeAndPosChanged;//[Offset: 0x2f0, Size: 12]
	delegate OnCircleInitSizeAndPosChanged;//[Offset: 0x2fc, Size: 12]
	delegate OnCircleInfoChanged;//[Offset: 0x308, Size: 12]
	delegate OnWaveEnded;//[Offset: 0x314, Size: 12]
	delegate OnCircleEnded;//[Offset: 0x320, Size: 12]
	CirleAreaVolume* BindedCirleAreaVolume;//[Offset: 0x32c, Size: 4]
	bool bPreCalculateFirstWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	delegate OnFinishedPreCalculateFirstWhiteCircle;//[Offset: 0x334, Size: 12]
	bool WhitCircleIsOutOfBlueCircle();// 0x1f77ecc
	void StartCircleFromBegin();// 0x1f77eb8
	void SetGMCicleTime(float cdTime, float LastTime);// 0x1f77dbc
	void RetriveGetCircleInfo(out GetCircleInfo CurInfo);// 0x1f77cf4
	void RetriveCircleInfo(out ReConnectGameStateInfo CurInfo);// 0x1f77c14
	void OverrideDestinyChanceByIndex(bool bOverride, float InChance, int CircleIndex);// 0x1f77b08
	void OverrideDestinyChance(bool bOverride, float InChance);// 0x1f77a40
	void MakePain(Actor* _actor, float _desireDamage);// 0x1f77984
	void MakeDesiredCircle(Vector circleInfo, int CircleType);// 0x1f778cc
	bool MakeCurrentWhiteCircle(int Index);// 0x1f77844
	bool IsUseCustomWhiteCircle();// 0x1f7781c
	bool IsPositionInBlueCircle(out const Vector Position);// 0x1f77790
	bool IsInBlueCircle(Actor* _actor);// 0x1f77710
	bool HasDoubleCircleEnabled();// 0x1f776f4
	void GMBeginCircle(int CurIndex, float PosX, float PosY, float PosZ);// 0x1f775ac
	Vector GetWhiteCircle(int Index);// 0x1f7751c
	float GetNeedTotalTimeToCircleIndex(int CircleIndex);// 0x1f7749c
	Vector GetInnerCircleInfo();// 0x1f77478
	Vector GetCustomWhiteCircleConfigByIndex(int CircleIndex, int RandomIndex);// 0x1f773a4
	Vector GetCustomBlueCircleConfigByIndex(int CircleIndex);// 0x1f77314
	Vector GetCurrentWhiteCircle();// 0x1f772f0
	int GetCurrentCircleIndex();// 0x1f772c8
	Vector GetCurrentBlueCircle();// 0x1f772a4
	void ApplyCircleOffset(Vector InOffset);// 0x1f77234

--------------------------------
Class: TimerRegistComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	RegisterTimer[] TimerRegister;//[Offset: 0xc0, Size: 12]
	FString TimerName;//[Offset: 0xcc, Size: 12]

--------------------------------
Class: CirCleCfg
	int CircleID;//[Offset: 0x0, Size: 4]
	float DelayTime;//[Offset: 0x4, Size: 4]
	float RadiusWhenDestoryMap;//[Offset: 0x8, Size: 4]
	float SafeZoneAppeartime;//[Offset: 0xc, Size: 4]
	bool bIsCircleWarningUseFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float[] BlueCirclePreWarning;//[Offset: 0x14, Size: 12]
	CircleWarningConfig[] BlueCirclePreWarningWithFilter;//[Offset: 0x20, Size: 12]
	float LastTime;//[Offset: 0x2c, Size: 4]
	float Pain;//[Offset: 0x30, Size: 4]
	bool bUseCustomBluePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	Vector2D bluepoint;//[Offset: 0x38, Size: 8]
	float blueradius;//[Offset: 0x40, Size: 4]
	bool bUseCustomWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	bool bUseCustomWhiteStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	Vector[] Whitepoints;//[Offset: 0x48, Size: 12]
	float whiteradius;//[Offset: 0x54, Size: 4]
	float Alpha;//[Offset: 0x58, Size: 4]
	bool bUseContainActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float DestinyChance;//[Offset: 0x60, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x68, Size: 4]
	float ExtraRadius;//[Offset: 0x6c, Size: 4]
	bool bEnableDamageMagnifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	float DamageMagnifierRange;//[Offset: 0x74, Size: 4]
	float DamageMagnifier;//[Offset: 0x78, Size: 4]
	CurveFloat* DamageMagnifierCurve;//[Offset: 0x7c, Size: 4]
	Vector[] AvoidPoints;//[Offset: 0x80, Size: 12]
	float EdgeDistance;//[Offset: 0x8c, Size: 4]
	bool bUseAvoidPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]

--------------------------------
Class: CircleWarningConfig
	float WarningTime;//[Offset: 0x0, Size: 4]
	enum WarningState;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CirleAreaVolume.Actor.Object
	BoxComponent* CircleBoxArea;//[Offset: 0x2fc, Size: 4]
	bool bUseRandomPointIfNotFindAValidCircleCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	bool bFixMayBeInOcean;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	bool IsInWater(Vector Position);// 0x1f78c18
	Vector GetRandomPointInArea(Vector Origin, float Radius, bool bTry);// 0x1f78aec

--------------------------------
Class: GetCircleInfo
	bool bIsLessning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CircleStateStartServerWorldSecond;//[Offset: 0x4, Size: 4]
	float CircleStatusLastTime;//[Offset: 0x8, Size: 4]
	float CircleStatusElapsedTime;//[Offset: 0xc, Size: 4]
	byte CircleStatus;//[Offset: 0x10, Size: 1]
	Vector BlueCircle;//[Offset: 0x14, Size: 12]
	Vector OriginalBlueCircle;//[Offset: 0x20, Size: 12]
	Vector WhiteCircle;//[Offset: 0x2c, Size: 12]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x3c, Size: 4]
	float ExtraRadius;//[Offset: 0x40, Size: 4]
	int CurrentCircleIndex;//[Offset: 0x44, Size: 4]

--------------------------------
Class: ReConnectGameStateInfo
	bool bIsLessning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CircleStateStartServerWorldSecond;//[Offset: 0x4, Size: 4]
	float CircleStatusLastTime;//[Offset: 0x8, Size: 4]
	float CircleStatusElapsedTime;//[Offset: 0xc, Size: 4]
	byte CircleStatus;//[Offset: 0x10, Size: 1]
	Vector BlueCircle;//[Offset: 0x14, Size: 12]
	Vector OriginalBlueCircle;//[Offset: 0x20, Size: 12]
	Vector WhiteCircle;//[Offset: 0x2c, Size: 12]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x3c, Size: 4]
	float ExtraRadius;//[Offset: 0x40, Size: 4]
	byte AirAttackStatus;//[Offset: 0x44, Size: 1]
	Vector AirAttackArea;//[Offset: 0x48, Size: 12]
	int AirAttackWave;//[Offset: 0x54, Size: 4]
	int BossCountDown;//[Offset: 0x58, Size: 4]
	Vector BossBornPos;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: RegisterTimer
	int waveIndex;//[Offset: 0x0, Size: 4]
	float[] Times;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BodyTypeDef
	int UpThreshold;//[Offset: 0x0, Size: 4]
	int DownThreshold;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PVELagCompensationComponent.LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	float SimulatedCharacterServerTime();// 0x2033248
	byte ShootSimpleCharacterVerify(STExtraShootWeapon* Weapon, STExtraBaseCharacter* Shooter, out const BulletHitInfoUploadData ShootData);// 0x20c4bf4

--------------------------------
Class: LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	int KeepStillMinTime;//[Offset: 0x228, Size: 4]
	float StillMaxSpeed;//[Offset: 0x22c, Size: 4]
	Vector StandStillBoundBoxExtent;//[Offset: 0x230, Size: 12]
	Vector StandStillHeadBoundBoxExtent;//[Offset: 0x23c, Size: 12]
	Vector StandStillHeadBoxOffset;//[Offset: 0x248, Size: 12]
	Vector CrouchStillBoundBoxExtent;//[Offset: 0x254, Size: 12]
	Vector CrouchStillHeadBoundBoxExtent;//[Offset: 0x260, Size: 12]
	Vector CrouchStillHeadBoxOffset;//[Offset: 0x26c, Size: 12]
	float WeaponOffsetStillScale;//[Offset: 0x278, Size: 4]
	Vector StandStillBoundBoxExtentPicth;//[Offset: 0x27c, Size: 12]
	Vector StandStillHeadBoundBoxExtentPicth;//[Offset: 0x288, Size: 12]
	Vector CrouchStillBoundBoxExtentPicth;//[Offset: 0x294, Size: 12]
	Vector CrouchStillHeadBoundBoxExtentPicth;//[Offset: 0x2a0, Size: 12]
	DistanceContinueHitCheck DistanceContinueHitCheck;//[Offset: 0x2ac, Size: 44]

--------------------------------
Class: DistanceContinueHitCheck
	float CheckDisSquared;//[Offset: 0x0, Size: 4]
	int MaxContinueTimes;//[Offset: 0x4, Size: 4]
	float ShootIntervalBuff;//[Offset: 0x8, Size: 4]
	float MaxCheatTimes;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ExFootIKComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 1]
	float UpwardDetectionDistance;//[Offset: 0x5b8, Size: 4]
	float DownwardDetectionDistance;//[Offset: 0x5bc, Size: 4]
	float DetectionSphereRadius;//[Offset: 0x5c0, Size: 4]
	byte DetectionCollisionChannel;//[Offset: 0x5c4, Size: 1]
	float InterpSpeed;//[Offset: 0x5c8, Size: 4]
	bool bEnableIKEffectorRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 1]
	bool bEnableKEffectorOffsetMinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cd, Size: 1]
	float ScaleOfPawn;//[Offset: 0x5d0, Size: 4]
	<FName,ExFootIKInfo> FootIKInfos;//[Offset: 0x5d4, Size: 60]
	bool bEnableOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 1]
	float TickFrequencyPerSecond;//[Offset: 0x614, Size: 4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 1]
	Vector IKEffectorOffsetMinValue;//[Offset: 0x61c, Size: 12]
	void GetIKEffectorRotation(out Rotator OutIKEffectorRotation, out bool bOutIsValid, out const FName InFootIKName);// 0x1fcfd24
	Vector GetIKEffectorOffsetMinValue();// 0x1fcfcf8
	void GetIKEffectorOffset(out Vector OutIKEffectorOffset, out bool bOutIsValid, out const FName InFootIKName);// 0x1fcfb14

--------------------------------
Class: ExFootIKInfo
	FName IKBoneOrSocketName;//[Offset: 0x0, Size: 8]
	FName FixedBoneOrSocketName;//[Offset: 0x8, Size: 8]
	Vector IKBoneOrSocketOffset;//[Offset: 0x10, Size: 12]
	Vector IKEffectorOffset;//[Offset: 0x1c, Size: 12]
	Rotator IKEffectorRotation;//[Offset: 0x28, Size: 12]

--------------------------------
Class: VehicleDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: RadialDamageEvent.DamageEvent
	RadialDamageParams Params;//[Offset: 0x8, Size: 20]
	Vector Origin;//[Offset: 0x1c, Size: 12]
	HitResult[] ComponentHits;//[Offset: 0x28, Size: 12]

--------------------------------
Class: RadialDamageParams
	float BaseDamage;//[Offset: 0x0, Size: 4]
	float MinimumDamage;//[Offset: 0x4, Size: 4]
	float InnerRadius;//[Offset: 0x8, Size: 4]
	float OuterRadius;//[Offset: 0xc, Size: 4]
	float DamageFalloff;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PoisonDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: MeleeDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: FallingDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: DrowningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STBurningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STAirAttackRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: RoadPointInfo
	int ID;//[Offset: 0x0, Size: 4]
	int Radius;//[Offset: 0x4, Size: 4]
	Vector pos;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ExplosionProjectileHitInfo
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector ImpactNormal;//[Offset: 0xc, Size: 12]
	float BulletHitTime;//[Offset: 0x18, Size: 4]
	float BulletLaunchTime;//[Offset: 0x1c, Size: 4]
	float BulletMovedDistance;//[Offset: 0x20, Size: 4]

--------------------------------
Class: ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	bool DisableSimulateBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 1]
	bool DisableServerBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57b, Size: 1]
	Vector ServerShootPos;//[Offset: 0x57c, Size: 12]
	float ServerShootTime;//[Offset: 0x588, Size: 4]
	ProjectileBulletLaunchParams ServerLaunchParams;//[Offset: 0x590, Size: 80]
	bool bIsValidImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f9, Size: 1]
	Controller* CachedInstigator;//[Offset: 0x600, Size: 4]
	void RPC_Multicast_StartLaunch(float Speed, out const Transform Trans, Actor* InOwningWeapon, Actor* InInstigator, uint32 _ShootID);// 0x1f3d620
	void ProjectileComponentHandleShootDamageCallback(NormalProjectileComponent* Comp);// 0x20b5e48
	void OnRep_ServerLaunchParams(out const ProjectileBulletLaunchParams OldParam);// 0x20b5d30
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x1f3d570
	void OnImpact(out const HitResult _ImpactResult);// 0x1f3d4cc
	void HandleBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x20b5b2c

--------------------------------
Class: ProjectileBulletLaunchParams
	float Speed;//[Offset: 0x0, Size: 4]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Actor* OwningWeapon;//[Offset: 0x40, Size: 4]
	Actor* Instigator;//[Offset: 0x44, Size: 4]
	uint32 ShootID;//[Offset: 0x48, Size: 4]

--------------------------------
Class: SeekAndLockWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class Actor[] SeekAndLockTargetClassConfigList;//[Offset: 0x100, Size: 12]
	float SeekAreaPixelSize;//[Offset: 0x10c, Size: 4]
	SeekAndLockStageConfig Stage1Confog;//[Offset: 0x110, Size: 8]
	SeekAndLockStageConfig Stage2Confog;//[Offset: 0x118, Size: 8]
	float ScopeInDelayTime;//[Offset: 0x120, Size: 4]
	float InitialLockFrameLength;//[Offset: 0x124, Size: 4]
	float FinalLockFrameLength;//[Offset: 0x128, Size: 4]
	float MaxSeekDeistance;//[Offset: 0x12c, Size: 4]
	float LineTraceTargetMaxDistance;//[Offset: 0x130, Size: 4]
	float HistoryLockDataMaxCacheTime;//[Offset: 0x134, Size: 4]
	float TrySeekAndGetLockTargetInterval;//[Offset: 0x138, Size: 4]
	float CheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x13c, Size: 4]
	float TraceTargetInterval;//[Offset: 0x140, Size: 4]
	float TraceTargetIntervalNoLaserTrace;//[Offset: 0x144, Size: 4]
	<enum,FString> SeekAndLockStageTipsMap;//[Offset: 0x148, Size: 60]
	<enum,AkAudioEvent*> LockStageBeginSoundConfig;//[Offset: 0x184, Size: 60]
	<enum,AkAudioEvent*> EnemyLockStageBeginSoundConfig;//[Offset: 0x1c0, Size: 60]
	AkAudioEvent* LockStopSoundConfig;//[Offset: 0x1fc, Size: 4]
	AkAudioEvent* EnemyLockStopSoundConfig;//[Offset: 0x200, Size: 4]
	AkAudioEvent* EnemyLaunchRocketSound;//[Offset: 0x204, Size: 4]
	AkAudioEvent* EnemyLaunchRocketStopSound;//[Offset: 0x208, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x20c, Size: 4]
	bool bNeedDrawUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	delegate OnSeekAndLockStageEnterDelegate;//[Offset: 0x214, Size: 12]
	delegate OnChangeTraceTargetLocDelegate;//[Offset: 0x220, Size: 12]
	delegate OnChangeSeekAndLockStageTipDelegate;//[Offset: 0x22c, Size: 12]
	float CurTrySeekAndGetLockTargetInterval;//[Offset: 0x248, Size: 4]
	float CurCheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x24c, Size: 4]
	float CurTraceTargetCountTime;//[Offset: 0x250, Size: 4]
	bool bHasShowSeekAndLock3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 1]
	bool bSeekAndLockAlwaysValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 1]
	bool bSeekAndLockToVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x256, Size: 1]
	bool bSeekAndLockToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x257, Size: 1]
	void ShowEnemyLaunchRocketTips();// 0x20e7bcc
	void SetCurrentLockTarget(Actor* InTarget);// 0x20e7b54
	void RPC_Server_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x20e7a58
	void RPC_Server_NotifyServerCancelLock(Actor* LockTarget);// 0x20e79a4
	void RPC_Client_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x20e78a8
	void RPC_Client_NotifyServerCancelLock(Actor* LockTarget);// 0x20e77f4
	void RemoveTargetList(Actor*[] TargetList);// 0x20e769c
	void RemoveTarget(Actor* Target);// 0x20e7624
	void OnSeekAndLockStageEnterDelegate__DelegateSignature(enum Stage);// 0x2bb69b8
	void OnChangeTraceTargetLocDelegate__DelegateSignature(out const HitResult HitInfo);// 0x2bb69b8
	void OnChangeSeekAndLockStageTipDelegate__DelegateSignature(FString Tip);// 0x2bb69b8
	void InitComplete();// 0x1ee1bb4
	void HandleTargetOutOfSeekArea();// 0x20e7610
	void HandleReconnectOnServer(STExtraWeapon* Weapon);// 0x1f912b8
	void HandleDisconnectOnServer(STExtraWeapon* Weapon);// 0x20e7590
	enum GetCurrentSeekAndLockStage();// 0x20e7560
	Actor* GetCurrentLockTarget();// 0x20e7538
	bool CheckTargetIsVisible(Actor* Target);// 0x2035d98
	bool CheckTargetClassIsIncluedByClassMap(Actor* Target);// 0x20e74b8
	void AddTarget(Actor* Target);// 0x20e7440

--------------------------------
Class: SeekAndLockStageConfig
	float LockTotalTime;//[Offset: 0x0, Size: 4]
	float ShrinkSpeed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MoveAntiCheatComponent.ActorComponent.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 1]
	float MinMoveAntiCheatCheckIntervel;//[Offset: 0xc0, Size: 4]
	int MaxCheatTimes;//[Offset: 0xc4, Size: 4]
	float TolerateDistanceFractor;//[Offset: 0xc8, Size: 4]
	float MaxPacketLossRate;//[Offset: 0xcc, Size: 4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0xd0, Size: 4]
	int MaxTotalMoveCheatTimes;//[Offset: 0xd4, Size: 4]
	int MaxTotalPassWallTimes;//[Offset: 0xd8, Size: 4]
	float MinMoveAntiCheatCheckIntervel2;//[Offset: 0xdc, Size: 4]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	int MaxShootPointPassWall;//[Offset: 0xe4, Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0xe8, Size: 4]
	float MaxSkeletonLength;//[Offset: 0xec, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0xf0, Size: 4]
	int MaxLocusFailTime;//[Offset: 0xf4, Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0xf8, Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0xfc, Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x100, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x104, Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x108, Size: 12]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x114, Size: 12]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x120, Size: 12]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x12c, Size: 12]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x138, Size: 12]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x144, Size: 12]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x150, Size: 12]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x15c, Size: 12]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x168, Size: 12]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x174, Size: 12]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x180, Size: 12]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x18c, Size: 12]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x198, Size: 12]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x1a4, Size: 12]
	MoveCheatAntiStrategy MoveCheatAntiStrategy3;//[Offset: 0x220, Size: 136]
	MoveCheatAntiStrategy2 MoveCheatAntiStrategy4;//[Offset: 0x2a8, Size: 80]
	CharacterZMoveDistanceCheck CharacterZMoveDistanceCheck;//[Offset: 0x2f8, Size: 52]
	ShovelAntiCheat ShovelAntiCheat;//[Offset: 0x330, Size: 120]
	ClientTimeSpeedCheck TimeSpeedCheck;//[Offset: 0x3a8, Size: 60]
	RealtimeMoveSpeedCheck RealtimeMoveSpeedCheck;//[Offset: 0x410, Size: 32]
	MoveCheatAntiStrategy6 MoveCheatAntiStrategy6;//[Offset: 0x430, Size: 1396]
	float MaxJumpHeight;//[Offset: 0x9a8, Size: 4]
	Character* CharacterOwner;//[Offset: 0x9ac, Size: 4]
	bool IsOpenRTPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1c, Size: 1]
	int ServerControlMaxThreshold;//[Offset: 0xa24, Size: 4]
	void SendShovelDataToServer(const ShovelInfo InShovelData);// 0x20627a8
	void RefreshRealMaxJumpHeight();// 0x1ee1bb4
	void Ping2Server(float ServerTime, float ClientTime, const Vector_NetQuantize100 ClientLoc, float MaxSpeed);// 0x206262c
	void Ping2Client(float ServerTime);// 0x20625b4
	void OnPreReconnectOnServer();// 0x20625a0
	bool K2_MoveSweepTest(out const Vector Start, out const Vector End, byte TraceChannel, out HitResult OutHit, bool bSweep, float SphereRadius, float PadLength);// 0x2062334
	void DebugDrawLine(const Vector Start, const Vector End);// 0x2062288
	void ClearJumpLimit();// 0x1ee1bb4

--------------------------------
Class: VerifySwitch
	int PunishThresHold;//[Offset: 0x0, Size: 4]
	bool bShouldPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	int VerifyFailedCnt;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	float MaxAllowClientSideTimeLag;//[Offset: 0x4, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x8, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0xc, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x10, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x14, Size: 4]
	float ServerSendPingIntervel;//[Offset: 0x18, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x1c, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x20, Size: 4]
	int MaxContinuousCheatMoveTimes;//[Offset: 0x24, Size: 4]
	int MaxClientSpeed;//[Offset: 0x28, Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy2
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x4, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x8, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0xc, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x10, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x14, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CharacterZMoveDistanceCheck
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4, Size: 4]
	float MaxAllowMoveZHeight;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ShovelAntiCheat
	float DataSendInterval;//[Offset: 0x0, Size: 4]
	float DataSampleInterval;//[Offset: 0x4, Size: 4]
	float SampleMoveVelocityTorelate;//[Offset: 0x8, Size: 4]
	float CheatLockTime;//[Offset: 0xc, Size: 4]
	int MaxServerClientDeltaCount;//[Offset: 0x10, Size: 4]
	MoveAntiCheatComponent* OwnerMoveAntiCheat;//[Offset: 0x74, Size: 4]

--------------------------------
Class: ClientTimeSpeedCheck
	float CheckTimeDeltaInterval;//[Offset: 0x24, Size: 4]
	float MaxClientTimeDeltaAheadServer;//[Offset: 0x28, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x2c, Size: 4]
	float MaxServerTimeDelta;//[Offset: 0x30, Size: 4]
	float MaxClientAheadServerTotalTime;//[Offset: 0x34, Size: 4]
	int MaxProcessCounterOneFrame;//[Offset: 0x38, Size: 4]

--------------------------------
Class: RealtimeMoveSpeedCheck

--------------------------------
Class: MoveCheatAntiStrategy6
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x8, Size: 4]
	float MaxVectorAccAngel;//[Offset: 0xc, Size: 4]
	float MaxSumVectorLength;//[Offset: 0x10, Size: 4]
	float MaxVectorAccTime;//[Offset: 0x14, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ShovelInfo

--------------------------------
Class: BaseCharacterEffectCom.ActorComponent.Object
	ParticleSystem* DeathFX;//[Offset: 0xbc, Size: 4]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0xc0, Size: 4]
	void HandleOwnerDeath(STExtraBaseCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x1f2af40

--------------------------------
Class: CharacterParachuteComponent.LuaInstancedActorComponent.ActorComponent.Object
	float CurrentDiveRate;//[Offset: 0x154, Size: 4]
	float FreeFall_InputForwardTriggerThreshold;//[Offset: 0x168, Size: 4]
	float FreeFall_InputRightTriggerThreshold;//[Offset: 0x16c, Size: 4]
	float FreeFall_AcceFall;//[Offset: 0x170, Size: 4]
	float FreeFall_MaxFreeFallSpeed;//[Offset: 0x174, Size: 4]
	float FreeFall_MaxFallSpeedChangeAccel;//[Offset: 0x178, Size: 4]
	float FreeFall_AcceForward;//[Offset: 0x17c, Size: 4]
	float FreeFall_MinForwardSpeed;//[Offset: 0x180, Size: 4]
	float FreeFall_MaxForwardSpeed;//[Offset: 0x184, Size: 4]
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0x188, Size: 4]
	float FreeFall_AcceRight;//[Offset: 0x18c, Size: 4]
	float FreeFall_MaxRightSpeed;//[Offset: 0x190, Size: 4]
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0x194, Size: 4]
	float FreeFall_MinPitchForwardAngle;//[Offset: 0x198, Size: 4]
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x19c, Size: 4]
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x1a0, Size: 4]
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x1a4, Size: 4]
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x1a8, Size: 4]
	float FreeFall_MinDiveAngle;//[Offset: 0x1ac, Size: 4]
	float FreeFall_DiveExtraAcceFall;//[Offset: 0x1b0, Size: 4]
	float FreeFall_MaxDiveExtraFallSpeed;//[Offset: 0x1b4, Size: 4]
	bool bOpened_EnableInputMode8Dirs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	float Opened_AcceFall;//[Offset: 0x1bc, Size: 4]
	float Opened_MaxFreeFallSpeed;//[Offset: 0x1c0, Size: 4]
	float Opened_AcceForward;//[Offset: 0x1c4, Size: 4]
	float Opened_MaxForwardSpeed;//[Offset: 0x1c8, Size: 4]
	float Opened_MaxBackwardSpeed;//[Offset: 0x1cc, Size: 4]
	float Opened_MaxForwardExtraFallSpeed;//[Offset: 0x1d0, Size: 4]
	float Opened_MaxBackExtraFallSpeed;//[Offset: 0x1d4, Size: 4]
	float Opened_GlidingSpeedRemainPercent;//[Offset: 0x1d8, Size: 4]
	float Opened_AcceRight;//[Offset: 0x1dc, Size: 4]
	float Opened_MaxRightSpeed;//[Offset: 0x1e0, Size: 4]
	float Opened_MaxLeftRightExtraFallSpeed;//[Offset: 0x1e4, Size: 4]
	float Opened_MaxRollAngle;//[Offset: 0x1e8, Size: 4]
	float Opened_MaxPitchForwardAngle;//[Offset: 0x1ec, Size: 4]
	float Opened_MaxPitchBackAngle;//[Offset: 0x1f0, Size: 4]
	float Opened_MaxYawAngleSpeed;//[Offset: 0x1f4, Size: 4]
	float Opened_RotationInterpSpeed;//[Offset: 0x1f8, Size: 4]
	float ReliableRPCInterval;//[Offset: 0x1fc, Size: 4]
	float UseNewVerifyHeightInParachuteOpen;//[Offset: 0x200, Size: 4]
	float AdjustClientDistanceMinSq;//[Offset: 0x230, Size: 4]
	Vector Launch_InitSpeed;//[Offset: 0x240, Size: 12]
	Vector Launch_SpeedRandomDelta;//[Offset: 0x24c, Size: 12]
	Vector Launch_Accel;//[Offset: 0x258, Size: 12]
	bool Launch_AutoExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 1]
	float Launch_YawRandomDelta;//[Offset: 0x268, Size: 4]
	float Launch_WingUpAngle;//[Offset: 0x26c, Size: 4]
	float Launch_WingForwardDecreaseRate;//[Offset: 0x270, Size: 4]
	float Launch_WingForwardDecreaseConstRate;//[Offset: 0x274, Size: 4]
	float Launch_WingForwardEnterFreeFallSpeed;//[Offset: 0x278, Size: 4]
	float Launch_WingForwardToUpRate;//[Offset: 0x27c, Size: 4]
	float Launch_WingUpDampingRate;//[Offset: 0x280, Size: 4]
	float Launch_WingUpDampingConstRate;//[Offset: 0x284, Size: 4]
	float Launch_MaxWingUpSpeed;//[Offset: 0x288, Size: 4]
	float Launch_WingUpDropPlus;//[Offset: 0x28c, Size: 4]
	delegate OnInitLaunch;//[Offset: 0x290, Size: 12]
	delegate OnResetLaunch;//[Offset: 0x29c, Size: 12]
	delegate OnChangeMovementModeWhenLaunch;//[Offset: 0x2a8, Size: 12]
	delegate OnLanded;//[Offset: 0x2b4, Size: 12]
	float CurrentFallSpeed;//[Offset: 0x2c0, Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x2c4, Size: 4]
	float AllowMaxDistanceSqInParachuteOpen;//[Offset: 0x2c8, Size: 4]
	float MaxZAllowDistance;//[Offset: 0x2cc, Size: 4]
	bool bIsPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	float FollowerDist;//[Offset: 0x2f8, Size: 4]
	float ReletiveStaticNearbyDistanceSquare;//[Offset: 0x2fc, Size: 4]
	bool bEanbleRadiouBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	bool bEanbleRadiouBlurDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]
	MaterialInterface* RadiouBlurMat;//[Offset: 0x360, Size: 40]
	MaterialInterface* RadiouBlurMatCache;//[Offset: 0x388, Size: 4]
	float DistanceToJumpPlaneLoc;//[Offset: 0x390, Size: 4]
	float AutoParachuteStopMoveForwardDistance;//[Offset: 0x394, Size: 4]
	float AutoParachuteMoveForwardRate;//[Offset: 0x398, Size: 4]
	float AutoParachuteOpenMoveForwardRate;//[Offset: 0x39c, Size: 4]
	float AutoParachutePitchOffset;//[Offset: 0x3a0, Size: 4]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x1f6e538
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation);// 0x1f6e39c
	void UpdateRadiouBlurState(float DeltaTime, float ThrottleInput, float SteerInput, enum State);// 0x1f6e254
	void UpdateParachuteState(float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation);// 0x1f6e0b8
	void UpdateParachuteOpenedRotation(float InputForward, float InputRight, float DeltaTime);// 0x1f6dfb8
	void UpdateLaunchRotation(float InputForward, float InputRight, float DeltaTime);// 0x1f6deb8
	void UpdateFreeFallRotation(Rotator CameraWorldRotation, float InputForward, float InputRight, float DeltaTime);// 0x1f6dd6c
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput, out const Rotator CameraRotation);// 0x1f6dc18
	void StopParachute();// 0x1f6dc04
	void StartParachute();// 0x1f6dbf0
	void SetParachuteVelocity(out const Vector NewVelocity);// 0x1f6db6c
	void SetAutoParachuteLocation(out const Vector Location);// 0x1f6dae8
	void Set_UseServerAuthorize(const bool InUseServerAuthor);// 0x1f6da68
	void ResetVelocity();// 0x1f6da54
	void RemoveRadiouBlur();// 0x1f6da40
	void PostNetReceiveNewState();// 0x1f6da2c
	void OnPreReconnectOnServer();// 0x1f6da18
	void OnAsyncLoadRadiouBlurDone();// 0x1f6da04
	static bool IsParachuteWindEnable();// 0x1f6d9dc
	bool IsAutoParachutePathPlanningEnable();// 0x1f6d9b4
	bool IsAutoParachuteEnable();// 0x1f6d98c
	void InvalidateAdjustFollowerLocation();// 0x1f6d978
	void InitRadiouBlurMat();// 0x1f6d964
	float GetReplicatedRightInput();// 0x1f6d93c
	float GetReplicatedForwardInput();// 0x1f6d914
	Vector GetParachuteVelocity();// 0x1f6d8cc
	Vector GetLaunchInitVelocity();// 0x1f6d87c
	Vector GetCurVelocity();// 0x1f6d834
	float GetAutoParachuteMoveForwardRate();// 0x1f6d80c
	Vector GetAutoParachuteLocation();// 0x1f6d7c4
	void EnableAutoParachutePathPlanning(bool bEnable);// 0x1f6d744
	void EnableAutoParachute(bool bEnable);// 0x1f6d6c4
	void ClearParachuteStatusCache();// 0x1f6d6b0
	Vector CalWingUpVelocity(float InputForward, float InputRight, float DeltaTime);// 0x1f6d58c
	Vector CalParachuteOpenedVelocity(float InputForward, float InputRight, float DeltaTime);// 0x1f6d470
	Vector CalLaunchVelocity(float InputForward, float InputRight, float DeltaTime);// 0x1f6d34c
	Vector CalFreeFallVelocity(float InputForward, float InputRight, float DeltaTime);// 0x1f6d230
	float AngleInterpTo(float Current, float Target, float DeltaTime, float Speed);// 0x1f6d0e0
	void AdjustFollowerLocation();// 0x1f6d0cc
	void AddRadiouBlur(float InWeight);// 0x1f6d054

--------------------------------
Class: LuaInstancedActorComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x104, Size: 12]
	void UnRegistLuaTick();// 0x5238ebc
	void RegistLuaTick(float TickInterval);// 0x5239b08

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xbc, Size: 4]
	float TileRemovalRadius;//[Offset: 0xc0, Size: 4]

--------------------------------
Class: GroupPhysicsComponent.ActorComponent.Object
	PrimitiveComponent*[] PrimitiveComponents;//[Offset: 0xe4, Size: 12]
	void ResetPhysicsGroup();// 0x1ebefdc
	void K2_GroupPhysics(int InMaskFilter, bool EnableCache);// 0x200ff50
	int K2_GetQueryMask();// 0x200ff28
	int K2_GetPhysicsGroup();// 0x200ff00
	bool IsPhysicsGrouped();// 0x200fee4
	void GroupPhysics(byte MaskFilter, bool EnableCache);// 0x200fe18
	byte GetQueryMask();// 0x200fdf0
	byte GetPhysicsGroup();// 0x200fdc8

--------------------------------
Class: GameModePlayerItem
	int ItemTableID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	int[] AdditionIntData;//[Offset: 0x8, Size: 12]

--------------------------------
Class: GameModePlayerPetInfo
	int PetId;//[Offset: 0x0, Size: 4]
	int PetLevel;//[Offset: 0x4, Size: 4]
	int PetCfgId;//[Offset: 0x8, Size: 4]
	int[] PetAvatarList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: UnmannedVehicleSyncData
	enum EUAVUseType;//[Offset: 0x0, Size: 1]
	STExtraVehicleBase* CurrentUnmannedVehicle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STBaseBuffSystemComponent.ActorComponent.Object
	delegate OnBuffAttached;//[Offset: 0xf8, Size: 12]
	delegate OnBuffDetached;//[Offset: 0x104, Size: 12]
	UTBuffSynData[] BuffSyncList;//[Offset: 0x150, Size: 12]
	FString ServerBuffString;//[Offset: 0x15c, Size: 12]
	float BuffSyncRemainingPeriod;//[Offset: 0x168, Size: 4]
	BuffInstancedItem[] AllBuffs;//[Offset: 0x16c, Size: 12]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	bool SetBuffExpiry(FName BuffName, float ExpirySeconds);// 0x23ccaf0
	void ResetForDeath();// 0x23ccadc
	void RepBuffSyncList();// 0x23ccac8
	bool RemoveBuffWithCauser(FName BuffName, bool RemoveLayerOnly, Controller* pCauser);// 0x23cc9ac
	bool RemoveBuffByID(int BuffID, bool RemoveLayerOnly, Controller* pCauser, Actor* BuffApplierActor);// 0x23cc850
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x23cc734
	void RefreshAllBuffs();// 0x2066168
	bool IsBufferMutexed(FName NewBuffName);// 0x23cc6b4
	bool HasBuffID(int BuffID);// 0x23cc634
	bool HasBuff(FName BuffName);// 0x23cc5b4
	Pawn* GetPawnOwner();// 0x23cc58c
	FName GetBuffName(int BuffID);// 0x23cc504
	int GetBuffID(FName BuffName);// 0x23cc484
	float GetBuffExpiry(out const FName BuffName);// 0x23cc3f0
	STBaseBuff* GetBuffByName(FName BuffName);// 0x23cc370
	Actor* GetActorOwner();// 0x23cc348
	void ClientSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x23cc0e8
	void ClientSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x23cc1fc
	void ClientMulticastSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x23cc0e8
	void ClientMulticastSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x23cbf9c
	void ClientMulticastSetBuffExpiry(FName BuffName, float LeftSecondsAfterNow);// 0x23cbed8
	void ClearBuff(bool bDebuff, bool bGainBuff);// 0x23cbe08
	bool CheckBuffStatus(class STBaseBuffStatusType Status, out bool Value);// 0x23cbd34
	void BuffDetached__DelegateSignature(out const FName BuffName);// 0x2bb69b8
	void BuffAttached__DelegateSignature(out const FName BuffName);// 0x2bb69b8
	bool AddBuffLayer(FName BuffName, int layerNum);// 0x23cbc70
	bool AddBuffExpiry(FName BuffName, float ExpirySeconds);// 0x23cbba4
	int AddBuffByID(int BuffID, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x23cba4c
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x23cb8b0

--------------------------------
Class: UTBuffSynData
	FName BuffName;//[Offset: 0x0, Size: 8]
	Controller* BuffCauser;//[Offset: 0x8, Size: 4]
	int LayerCount;//[Offset: 0xc, Size: 4]
	Actor* BuffApplierActor;//[Offset: 0x10, Size: 4]
	float RemainingTime;//[Offset: 0x14, Size: 4]
	float ExpireTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BuffInstancedItem
	FName BuffName;//[Offset: 0x0, Size: 8]
	int BuffID;//[Offset: 0x8, Size: 4]
	STBaseBuff* Buff;//[Offset: 0xc, Size: 8]
	int LayerCount;//[Offset: 0x14, Size: 4]
	Controller* CauserPawnController;//[Offset: 0x18, Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float Expiry;//[Offset: 0x20, Size: 4]
	Actor* Target;//[Offset: 0x24, Size: 4]
	Actor* BuffApplier;//[Offset: 0x28, Size: 4]
	int BuffIndex;//[Offset: 0x2c, Size: 4]
	uint32 DamageCauseID;//[Offset: 0x30, Size: 4]

--------------------------------
Class: STBaseBuff.Object
	FString BuffName;//[Offset: 0x24, Size: 12]
	FString DisplayName;//[Offset: 0x30, Size: 12]
	FString Message;//[Offset: 0x3c, Size: 12]
	Texture2D* Icon;//[Offset: 0x48, Size: 4]
	SoundBase* SoundData;//[Offset: 0x4c, Size: 4]
	bool IsDeBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool IgnoreMagicalImmunity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool bAllowOtherPawnRefreshBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	bool Layerable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 1]
	bool NeedDetachAndAttachForReplaceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool NeedDetachAndAttachForAddLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	bool ReplaceExsist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 1]
	bool StaysOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 1]
	int LayerMax;//[Offset: 0x58, Size: 4]
	int InitialLayerCount;//[Offset: 0x5c, Size: 4]
	int LayerCount;//[Offset: 0x60, Size: 4]
	float ValidityTime;//[Offset: 0x64, Size: 4]
	float Internal;//[Offset: 0x68, Size: 4]
	UTSkillCondition*[] BuffConditions;//[Offset: 0x6c, Size: 12]
	float Expiry;//[Offset: 0x78, Size: 4]
	StatusChange[] StatusChanges;//[Offset: 0x7c, Size: 12]
	bool NeedSimulateToClientMulticast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	bool NeedSimulateToClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	byte SimulateAddBuffRole;//[Offset: 0x8a, Size: 1]
	FName[] MutexBuffers;//[Offset: 0x8c, Size: 12]
	BuffActionItem[] BuffActions;//[Offset: 0x98, Size: 12]
	BuffEventActionItem[] EventBuffActions;//[Offset: 0xa4, Size: 12]
	float fADScale;//[Offset: 0xb0, Size: 4]
	float fAPScale;//[Offset: 0xb4, Size: 4]
	bool IsAlwaysExists;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	Controller* CauserPawnController;//[Offset: 0xbc, Size: 4]
	Actor* CauserPawnActor;//[Offset: 0xc0, Size: 4]
	UAEBlackboardParameter[] UAEBlackboardParamList;//[Offset: 0xd0, Size: 12]
	Actor* BuffApplier;//[Offset: 0xdc, Size: 4]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0xe0, Size: 60]
	int InstancedNodesTotalSize;//[Offset: 0x11c, Size: 4]

--------------------------------
Class: UTSkillCondition.UTSkillBaseWidget.Object
	bool IsTargetOK(ActorComponent* SkillManagerComponent, Actor* Target);// 0x463c310
	bool IsOK_Internal();// 0x463c29c
	bool IsOK(ActorComponent* SkillManagerComponent);// 0x463c1ac
	UTSkill* GetOwnerSkill();// 0x463c144

--------------------------------
Class: UTSkillBaseWidget.Object
	bool bWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	FString EffectName;//[Offset: 0x24, Size: 12]
	Actor* BuffTargetActor;//[Offset: 0x30, Size: 4]
	UTSkill* OwnerSkill;//[Offset: 0x34, Size: 8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0x3c, Size: 4]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x463fd3c
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x463fbc0
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x463f9b8
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator RotatorValue);// 0x463f83c
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x463f6c0
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x463f54c
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x463f3d0
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x463f248
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x463f0c8
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x463ef4c
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x463ed98
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x463ec78
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x463eb58
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x463ea38
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x463e918
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x463e7f8
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x463e6d8
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x463e5b8
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x463e498
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x463e378
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x463e258
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x463e138
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x463e01c
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x463dea8
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x463dd68
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x463dc1c
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x463dadc
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x463d9c0
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x463d888
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x463d76c
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x463d64c
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x463d530
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x463d414
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x463d2f4
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x463d180
	UAEBlackboard* GetUAEBlackboardBySkillComp(UTSkillManagerComponent* InOwnerSkillManager);// 0x463d094
	UAEBlackboard* GetUAEBlackboard();// 0x463d024
	UTSkillManagerComponent* GetOwnerSkillManager();// 0x463cfb4
	Actor* GetOwnerPawn();// 0x463cf44
	<Actor*,UAEBlackboard*> GetActorBlackboardBySkillComp(UTSkillManagerComponent* InOwnerSkillManager);// 0x463ce3c
	<Actor*,UAEBlackboard*> GetActorBlackboard();// 0x463cda8

--------------------------------
Class: UTSkill.Actor.Object
	bool bNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	FString SkillName;//[Offset: 0x308, Size: 12]
	FName SkillGroup;//[Offset: 0x318, Size: 8]
	bool bSinglePhaseRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	enum SkillCastType;//[Offset: 0x321, Size: 1]
	bool bShouldMonopolize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322, Size: 1]
	bool bMonopolizeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323, Size: 1]
	int SkillID;//[Offset: 0x324, Size: 4]
	FString SkillDescription;//[Offset: 0x328, Size: 12]
	FString SkillDetailDes;//[Offset: 0x334, Size: 12]
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	bool bCheckFirstPhaseConditions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 1]
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 1]
	bool bKeepCastingWhenDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x343, Size: 1]
	bool bClearInputCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	UTSkillCreateData BaseData;//[Offset: 0x348, Size: 304]
	int SkillCategory;//[Offset: 0x478, Size: 4]
	bool bUseNewSkillCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	UAEBlackboardParameter[] BlackboardParamList;//[Offset: 0x480, Size: 12]
	bool bSetBlackboardDefaultData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 1]
	bool bGsListener;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 1]
	FString SkillTimeScaleAttrName;//[Offset: 0x490, Size: 12]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x49c, Size: 60]
	int InstancedNodesTotalSize;//[Offset: 0x4d8, Size: 4]
	FString[] ParentFolderPath;//[Offset: 0x4dc, Size: 12]
	int64 LastEditBluePrintTime;//[Offset: 0x4e8, Size: 8]
	int CurComponentNameIndex;//[Offset: 0x4f0, Size: 4]
	bool IsSkillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 1]
	UTSkillManagerComponent* SpecificSkillCompRef;//[Offset: 0x534, Size: 8]
	UAEBlackboard* SpecificBlackBlackRef;//[Offset: 0x53c, Size: 8]
	void StopSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x4633044
	void SetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent, float Percentage);// 0x4632f00
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, int PhaseIndex);// 0x4632d34
	bool IsEnableSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent);// 0x4632c44
	bool IsCDOK(UTSkillManagerComponent* SkillManagerComponent);// 0x4632b54
	UTSkillManagerComponent* GetSpecificSkillManager();// 0x4632aec
	UAEBlackboard* GetSpecificBlackboard();// 0x4632a84
	float GetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent);// 0x46329a8
	UTSkillPhase* GetSkillPhaseByName(FString PhaseName);// 0x463286c
	UTSkillPhase* GetSkillPhase(int PhaseIndex);// 0x4632780
	UTSkillBaseWidget* GetSkillEffectByPhaseName(FString PhaseName, FString EffectName);// 0x4632588
	UTSkillBaseWidget* GetSkillEffectByPhaseIndex(int PhaseIndex, FString EffectName);// 0x46323e4
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x4632294
	bool CanBePlayed(UTSkillManagerComponent* SkillManagerComponent, bool bShowErrorMsg);// 0x4632110

--------------------------------
Class: UTSkillCreateData
	bool bSkillActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int SkillGroupIndex;//[Offset: 0x4, Size: 4]
	float interval;//[Offset: 0x8, Size: 4]
	float IntervalSincePrevFinish;//[Offset: 0xc, Size: 4]
	FString CoolDownMessage;//[Offset: 0x10, Size: 12]
	int CoolDownMessageID;//[Offset: 0x1c, Size: 4]
	UTSkillPhase*[] Phases;//[Offset: 0x20, Size: 12]
	UTSkillCDBase*[] SkillCDs;//[Offset: 0x2c, Size: 12]
	<int,UTSkillWidget*> SkillUIs;//[Offset: 0x38, Size: 60]
	<FString,int> SkillUIPathToHandle;//[Offset: 0x74, Size: 60]
	SoftClassPath SkillMainWidget;//[Offset: 0xb0, Size: 24]
	FName SkillWidgetAttachPanelName;//[Offset: 0xc8, Size: 8]
	bool bInitMainSkillUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	<enum,SlateBrush> SkillIcons;//[Offset: 0xd4, Size: 60]
	int SkillMainWidgetHandle;//[Offset: 0x110, Size: 4]
	FName[] AsyncLoadingSkillUI;//[Offset: 0x118, Size: 12]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x124, Size: 12]

--------------------------------
Class: UTSkillPhase.Object
	FString PhaseName;//[Offset: 0x20, Size: 12]
	FString PhaseDescription;//[Offset: 0x2c, Size: 12]
	bool bPhaseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	UTSkill* OwnerSkill;//[Offset: 0x3c, Size: 8]
	int PhaseIndex;//[Offset: 0x44, Size: 4]
	int ActionsTopHalfCount;//[Offset: 0x60, Size: 4]
	UTSkillPhaseCreateData BaseData;//[Offset: 0x64, Size: 104]
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0xcc, Size: 4]
	bool TryJumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseId);// 0x465492c
	void StopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x4654848
	void StartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x4654764
	void RepeatPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x4654680
	bool PlaySkillHurtEffect(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x4654524
	bool PlaySkillHurtAppearances(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x46543c8
	void PickTargets(UTSkillManagerComponent* SkillManagerComponent);// 0x46542e4
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x4654184
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x4654024
	float GetChargePhaseRate(UTSkillManagerComponent* SkillManagerComponent);// 0x4653f48
	bool ForceStopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x4653e58
	bool ClearAttachments();// 0x4653dec
	void AfterStartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x4653d08
	void AddSkillConditionLua(UTSkill* InSkill, FString InLuaPath);// 0x4653b8c
	void AddSkillActionLua(UTSkill* InSkill, FString InLuaPath);// 0x4653a10

--------------------------------
Class: UTSkillPhaseCreateData
	float PhaseDuration;//[Offset: 0x0, Size: 4]
	FString TimeAdjustAttr;//[Offset: 0x4, Size: 12]
	float AltPhaseDuration;//[Offset: 0x10, Size: 4]
	float CacheMouseInputTime;//[Offset: 0x14, Size: 4]
	bool bMustHasTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	int CoolDownIndex;//[Offset: 0x1c, Size: 4]
	UTSkillCondition*[] PhaseConditions;//[Offset: 0x20, Size: 12]
	UTSkillPicker* Picker;//[Offset: 0x2c, Size: 4]
	UTSkillEffect*[] Actions;//[Offset: 0x30, Size: 12]
	UTSkillEffect*[] HurtAppearances;//[Offset: 0x3c, Size: 12]
	enum PhaseType;//[Offset: 0x48, Size: 1]
	int JumpPhaseIndex;//[Offset: 0x4c, Size: 4]
	FString EnterPhaseTipString;//[Offset: 0x50, Size: 12]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: UTSkillPicker.UTSkillBaseWidget.Object
	UTSkillPickerCreateData BaseData;//[Offset: 0x40, Size: 32]
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0x6c, Size: 12]
	UTSkillPickerFilter*[] Filters;//[Offset: 0x78, Size: 12]
	bool PickTargetsInner(Vector OriginPoint);// 0x4655f7c
	bool PickTargets(Vector OriginPoint);// 0x4655ea8

--------------------------------
Class: UTSkillPickerCreateData
	enum PickerType;//[Offset: 0x0, Size: 1]
	UAEBlackboardKeySelector PickerOriginBlackboardKey;//[Offset: 0x8, Size: 8]
	enum PickerTargetType;//[Offset: 0x10, Size: 1]
	enum PickerTargetRole;//[Offset: 0x11, Size: 1]
	int PickerMaxCount;//[Offset: 0x14, Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIgnoreOwnerVehicleWhenTracePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: UTSkillPickedTarget
	Actor* Target;//[Offset: 0x0, Size: 8]
	PrimitiveComponent* TargetComponent;//[Offset: 0x8, Size: 8]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte HitPos;//[Offset: 0x11, Size: 1]
	FName BoneName;//[Offset: 0x18, Size: 8]
	Vector HitEnvLocation;//[Offset: 0x20, Size: 12]
	float HitAngleCos;//[Offset: 0x2c, Size: 4]
	byte HitPhysMatType;//[Offset: 0x30, Size: 1]
	bool IgnoreTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]

--------------------------------
Class: UTSkillPickerFilter.Object
	void HandleFilterArray(out UTSkillPickedTarget[] inArray, Actor* Owner);// 0x46559f0

--------------------------------
Class: UTSkillEffect.UTSkillBaseWidget.Object
	float fADScale;//[Offset: 0x40, Size: 4]
	float fAPScale;//[Offset: 0x44, Size: 4]
	Object*[] CacheSoftObject;//[Offset: 0x48, Size: 12]
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x4641180
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x464109c
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x463426c
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x463411c
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x4633fcc
	void OnAsyncLoadSoftPathDone();// 0x464103c
	UTSkill* GetOwnerSkill();// 0x463c144
	void DoHurtAppearance(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x4640eec
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x4633d98

--------------------------------
Class: UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	Pawn* OwnerPawn;//[Offset: 0x18c, Size: 4]
	bool bEnableSkillCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	Actor* OwnerActor;//[Offset: 0x1a4, Size: 4]
	bool DestroySkillsOnDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	<int,UTSkill*> SkillIDToSkills;//[Offset: 0x1ac, Size: 60]
	UAEUserWidget*[] AsyncLoadedSkillUI;//[Offset: 0x1e8, Size: 12]
	UAEUserWidget* SkillUIRoot;//[Offset: 0x1f4, Size: 4]
	PanelWidget* SkillUIRootPanel;//[Offset: 0x1f8, Size: 4]
	<UTSkill*,UAEBlackboard*> SkillsBlackboardMap;//[Offset: 0x1fc, Size: 60]
	<Actor*,UAEBlackboard*> ActorBlackboardMap;//[Offset: 0x238, Size: 60]
	delegate ChangeActorBlackboard;//[Offset: 0x274, Size: 12]
	Actor* Target;//[Offset: 0x280, Size: 4]
	<int,UTSkillCreateData> SkillBaseDataMaps;//[Offset: 0x284, Size: 60]
	UTSkillLastCastInfo[] LastCastArray;//[Offset: 0x2c0, Size: 12]
	delegate OnSkillHit;//[Offset: 0x2cc, Size: 12]
	delegate OnSkillCast;//[Offset: 0x2d8, Size: 12]
	float PhasePercentage;//[Offset: 0x2e4, Size: 4]
	<int,int> IDToSyncSkillActiveStateData;//[Offset: 0x2e8, Size: 60]
	SkillActiveRepData[] SyncSkillActiveStateDatas;//[Offset: 0x324, Size: 12]
	<int,int> IDToSyncSkillCDDatas;//[Offset: 0x330, Size: 60]
	SkillDynamicRepData SyncDynamicRepData;//[Offset: 0x36c, Size: 12]
	SkillCDRepData[] SyncSkillCDDatas;//[Offset: 0x378, Size: 12]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x388, Size: 40]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x3b0, Size: 40]
	FString[] MutexMontageGroupBeenPlayed;//[Offset: 0x3d8, Size: 12]
	FString LastESkillTargetDesc;//[Offset: 0x3e8, Size: 12]
	int SkillSynRandomSeed;//[Offset: 0x3f4, Size: 4]
	RandomStream SkillSynRandStream;//[Offset: 0x3f8, Size: 8]
	int SkillSynRandomSeedExpireCount;//[Offset: 0x400, Size: 4]
	<FString,TimerHandle> SkillTimerMap;//[Offset: 0x404, Size: 60]
	float ZombieModeUseSkillCD;//[Offset: 0x448, Size: 4]
	int ZombieModeMaxSkillPropLevel;//[Offset: 0x450, Size: 4]
	SkillParamater[] SkillParamaters;//[Offset: 0x460, Size: 12]
	UTMutilSkillSynData[] SkillSynData;//[Offset: 0x46c, Size: 12]
	UTSkillSynSinglePhaseData[] SkillSynSinglePhaseData;//[Offset: 0x484, Size: 12]
	<UTSkill*,int> SkillCurPhaseIndexes;//[Offset: 0x4a0, Size: 60]
	<UTSkill*,int> LastPhaseIndexes;//[Offset: 0x4dc, Size: 60]
	delegate OnSkillInitSignature;//[Offset: 0x560, Size: 12]
	delegate SkillStartEvent;//[Offset: 0x56c, Size: 12]
	delegate SkillStopEvent;//[Offset: 0x578, Size: 12]
	int[] PendingRemoveSkillID;//[Offset: 0x584, Size: 12]
	<int,byte> CurSKillLevels;//[Offset: 0x590, Size: 60]
	UTReplaceSkillData[] ReplacedSkillDatas;//[Offset: 0x5cc, Size: 12]
	void UpdateSyncSkillCDData(int SkillID);// 0x464e408
	void UpdateSyncSkillActiveState(int SkillID);// 0x464e338
	void UnRegisterActorBlackBorad(Actor* InActor);// 0x464e268
	void TryDeleteOneSkill(int SkillID, bool IsImmediately);// 0x464e0f8
	void TryAddOneSkill(int SkillID, bool bActive);// 0x464df88
	void TriggerParamsEvent(int InSkillID, byte InEventType, out const UTSkillClientData OperateData);// 0x464dd88
	void TriggerEvent_WithID(int InSkillID, byte InEventType);// 0x464dc34
	void TriggerEvent(int SkillID, byte EventType);// 0x464dae0
	bool TraceTarget(Vector StartTrace, Vector EndTrace, enum TargetType, float Radius, out Actor* TargetActor);// 0x464d7d4
	void SyncOneSkillState(bool RepSkillCD, bool RepSkillActiveState, int RequestID);// 0x464d5bc
	bool StopSkillWithSlot(int SkillSlot, enum StopReason);// 0x464d460
	void StopSkillSpecific(UTSkill* Skill, enum StopReason);// 0x464d324
	void StopSkillAll(enum StopReason);// 0x464d23c
	int StopSkill_WithID(int SkillID, enum StopReason);// 0x464d0e4
	void StopSkill(int SkillID, enum StopReason);// 0x464cf94
	bool ShouldTriggerEvent(int SkillID, byte EventType);// 0x464ce34
	bool SetupOwnerAndSystem();// 0x464cdc8
	void SetSkillState(out const UTSkillStateSyncData[] InSyncStateDatas);// 0x464cc7c
	void SetSkillOwner(Actor* tempActor);// 0x464cb98
	void SetSkillLevel(int SkillID, int SkillLevel);// 0x464ca60
	void SetSkillLastPhase(UTSkill* Skill, int PhaseIndex);// 0x464c928
	void SetSkillCurPhase(UTSkill* Skill, int PhaseIndex);// 0x464c7f0
	bool SetSkillActive(int SkillID, bool bActive, bool bForceSet);// 0x464c5d4
	void SetModSkillUIRoot(UAEUserWidget* ModSkillUIRoot);// 0x464c504
	void SetCurSkill(int SkillID, int SkillSlot);// 0x464c3cc
	void SetAutoSkillID(int InSkillID);// 0x464c2fc
	void ServerTriggerParamsEvent(int SkillID, byte EventType, const UTSkillClientData OperateData);// 0x464c0f0
	void ServerTriggerEvent_WithID(int SkillID, byte EventType);// 0x464bf58
	void ServerTriggerEvent(int SkillID, byte EventType);// 0x464bdc0
	bool ServerStartSkill(int SkillID, bool bAutoCast);// 0x464bc3c
	void ServerNotifyRandomSeed(int Seed);// 0x464bb1c
	void ResetSkillCollDown(int SkillID);// 0x464ba38
	void ResetAllSkillCollDown();// 0x464b9d0
	void RequestSkillStates(bool RepSkillCD, bool RepSkillActiveState, const int[] RequestIDs);// 0x464b6f0
	void RepSkillHitInfo();// 0x464b690
	void RepOneSkillSynData(int SkillSlot, int InLastSkillID);// 0x464b558
	void RepLastCastTime();// 0x464b4f8
	void ReplaceSkill(int OldSkillID, int NewSkillID);// 0x464b3c0
	void RemoveSkillUIWidget(FString SkillClassName, SoftObjectPath ObjPath);// 0x464b194
	void RemoveReplacedSkill(int OldSkillID);// 0x464b0c4
	void RemoveAllSkillUIWidget();// 0x464b064
	void RegistSkillUIWidgetBP(FString SkillClassName, SoftObjectPath ObjPath);// 0x464ae38
	void RegisterActorBlackBorad(Actor* InActor, UAEBlackboard* RegisterBlackboard);// 0x464ad00
	int RandRangeSyn(int StartIndex, int EndIndex);// 0x464abc0
	void PlayHurtSkillEffect(UTSkillHitInfo TheSkillHitInfo);// 0x464aa78
	void OnStopSkill(UTSkill* Skill, enum StopReason);// 0x464a928
	static bool OnSameTeam(Actor* A, Actor* B);// 0x464a7f0
	void OnRespawned();// 0x464a788
	void OnRep_SkillSynSinglePhaseData();// 0x464a720
	void OnRep_SkillSynData();// 0x464a6b8
	void OnRep_SkillHitInfo();// 0x464a650
	void OnRep_SkillCDDatas();// 0x464a5f0
	void OnRep_SkillActiveState();// 0x464a590
	void OnRep_ReplaceSkill();// 0x464a530
	void OnRep_DynamicRepData();// 0x464a4d0
	void OnRecycled();// 0x464a468
	void OnInterruptSkill(UTSkill* Skill, enum StopReason);// 0x464a318
	bool IsUsingSkill(int SkillID);// 0x464a23c
	bool IsSkillCanUse();// 0x464a1d0
	bool IsSkillActived(int SkillID);// 0x464a0f4
	bool IsReadyToCastSkill(int SkillID);// 0x464a004
	bool IsEnableSkillCoolDown();// 0x4649f90
	bool IsCurrentUseSkillID(int InSkillID);// 0x4649eb4
	bool IsCastingSkillID(int InSkillID);// 0x4649dc4
	bool IsCastingSkill();// 0x4649d50
	void HandleTriggerParamsEvent(int SkillID, byte EventType, out const UTSkillClientData OperateData);// 0x4649b50
	void HandleSkillStop(int SkillID, enum StopReason);// 0x4649a00
	void HandleSkillStart(int SkillID);// 0x464991c
	UAEBlackboard* GetUAEBlackboardBySkillId(int SkillID);// 0x4649830
	UAEBlackboard* GetUAEBlackboard(UTSkill* InSkill);// 0x4649758
	UTSkillWidget* GetSkillWidget(int SkillID);// 0x464966c
	UTSkillStateSyncData[] GetSkillState();// 0x46495d8
	int GetSkillSlotBySkillID(int SkillID);// 0x4649500
	int GetSkillSlotBySkill(UTSkill* Skill);// 0x4649428
	UTSkill*[] GetSkillsByGroup(FName SkillGroup);// 0x46492f4
	int GetSkillLevel(int SkillID);// 0x464921c
	int GetSkillLastPhase(UTSkill* Skill);// 0x4649144
	int GetSkillIDFromSkillIndex(int InSkillIndex);// 0x4649058
	int GetSkillIDByClass(class Object SkillClass);// 0x4648f6c
	int GetSkillCurPhase(UTSkill* Skill);// 0x4648e94
	UTSkill* GetSkillByName(FString SkillName);// 0x4648d1c
	UTSkill* GetSkillByClassName(FString SkillClassName);// 0x4648ba4
	UTSkillCreateData GetSkillBaseData(int SkillID);// 0x4648ab0
	UTSkill* GetSkill(int SkillID);// 0x46489c4
	int GetReplacedSkill(int OldSkillID);// 0x46488ec
	byte GetRealOwnerRoleSafety();// 0x4648864
	float GetLastCastTime(int SkillID);// 0x4648788
	float GetLastCastFinishTime(int SkillID);// 0x46486ac
	int[] GetCurUsingSkillIDS();// 0x4648618
	UTSkill*[] GetCurSkills();// 0x4648584
	UTSkillPhase*[] GetCurSkillPhases();// 0x46484f0
	UTSkillPhase* GetCurSkillPhase(int InSkillSlot);// 0x4648418
	int[] GetCurSkillIDs();// 0x4648398
	int GetCurSkillID(UTSkill* Skill);// 0x46482c0
	UTSkill* GetCurSkill(int InSkillSlot);// 0x46481e8
	int[] GetCurMonopolizeSkills();// 0x4648154
	int FindRelatedCurSkillID(int SkillID, out int OutRelatedSkillSlot, bool bPeekSlotIndex);// 0x4647f3c
	void DynamicRemoveSkill(int InSkillID);// 0x4647e58
	void DynamicAddSkill(int InSkillID);// 0x4647d74
	void ClientStartSkill(int SkillID, bool bAutoCast);// 0x4647bfc
	void ClearSkill();// 0x4647b94
	void ClearRepParams();// 0x4647b2c
	void ClearInitParams();// 0x4647ac4

--------------------------------
Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1b8, Size: 4]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x1bc, Size: 4]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x1c0, Size: 4]
	UAEUserWidget* ParentWidget;//[Offset: 0x1c4, Size: 4]
	Property*[] Params;//[Offset: 0x240, Size: 12]
	delegate widgetSizeNofity;//[Offset: 0x254, Size: 12]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x260, Size: 32]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x280, Size: 32]
	float TickRate;//[Offset: 0x2a0, Size: 4]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6, Size: 1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7, Size: 1]
	Vector2D ScreenPos;//[Offset: 0x2a8, Size: 8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x2b0, Size: 8]
	enum FadingStatus;//[Offset: 0x2c0, Size: 1]
	float CurrentOpacity;//[Offset: 0x2c4, Size: 4]
	float FadingInTime;//[Offset: 0x2c8, Size: 4]
	float FadingOutTime;//[Offset: 0x2cc, Size: 4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 1]
	bool bRegistUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 1]
	FString UIMsgPrefix;//[Offset: 0x2d4, Size: 12]
	FString[] UIMsgFunctionList;//[Offset: 0x2e0, Size: 12]
	bool bRegistedUIMsgToMoudle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	FString MoudleToRegisted;//[Offset: 0x2f0, Size: 12]
	bool Visible();// 0x45c8164
	void UnRegistFromGameFrontendHUD();// 0x45c8150
	void SynchronizeBlueprintProperties();// 0x2bb69b8
	void Show();// 0x45c813c
	void SetParentWidgetRecursive(UAEUserWidget* InParentWidget);// 0x45c80c4
	void SetParentWidget(UAEUserWidget* InParentWidget);// 0x45c804c
	static void SetOnWidgetShow(delegate onShow);// 0x45c7fb0
	static void SetOnWidgetHide(delegate OnHide);// 0x45c7f14
	static void SetOnClearUIStack(delegate onClear);// 0x45c7e78
	void SetAdapation(float Left, float Top, float Right, float Bottom);// 0x45c7d30
	void RegistToGameFrontendHUD(FrontendHUD* GameFrontHUD);// 0x45c7cb8
	void Register(LogicManagerBase* LogicManager, bool bAddToViewport);// 0x45c7bf4
	void ReceiveShow();// 0x2bb69b8
	void ReceiveHide();// 0x2bb69b8
	void ReceivedMountWidget();// 0x1f7ff54
	void ReceivedInitWidget();// 0x2bb69b8
	void ReCachedUIMsgFunction();// 0x45c7be0
	static void PushOpenedUIStack(FString Name);// 0x45c7b2c
	static void PopOpenedUIStack(FString curOpen);// 0x45c7a78
	void OnWidgetShow__DelegateSignature(FString ClassName);// 0x2bb69b8
	void OnWidgetHide__DelegateSignature(FString ClassName);// 0x2bb69b8
	void OnRightClicked(Vector2D TempScreenPos);// 0x2bb69b8
	void OnFadeOutFinished();// 0x2055758
	void OnFadeInFinished();// 0x2135708
	void OnDoubleClicked(Vector2D TempScreenPos);// 0x2bb69b8
	void OnClicked(Vector2D TempScreenPos);// 0x2bb69b8
	void OnClearUIStack__DelegateSignature();// 0x2bb69b8
	bool IntCompare(int A, int B, enum CompareType);// 0x45c7970
	void InitWidget(bool Recursive);// 0x45c78f0
	void InitCustomWidget(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x20e5d48
	void Hide();// 0x45c78dc
	void HandleUIMessageBattle(FString UIMessage);// 0x45c7820
	void HandleUIMessage(FString UIMessage);// 0x45c7764
	Widget* GetWidgetsByName(FString WidgetName, FString OuterName, bool bUseContains);// 0x45c75d0
	Widget* GetWidgetContainsName(FString Name);// 0x45c750c
	UAEUserWidget* GetParentWidget();// 0x22d4e48
	PlayerController* GetOwningPlayer();// 0x1ed3ca4
	LogicManagerBase* GetOwningLogicManager();// 0x45c74e4
	FrontendHUD* GetOwningFrontendHUD();// 0x45c74bc
	MaterialInstanceDynamic* GetImgDynamicMaterial(Image* ImageMat);// 0x45c743c
	UserWidget* GetChildWidgetByEqualPolitics(FString ChildName, enum EqualPolitics, int RecursiveDepth);// 0x45c72f0
	UserWidget* GetChildWidget(FString WName);// 0x45c722c
	Margin GetAdapation();// 0x45c7204
	bool FloatCompare(float A, float B, enum CompareType);// 0x45c70fc
	void DynamicRegistUIMsgToCache(UAEUserWidget* Widget);// 0x45c7084
	void DestroyWidget();// 0x45c7070
	static void ClearOpenedUIStack();// 0x45c705c
	void ClearFunctionCacheByMsgName(FString InUIMsg);// 0x45c6fa0
	void ClearFunctionCache();// 0x45c6f8c
	void ClearClassWidgetTree();// 0x45c6f78
	void BindCustomUserEvent(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x1fa0ae4

--------------------------------
Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x2c, Size: 4]
	FString FrontendUtilsClassName;//[Offset: 0x34, Size: 12]
	FrontendUtils* Utils;//[Offset: 0x40, Size: 4]
	LogicManagerBase*[] LogicManagerList;//[Offset: 0x44, Size: 12]
	<FString,LogicManagerBase*> LogicManagerMap;//[Offset: 0x50, Size: 60]
	int UnusedWidgetMinCount;//[Offset: 0x98, Size: 4]
	int UnusedWidgetMaxCount;//[Offset: 0x9c, Size: 4]
	int UnusedWidgetKeepTime;//[Offset: 0xa0, Size: 4]
	float MaxLowLevelMemoryLimit;//[Offset: 0xa4, Size: 4]
	float MaxMiddleMemoryLimit;//[Offset: 0xa8, Size: 4]
	float MaxGCArrayObjectSize;//[Offset: 0xac, Size: 4]
	FName CurrentGameStatus;//[Offset: 0xb0, Size: 8]
	FName LastGameStatus;//[Offset: 0xb8, Size: 8]
	bool InComBatStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	FName PendingGameStatus;//[Offset: 0xc8, Size: 8]
	FString LatestGameStatusURL;//[Offset: 0xd0, Size: 12]
	delegate OnPostSwitchGameStatusStartEvent;//[Offset: 0xdc, Size: 12]
	delegate OnPostSwitchGameStatusEvent;//[Offset: 0xe8, Size: 12]
	delegate OnPreSwitchGameStatusEvent;//[Offset: 0xf4, Size: 12]
	delegate OnGameStatusSwitchTerminate;//[Offset: 0x10c, Size: 12]
	delegate OnPreSwitchGameStatusEndEvent;//[Offset: 0x118, Size: 12]
	delegate OnCreateLogicManagerListEvent;//[Offset: 0x124, Size: 12]
	delegate OnSetGameStatusEvent;//[Offset: 0x130, Size: 12]
	delegate OnAddLuaLogicManagerEvent;//[Offset: 0x13c, Size: 12]
	delegate OnRemoveLuaLogicManagerEvent;//[Offset: 0x148, Size: 12]
	World* CurrentGameStatusWorld;//[Offset: 0x154, Size: 4]
	void SwitchGameStatus(FName GameStatus, FString Options);// 0x45c270c
	void StandAloneSwitchGameStatus(FName InGameStatus, FString Options);// 0x45c2558
	void OnPreLoadMap(FString MapName);// 0x45c2494
	void OnPostLoadMapWithWorld(World* World);// 0x43db8a4
	void OnGameViewportClientCreated();// 0x1ee1bb4
	World* GetWorld();// 0x22bc828
	FrontendUtils* GetUtils();// 0x45c246c
	PlayerController* GetPlayerController();// 0x45c2444
	LogicManagerBase* GetLogicManagerByName(FString LogicManagerTagName);// 0x45c22e4
	LogicManagerBase* GetLogicManager(int LogicManagerIndex);// 0x45c2264
	GameViewportClient* GetGameViewportClient();// 0x45c223c
	GameMode* GetGameMode();// 0x45c2214
	GameInstance* GetGameInstance();// 0x4449400
	Object*[] FindRegistedUIFunctionList(FString strMsg, FString moduleMsg);// 0x45c204c
	void EnableGuiTest(bool bEnable);// 0x45c1fcc
	void DynamicRegistUIMsgToCache(UAEUserWidget* Widget, FString module);// 0x45c1ecc
	void ClearLogicManagerByName(FString managerName);// 0x45c1d74

--------------------------------
Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1c, Size: 4]
	delegate SceneCameraSwitchedDelegate;//[Offset: 0x20, Size: 12]
	FName CurrentSceneCameraName;//[Offset: 0x30, Size: 8]
	CameraActor*[] SceneCameraList;//[Offset: 0x38, Size: 12]
	<FName,CameraActor*> SceneCameraMap;//[Offset: 0x44, Size: 60]
	DirectionalLight*[] SceneDirectionalLightList;//[Offset: 0x80, Size: 12]
	<FName,DirectionalLight*> SceneDirectionalLightMap;//[Offset: 0x8c, Size: 60]
	PointLight*[] ScenePointLightList;//[Offset: 0xc8, Size: 12]
	<FName,PointLight*> ScenePointLightMap;//[Offset: 0xd4, Size: 60]
	<FName,SkyLight*> SceneSkyLightMap;//[Offset: 0x110, Size: 60]
	FString GlobalUIEventDispatcherClassName;//[Offset: 0x1a8, Size: 12]
	class Object* GlobalUIEventDispatcherClass;//[Offset: 0x1b4, Size: 4]
	Object* GlobalUIEventDispatcher;//[Offset: 0x1b8, Size: 4]
	FString GlobalUIContainerClassName;//[Offset: 0x1bc, Size: 12]
	FName[] GlobalUIContainerNames;//[Offset: 0x1c8, Size: 12]
	<FName,UAEWidgetContainer*> GlobalUIContainers;//[Offset: 0x1d4, Size: 60]
	UAEWidgetContainer*[] GlobalPushUIContainers;//[Offset: 0x210, Size: 12]
	<FName,UAEWidgetContainer*> GlobalPushUIRelations;//[Offset: 0x21c, Size: 60]
	<UAEWidgetContainer*,bool> UIShowStatusMap;//[Offset: 0x280, Size: 60]
	void SwitchSceneCameraToTransform(Transform targetTrans, byte ProjectionMode, float FOV, float blendTime, bool bForce);// 0x45c40f0
	void SwitchSceneCamera(FName SceneCameraName, float blendTime, bool bForce);// 0x45c3fd0
	void SetSceneSkyLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color);// 0x45c3e00
	void SetScenePointLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, int inverseSquareFalloff, float Radius);// 0x45c3ba0
	void SetSceneDirectionalLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, LightingChannels Channel);// 0x45c3980
	void RegisterSceneSkyLight(FName sceneLightName, SkyLight* Light);// 0x45c38bc
	void RegisterScenePointLight(FName sceneLightName, PointLight* Light);// 0x45c3800
	void RegisterSceneDirectionalLight(FName sceneLightName, DirectionalLight* Light);// 0x45c3744
	void RegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x45c3688
	void PopAllPushedUI();// 0x45c3674
	void OnAllSceneCamerasRegistered();// 0x1ef5680
	bool IsPushedPanel(out const FName managerName);// 0x45c35e0
	bool IsNoRenderClient();// 0x45c35b8
	bool GlobalUIEventDispatcher_GetDelegateIsBound(FString DelegateNum);// 0x45c3458
	FString GetUIStackTopSrcTag();// 0x45c3398
	FString GetUIStackTopDstTag();// 0x45c32d8
	FString GetUIStackTop();// 0x45c3218
	CameraActor* GetSceneCamera();// 0x45c31f0
	FrontendHUD* GetOwningFrontendHUD();// 0x45c31c8
	Object* GetGlobalUIEventDispatcher();// 0x45c31a0
	UAEWidgetContainer* GetGlobalUIContainer(FName ContainerName);// 0x45c3120
	void EnableLobbyMainLight(bool NewEnable);// 0x45c30a0
	void ClearAllSceneCameras();// 0x45c308c

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x304, Size: 4]
	void SetRadius(float NewRadius);// 0x45051d4
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x450515c

--------------------------------
Class: PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x35c, Size: 4]
	float AttenuationRadius;//[Offset: 0x360, Size: 4]
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x364, Size: 1]
	float LightFalloffExponent;//[Offset: 0x368, Size: 4]
	float SourceRadius;//[Offset: 0x36c, Size: 4]
	float SoftSourceRadius;//[Offset: 0x370, Size: 4]
	float SourceLength;//[Offset: 0x374, Size: 4]
	bool bSimulateRectLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 1]
	bool bSimulatePortalLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x378, Size: 1]
	float RectLightSourceWidth;//[Offset: 0x37c, Size: 4]
	float RectLightSourceHeight;//[Offset: 0x380, Size: 4]
	bool bEnableForVertexPointLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x384, Size: 1]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x388, Size: 12]
	void SetSourceRadius(float bNewValue);// 0x45058e8
	void SetSourceLength(float NewValue);// 0x4505870
	void SetSoftSourceRadius(float bNewValue);// 0x45057f8
	void SetSimulateRectLight(bool NewValue);// 0x4505778
	void SetSimulatePortalLight(bool NewValue);// 0x45056f8
	void SetRectLightSourceWidth(float NewValue);// 0x4505680
	void SetRectLightSourceHeight(float NewValue);// 0x4505608
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x4505590
	void SetAttenuationRadius(float NewRadius);// 0x4505518

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 4]
	float ShadowExponent;//[Offset: 0x4, Size: 4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x2fc, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 1]
	void OnRep_bEnabled();// 0x1ed11c0

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x288, Size: 1]
	TextureCube* Cubemap;//[Offset: 0x28c, Size: 4]
	float SourceCubemapAngle;//[Offset: 0x290, Size: 4]
	int CubemapResolution;//[Offset: 0x294, Size: 4]
	float SkyDistanceThreshold;//[Offset: 0x298, Size: 4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 1]
	LinearColor LowerHemisphereColor;//[Offset: 0x2a0, Size: 16]
	float OcclusionMaxDistance;//[Offset: 0x2b0, Size: 4]
	float Contrast;//[Offset: 0x2b4, Size: 4]
	float OcclusionExponent;//[Offset: 0x2b8, Size: 4]
	float MinOcclusion;//[Offset: 0x2bc, Size: 4]
	Color OcclusionTint;//[Offset: 0x2c0, Size: 4]
	byte OcclusionCombineMode;//[Offset: 0x2c4, Size: 1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x368, Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x452bd40
	void SetOcclusionTint(out const Color InTint);// 0x452bcbc
	void SetOcclusionExponent(float InOcclusionExponent);// 0x452bc44
	void SetOcclusionContrast(float InOcclusionContrast);// 0x452bbcc
	void SetMinOcclusion(float InMinOcclusion);// 0x452bb54
	void SetLightColor(LinearColor NewLightColor);// 0x452bad8
	void SetIntensity(float NewIntensity);// 0x452ba60
	void SetIndirectLightingIntensity(float NewIntensity);// 0x452b9e8
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x452b8e8
	void SetCubemap(TextureCube* NewCubemap);// 0x452b870
	void RecaptureSky();// 0x452b85c

--------------------------------
Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	UserWidget*[] WidgetList;//[Offset: 0x304, Size: 12]
	void RemoveWidgetInternal(UserWidget* Widget);// 0x20237b4
	void RemoveWidget(UserWidget* Widget);// 0x45c9408
	void AddWidgetWithZOrderInternal(UserWidget* Widget, int ZOrder);// 0x206f230
	void AddWidgetWithZOrder(UserWidget* Widget, int ZOrder);// 0x45c934c
	void AddWidgetInternal(UserWidget* Widget);// 0x2135b1c
	void AddWidget(UserWidget* Widget);// 0x45c92d4

--------------------------------
Class: LogicManagerBase.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28, Size: 4]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bUseNewHandleUIMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	int iUIControlState;//[Offset: 0x38, Size: 4]
	int DefaultSceneCameraIndex;//[Offset: 0x3c, Size: 4]
	FName[] GameStatusList;//[Offset: 0x4c, Size: 12]
	class Object[] WidgetUClassList;//[Offset: 0x7c, Size: 12]
	UAEUserWidget*[] WidgetList;//[Offset: 0x88, Size: 12]
	Object*[] DelayMessage_Obj;//[Offset: 0xa4, Size: 12]
	void SetEnableRemoveDynamicWidgets(bool bEnable);// 0x45c4f58
	bool IsEnableRemoveDynamicWidgets();// 0x45c4f30
	UAEUserWidget*[] GetWidgetList();// 0x22e7f6c
	UAEUserWidget* GetWidgetByName(FString InName);// 0x45c4e6c
	UAEUserWidget* GetWidgetByClass(class Object InClass);// 0x45c4dec
	FrontendHUD* GetOwningFrontendHUD();// 0x4448d9c
	int GetDefaultSceneCamera();// 0x4448f00
	void DispatchUIMessage(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x45c4c0c

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x350, Size: 8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x358, Size: 1]
	int NumSpectators;//[Offset: 0x35c, Size: 4]
	int NumPlayers;//[Offset: 0x360, Size: 4]
	int NumBots;//[Offset: 0x364, Size: 4]
	float MinRespawnDelay;//[Offset: 0x368, Size: 4]
	int NumTravellingPlayers;//[Offset: 0x36c, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x370, Size: 4]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x374, Size: 12]
	float InactivePlayerStateLifeSpan;//[Offset: 0x380, Size: 4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	void StartMatch();// 0x2237a0c
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x1ed74e0
	void Say(FString Msg);// 0x4436984
	void RestartGame();// 0x220f480
	bool ReadyToStartMatch();// 0x4436954
	bool ReadyToEndMatch();// 0x4436924
	void K2_OnSetMatchState(FName NewState);// 0x2bb69b8
	bool IsMatchInProgress();// 0x44368f4
	bool HasMatchEnded();// 0x44368c4
	FName GetMatchState();// 0x44368a0
	void EndMatch();// 0x220f49c
	void AbortMatch();// 0x220d4cc

--------------------------------
Class: UserWidgetState
	FString WidgetName;//[Offset: 0x0, Size: 12]
	FName ContainerName;//[Offset: 0x10, Size: 8]
	int ZOrder;//[Offset: 0x18, Size: 4]
	UAEUserWidget* Widget;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: Image.Widget.Visual.Object
	bool bIsEnhancedImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	SlateBrush Brush;//[Offset: 0xd0, Size: 152]
	delegate BrushDelegate;//[Offset: 0x168, Size: 16]
	LinearColor ColorAndOpacity;//[Offset: 0x178, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0x188, Size: 16]
	bool bIsUseEnhancedHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool bVersionImg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	FString imageSrcPath;//[Offset: 0x19c, Size: 12]
	float HitTestAreaRadius;//[Offset: 0x1a8, Size: 4]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1b0, Size: 16]
	bool bDontPaintWhenAlphaZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	bool bDontPaintWhenColorZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 1]
	void SetOpacity(float InOpacity);// 0x3898688
	void SetDontPaintWhenColorZero(bool Enable);// 0x3898608
	void SetDontPaintWhenAlphaZero(bool Enable);// 0x3898588
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x389850c
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x3898448
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x3898384
	void SetBrushFromPathAsync(FString ResourcePath);// 0x38982c8
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x3898250
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x38981d8
	void SetBrush(out const SlateBrush InBrush);// 0x3898070
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x3898048
	bool GetDontPaintWhenColorZero();// 0x3898020
	bool GetDontPaintWhenAlphaZero();// 0x3897ff8

--------------------------------
Class: Texture2DDynamic.Texture.Object
	byte Format;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x20, Size: 152]

--------------------------------
Class: UTSkillLastCastInfo
	int SkillID;//[Offset: 0x0, Size: 4]
	float LastCastTime;//[Offset: 0x4, Size: 4]
	float LastCastFinishTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SkillActiveRepData
	int SkillID;//[Offset: 0x0, Size: 4]
	int SkillLevel;//[Offset: 0x4, Size: 4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: SkillDynamicRepData
	SkillDynamicState[] SkillData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SkillDynamicState
	int SkillID;//[Offset: 0x0, Size: 4]
	bool bAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: SkillCDRepData
	int SkillID;//[Offset: 0x0, Size: 4]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x4, Size: 12]

--------------------------------
Class: UTSkillSyncData_CD
	int SkillCDIndex;//[Offset: 0x0, Size: 4]
	float LastActiveTime;//[Offset: 0x4, Size: 4]
	bool bIsCDReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bIsTickFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	float InitEnergy;//[Offset: 0xc, Size: 4]
	float MaxEnergy;//[Offset: 0x10, Size: 4]
	float CurEnergy;//[Offset: 0x14, Size: 4]
	float DeltaEnergy;//[Offset: 0x18, Size: 4]
	float SyncCount;//[Offset: 0x1c, Size: 4]
	float TickCountTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: UTSkillHitInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 12]
	Actor* FromPawn;//[Offset: 0xc, Size: 4]
	int SkillID;//[Offset: 0x10, Size: 4]
	int SkillPhaseID;//[Offset: 0x14, Size: 4]
	bool Flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	byte HitSurfaceType;//[Offset: 0x1a, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: UTSkillHitEnvInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 12]
	Actor* FromPawn;//[Offset: 0xc, Size: 4]
	int SkillID;//[Offset: 0x10, Size: 4]
	int SkillPhaseID;//[Offset: 0x14, Size: 4]
	byte HitSurfaceType;//[Offset: 0x18, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 4]
	int Seed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 8]

--------------------------------
Class: SkillParamater
	bool bUseTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName SkillTag;//[Offset: 0x8, Size: 8]
	enum SkillType;//[Offset: 0x10, Size: 1]
	float CDRecoveryScale;//[Offset: 0x14, Size: 4]
	float SkillRuntimeScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: UTMutilSkillSynData
	int CurSkillID;//[Offset: 0x0, Size: 4]
	int Token;//[Offset: 0x4, Size: 4]
	int PhaseIndexes;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UTSkillSynSinglePhaseData
	int CurSkillID;//[Offset: 0x0, Size: 4]
	int CurSkillPhase;//[Offset: 0x4, Size: 4]
	byte UpdateFlag;//[Offset: 0x8, Size: 1]

--------------------------------
Class: UTReplaceSkillData
	int OldSkillID;//[Offset: 0x0, Size: 4]
	int NewSkillID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UTSkillClientData
	float StartTime;//[Offset: 0x0, Size: 4]
	float FinishTime;//[Offset: 0x4, Size: 4]
	Vector SpringArmLocation;//[Offset: 0x8, Size: 12]

--------------------------------
Class: UTSkillStateSyncData
	UTSkillStateSyncDataParam SyncParam;//[Offset: 0x0, Size: 2]
	int SkillID;//[Offset: 0x4, Size: 4]
	bool bSkillActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: UTSkillStateSyncDataParam
	bool bSyncActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bSyncCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: UTSkillWidget.LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	UTSkillManagerComponent* SkillManager;//[Offset: 0x358, Size: 4]
	int SkillID;//[Offset: 0x35c, Size: 4]
	float TickInterval;//[Offset: 0x360, Size: 4]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	void TriggerPassiveEvent(byte SkillEvent);// 0x465822c
	void TriggerEvent(byte SkillEvent);// 0x4658144
	void SetSkillManager(UTSkillManagerComponent* manager);// 0x4658074
	void SetSkillID(int InSkillID);// 0x4657fa4
	void RemoveSkillUI();// 0x4657f3c
	void OnSkillStopEvent(int InSkillID, enum InStopReason);// 0x4657dec
	void OnSkillStartEvent(int InSkillID);// 0x4657d08
	bool IsTickFinish();// 0x4657c9c
	bool IsCDReady();// 0x4657c30
	FString GetSkillName();// 0x4657b9c
	UTSkillManagerComponent* GetSkillManager();// 0x4657b34
	int GetSkillID();// 0x4657acc
	float[] GetSkillCDProgess();// 0x4657a38
	UTSkillCDBase*[] GetSkillCDBases();// 0x46579b8
	UTSkill* GetSkill();// 0x4657950
	float GetMaxEnergy();// 0x46578e4
	PlayerController* GetLocalPlayerController();// 0x465787c
	float GetEnergyValue();// 0x4657810
	float GetEnergyThreshold();// 0x46577a4
	float GetDeltaEnergy();// 0x4657738
	void DoRemove();// 0x46576d8

--------------------------------
Class: LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	FString LuaFilePath;//[Offset: 0x348, Size: 12]
	bool bEnableBlueprintTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]

--------------------------------
Class: UTSkillCDBase.LuaObject.Object
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0x70, Size: 8]
	UTSkill* OwnerSkill;//[Offset: 0x78, Size: 8]
	enum cdType;//[Offset: 0x80, Size: 1]
	FString cdTypeStr;//[Offset: 0x84, Size: 12]
	UTSkillManagerComponent* CurOwnerManager;//[Offset: 0x90, Size: 4]
	bool StopConsumCD();// 0x463b52c
	bool IsTickFinish();// 0x463b4b8
	bool IsCDReady();// 0x463b444
	float GetCurrentTime();// 0x463b3d0
	bool ForceConsumCD();// 0x463b35c
	bool ConsumCD();// 0x463b2e8

--------------------------------
Class: LuaObject.Object
	FString LuaFilePath;//[Offset: 0x64, Size: 12]

--------------------------------
Class: UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
	byte SkillEventType;//[Offset: 0x40, Size: 1]
	FName[] InterestedOwnerTags;//[Offset: 0x44, Size: 12]
	FName PreEventActionTag;//[Offset: 0x50, Size: 8]
	UTSkillEffect* SkillEffect;//[Offset: 0x58, Size: 4]
	SkillConditionWarpper[] Conditions;//[Offset: 0x5c, Size: 12]
	SkillConditionWarpper[] TargetConditions;//[Offset: 0x68, Size: 12]

--------------------------------
Class: SkillConditionWarpper
	UTSkillCondition* SkillCondition;//[Offset: 0x0, Size: 4]

--------------------------------
Class: StatusChange
	class STBaseBuffStatusType* StatusName;//[Offset: 0x0, Size: 4]
	bool StatusValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: STBaseBuffStatusType.Object

--------------------------------
Class: BuffActionItem
	UTSkillAction* BuffAction;//[Offset: 0x0, Size: 4]

--------------------------------
Class: UTSkillAction.UTSkillEffect.UTSkillBaseWidget.Object
	UTSkillActionCreateData BaseData;//[Offset: 0x54, Size: 4]
	UTSkillAction* OwnerPeriodAction;//[Offset: 0x58, Size: 4]
	bool bClearTimerAfterReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	Object* EventObj;//[Offset: 0x60, Size: 4]
	void UpdateAction_Internal(float DeltaSeconds);// 0x4634990
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x463484c
	void UndoAction_Internal();// 0x46347e4
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x4634714
	void TimerRealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x4634644
	void Reset_Internal();// 0x46345dc
	void Reset(ActorComponent* SkillManagerComponent);// 0x463450c
	bool RealDoAction_Internal();// 0x4634498
	bool RealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x46343bc
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x463426c
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x463411c
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x4633fcc
	void OnAsyncLoadAssetDone(UTSkillManagerComponent* SkillManagerComponent);// 0x4633efc
	bool JudgeNeedPhaseWait();// 0x4633e88
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x4633d98

--------------------------------
Class: UTSkillActionCreateData
	float DelayTime;//[Offset: 0x0, Size: 4]

--------------------------------
Class: BuffEventActionItem
	STBaseBuffEventType* EventType;//[Offset: 0x0, Size: 4]
	UTSkillAction* BuffEventAction;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STBaseBuffEventType.Object

--------------------------------
Class: ActorAttributeComponent.ActorComponent.Object
	FString tableName;//[Offset: 0xbc, Size: 12]
	void UpdateAttribute(int TemplateID);// 0x1ebeff8
	void InitializeFollow();// 0x1ebefdc
	void Initialize(Actor* Actor);// 0x1ebef5c

--------------------------------
Class: PawnStateDisable
	enum PawnState;//[Offset: 0x0, Size: 1]
	int8 Disabled;//[Offset: 0x1, Size: 1]

--------------------------------
Class: PartHitComponent.ActorComponent.Object
	STExtraCharacter* OwnerCharacter;//[Offset: 0xbc, Size: 4]
	float UpdateHitBoxDeltaTime;//[Offset: 0xc0, Size: 4]
	bool bActivePartHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	Transform[] HitBoxs_Stand_Tran;//[Offset: 0xc8, Size: 12]
	Transform[] HitBoxs_Prone_Tran;//[Offset: 0xd4, Size: 12]
	PrimitiveComponent*[] HitBoxs_Stand;//[Offset: 0xe0, Size: 12]
	PrimitiveComponent*[] HitBoxs_Prone;//[Offset: 0xec, Size: 12]
	FString HitBox_Stand_Tag;//[Offset: 0xfc, Size: 12]
	FString HitBox_Prone_Tag;//[Offset: 0x108, Size: 12]
	bool bDebugCollisionLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	OpenCollisionLODAngle[] ConfigCollisionDistSqAngles;//[Offset: 0x118, Size: 12]
	float Server_HitBox_Stand_HalfHeight;//[Offset: 0x124, Size: 4]
	float Server_HitBox_Stand_Radius;//[Offset: 0x128, Size: 4]
	float Server_HitBox_Prone_HalfHeight;//[Offset: 0x12c, Size: 4]
	float Server_HitBox_Prone_Radius;//[Offset: 0x130, Size: 4]
	bool bCloseCharacterMeshCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	BodyTypeDef ProneBodyDef;//[Offset: 0x138, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x140, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x148, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x150, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x158, Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x160, Size: 60]
	float PawnCollisionCountdown;//[Offset: 0x19c, Size: 4]
	bool IsRefreshPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	float BoxCollisionCountdown;//[Offset: 0x1a4, Size: 4]
	bool IsRefreshBoxCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	void UpdatePoseCollisionShapes(byte PoseState);// 0x1ee1b34
	void UpdateAllInstanceBodyTransform(int Type);// 0x20744f0
	PrimitiveComponent* GetHitBoxByState(enum InPoseState);// 0x207fd94
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x207fd00
	enum GetHitBodyTypeByBoneName(FString InBoneName);// 0x207fc34
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x207fac0
	byte GetCurHitPartJugementType();// 0x207fa98
	void CloseBodyBulletCollision();// 0x1ebefdc
	enum CalcHitBodyType(out const Vector HitPos, out const Vector Projvec, out const Vector CenterPos, out const BodyTypeDef bodyDef);// 0x207f8fc

--------------------------------
Class: OpenCollisionLODAngle
	float DistSq;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TickControlComponent.ActorComponent.Object
	enum CustomTickType;//[Offset: 0xbc, Size: 1]
	<class Object,enum> NeedTickComponentClassList;//[Offset: 0xc0, Size: 60]
	TickListItem[] NeedTickComponentList;//[Offset: 0xfc, Size: 12]
	byte RoleBits;//[Offset: 0x108, Size: 1]

--------------------------------
Class: TickListItem
	ActorComponent* Comp;//[Offset: 0x0, Size: 4]
	enum RoleType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CharacterMaterialComponent.ActorComponent.Object

--------------------------------
Class: CharacterBodyOffset
	Vector HeadOffset;//[Offset: 0x0, Size: 12]
	Vector PitchOffset;//[Offset: 0xc, Size: 12]
	Vector FootOffset;//[Offset: 0x18, Size: 12]
	Vector TPPSpringArmOffset;//[Offset: 0x24, Size: 12]

--------------------------------
Class: ActivitySyncData
	bool bIsDuringActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIsAttachedToActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bIsMovementDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	Vector AttachedOffsetLocation;//[Offset: 0x4, Size: 12]
	Rotator AttachedOffsetRotation;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WeaponSlotSwitchTimeData
	byte EquipSlot;//[Offset: 0x0, Size: 1]
	float TotalTime;//[Offset: 0x4, Size: 4]
	float AttachWeaponTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpecialAmbientData
	AkAudioEvent* Sound;//[Offset: 0x0, Size: 4]
	FString SwitchGroupName;//[Offset: 0x4, Size: 12]
	FString SwitchValue;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STCharacterNearDeathComp.ActorComponent.Object
	bool bHasFallInWaterFully;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf1, Size: 1]
	float BreathMax;//[Offset: 0x104, Size: 4]
	float AssistAccountableDuration;//[Offset: 0x108, Size: 4]
	float EnterNearDeathDamageInvincibleTime;//[Offset: 0x10c, Size: 4]
	bool bNearDeathOnSinglePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool IsTurnOnDebugSameTeamAccountable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	CurveFloat* CurveLayeredDeathInterval;//[Offset: 0x114, Size: 4]
	int MaxDeathTimes;//[Offset: 0x118, Size: 4]
	bool IsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	int NDStatusEnterTimes;//[Offset: 0x120, Size: 4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x124, Size: 4]
	float EnterNearDeathSeconds;//[Offset: 0x128, Size: 4]
	float Breath;//[Offset: 0x12c, Size: 4]
	int NearDeathRestoredOrignalHealth;//[Offset: 0x130, Size: 4]
	int NearDeathRestoredOrignalBreathAmount;//[Offset: 0x134, Size: 4]
	float NDDecreaseRate;//[Offset: 0x138, Size: 4]
	Controller* EventInstigatorRecorded;//[Offset: 0x140, Size: 4]
	Actor* DamageCauserRecorded;//[Offset: 0x144, Size: 4]
	DamageEvent DamageEventRecorded;//[Offset: 0x148, Size: 8]
	delegate OnPreEnterNearDeath;//[Offset: 0x154, Size: 12]
	float BeCarriedReduceRate;//[Offset: 0x160, Size: 4]
	float BeEnemyCarriedReduceRate;//[Offset: 0x164, Size: 4]
	bool bEnableSwimWhileDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	float SetHealthSafety(float AddVal);// 0x213ba10
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x213b8fc
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x213b7e8
	void ResetDataOnRespawn();// 0x213b7d4
	void RescueFinishSuccessfully();// 0x213b7c0
	void OnRep_BreathChanged();// 0x213b3e4
	bool IsNearDeathInvincible();// 0x213b798
	bool IsHealthAlive();// 0x213b770
	bool IsHaveLastBreathStatus();// 0x213b748
	bool IsFinishedLastBreathStatus();// 0x213b720
	void InitializeOwner(Pawn* TempPawn);// 0x213b6a8
	bool GotoLastBreathStatus(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, bool IsHeadShot);// 0x213b4e0
	Controller* GetRecordedEventInstigator();// 0x213b4c4
	float GetBreathMax();// 0x213b4a8
	float GetBreath();// 0x213b48c
	void EnterSwimWhileDying();// 0x213b478
	void EnableDirectlyDie(bool bEnable);// 0x213b3f8
	void DoFinishLastBreath();// 0x213b3e4
	void DidFinishLastBreath();// 0x213b3d0
	void ClearNearDeathTeammate();// 0x213b3bc
	float AddHealthSafety(float AddVal, bool ForceIgnoreInvinceTime);// 0x213b2f0
	void AddDeadBuff();// 0x213b2dc

--------------------------------
Class: STCharacterRescueOtherComp.ActorComponent.Object
	int WanderingRadius;//[Offset: 0xf4, Size: 4]
	float ReturnToCheckConditionCDTimeSetting;//[Offset: 0xf8, Size: 4]
	anPickerData FanData;//[Offset: 0xfc, Size: 20]
	STExtraBaseCharacter* RescueWho;//[Offset: 0x128, Size: 4]
	STExtraBaseCharacter* CarryWho;//[Offset: 0x12c, Size: 4]
	float RescueingStatusStartTimeSeconds;//[Offset: 0x130, Size: 4]
	float RestoringDuration;//[Offset: 0x14c, Size: 4]
	FString DurationAttrModifyRef;//[Offset: 0x150, Size: 12]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x15c, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x164, Size: 4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x213ca88
	void WaitingConfirmState_ActOnUnsatisfied();// 0x213ca74
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x1fa0fcc
	bool WaitingConfirmCarryState_IsConditionSatisfied();// 0x213ca4c
	void WaitingConfirmCarryState_ActOnUnsatisfied();// 0x213ca38
	void WaitingConfirmCarryState_ActOnSatisfied(float DeltaTime);// 0x1fa0fcc
	void TickAsHelper(float DeltaTime);// 0x213c9c0
	void ServerPlayerConfirm(STExtraBaseCharacter* _RescueWho);// 0x213c90c
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x213c894
	void SelectedCarryEnemyTargetChangeNotifyHUD(Pawn* previousTarget);// 0x213c81c
	bool RescueingState_IsConditionSatisfied();// 0x213c7f4
	void RescueingState_ActOnUnsatisfied();// 0x213c7e0
	void RescueingState_ActOnSatisfied(float DeltaTime);// 0x1fa0fcc
	void RescueingProcessFinished();// 0x213c7cc
	void RefreshTargetChangeNotifyHUD();// 0x213c7b8
	bool PlayerConfirmToRescueClientSide();// 0x213c790
	bool PickTargetsAsHelper(out STExtraBaseCharacter*[] pickedTargets);// 0x213c6bc
	void OnRep_IsRescueingOtherStatusChange();// 0x213c6a8
	bool IsInRescueingStatus();// 0x213c680
	void InitializeOwner(Pawn* _TempPawn, STCharacterNearDeathComp* _Outer);// 0x213c5c4
	float GetRestoringDuration();// 0x213c59c
	void DrawDebugFan();// 0x1ee1bb4

--------------------------------
Class: anPickerData
	float Radius;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 4]

--------------------------------
Class: STCharacterFollowComp.ActorComponent.Object
	TargetJumpOperation* CurRecordingVaultOperation;//[Offset: 0xbc, Size: 4]
	TargetJumpOperation* CurPlayingVaultOperation;//[Offset: 0xc0, Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0xc8, Size: 4]
	float CanFollowDist;//[Offset: 0xcc, Size: 4]
	float QuitFollowAngleInput;//[Offset: 0xd0, Size: 4]
	float QuitFollowDist;//[Offset: 0xd4, Size: 4]
	float PointDensityTimeInterval;//[Offset: 0xd8, Size: 4]
	float DistThrehold;//[Offset: 0xdc, Size: 4]
	bool IsEnableAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xe4, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0xec, Size: 4]
	TargetKeyOperation*[] TargetOps;//[Offset: 0x124, Size: 12]
	TargetKeyOperation* CurOp;//[Offset: 0x130, Size: 4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x2136fbc
	void WaitingConfirmState_ActOnUnsatisfied();// 0x2136fa8
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x1fa0fcc
	TargetJumpOperation* TargetStartVault(Vector vaultStartPos);// 0x2136f30
	void SetInterruptAutoFollowByInput(int InterrupteReason);// 0x2136eb8
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x2136e40
	bool PlayerStopFollow();// 0x2136e18
	bool PlayerConfirmToFollow();// 0x2136df0
	void InitializeOwner(Pawn* _TempPawn);// 0x2136d78
	void FollowingTargetChangeNotifyHUD(Pawn* previousTarget);// 0x2136d00
	bool FollowingState_IsConditionSatisfied();// 0x2136cd8
	void FollowingState_ActOnUnsatisfied();// 0x2136cc4
	void FollowingState_ActOnSatisfied(float DeltaTime);// 0x2136c4c

--------------------------------
Class: TargetJumpOperation.TargetKeyOperation.Object
	void TaskRemoved();// 0x2087384
	byte Start();// 0x1f81a70
	bool IsValidate();// 0x206c860
	void DebugDraw(Color DebugColor, bool isPersist);// 0x225737c
	void Awake();// 0x2087368

--------------------------------
Class: TargetKeyOperation.Object
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x7c, Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0x80, Size: 4]
	byte Update(float DeltaTime);// 0x1f9a088
	FString ToString();// 0x2257440
	void TaskRemoved();// 0x2087384
	byte Start();// 0x1f81a70
	bool IsValidate();// 0x206c860
	bool IsReachable();// 0x1ff6c64
	byte Finish();// 0x1ff6d9c
	void DebugDraw(Color DebugColor, bool isPersist);// 0x225737c
	void Awake();// 0x2087368

--------------------------------
Class: CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x3ac, Size: 4]
	float SpringArmLengthModifier2;//[Offset: 0x3b0, Size: 4]
	float SpringArmLengthModifier3;//[Offset: 0x3b4, Size: 4]
	CurveFloat* SpringArmForwadOffsetByPitchCurve;//[Offset: 0x3b8, Size: 4]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool bUseHitPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 1]
	bool bUseLocalSpaceClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 1]
	bool bClampPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e3, Size: 1]
	float ResultMinPitch;//[Offset: 0x3e4, Size: 4]
	float ResultMaxPitch;//[Offset: 0x3e8, Size: 4]
	bool bEnableShoulderCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	bool bCameraTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 1]
	float FreeCamRotationReturnRate;//[Offset: 0x3fc, Size: 4]
	CameraOffsetData CrouchCameraData;//[Offset: 0x400, Size: 28]
	CameraOffsetData ProneCameraData;//[Offset: 0x41c, Size: 28]
	CameraOffsetData IndoorCameraData;//[Offset: 0x438, Size: 28]
	CameraOffsetData LeanLeftCameraData;//[Offset: 0x454, Size: 28]
	CameraOffsetData LeanRightCameraData;//[Offset: 0x470, Size: 28]
	CameraOffsetData InVehicleCameraData;//[Offset: 0x48c, Size: 28]
	CameraOffsetData NearDeathCameraData;//[Offset: 0x4a8, Size: 28]
	CameraOffsetData PeekLeftCameraData;//[Offset: 0x4c4, Size: 28]
	CameraOffsetData PeekRightCameraData;//[Offset: 0x4e0, Size: 28]
	CameraOffsetData IndoorLowerCameraStand;//[Offset: 0x4fc, Size: 28]
	CameraOffsetData IndoorLowerCameraCrouch;//[Offset: 0x518, Size: 28]
	CameraOffsetData IndoorLowerCameraProne;//[Offset: 0x534, Size: 28]
	CameraOffsetData VaultCameraData;//[Offset: 0x550, Size: 28]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x56c, Size: 28]
	CameraOffsetData InHelicopterCameraData;//[Offset: 0x588, Size: 28]
	CameraOffsetData InFireBalloonCameraData;//[Offset: 0x5a4, Size: 28]
	CameraOffsetData ShoulderLeftCameraData;//[Offset: 0x5c0, Size: 28]
	CameraOffsetData ShoulderRightCameraData;//[Offset: 0x5dc, Size: 28]
	CameraOffsetData PeekLeftCameraDataInShoudler;//[Offset: 0x5f8, Size: 28]
	CameraOffsetData PeekRightCameraDataInShoudler;//[Offset: 0x614, Size: 28]
	float SocketOffsetInterpSpeedInShoulder;//[Offset: 0x630, Size: 4]
	float TargetOffsetInterpSpeedInShoulder;//[Offset: 0x634, Size: 4]
	float ArmLengthInterpSpeedInShoulder;//[Offset: 0x638, Size: 4]
	CameraOffsetData InsectCameraData;//[Offset: 0x63c, Size: 28]
	CameraOffsetData SkillCameraData;//[Offset: 0x658, Size: 28]
	bool bIsGunShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 1]
	bool bIsShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x675, Size: 1]
	CameraOffsetData ShoulderCameraData;//[Offset: 0x678, Size: 28]
	bool NeedTraceHeadCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 1]
	bool bUseFixedTraceTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x695, Size: 1]
	Vector TraceTagetLocation;//[Offset: 0x698, Size: 12]
	float AdditionalSocketOffetZMax;//[Offset: 0x6a8, Size: 4]
	Vector2D AdditionalSocketOffetZPitch;//[Offset: 0x6ac, Size: 8]
	CurveVector* LandingHeavyCameraOffset;//[Offset: 0x6b4, Size: 4]
	float LandingHeavyCameraOffsetDurationTime;//[Offset: 0x6b8, Size: 4]
	float LandingHeavyCameraOffsetPlaySpeed;//[Offset: 0x6bc, Size: 4]
	bool bNeedAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c5, Size: 1]
	bool bIsPlayingCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c6, Size: 1]
	float OffsetCountTime;//[Offset: 0x6c8, Size: 4]
	float OffSetDurTime;//[Offset: 0x6cc, Size: 4]
	float RevertMoveSpeed;//[Offset: 0x6d0, Size: 4]
	CurveVector* TargetOffsetAnimCurve;//[Offset: 0x6d4, Size: 4]
	Transform PrevRelativeTrans;//[Offset: 0x6e0, Size: 48]
	Vector PrevRelativeSocketLocation;//[Offset: 0x710, Size: 12]
	Quat PrevRelativeSocketRotation;//[Offset: 0x720, Size: 16]
	void SetSelfieCameraDefRotation();// 0x1f8a3e4
	void SetFreeCameraAutoReturn(bool bEnabled);// 0x1f8a364
	void SetCustomCameraDataEnable(out CameraOffsetData CustomCameraData, bool IsEnable);// 0x1f8a258
	void SetCameraDataEnable(byte CameraDataType, bool IsEnable);// 0x1f8a194
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x1f8a028
	void DelayRotationLagEnabledEnd();// 0x1f8a014
	void DelayRotationLagEnabled(bool bEnabled, float Time);// 0x1f89f4c
	void DelayRotationBackLagEnabledEnd();// 0x1f89f38
	void DelayRotationBackLagEnabled(bool bEnabled, float Time, out const Rotator InRotation);// 0x1f89e20

--------------------------------
Class: STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SocketOffsetInterpSpeed;//[Offset: 0x318, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0x31c, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x320, Size: 4]
	CameraOffsetData CurCameraData;//[Offset: 0x36c, Size: 28]
	CameraOffsetData DefaultCameraData;//[Offset: 0x388, Size: 28]
	bool bViewTargetIsAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	PlayerController* CachedPC;//[Offset: 0x3a8, Size: 4]
	void OnRespawned();// 0x1f3a6e8
	Rotator GetTargetRotation();// 0x222a6e4
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x1f8a028
	void ClearCameraData();// 0x2100538

--------------------------------
Class: SyncAKEvent
	int AkEventID;//[Offset: 0x0, Size: 4]
	Vector AkLocation;//[Offset: 0x4, Size: 12]

--------------------------------
Class: DamageCauserRecordData
	Controller* Causer;//[Offset: 0x0, Size: 4]
	float Time;//[Offset: 0x4, Size: 4]
	float Damage;//[Offset: 0x8, Size: 4]
	int StatusChangeMargin;//[Offset: 0xc, Size: 4]
	int DamageType;//[Offset: 0x10, Size: 4]
	int AdditionalParam;//[Offset: 0x14, Size: 4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int WeaponId;//[Offset: 0x1c, Size: 4]
	int FloorType;//[Offset: 0x20, Size: 4]

--------------------------------
Class: STCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c1, Size: 1]
	float CheckPassWallShapeShrinkScale;//[Offset: 0x6c4, Size: 4]
	float AdjustRadiusScaleWhenPassWall;//[Offset: 0x6c8, Size: 4]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x6cc, Size: 4]
	float MaxPrisonmentMove;//[Offset: 0x6d0, Size: 4]
	bool NoPrisonReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d4, Size: 1]
	bool bIgnoreClientRotationErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d5, Size: 1]
	bool bIsServerPriorityControlShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ec, Size: 1]
	bool bNotUseClientCustomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ed, Size: 1]
	float ShovelingStopMaxRelianceClientTime;//[Offset: 0x6f0, Size: 4]
	float EnterShovelCD;//[Offset: 0x6f4, Size: 4]
	float DSEnterShovelCD;//[Offset: 0x6f8, Size: 4]
	float ShovelingCollisionHalfHeight;//[Offset: 0x6fc, Size: 4]
	float MaxShovelFloorAngle;//[Offset: 0x700, Size: 4]
	float UseVelocityDirMinSpeed;//[Offset: 0x704, Size: 4]
	float StandMinEnterShovelingSpeed;//[Offset: 0x708, Size: 4]
	float CrounchMinEnterShovelingSpeed;//[Offset: 0x70c, Size: 4]
	float DefaultShovelingSpeed;//[Offset: 0x710, Size: 4]
	float DefaultShovelingDCC;//[Offset: 0x714, Size: 4]
	float ExtraShovelingDCC1;//[Offset: 0x718, Size: 4]
	float ExtraShovelingDCC2;//[Offset: 0x71c, Size: 4]
	float ExtraShovelingDCC3;//[Offset: 0x720, Size: 4]
	float MinusGradeShovelingACC;//[Offset: 0x724, Size: 4]
	float MinusGradeShovelingDCC;//[Offset: 0x728, Size: 4]
	float MaxShovelingSpeed;//[Offset: 0x72c, Size: 4]
	float StopShovelingSpeed;//[Offset: 0x734, Size: 4]
	float MinNoDCCInShovelingSlopeAngle;//[Offset: 0x738, Size: 4]
	float MAxNoDCCInShovelingSlopeAngle;//[Offset: 0x73c, Size: 4]
	float EnterShovelingMinHeightInFalling;//[Offset: 0x740, Size: 4]
	float ShovelingFPPFovVaule;//[Offset: 0x744, Size: 4]
	float EnterShovelingFPPFovChangeSpeed;//[Offset: 0x748, Size: 4]
	float ExitShovelingFPPFovChangeSpeed;//[Offset: 0x74c, Size: 4]
	float ShovelingTPPFovVaule;//[Offset: 0x750, Size: 4]
	float EnterShovelingTPPFovChangeSpeed;//[Offset: 0x754, Size: 4]
	float ExitShovelingTPPFovChangeSpeed;//[Offset: 0x758, Size: 4]
	float ShovelingLegBodyMaxAngle;//[Offset: 0x75c, Size: 4]
	float ShovelingLegStartFollowBodyMinAngle;//[Offset: 0x760, Size: 4]
	float ShovelingLegFollowBodySpeed;//[Offset: 0x764, Size: 4]
	float MaxAngleShovelingLegFollowBodySpeed;//[Offset: 0x768, Size: 4]
	float ShovelingLegFollowFloorSpeed;//[Offset: 0x76c, Size: 4]
	SoftObjectPath ShovelingEffectPath;//[Offset: 0x770, Size: 24]
	AkAudioEvent* EnterShovelingSound;//[Offset: 0x788, Size: 4]
	AkAudioEvent* ExitShovelingSound;//[Offset: 0x78c, Size: 4]
	AkAudioEvent* InterruptShovelingSound;//[Offset: 0x790, Size: 4]
	bool bIgnoreClientMovementModeErrorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x794, Size: 1]
	bool bIgnoreClientMovementModeSkillChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x794, Size: 1]
	float nowShovelingSpeed;//[Offset: 0x798, Size: 4]
	Rotator ShovelingRotation;//[Offset: 0x79c, Size: 12]
	bool ShovelingIsTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	bool ShovelingIsHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a9, Size: 1]
	byte ShovelingPrePoseState;//[Offset: 0x7ab, Size: 1]
	float PreShovelFov;//[Offset: 0x7ac, Size: 4]
	delegate OnClientAdjustPosition;//[Offset: 0x7c4, Size: 12]
	delegate OnCharacterServerMoveDelegate;//[Offset: 0x7d0, Size: 12]
	delegate OnShovelStateChangeForBP;//[Offset: 0x7dc, Size: 12]
	ParticleSystemComponent* ShovelingParticleSystemComponent;//[Offset: 0x7f0, Size: 4]
	bool StopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f4, Size: 1]
	float TimeSpeedFactor;//[Offset: 0x7f8, Size: 4]
	bool CheatCheckSumFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fc, Size: 1]
	bool bCanSendCmdAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fd, Size: 1]
	bool bCheatClientLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fe, Size: 1]
	float MaxPenetrationAdjustmentSize;//[Offset: 0x800, Size: 4]
	bool bIgnoreChangingMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x804, Size: 1]
	bool bEnableAdjustFloorHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x805, Size: 1]
	bool bEnableJumpOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x806, Size: 1]
	float JumpOffVelocityFactor;//[Offset: 0x808, Size: 4]
	bool mb_UseVehiclePushSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80c, Size: 1]
	bool mb_UseVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80d, Size: 1]
	float MaxDecideClientTimeSpeedDeltaTime;//[Offset: 0x810, Size: 4]
	bool bUseTimeSpeedAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x814, Size: 1]
	bool bUseUserCmdDeltaCompress;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x814, Size: 1]
	float SimulatedNearDistanceSqAtClient;//[Offset: 0x818, Size: 4]
	float SimulatedNearTickIntervalAtClient;//[Offset: 0x81c, Size: 4]
	float SimulatedMiddleDistanceSqAtClient;//[Offset: 0x820, Size: 4]
	float SimulatedMiddleTickIntervalAtClient;//[Offset: 0x824, Size: 4]
	float SimulatedFarDistanceSqAtClient;//[Offset: 0x828, Size: 4]
	float SimulatedFarTickIntervalAtClient;//[Offset: 0x82c, Size: 4]
	float WalkSpeedCurveScale;//[Offset: 0x830, Size: 4]
	CurveFloat* MaxWalkSpeedCurve;//[Offset: 0x834, Size: 4]
	float ProneFloorAngle;//[Offset: 0x838, Size: 4]
	float ProneFloorZ;//[Offset: 0x83c, Size: 4]
	float JumpFloorAngle;//[Offset: 0x840, Size: 4]
	float JumpFloorZ;//[Offset: 0x844, Size: 4]
	float ResolvePenetrationPosDiffSq;//[Offset: 0x848, Size: 4]
	float ResolvePenetrationAdjustment;//[Offset: 0x84c, Size: 4]
	bool bOpenLocationSmoothOnDynamicMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 1]
	float DistSqOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x854, Size: 4]
	float DistAngleOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x858, Size: 4]
	bool bProcessDeltaRotationWhenKnockedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x874, Size: 1]
	bool EnabledResetPredictionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x875, Size: 1]
	bool bEnableAdjustWhenStepUpFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x876, Size: 1]
	float AdjustDistanceWhenStepUpFailed;//[Offset: 0x878, Size: 4]
	bool ForceSimulatedOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 1]
	float CurrentEnterShovelCD;//[Offset: 0x95c, Size: 4]
	bool bFixParachuteEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x960, Size: 1]
	float CheckDistanceAhead;//[Offset: 0x964, Size: 4]
	bool bPrintMoveStatusDataDebugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x968, Size: 1]
	int PrintMoveStatusDataDebugsMaxNum;//[Offset: 0x96c, Size: 4]
	float BaseSolvedWallCheckDistance;//[Offset: 0x980, Size: 4]
	float BaseSolvedWallTraceDistance;//[Offset: 0x984, Size: 4]
	float BaseSolvedWallOutDistance;//[Offset: 0x988, Size: 4]
	float BaseSolvedWallMoveWithForwardCos;//[Offset: 0x98c, Size: 4]
	bool bStepUpHardIgnoreEdgeTolerance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x990, Size: 1]
	float fStepDownEdgeToleranceRate;//[Offset: 0x994, Size: 4]
	float fStepDownSuccessEdgeToleranceRate;//[Offset: 0x998, Size: 4]
	float MaxBaseStepUpHeight;//[Offset: 0x99c, Size: 4]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a0, Size: 1]
	CharacterDistanceSquareTickInternal[] AIDSTickDistanceInternal;//[Offset: 0x9a4, Size: 12]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b4, Size: 1]
	CharacterDistanceSquareTickInternal[] AIDSPhysicsQueryDistanceInternal;//[Offset: 0x9bc, Size: 12]
	float DSAIDistanceOptimizeEnhanceAngle;//[Offset: 0x9c8, Size: 4]
	float AIMovementSimulatePredictTime;//[Offset: 0x9e0, Size: 4]
	STExtraBaseCharacter* STCharacter_PRIVATE;//[Offset: 0x9e8, Size: 4]
	bool bOpenServerControlPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa01, Size: 1]
	float MaxFlyAcceleration;//[Offset: 0xa08, Size: 4]
	float fSimulateInterpolateSmoothLocationTime;//[Offset: 0xa48, Size: 4]
	int nMaxSimulateCacheNum;//[Offset: 0xa78, Size: 4]
	float SimulateBufferDelayLagThrehold;//[Offset: 0xa80, Size: 4]
	float SimulateBufferDelaySecondsWhenLag;//[Offset: 0xa88, Size: 4]
	float SimulateBufferDelaySecondsWhenNoLag;//[Offset: 0xa8c, Size: 4]
	float fServerMoveNetLagScaleSecMin;//[Offset: 0xa90, Size: 4]
	float fServerMoveNetLagScaleSecMax;//[Offset: 0xa94, Size: 4]
	float fServerMoveAllowDiscrepancySquare;//[Offset: 0xa98, Size: 4]
	float fSkipProxyPredictionOnNetUpdateSquare;//[Offset: 0xa9c, Size: 4]
	float fNoSkipProxyPredictionOnNetUpdateSquare;//[Offset: 0xaa0, Size: 4]
	float fLessThanSkipProxyPredictionOnNetUpdateCosTheta;//[Offset: 0xaa4, Size: 4]
	float fSimulatePredictionNoAttenuationSec;//[Offset: 0xaac, Size: 4]
	float fSimulatePredictionAttenuationSecMax;//[Offset: 0xab0, Size: 4]
	float fSimulatePredictionAttenuationRate;//[Offset: 0xab4, Size: 4]
	float fSimulatePredictionAttenuationRateNearlyNoChg;//[Offset: 0xab8, Size: 4]
	CustomSkillMoveData DirectMoveData;//[Offset: 0xad0, Size: 40]
	CustomSkillMoveData AirJumpData;//[Offset: 0xaf8, Size: 40]
	PrimitiveComponent* CurrentClientMovementBase;//[Offset: 0xb34, Size: 4]
	float ComputeFloorConsiderClientPosDiffSizeSqMax;//[Offset: 0xb40, Size: 4]
	float SkilDirectMoveInertiaRatio;//[Offset: 0xb60, Size: 4]
	float SkilAirJumpJoystickForceSize;//[Offset: 0xb64, Size: 4]
	float ReportSimulateDragConfigSeconds;//[Offset: 0xb68, Size: 4]
	bool UpdatedComponentWithBase(float DeltaSeconds, Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x2139d78
	void ToggleUserCmdDelta(bool Val);// 0x2139cc0
	void TimeSpeedCheck(bool Val);// 0x2139c08
	void SeverReportSimulateDrag(int DragCount);// 0x2139b54
	void SeverAddRotationVelocity(const Vector RotationVelocity);// 0x2139aa8
	void SetProneFloorZ(float InProneFloorZ);// 0x2139a30
	void SetProneFloorAngle(float InProneFloorAngle);// 0x21399b8
	void SetJumpFloorZ(float InJumpFloorZ);// 0x2139940
	void SetJumpFloorAngle(float InJumpFloorAngle);// 0x21398c8
	void SetBase(PrimitiveComponent* NewBase, const FName BoneName, bool bNotifyActor);// 0x21397b0
	void ServerUserMoveCmdOld(int ClientApplySequence, const byte[] UserCmdDelta);// 0x2139684
	void ServerUserMoveCmdDual(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, const byte[] UserCmd, const byte[] UserCmdDelta);// 0x2139438
	void ServerUserMoveCmd(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, const byte[] UserCmd);// 0x2139278
	void ReleaseSimulateMoveCaches(bool bDestroy);// 0x21391f8
	void RefreshCharacterWithBase();// 0x21391e4
	void ProcessCacheSimulateRepMove(float DeltaSeconds);// 0x213916c
	void Ping2Server(float ServerTime, float ClientTime);// 0x2139080
	void Ping2Client(float ServerTime);// 0x2139008
	void PhysicsFlyDistance(float DeltaTime, out const Vector flyVelocity);// 0x2138f40
	void OnRespawned();// 0x2138f24
	void OnRecycled();// 0x2138f08
	void OnRecoverOnServer();// 0x2138eec
	void OnPreReconnectOnServer();// 0x2138ed8
	void OnClientCloseUserCmdDelta();// 0x2138ec4
	float K2_GetProneFloorZ();// 0x2138e9c
	float K2_GetProneFloorAngle();// 0x2138e74
	float K2_GetJumpFloorZ();// 0x2138e4c
	float K2_GetJumpFloorAngle();// 0x2138e24
	bool IsWalkable(out const HitResult Hit);// 0x2138d78
	bool IsSimulateWeakNetworkOptimize();// 0x2138d50
	bool IsProning();// 0x2138d28
	bool IsAutonomousWeakNetworkOptimize();// 0x2138d00
	bool HasDsSwitchOpenWeakNetworkOptimize();// 0x2138cd8
	STExtraBaseCharacter* GetSTCharacter();// 0x2138cb0
	Vector GetPendingImpulse();// 0x2138c8c
	Vector GetLocationOffsetToBase();// 0x2138c44
	float GetLastServerMoveTime();// 0x2138c1c
	bool GetIsOpenShovelingAbility();// 0x2138bf4
	float GetHasPredictionSeconds(Vector PredictionDeltaLoc, Vector PredictionVelocity);// 0x2138b2c
	Vector GetComputeFloorDistStartLocation();// 0x2138ae4
	Vector GetBaseLocation();// 0x2138a9c
	Vector GetAcceleration();// 0x2138a54
	void EnterDirectMove(out const Vector Speed, float Time, CurveFloat* SpeedCurve);// 0x2138944
	void EnterAirJump(out const Vector Speed, float Time, CurveFloat* SpeedCurve);// 0x2138834
	bool DragOnGround(float DeltaTime);// 0x21387b4
	void DisableSimulateCorrection(bool bDisable);// 0x2138734
	void ClientVeryShortAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x213848c
	void ClientUserMoveCmdAck(int Sequence);// 0x2138414
	void ClientAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x213810c
	void ChangePhysxShapeFlag();// 0x1ee1bb4
	void CacheSimulateRepMove(out const RepMovement RepMove, float ServerTimeStamp);// 0x2138038
	bool AllowClientLocationWithDSPrediction(out const Vector InClientLoc, float NetLagDiffScale);// 0x2137f64

--------------------------------
Class: CharacterDistanceSquareTickInternal
	float DistanceSquare;//[Offset: 0x0, Size: 4]
	float TickInternal;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CustomSkillMoveData
	CurveFloat* SpeedCurve;//[Offset: 0x24, Size: 4]

--------------------------------
Class: SimViewData
	uint16 ViewPitch;//[Offset: 0x0, Size: 2]
	uint16 ViewYaw;//[Offset: 0x2, Size: 2]
	byte ViewRoll;//[Offset: 0x4, Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]

--------------------------------
Class: AnchorPlatData
	int AnchorPlatResID;//[Offset: 0x0, Size: 4]
	int AnchorPlatColorID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: InteractiveMoveActor.LuaActor.Actor.Object
	class InteractiveActorMoveComponent* MoveComponent;//[Offset: 0x38c, Size: 4]
	byte InteractiveMoveType;//[Offset: 0x390, Size: 1]
	bool InFPPViewPitchLimitMaxEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 1]
	float InFPPViewPitchLimitMin;//[Offset: 0x394, Size: 4]
	float InFPPViewPitchLimitMax;//[Offset: 0x398, Size: 4]
	float InFPPViewYawLimit;//[Offset: 0x39c, Size: 4]

--------------------------------
Class: InteractiveActorMoveComponent.MovementComponent.ActorComponent.Object
	InteractiveMoveActor* TargetActor;//[Offset: 0xf4, Size: 4]
	void OnRep_TargetActorNotify(InteractiveMoveActor* IMActor);// 0x20272b4
	bool IsTakeOverJump();// 0x2027284
	bool IsInInteractiveState();// 0x2027254
	void HandleJumpInput();// 0x2027238
	void HandleEnterInput();// 0x202721c

--------------------------------
Class: PlayerGunCollosionComp.ActorComponent.Object
	float DetectInterval;//[Offset: 0xbc, Size: 4]
	int DetectThreshold;//[Offset: 0xc0, Size: 4]
	float FoldFactor;//[Offset: 0xc4, Size: 4]
	STExtraBaseCharacter* pCharOwner;//[Offset: 0xc8, Size: 4]
	Vector BoxHalfSize;//[Offset: 0xd4, Size: 12]
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0xe0, Size: 12]
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0xec, Size: 12]
	Vector QEoffsetPeekLeft;//[Offset: 0xf8, Size: 12]
	Vector QEoffsetPeekRight;//[Offset: 0x104, Size: 12]
	float StaticTraceLengthOffset;//[Offset: 0x110, Size: 4]
	Vector QEoffsetPeekStandAdd;//[Offset: 0x114, Size: 12]
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x120, Size: 12]
	Vector QEoffsetPeekProneAdd;//[Offset: 0x12c, Size: 12]
	int FoldFactorDelt;//[Offset: 0x138, Size: 4]
	int FoldFactorDeltChange;//[Offset: 0x13c, Size: 4]
	int TraceDis;//[Offset: 0x140, Size: 4]
	float TickDeltTime;//[Offset: 0x144, Size: 4]
	bool IsDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	Actor*[] SweepIgnoreActors;//[Offset: 0x150, Size: 12]
	bool IsUseCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	void SetEffect(const bool Visbile, out const Vector EffectLoc);// 0x2099f98
	void CheckCollision(out const int InFoldFactor, out const Vector FoldPoint, out const Vector FoldNormal);// 0x2099e60

--------------------------------
Class: PlayerSwimComponent.ActorComponent.Object
	delegate OnPlayerTouchWater;//[Offset: 0x100, Size: 12]
	float MaxBreathAmount;//[Offset: 0x10c, Size: 4]
	float DrowningHurtHight;//[Offset: 0x110, Size: 4]
	float SwimWaterNearHeight;//[Offset: 0x114, Size: 4]
	float SwimWaterBodyOffset;//[Offset: 0x118, Size: 4]
	float SwimWaterSufaceOffset;//[Offset: 0x11c, Size: 4]
	float BreathVauleChangeoffset;//[Offset: 0x120, Size: 4]
	float OpBreathVauleChangeoffset;//[Offset: 0x124, Size: 4]
	float BreathDeltaTime;//[Offset: 0x128, Size: 4]
	float MaxSpeedScaleHeightOffset;//[Offset: 0x12c, Size: 4]
	float MinSpeedScale;//[Offset: 0x130, Size: 4]
	float MaxCrouchWaterHeight;//[Offset: 0x134, Size: 4]
	float MaxProneWaterHeight;//[Offset: 0x138, Size: 4]
	float DeadInWaterLocZOffset;//[Offset: 0x13c, Size: 4]
	float RollMaxAngle;//[Offset: 0x140, Size: 4]
	float DistoVolume;//[Offset: 0x144, Size: 4]
	bool ResetEnterWaterWhenVolumeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	CharacterMovementComponent* CharaterMovement;//[Offset: 0x160, Size: 4]
	bool AdjustCharacterInvalidHeightInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x165, Size: 1]
	float CheckCharacterInWaterInternal;//[Offset: 0x168, Size: 4]
	float CharacterInWaterInvalidHeight;//[Offset: 0x16c, Size: 4]
	CharacterMovementComponent* OwnerMovementComp;//[Offset: 0x174, Size: 4]
	STExtraBaseCharacter* OwnerPlayerCharater;//[Offset: 0x178, Size: 4]
	PhysicsVolume* UnderWaterBox;//[Offset: 0x17c, Size: 4]
	float DyingSwimSpeedRate;//[Offset: 0x180, Size: 4]
	bool bDyingSwimChangeCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 1]
	void UpdateSwimCollisionHeightCpp();// 0x20a4448
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x20a43d0
	void OnPawnExitParachute();// 0x20a43bc
	void LeaveWater();// 0x20a43a8
	Actor* GetWaterObject();// 0x20a4380
	void EnterWater_BluePrint();// 0x2bb69b8
	void EnterWater(Actor* WaterObject);// 0x20a4308
	void BP_UnderWaterStateChanged(bool bEnterWater);// 0x2bb69b8

--------------------------------
Class: PoseChangeTime
	float PoseChange_Prone_Stand;//[Offset: 0x0, Size: 4]
	float PoseChange_Prone_Move;//[Offset: 0x4, Size: 4]
	float PoseChange_UnProne_Stand;//[Offset: 0x8, Size: 4]
	float PoseChange_UnProne_Move;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BaseCharacterPickupProxy.PickupProxy.Object
	STExtraBaseCharacter* ProxyOwnerCharacter;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PickupProxy.Object
	Actor* ProxyOwner;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PickupManagerComponent.ActorComponent.Object
	float CheckPickUpInterval;//[Offset: 0xf4, Size: 4]
	float PickUpZLimit;//[Offset: 0xf8, Size: 4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0x100, Size: 12]
	int FindPutDownPointCircleSplitNum;//[Offset: 0x10c, Size: 4]
	float FindPutDownPointZThreshold;//[Offset: 0x110, Size: 4]
	float FindPutDownPointZTraceOffset;//[Offset: 0x114, Size: 4]
	Vector2D RegionXRange;//[Offset: 0x118, Size: 8]
	Vector2D RegionYRange;//[Offset: 0x120, Size: 8]
	bool bDrawDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0x12c, Size: 12]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x138, Size: 4]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x13c, Size: 4]
	float DrawTime;//[Offset: 0x140, Size: 4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x148, Size: 4]
	<SearchedPickUpItemResult,float> RecentAutoPickupMap;//[Offset: 0x14c, Size: 60]
	Actor*[] PickupAvailableActorPool;//[Offset: 0x188, Size: 12]
	Actor*[] ConfirmedPickupActorPool;//[Offset: 0x194, Size: 12]
	void ServerPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x208bf70
	void ServerPutDownTarget(Actor* Target);// 0x208bebc
	void ServerPickUpTarget(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x208bd28
	void ServerPickUpAttachmentTarget(Actor* Target, const PickUpItemData ItemData, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x208bab0
	void PutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x208b9f0
	void PutDownTarget(Actor* Target);// 0x208b978
	void PickUpTargetAttachment(Actor* Target, out const PickUpItemData ItemData, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x208b744
	void PickUpTarget(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x208b5fc
	void NotifyMissPickupAvailableActor(Actor* Target);// 0x208b584
	void NotifyMeetPickupAvailableActor(Actor* Target, bool bUpdatePickupManager);// 0x208b4c0
	void MarkRecentAutoPickUp(SearchedPickUpItemResult PickUpResult);// 0x208b25c
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x208b1cc
	Vector[] GetNearItemLocationList(out const Vector TargetLoc, float Radius, float IgnoreDist, uint32[] ItemIDs);// 0x208aefc
	void GetConfirmedPickupAvailableActors(out <Actor*> OutSet);// 0x208adf0
	void ControlClientPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x208acec
	void ControlClientPutDownTarget(Actor* Target);// 0x208ac38
	void ControlClientPickUpTarget(Actor* Target, int AdditionalParam);// 0x208ab3c
	void ControlClientPickUpAttachmentTarget(Actor* Target, int AdditionalParam, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x208a988
	void ClampWorldLocation(out Vector OutVector);// 0x208a904
	bool CheckRecentAutoPickUp(SearchedPickUpItemResult PickUpResult, float OverTime);// 0x208a654

--------------------------------
Class: SearchedPickUpItemResult
	PickUpWrapperActor* Wrapper;//[Offset: 0x0, Size: 4]
	PickUpItemData MainItemData;//[Offset: 0x8, Size: 48]

--------------------------------
Class: CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object
	float AttachCheckInterval;//[Offset: 0x520, Size: 4]
	float AttachCheckDistance;//[Offset: 0x524, Size: 4]
	float RefreshUIIntervalAfterReconnect;//[Offset: 0x528, Size: 4]
	int RefreshUITimesAfterReconnect;//[Offset: 0x52c, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x530, Size: 4]
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x54c, Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x558, Size: 12]
	void UpdateDataWhenBagChangedOnServer(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x1f70230
	void UpdateDataWhenBagChangedOnAutonomous();// 0x1f7021c
	void RPC_Client_ResyncWeaponSpawnData(const SpawnAndBackpackWeaponReplicatedData[] SpawnWeaponData);// 0x1f700c0
	void OnRecoverOnServer();// 0x1f700a4
	void OnReconnectOnServer();// 0x1eefba8
	void OnReconnectOnClient();// 0x1f70088
	void OnDisconnectToClientOnServer();// 0x1f70074
	int GetBagLevel();// 0x1eed008

--------------------------------
Class: PlayerVehAnimList
	int FrameCounter;//[Offset: 0x4, Size: 4]
	AnimationAsset* IdleAnim;//[Offset: 0x8, Size: 4]
	AnimationAsset* IdleMotorbikeAnim;//[Offset: 0xc, Size: 4]
	AnimationAsset* VacateMotorbikeAnim;//[Offset: 0x10, Size: 4]
	AnimationAsset* LeanOutAnim;//[Offset: 0x14, Size: 4]
	AnimationAsset* LeanInAnim;//[Offset: 0x18, Size: 4]
	AnimationAsset* AimAnim;//[Offset: 0x1c, Size: 4]
	AnimationAsset* WeaponIdleAddition;//[Offset: 0x20, Size: 4]
	AnimationAsset* WeaponAimAddition;//[Offset: 0x24, Size: 4]
	AnimationAsset* WeaponReloadAddition;//[Offset: 0x28, Size: 4]
	AnimationAsset* SurfBoard_IdleAnim;//[Offset: 0x2c, Size: 4]
	AnimationAsset* SurfBoard_MoveAnim;//[Offset: 0x30, Size: 4]
	AnimationAsset* SurfBoard_JumpAnim;//[Offset: 0x34, Size: 4]
	AnimationAsset* SurfBoard_LandAnim;//[Offset: 0x38, Size: 4]
	AnimationAsset* SurfBoard_JumpLeftTurnAnim;//[Offset: 0x3c, Size: 4]
	AnimationAsset* SurfBoard_JumpRightTurnAnim;//[Offset: 0x40, Size: 4]
	AnimationAsset* Ski_JumpStationary;//[Offset: 0x44, Size: 4]
	AnimationAsset* Ski_DownTurnLR;//[Offset: 0x48, Size: 4]
	AnimationAsset* Ski_DownTurnRL;//[Offset: 0x4c, Size: 4]
	AnimationAsset* Ski_DownTurnFD;//[Offset: 0x50, Size: 4]
	AnimationAsset* Ski_Falling;//[Offset: 0x54, Size: 4]
	AnimationAsset* Ski_DownFallLandingAdditive;//[Offset: 0x58, Size: 4]
	AnimationAsset* Ski_DownFallLandingHard;//[Offset: 0x5c, Size: 4]
	AnimationAsset* VehicleWeaponIdleAnim;//[Offset: 0x60, Size: 4]
	AnimationAsset* VehicleWeaponReloadAnim;//[Offset: 0x64, Size: 4]
	AnimationAsset* VehicleWeaponAimOffsetAnim;//[Offset: 0x68, Size: 4]
	AnimationAsset* MotorgliderSteerAnim;//[Offset: 0x6c, Size: 4]
	AnimationAsset* MotorgliderIdleAnim;//[Offset: 0x70, Size: 4]
	AnimationAsset* VehicleDriverForwardAnim;//[Offset: 0x74, Size: 4]

--------------------------------
Class: AnimVehParamList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	bool IsLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool IsSwitchingSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool IsIdleAnimReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	float VacateHight;//[Offset: 0x8, Size: 4]
	bool IsVehicleMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Rotator VehViewRotation;//[Offset: 0x10, Size: 12]
	Vector VehMoveVelocity;//[Offset: 0x1c, Size: 12]
	byte SeatWeaponHoldType;//[Offset: 0x28, Size: 1]
	byte SeatSpecialType;//[Offset: 0x29, Size: 1]
	enum VehicleType;//[Offset: 0x2a, Size: 1]
	float LeanOutPercentage;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: AnimStatusKeyList
	STExtraWeapon* EquipWeapon;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BodyPartCfg
	float DamageScale;//[Offset: 0x0, Size: 4]
	float Durability;//[Offset: 0x4, Size: 4]
	float DamageReduceScale;//[Offset: 0x8, Size: 4]
	float DamageReduceScaleIgnoreDurability;//[Offset: 0xc, Size: 4]
	float BrokenArmorDamageReduceScale;//[Offset: 0x10, Size: 4]
	float DurabilityReduceScale;//[Offset: 0x14, Size: 4]
	FString BodyDurabilityIndexName;//[Offset: 0x18, Size: 12]
	float MomentumResistance;//[Offset: 0x24, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactEffectOverride;//[Offset: 0x28, Size: 4]

--------------------------------
Class: CharacterEnergyData
	CharacterEnergyPhase[] EnergyEffactPhase;//[Offset: 0x0, Size: 12]
	float EnergyMax;//[Offset: 0xc, Size: 4]
	float EnergyCurrent;//[Offset: 0x10, Size: 4]
	float EnergyPredict;//[Offset: 0x14, Size: 4]
	float AttenuationPeriod;//[Offset: 0x18, Size: 4]
	float AttenuationAmount;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: CharacterEnergyPhase
	float MakeEffectSection;//[Offset: 0x0, Size: 4]
	FString BuffName;//[Offset: 0x4, Size: 12]

--------------------------------
Class: STDamageCameraShake.CameraShake.Object
	float DamageShakeScale;//[Offset: 0x140, Size: 4]

--------------------------------
Class: HealthPredictShowData
	FString ShowDataKey;//[Offset: 0x0, Size: 12]
	byte ShowType;//[Offset: 0xc, Size: 1]
	float Value;//[Offset: 0x10, Size: 4]
	float LimitValue;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SecuryInfoComponent.ActorComponent.Object
	GameBaseInfo GameBaseInfo;//[Offset: 0x130, Size: 104]
	UAEGameMode* UAEGM;//[Offset: 0x198, Size: 4]
	void ServerSendGameStartFlow(out const ClientGameStartFlow ClientGameStartFlow);// 0x20e22d0
	void ServerSendGameEndFlow(out const ClientGameEndFlow ClientGameEndFlow);// 0x20e2220
	void ReportVerifyInfoFlow();// 0x20e21c4
	void ReportSecAttackFlow(const SecAttackFlow SecAttackFlow);// 0x20e20f4
	void ReportPlayerKillFlow(const ClientSecPlayerKillFlow PlayerKillFlow);// 0x20e2004
	void ReportMrpcsFlow(const ClientSecMrpcsFlow MrpcsFlow);// 0x20e1f14
	void ReportJumpFlow(const ClientJumpFlow JumpFlow);// 0x20e1e44
	void ReportHurtFlow(const HurtFlow HurtFlow);// 0x20e1d74
	void ReportGvoiceTeamQuit(const GvoiceTeamQuit teamQuit);// 0x20e1c44
	void ReportGvoiceTeamCreate(const GvoiceTeamCreate teamCreate);// 0x20e1b14
	void ReportGameStartFlow(const ClientGameStartFlow GameStartFlow);// 0x20e1a10
	void ReportGameSetting(const GameSetting GameSetting);// 0x20e1920
	void ReportGameEndFlow(const ClientGameEndFlow GameEndFlow);// 0x20e1850
	void ReportGameBaseInfo(const GameBaseInfo BaseInfo);// 0x20e1750
	void ReportCircleFlow(const ClientCircleFlow CircleFlow);// 0x20e1680
	void ReportAttackFlow(const AttackFlow AttackFlow);// 0x20e15b0
	void ReportAimFlow(const AimFlow AimFlow);// 0x20e14e0
	void HandleGameModeStateChanged(out const GameModeStateChangedParams Params);// 0x20e1450
	void GetWeaponProperty(STExtraBaseCharacter* Character, STExtraWeapon* TWeapon, out int WeaponId, out int BulletID, out int BulletNum);// 0x20e128c
	void CheckSendGameStartFlow();// 0x20e1278
	void CheckSendGameEndFlow();// 0x20e1264

--------------------------------
Class: UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	Object* UtilsPtr;//[Offset: 0x3d8, Size: 8]
	float GridCheckSize;//[Offset: 0x3e0, Size: 4]
	float DeepCheckSize;//[Offset: 0x3e4, Size: 4]
	float HeightCheckSize;//[Offset: 0x3e8, Size: 4]
	int MaxPlayerLimit;//[Offset: 0x3ec, Size: 4]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]
	bool IsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd, Size: 1]
	bool bBornWithApple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fe, Size: 1]
	bool bUseDefaultResultRules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ff, Size: 1]
	int AntiDataCD;//[Offset: 0x400, Size: 4]
	int WeatherID;//[Offset: 0x404, Size: 4]
	FString WeatherName;//[Offset: 0x408, Size: 12]
	int RoomMode;//[Offset: 0x414, Size: 4]
	int SeasonIdx;//[Offset: 0x418, Size: 4]
	float MeteorShowerRatio;//[Offset: 0x41c, Size: 4]
	FString ItemTableName;//[Offset: 0x420, Size: 12]
	FString ItemClassPath;//[Offset: 0x42c, Size: 12]
	FString ReplayPushURL;//[Offset: 0x438, Size: 12]
	int ReplayType;//[Offset: 0x444, Size: 4]
	FString ReplayTitle;//[Offset: 0x448, Size: 12]
	enum EnableObserverEnemyTrace;//[Offset: 0x454, Size: 1]
	FString[] ItemSpawnTableList;//[Offset: 0x458, Size: 12]
	FString[] IgnoreItemClassPathList;//[Offset: 0x464, Size: 12]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x470, Size: 12]
	<uint64,CharacterMoveDragData> CharacterMoveDragDataMap;//[Offset: 0x47c, Size: 60]
	<uint64,VehicleMoveDragData> VehicleMoveDrag;//[Offset: 0x4b8, Size: 60]
	uint32 ServerStartTime;//[Offset: 0x4f4, Size: 4]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 1]
	bool bEnableVehicleInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f9, Size: 1]
	FString PickupBoxConfigClassPath;//[Offset: 0x4fc, Size: 12]
	bool bUseAutoGroupParachuteTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	FString PickupBoxConfigDataTableName;//[Offset: 0x50c, Size: 12]
	FString VehicleTableName;//[Offset: 0x518, Size: 12]
	FString VehicleClassPath;//[Offset: 0x524, Size: 12]
	bool IsUsingSceneDropWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	bool IsRegionItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 1]
	Vector RegionCenter;//[Offset: 0x534, Size: 12]
	float RegionRadius;//[Offset: 0x540, Size: 4]
	<FString,float> BattleCustomConfig;//[Offset: 0x544, Size: 60]
	int MaxAllowReplicatedCharacterCount;//[Offset: 0x580, Size: 4]
	int AINoRepTimeInReady;//[Offset: 0x584, Size: 4]
	class UAEOBState* ObserverPlayerStateClass;//[Offset: 0x588, Size: 4]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 1]
	float NearDeathRestoredOriginHealth;//[Offset: 0x590, Size: 4]
	float NearDeathDecreateBreathRate;//[Offset: 0x594, Size: 4]
	float RescueOtherRestoreDuration;//[Offset: 0x598, Size: 4]
	float DeadTombBoxLifeSpan;//[Offset: 0x59c, Size: 4]
	int DefaultPlayerBornPointID;//[Offset: 0x5a0, Size: 4]
	bool bPlayerExitClearPlayerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 1]
	bool bEnableDSTickLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a5, Size: 1]
	GroupSpotSceneComponent*[] ItemGroupComponents;//[Offset: 0x5a8, Size: 12]
	Actor* ChosenPlayerStartBuildingGroup;//[Offset: 0x5b4, Size: 4]
	DynamicTriggerConfig[] DynamicTriggerConfigs;//[Offset: 0x5b8, Size: 12]
	Actor*[] DynamicTriggers;//[Offset: 0x5c4, Size: 12]
	int IsGameModeFpp;//[Offset: 0x5d0, Size: 4]
	bool IsGameModeBandSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d4, Size: 1]
	DynamicLoadItem[] DynamicLoadItemArray;//[Offset: 0x5d8, Size: 12]
	<DynamicLoadItem,DynamicLoadActors> DynamicLoadItemMap;//[Offset: 0x5e4, Size: 60]
	BornItem[] BornItems;//[Offset: 0x620, Size: 12]
	VehicleAvatarReplaceCfg[] VehicleAvatarReplaceCfgList;//[Offset: 0x62c, Size: 12]
	bool IsOpenItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 1]
	bool IsOpenVehicleGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x639, Size: 1]
	int[] BuffEffectIDArray;//[Offset: 0x63c, Size: 12]
	int[] BuffEffectDisplayIDArray;//[Offset: 0x648, Size: 12]
	int[] DynamicLevelArray;//[Offset: 0x654, Size: 12]
	FString RoomType;//[Offset: 0x660, Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 1]
	bool bOpenForbitTeammatePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66d, Size: 1]
	bool bOpenTeammateImprisonment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66e, Size: 1]
	int ZoneID;//[Offset: 0x670, Size: 4]
	int nClientType;//[Offset: 0x674, Size: 4]
	int nBattleType;//[Offset: 0x678, Size: 4]
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c4, Size: 1]
	bool[] EnabledCollectedEventDataEventIds;//[Offset: 0x9c8, Size: 12]
	bool bIsPreCreatingPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa04, Size: 1]
	float OBInfoTimeStep;//[Offset: 0xae8, Size: 4]
	AirDropBoxInOb[] AirDropBoxInfoList;//[Offset: 0xb0c, Size: 12]
	uint32[] FiringPlayerList;//[Offset: 0xb18, Size: 12]
	UAEPlayerController*[] KickFlagControllerList;//[Offset: 0xb24, Size: 12]
	UAEPlayerController*[] ObserverControllerList;//[Offset: 0xb30, Size: 12]
	AdvertisementActorConfig[] AdvConfigList;//[Offset: 0xbd0, Size: 12]
	UAEAdvertisementActor*[] AdvActorList;//[Offset: 0xbdc, Size: 12]
	MissionBoardConfig[] MissionBoardConfigList;//[Offset: 0xbe8, Size: 12]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf4, Size: 1]
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0xbf8, Size: 12]
	FString HttpPlaneBannerRightImgPath;//[Offset: 0xc04, Size: 12]
	FString GrenadeEffectPath;//[Offset: 0xc10, Size: 12]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1c, Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1d, Size: 1]
	bool bGodzillaWarmUpSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1e, Size: 1]
	bool bOpenNewbieGuideInDeathMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1f, Size: 1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc20, Size: 1]
	bool bOpenAnniversaryActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc21, Size: 1]
	FString FestivalAirDropBoxMesh;//[Offset: 0xc24, Size: 12]
	bool bUseFestivalAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc30, Size: 1]
	float FestivalAirDropProb;//[Offset: 0xc34, Size: 4]
	float MonsterDropPar;//[Offset: 0xc38, Size: 4]
	float SceneDropParam;//[Offset: 0xc3c, Size: 4]
	uint32 DSOpenSwtich;//[Offset: 0xc40, Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0xc44, Size: 4]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0xc48, Size: 4]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4c, Size: 1]
	uint32[] NeedReplayPlayers;//[Offset: 0xc50, Size: 12]
	SeasonStatueData[] SeasonStatueList;//[Offset: 0xc5c, Size: 12]
	FString SeasonStatueClassPath;//[Offset: 0xc68, Size: 12]
	FString StatueBaseClassPath;//[Offset: 0xc74, Size: 12]
	StatueBaseData StatueBaseInfo;//[Offset: 0xc80, Size: 84]
	int BattleStopJoin;//[Offset: 0xcd4, Size: 4]
	int nSignalGunEffectId;//[Offset: 0xcd8, Size: 4]
	CharacterOverrideAttrData[] CharacterOverrideAttrs;//[Offset: 0xcdc, Size: 12]
	bool UseGMSpawnItemSpotDefaultTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5c, Size: 1]
	FString GMSpawnItemSpotDefaultTag;//[Offset: 0xd60, Size: 12]
	bool bStandAloneGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda4, Size: 1]
	bool bStandAloneLuaGenAIData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda5, Size: 1]
	int StandAloneTestPlayerKey;//[Offset: 0xda8, Size: 4]
	FName StandAloneTestPlayerType;//[Offset: 0xdb0, Size: 8]
	void WriteStatistics();// 0x27d5a28
	void SyncPlayerNames();// 0x27d5a0c
	void SyncNewCorpsData(out const DSCorpsInfo[] OutCorpsData);// 0x27d58d0
	Pawn* SpawnUAEPawnFor(Controller* NewPlayer, Transform Trans);// 0x27d5790
	void SetVehicleReportEntry(uint32 InUniqueID, VehicleReportEntry InEntry);// 0x27d569c
	void SetPlayerOpenId(uint32 InPlayerKey, FString InPlayerOpenID);// 0x27d5594
	void SetMaxWeaponReportNum(int Num);// 0x27d5520
	void SetGameEndReportData();// 0x1f378b0
	GameModeTeamBattleResultData RetrieveTeamBattleResultData(int TeamID);// 0x27d546c
	void RetrieveBattleData(out BattleData OutBattleData);// 0x27d53d8
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x20bc950
	void ResetGameParamsFromGameMode();// 0x2163aa8
	void Rescue(Pawn* RescueWho, Pawn* Hero);// 0x27d5314
	bool ReportCollectedEventDataWithPlayerValidation(UAEPlayerController* UAEPlayerController, byte EventId, delegate CollectReportedEventDataCallback);// 0x27d51e0
	bool ReportCollectedEventDataWithPlayersValidation(World* World, byte EventId, delegate CollectReportedEventDataCallback);// 0x27d50ac
	bool ReportCollectedEventData(out const FString UId, byte EventId, out const CollectedEventData Data);// 0x27d4eb4
	void RegisterItemGroupSpotsByTag(FName Tag, GroupSpotSceneComponent* GroupSpotComponent);// 0x27d4df0
	void RegisterItemGroupSpots(GroupSpotSceneComponent* GroupSpotComponent);// 0x27d4d70
	void RefreshWorldActiveRange();// 0x27d4d54
	void RefreshWatchTeammates(UAEPlayerController* InController, int InTeamID);// 0x27d4c90
	void RefreshPlayerNames(uint32 InPlayerKey, FString InPlayerName, int TeamID, bool IsLogin, uint64 UId, int IdxInTeam);// 0x27d49bc
	int RecoardAlivePlayerNum();// 0x27d498c
	PlayerController* PreCreatePlayerController(uint32 PlayerKey);// 0x27d4904
	void OnStandAloneGameEnd();// 0x27d48e8
	void OnReportNetworkData();// 0x1f370e0
	void OnPlayerFiring(uint32 InPlayerKey);// 0x27d4870
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x1f37060
	void OnObserverLogout(UAEPlayerController* InController);// 0x27d47f8
	void OnObserverLogin(UAEPlayerController* InController);// 0x27d4780
	void OnMsg(FString Msg);// 0x27d46bc
	void OnAirDropBoxLanded(int boxId, out const Vector pos);// 0x27d45ec
	void OnAirDropBoxEmpty(int boxId);// 0x27d456c
	void NotifyPlayerExitWhenNotStarted(uint32 PlayerKey, FName PlayerType, FString Reason);// 0x23134f8
	void NotifyPlayerExit(uint32 PlayerKey, FName PlayerType, bool bDestroyPlayerController, bool bDestroyCharacter, bool bSendFailure, FString FailureMessage);// 0x23131fc
	void NotifyPlayerAbleToExitSafely(uint32 PlayerKey, FName PlayerType);// 0x27d44a8
	void NotifyGameModeParamsChanged(out const GameModeParams GameModeParams);// 0x27d4410
	void NotifyGameModeLuckmate(int64 MyUID, int64 LuckmateUID);// 0x27d4338
	void NotifyGameModeInit();// 0x2316338
	void NotifyExistPlayerReEnter(uint32 PlayerKey);// 0x27d42b8
	void NotifyAIPlayerEnter(uint32 PlayerKey);// 0x27d4238
	void NotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x1f36eb0
	float ModifyVehicleDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* VictimVehicle, Actor* DamageCauser);// 0x22e3c38
	float ModifyDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x27d4074
	void Killed(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, out const DamageEvent DamageEvent);// 0x27d3f00
	bool IsSatisfyGeneratorArea(out const Vector Location);// 0x27d3e74
	bool IsPlayerCollectedEventDataReportingEnabled(UAEPlayerController* UAEPlayerController);// 0x27d3df4
	bool IsCollectedEventEnabled(byte EventId);// 0x27d3d74
	void InitWorldActiveRange();// 0x27d3d58
	void InitSeasonStatue();// 0x2138f24
	void InitMissionBoard();// 0x27d3d3c
	void InitGenerator();// 0x27d3d20
	void InitGameParamsFromGameMode();// 0x223bc74
	void InitDynamicTriggers();// 0x27d3d04
	void InitDynamicBuildingGroups();// 0x27d3ce8
	void InitBornWithApple();// 0x27d3ccc
	void InitAdvertisement();// 0x27d3cb0
	void Heartbeat();// 0x27d3c9c
	bool HasVehicleReportEntry(uint32 InUniqueID);// 0x27d3bb4
	bool HasDynamicBuildingGroup();// 0x27d3b8c
	void HandlePlayerPaintDecalResponse(uint32 PlayerKey, FName PlayerType, int Result, int DecalId, int Count);// 0x27d39f0
	void GotoNearDeath(Controller* DamageInstigator, Pawn* VictimPawn);// 0x27d392c
	VehicleReportEntry GetVehicleReportEntry(uint32 InUniqueID);// 0x27d37f4
	int GetSurvivingTeamCount();// 0x27d37c4
	int GetSurvivingCharacterCount();// 0x27d3794
	UAEPlayerState*[] GetPlayerStateListWithTeamID(int TeamID, FName PlayerType);// 0x27d3640
	UAEPlayerController* GetPlayerControllerWithUID(uint64 UId);// 0x27d35bc
	UAEPlayerController*[] GetPlayerControllerListWithTeamID(int TeamID, FName PlayerType);// 0x27d3468
	void GetPlayerAndRealAiNum(out HeartBeatData Data);// 0x27d33c4
	UAEPlayerController*[] GetObserverControllerList();// 0x27d3304
	void GetMonsterNum(out HeartBeatData Data);// 0x27d3260
	int GetMaxWeaponReportNum();// 0x27d3244
	Vector GetClassicPlaneDirection();// 0x27d31f4
	UAEPlayerState* FindPlayerStateWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x27d3130
	UAEPlayerController* FindPlayerControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x27d306c
	PlayerController* FindPlayerControllerByUId(uint64 UId);// 0x1f366d4
	void DestroyNoActiveWorldActor(out Vector Location, out float Radius);// 0x27d2f88
	void DestroyCharacterForPlayerController(PlayerController* PC);// 0x27d2f08
	void DestroyAllPickUpObjs();// 0x1ee1bb4
	void DeleteSeasonStatue();// 0x27d2eec
	void DeleteDynamicLoadItem();// 0x27d2ed0
	void DebugEnterFriendObserver(UAEPlayerController* InController);// 0x27d2e50
	void CreateDynamicBuildingGroups(Vector Offset);// 0x27d2de0
	CollectedEventData CollectReportedEventDataCallback__DelegateSignature(UAEGameMode* UAEGameMode, UAEPlayerController* UAEPlayerController, byte EventId);// 0x2bb69b8
	void CollectAllPlayerInfo(float DeltaSeconds, bool bForce);// 0x27d2d14
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x27d2bc0
	void AddAirDropBox(int boxId, out const Vector pos);// 0x27d2af0

--------------------------------
Class: LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	FString LuaFilePath;//[Offset: 0x3cc, Size: 12]

--------------------------------
Class: DSSwitchInfo
	int KeyNum;//[Offset: 0x0, Size: 4]
	FString SValue;//[Offset: 0x4, Size: 12]

--------------------------------
Class: CharacterMoveDragData
	CharacterMoveDrag[] Drag;//[Offset: 0x0, Size: 12]
	CharacterSimulateMoveDrag[] SimulateDrag;//[Offset: 0xc, Size: 12]

--------------------------------
Class: CharacterMoveDrag
	int Minute;//[Offset: 0x0, Size: 4]
	<byte,int> ReasonCount;//[Offset: 0x4, Size: 60]

--------------------------------
Class: CharacterSimulateMoveDrag
	int Minute;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleMoveDragData
	VehicleMoveDrag[] MoveDrag;//[Offset: 0x0, Size: 12]
	VehicleMoveDrag[] SimulatedMoveDrag;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VehicleMoveDrag
	int Minute;//[Offset: 0x0, Size: 4]
	byte VehicleType;//[Offset: 0x4, Size: 1]
	byte[] Reasons;//[Offset: 0x8, Size: 12]
	int[] Counters;//[Offset: 0x14, Size: 12]

--------------------------------
Class: UAEOBState.PlayerState.Info.Actor.Object

--------------------------------
Class: DynamicTriggerConfig
	DynamicTriggerTransform[] Transforms;//[Offset: 0x0, Size: 12]
	FString TriggerClassPath;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DynamicTriggerTransform
	Vector Loc;//[Offset: 0x0, Size: 12]
	Rotator Rot;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DynamicLoadItem
	DynamicBuildingGroupTransform[] TransArray;//[Offset: 0x0, Size: 12]
	int ActID;//[Offset: 0xc, Size: 4]
	FString Path;//[Offset: 0x10, Size: 12]
	bool IsClearAfterStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool IsPlayerStartPot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	int[] PosIdxList;//[Offset: 0x20, Size: 12]

--------------------------------
Class: DynamicBuildingGroupTransform
	float LocX;//[Offset: 0x0, Size: 4]
	float LocY;//[Offset: 0x4, Size: 4]
	float LocZ;//[Offset: 0x8, Size: 4]
	float RotX;//[Offset: 0xc, Size: 4]
	float RotY;//[Offset: 0x10, Size: 4]
	float RotZ;//[Offset: 0x14, Size: 4]

--------------------------------
Class: DynamicLoadActors
	Actor*[] ActorArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: BornItem
	int BornItemID;//[Offset: 0x0, Size: 4]
	int BornItemCount;//[Offset: 0x4, Size: 4]
	int BornItemFlags;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleAvatarReplaceCfg
	int OriginID;//[Offset: 0x0, Size: 4]
	int[] SkinIDList;//[Offset: 0x4, Size: 12]
	float[] ProbabilityDistribute;//[Offset: 0x10, Size: 12]
	int MaxNum;//[Offset: 0x1c, Size: 4]
	int CurrentNum;//[Offset: 0x20, Size: 4]

--------------------------------
Class: AirDropBoxInOb
	int boxId;//[Offset: 0x0, Size: 4]
	bool Flying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool IsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	Vector pos;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AdvertisementActorConfig
	FString ResPath;//[Offset: 0x0, Size: 12]
	FString HttpImgPath;//[Offset: 0xc, Size: 12]
	Vector Loc;//[Offset: 0x18, Size: 12]
	Rotator Rot;//[Offset: 0x24, Size: 12]
	Vector Scale;//[Offset: 0x30, Size: 12]
	int ID;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: UAEAdvertisementActor.StaticMeshActor.Actor.Object
	StaticMesh* StaticMesh;//[Offset: 0x304, Size: 4]
	FString StaticMeshPath;//[Offset: 0x308, Size: 12]
	FString PicUrl;//[Offset: 0x314, Size: 12]
	int ID;//[Offset: 0x320, Size: 4]
	FrontendHUD* FrontendHUD;//[Offset: 0x324, Size: 4]
	float NetCullDistance;//[Offset: 0x32c, Size: 4]
	void OnRequestImgSuccess(Texture2D* Texture, FString RequestedURL);// 0x27c83b8
	void OnRep_PicURL();// 0x27c8390
	void OnRep_MeshPath();// 0x27c83a4
	void OnRep_Id();// 0x27c8390

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x2fc, Size: 4]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x301, Size: 1]

--------------------------------
Class: MissionBoardConfig
	FString ResPath;//[Offset: 0x0, Size: 12]
	Vector Loc;//[Offset: 0xc, Size: 12]
	Rotator Rot;//[Offset: 0x18, Size: 12]
	Vector Scale;//[Offset: 0x24, Size: 12]
	float Progress;//[Offset: 0x30, Size: 4]
	FString CountOrTime;//[Offset: 0x34, Size: 12]
	int TipId;//[Offset: 0x40, Size: 4]

--------------------------------
Class: VehicleAndTreasureBoxGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 1]
	bool bCanBackupVehicleSpotDatas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d, Size: 1]
	VehicleSpotSceneComponent*[] VehicleSpotSceneComponentList;//[Offset: 0x210, Size: 12]
	byte RegionType;//[Offset: 0x21c, Size: 1]
	BackupVehicleSpotData[] BackupVehicleSpotDatas;//[Offset: 0x220, Size: 12]
	VehicleSpotProperty[] VehicleSpotPropertys;//[Offset: 0x22c, Size: 12]
	TreasureBoxSpotProperty[] TreasureBoxSpotPropertys;//[Offset: 0x238, Size: 12]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	bool bIsRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 1]
	<byte,VehicleSpotComponentArray> AllVehicleSpots;//[Offset: 0x248, Size: 60]
	<byte,VehicleSpotComponentArray> AllTreasureBoxSpots;//[Offset: 0x284, Size: 60]
	<FString,VehicleGenerateSpawnDataArray> VehicleGenerateSpawnDatas;//[Offset: 0x2c0, Size: 60]
	VehicleGenerateStatisticsData VehicleStatisticsData;//[Offset: 0x2fc, Size: 72]
	UAEDataTable* VehicleDataTable;//[Offset: 0x344, Size: 4]
	void WriteVehicleSpotStatisticsDatas_V15();// 0x1ee1bb4
	void WriteVehicleSpotStatisticsDatas();// 0x1ee1bb4
	void WriteVehicleClassStatisticsDatas_V15();// 0x1ee1bb4
	void WriteVehicleClassStatisticsDatas();// 0x1ee1bb4
	void WriteAllVehicleStatisticsDatasToLog();// 0x1ee1bb4
	void WriteAllVehicleStatisticsDatas_V15();// 0x1ee1bb4
	void WriteAllVehicleStatisticsDatas();// 0x1ee1bb4
	void RegisterVehicleGenerateSpawnData(VehicleGenerateSpawnData Data);// 0x27ed6fc
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x1f61750
	void RandomTreasureBoxSpotsByType(out TreasureBoxSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x27ed528
	void RandomTreasureBoxSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out TreasureBoxSpotProperty Property);// 0x27ed354
	void RandomSpotsByType(out VehicleSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x27ed180
	void RandomSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out VehicleSpotProperty Property);// 0x27ecfac
	void RandomGroups();// 0x1f3177c
	void LoadVehicleGenerateTable();// 0x2bb69b8
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoWithCategory(out VehicleSpotProperty SpotProperty, FString Category);// 0x27ecc40
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoBySpotType(byte SpotType);// 0x27ecab0
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfo(out VehicleSpotProperty SpotProperty);// 0x27ec868
	VehicleGenerateRandomInfo GetTreasureBoxSpotRandomInfo(out TreasureBoxSpotProperty SpotProperty);// 0x27ec620
	VehicleGenerateSpawnData GetRandomVehicleClass(FString Category);// 0x27ec3b4
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x279f2a4
	void GenerateSpotOnTick(float DeltaTime);// 0x1f62880
	bool DynamicSpawnVehicleBySpotId(int ID, FString Category);// 0x27ec20c
	void DeleteGroups();// 0x27ec1f8
	bool CanDynamicSpawnVehicle(Vector SpawnLocation, Vector TestLocationOffset, Vector TestBoxSize);// 0x27ec0e0
	void AddVehicleSpotCount(byte SpotType, FString Path, float LocationX, float LocationY, float LocationZ);// 0x27ebe68
	void AddVehicleClassCount(FString Path, bool IsValid, int Count);// 0x27ebc7c

--------------------------------
Class: VehicleSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotGroupType;//[Offset: 0x27c, Size: 1]
	byte RegionType;//[Offset: 0x27d, Size: 1]
	bool bHasGenerateSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27e, Size: 1]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27f, Size: 1]
	float RandomRotationMin;//[Offset: 0x280, Size: 4]
	float RandomRotationMax;//[Offset: 0x284, Size: 4]
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x288, Size: 32]
	bool IsEnableVehicleSpawnRestore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	float VehicleSpawnRestoreOffset;//[Offset: 0x2ac, Size: 4]
	void SetSpotRandomInfo(out VehicleGenerateRandomInfo RandomInfo);// 0x27ef7f4
	bool GenerateSpot();// 0x27bbb14

--------------------------------
Class: VehicleGenerateRandomInfo
	FString VehicleType;//[Offset: 0x0, Size: 12]
	FString VehiclePath;//[Offset: 0xc, Size: 12]
	float FuelPercent;//[Offset: 0x18, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: BackupVehicleSpotData
	int ID;//[Offset: 0x0, Size: 4]
	byte SpotGroupType;//[Offset: 0x4, Size: 1]
	byte SpotType;//[Offset: 0x5, Size: 1]
	Vector SpotGenerateLoc;//[Offset: 0x8, Size: 12]
	Rotator SpotRotator;//[Offset: 0x14, Size: 12]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: VehicleSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4, Size: 12]
	int FuelPercentMin;//[Offset: 0x10, Size: 4]
	int FuelPercentMax;//[Offset: 0x14, Size: 4]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	byte RandomType;//[Offset: 0x19, Size: 1]
	float TotalCountMultiplierWithPalyerCount;//[Offset: 0x1c, Size: 4]
	int TotalCountRangeMin;//[Offset: 0x20, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x24, Size: 4]
	float ProbabilityPersent;//[Offset: 0x28, Size: 4]
	float ProbabilityPersentWithPalyerCount;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: TreasureBoxSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4, Size: 12]
	int TotalCountRangeMin;//[Offset: 0x10, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleSpotComponentArray
	byte SpotType;//[Offset: 0x0, Size: 1]
	VehicleSpotSceneComponent*[] AllSpots;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VehicleGenerateSpawnDataArray
	FString Catetory;//[Offset: 0x0, Size: 12]
	VehicleGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VehicleGenerateSpawnData
	int KeyID;//[Offset: 0x0, Size: 4]
	FString VehicleType;//[Offset: 0x4, Size: 12]
	FString VehiclePath;//[Offset: 0x10, Size: 12]
	int VehicleWeight;//[Offset: 0x1c, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: VehicleGenerateStatisticsData
	VehicleSpotStatisticsData[] VehicleSpotStatisticsData;//[Offset: 0x0, Size: 12]
	<FString,VehicleClassStatisticsData> VehicleClassStatisticsData;//[Offset: 0xc, Size: 60]

--------------------------------
Class: VehicleSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4, Size: 1]
	FString VehiclePath;//[Offset: 0x8, Size: 12]
	float VehicleLocationX;//[Offset: 0x14, Size: 4]
	float VehicleLocationY;//[Offset: 0x18, Size: 4]
	float VehicleLocationZ;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: VehicleClassStatisticsData.TableRowBase
	FString VehiclePath;//[Offset: 0x4, Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int AllVehicleCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SeasonStatueData
	FString Name;//[Offset: 0x0, Size: 12]
	Vector Loc;//[Offset: 0xc, Size: 12]
	Rotator Rot;//[Offset: 0x18, Size: 12]
	Vector Scale;//[Offset: 0x24, Size: 12]
	FString Nation;//[Offset: 0x30, Size: 12]
	int AGender;//[Offset: 0x3c, Size: 4]
	int Head;//[Offset: 0x40, Size: 4]
	int Hair;//[Offset: 0x44, Size: 4]
	int WeaponId;//[Offset: 0x48, Size: 4]
	int[] AvatarList;//[Offset: 0x4c, Size: 12]
	GameModePlayerItem[] AvatarWithAdditionList;//[Offset: 0x58, Size: 12]

--------------------------------
Class: StatueBaseData
	FString ClassPath;//[Offset: 0x0, Size: 12]
	FString MatPath;//[Offset: 0xc, Size: 12]
	FString TeamFlag;//[Offset: 0x18, Size: 12]
	FString TeamName;//[Offset: 0x24, Size: 12]
	Vector Loc;//[Offset: 0x30, Size: 12]
	Rotator Rot;//[Offset: 0x3c, Size: 12]
	Vector Scale;//[Offset: 0x48, Size: 12]

--------------------------------
Class: CharacterOverrideAttrData
	FString AttrName;//[Offset: 0x0, Size: 12]
	float AttrValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DSCorpsInfo
	uint64 CorpsID;//[Offset: 0x0, Size: 8]
	FString CorpsName;//[Offset: 0x8, Size: 12]
	int Icon;//[Offset: 0x14, Size: 4]
	int SegmentLevel;//[Offset: 0x18, Size: 4]

--------------------------------
Class: VehicleReportEntry
	uint32 VehicleID;//[Offset: 0x0, Size: 4]
	int VehicleShapeType;//[Offset: 0x4, Size: 4]
	bool IsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float FirstAttackedTime;//[Offset: 0xc, Size: 4]
	float LastAttackedTime;//[Offset: 0x10, Size: 4]
	bool Drived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: GameModeTeamBattleResultData
	FString Reason;//[Offset: 0x0, Size: 12]
	int RemainTeamCount;//[Offset: 0xc, Size: 4]
	int RemainAlivePlayerCount;//[Offset: 0x10, Size: 4]
	float PlaneDirectionX;//[Offset: 0x14, Size: 4]
	float PlaneDirectionY;//[Offset: 0x18, Size: 4]
	<FString,FString> PlayersLogoutTime;//[Offset: 0x1c, Size: 60]
	GameModeCorpsDetailData[] RealTimeCorpsRank;//[Offset: 0x58, Size: 12]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]

--------------------------------
Class: GameModeCorpsDetailData
	FString Name;//[Offset: 0x0, Size: 12]
	int CorpsHeadIcon;//[Offset: 0xc, Size: 4]
	int KilledNum;//[Offset: 0x10, Size: 4]
	int SegmentLevel;//[Offset: 0x14, Size: 4]
	int RealtimeRank;//[Offset: 0x18, Size: 4]
	int DefeatPlayerNum;//[Offset: 0x1c, Size: 4]
	float TotalDamage;//[Offset: 0x20, Size: 4]
	float SurvivalTime;//[Offset: 0x24, Size: 4]

--------------------------------
Class: BattleData
	int WatcherNum;//[Offset: 0x0, Size: 4]
	int CircleNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CollectedEventData
	<FString,FString> KeyValueMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: GameModeParams
	FName CurrentGameModeState;//[Offset: 0x0, Size: 8]
	int MaxKillTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DSAIDropInfo
	uint64 BattleID;//[Offset: 0x0, Size: 8]
	int nts;//[Offset: 0x8, Size: 4]
	DSAIDropItem[] ais;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DSAIDropItem
	uint64 UId;//[Offset: 0x0, Size: 8]
	int Time;//[Offset: 0x8, Size: 4]
	int8 hlv;//[Offset: 0xc, Size: 1]

--------------------------------
Class: HeartBeatData
	int AlivePlayerNum;//[Offset: 0x0, Size: 4]
	int AINum;//[Offset: 0x4, Size: 4]
	int MonsterNum;//[Offset: 0x8, Size: 4]
	int ConnectionNum;//[Offset: 0xc, Size: 4]
	int OnlineNum;//[Offset: 0x10, Size: 4]
	int HighPingNum;//[Offset: 0x14, Size: 4]

--------------------------------
Class: ClientGameStartFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString MapName;//[Offset: 0x14, Size: 12]
	int8 WeatherID;//[Offset: 0x20, Size: 1]
	FString ItemList;//[Offset: 0x24, Size: 12]
	int8 TeamType;//[Offset: 0x30, Size: 1]
	int TeamID;//[Offset: 0x34, Size: 4]
	FString TeamPlayer1;//[Offset: 0x38, Size: 12]
	FString TeamPlayer2;//[Offset: 0x44, Size: 12]
	FString TeamPlayer3;//[Offset: 0x50, Size: 12]
	uint32 SecGameStartFlowFlowID;//[Offset: 0x5c, Size: 4]
	FString GVoiceTeamID;//[Offset: 0x60, Size: 12]
	FString GVoiceRoomID;//[Offset: 0x6c, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x78, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x7c, Size: 4]

--------------------------------
Class: ClientGameEndFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString ClientVersion;//[Offset: 0x14, Size: 12]
	uint32 OverTime;//[Offset: 0x20, Size: 4]
	int8 EndType;//[Offset: 0x24, Size: 1]
	byte KillCount;//[Offset: 0x25, Size: 1]
	byte AssistsCount;//[Offset: 0x26, Size: 1]
	byte DropCount;//[Offset: 0x27, Size: 1]
	byte SaveCount;//[Offset: 0x28, Size: 1]
	byte RebornCount;//[Offset: 0x29, Size: 1]
	bool AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a, Size: 1]
	int GoldGet;//[Offset: 0x2c, Size: 4]
	int DiamondGet;//[Offset: 0x30, Size: 4]
	int ExpGet;//[Offset: 0x34, Size: 4]
	byte WinRank;//[Offset: 0x38, Size: 1]
	byte TotalPlayers;//[Offset: 0x39, Size: 1]
	int PlayerRank;//[Offset: 0x3c, Size: 4]
	int RankEnd;//[Offset: 0x40, Size: 4]
	int TeamID;//[Offset: 0x44, Size: 4]
	FString TeamPlayer1;//[Offset: 0x48, Size: 12]
	FString TeamPlayer2;//[Offset: 0x54, Size: 12]
	FString TeamPlayer3;//[Offset: 0x60, Size: 12]
	bool TeamPlayer1AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	bool TeamPlayer2AliveType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 1]
	bool TeamPlayer3AliveType;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 1]
	byte TeamPlayer1Kill;//[Offset: 0x6d, Size: 1]
	byte TeamPlayer2Kill;//[Offset: 0x6e, Size: 1]
	byte TeamPlayer3Kill;//[Offset: 0x6f, Size: 1]
	uint32 GameEndFlowID;//[Offset: 0x70, Size: 4]
	byte RoundCircleCount;//[Offset: 0x74, Size: 1]
	int[] UseQuickMsgIDArray;//[Offset: 0x78, Size: 12]
	int[] UseQuickMsgCountArray;//[Offset: 0x84, Size: 12]
	int[] UseWheelMsgIDArray;//[Offset: 0x90, Size: 12]
	int[] UseWheelMsgCountArray;//[Offset: 0x9c, Size: 12]
	int[] InexistentAvatarStat;//[Offset: 0xa8, Size: 12]
	int[] InexistentAvatarInBornStat;//[Offset: 0xb4, Size: 12]
	int[] InexistentWeaponAvatarStat;//[Offset: 0xc0, Size: 12]
	int[] InexistentVehicleAvatarStat;//[Offset: 0xcc, Size: 12]
	int InexistentPlaneAvatarStat;//[Offset: 0xd8, Size: 4]
	int InexistentEmoteAvatarStat;//[Offset: 0xdc, Size: 4]
	byte ShowMsgCnt;//[Offset: 0xe0, Size: 1]
	byte UserConfirmCnt;//[Offset: 0xe1, Size: 1]
	byte UserCancelCnt;//[Offset: 0xe2, Size: 1]
	byte UserDoNothingCnt;//[Offset: 0xe3, Size: 1]
	float FPSBeforeAdapt;//[Offset: 0xe4, Size: 4]
	float FPSAfterAdapt;//[Offset: 0xe8, Size: 4]
	float TeammateMicrophoneTime;//[Offset: 0xec, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0xf0, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0xf4, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xf8, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0xfc, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0x100, Size: 4]
	byte PlayerUseQuickSight;//[Offset: 0x104, Size: 1]
	byte PlayerUseShoulderCnt;//[Offset: 0x105, Size: 1]

--------------------------------
Class: SecAttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	int8 PlatID;//[Offset: 0x30, Size: 1]
	uint16 AreaID;//[Offset: 0x32, Size: 2]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	uint64 RoleID;//[Offset: 0x50, Size: 8]
	FString TargetUserName;//[Offset: 0x58, Size: 12]
	FString TargetOpenID;//[Offset: 0x64, Size: 12]
	uint64 TargetRoleID;//[Offset: 0x70, Size: 8]
	FString HitPart;//[Offset: 0x78, Size: 12]
	int GunID;//[Offset: 0x84, Size: 4]
	byte PlayerKill;//[Offset: 0x88, Size: 1]
	uint64 AttackFlowID;//[Offset: 0x90, Size: 8]
	int KillAICnt;//[Offset: 0x98, Size: 4]
	int KillRealPlayerCnt;//[Offset: 0x9c, Size: 4]

--------------------------------
Class: ClientSecPlayerKillFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int8 SecPlayerKillFlowID;//[Offset: 0x8, Size: 1]
	int GunID;//[Offset: 0xc, Size: 4]
	uint32 KilledPlayerKey;//[Offset: 0x10, Size: 4]
	RecoilInfo RecoilInfo;//[Offset: 0x14, Size: 54]
	int LocationX;//[Offset: 0x4c, Size: 4]
	int LocationY;//[Offset: 0x50, Size: 4]
	int LocationZ;//[Offset: 0x54, Size: 4]
	int KilledLocationX;//[Offset: 0x58, Size: 4]
	int KilledLocationY;//[Offset: 0x5c, Size: 4]
	int KilledLocationZ;//[Offset: 0x60, Size: 4]
	int KilledTeamID;//[Offset: 0x64, Size: 4]
	int TeamID;//[Offset: 0x68, Size: 4]
	FString GameModeID;//[Offset: 0x6c, Size: 12]
	uint64 PawnState;//[Offset: 0x78, Size: 8]
	uint64 KilledPawnState;//[Offset: 0x80, Size: 8]

--------------------------------
Class: RecoilInfo
	int16 VerticalRecoilMin;//[Offset: 0x0, Size: 2]
	int16 VerticalRecoilMax;//[Offset: 0x2, Size: 2]
	int16 VerticalRecoilVariation;//[Offset: 0x4, Size: 2]
	int16 VerticalRecoveryModifier;//[Offset: 0x6, Size: 2]
	int16 VerticalRecoveryClamp;//[Offset: 0x8, Size: 2]
	int16 VerticalRecoveryMax;//[Offset: 0xa, Size: 2]
	int16 LeftMax;//[Offset: 0xc, Size: 2]
	int16 RightMax;//[Offset: 0xe, Size: 2]
	int16 HorizontalTendency;//[Offset: 0x10, Size: 2]
	int16 BulletPerSwitch;//[Offset: 0x12, Size: 2]
	int16 TimePerSwitch;//[Offset: 0x14, Size: 2]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]
	int16 RecoilSpeedVertical;//[Offset: 0x18, Size: 2]
	int16 RecoilSpeedHorizontal;//[Offset: 0x1a, Size: 2]
	int16 RecovertySpeedVertical;//[Offset: 0x1c, Size: 2]
	int16 RecoilValueClimb;//[Offset: 0x1e, Size: 2]
	int16 RecoilValueFail;//[Offset: 0x20, Size: 2]
	int16 RecoilModifierStand;//[Offset: 0x22, Size: 2]
	int16 RecoilModifierCrouch;//[Offset: 0x24, Size: 2]
	int16 RecoilModifierProne;//[Offset: 0x26, Size: 2]
	int16 RecoilHorizontalMinScalar;//[Offset: 0x28, Size: 2]
	int16 BurstEmptyDelay;//[Offset: 0x2a, Size: 2]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	int16 ShootSightReturnSpeed;//[Offset: 0x2e, Size: 2]
	int16 AccessoriesVRecoilFactor;//[Offset: 0x30, Size: 2]
	int16 AccessoriesHRecoilFactor;//[Offset: 0x32, Size: 2]
	int16 AccessoriesRecoveryFactor;//[Offset: 0x34, Size: 2]

--------------------------------
Class: ClientSecMrpcsFlow
	byte SecMrpcsFlowID;//[Offset: 0x0, Size: 1]
	byte[] MrpcsFlowData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ClientJumpFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString MapName;//[Offset: 0x14, Size: 12]
	int8 WeatherID;//[Offset: 0x20, Size: 1]
	int64 GameStartTime;//[Offset: 0x28, Size: 8]
	uint32 StartJumpTime;//[Offset: 0x30, Size: 4]
	uint32 EndJumpTime;//[Offset: 0x34, Size: 4]
	uint32 PlayerJumpTime;//[Offset: 0x38, Size: 4]
	uint32 PlayerOpenTime;//[Offset: 0x3c, Size: 4]
	uint32 PlayerLandTime;//[Offset: 0x40, Size: 4]
	FString FollowPlayerUID;//[Offset: 0x44, Size: 12]
	uint32 ExitFollowTime;//[Offset: 0x50, Size: 4]
	int PlayerJumpPositionX;//[Offset: 0x54, Size: 4]
	int PlayerJumpPositionY;//[Offset: 0x58, Size: 4]
	int PlayerJumpPositionZ;//[Offset: 0x5c, Size: 4]
	int PlaneJumpPositionX;//[Offset: 0x60, Size: 4]
	int PlaneJumpPositionY;//[Offset: 0x64, Size: 4]
	int PlaneJumpPositionZ;//[Offset: 0x68, Size: 4]
	int PlayerLandPositionX;//[Offset: 0x6c, Size: 4]
	int PlayerLandPositionY;//[Offset: 0x70, Size: 4]
	int PlayerLandPositionZ;//[Offset: 0x74, Size: 4]
	uint32 PlayerLandDistance;//[Offset: 0x78, Size: 4]
	uint32 PlayerSpeedMax1;//[Offset: 0x7c, Size: 4]
	uint32 PlayerSpeedMax2;//[Offset: 0x80, Size: 4]
	FString GVoiceTeamID;//[Offset: 0x84, Size: 12]
	FString GVoiceRoomID;//[Offset: 0x90, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x9c, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: HurtFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	int8 PlatID;//[Offset: 0x30, Size: 1]
	uint16 AreaID;//[Offset: 0x32, Size: 2]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	FString EnemyOpenID;//[Offset: 0x7c, Size: 12]
	FString EnemyUserName;//[Offset: 0x88, Size: 12]
	uint64 EnemyRoleID;//[Offset: 0x98, Size: 8]
	int EnemyRoleType;//[Offset: 0xa0, Size: 4]
	uint32 HurtTime;//[Offset: 0xa4, Size: 4]
	int HurtType;//[Offset: 0xa8, Size: 4]
	int HitType;//[Offset: 0xac, Size: 4]
	int DamageStart;//[Offset: 0xb0, Size: 4]
	int DamageReduce;//[Offset: 0xb4, Size: 4]
	int ArmorDef;//[Offset: 0xb8, Size: 4]
	int HPstart;//[Offset: 0xbc, Size: 4]
	int HPEnd;//[Offset: 0xc0, Size: 4]
	int ArmorHPStart1;//[Offset: 0xc4, Size: 4]
	int ArmorHPEnd1;//[Offset: 0xc8, Size: 4]
	int ArmorHPStart2;//[Offset: 0xcc, Size: 4]
	int ArmorHPEnd2;//[Offset: 0xd0, Size: 4]
	int CarHPStart;//[Offset: 0xd4, Size: 4]
	int CarHPEnd;//[Offset: 0xd8, Size: 4]
	int FallHeight;//[Offset: 0xdc, Size: 4]
	int HypoxiaTime;//[Offset: 0xe0, Size: 4]
	int HypoxiaHurtTotal;//[Offset: 0xe4, Size: 4]
	int PlayerKilled;//[Offset: 0xe8, Size: 4]
	int ArmorKill;//[Offset: 0xec, Size: 4]
	int CarKill;//[Offset: 0xf0, Size: 4]
	int IfIsAI;//[Offset: 0xf4, Size: 4]
	int CircleIndex;//[Offset: 0xf8, Size: 4]
	uint32 HurtFlowID;//[Offset: 0xfc, Size: 4]

--------------------------------
Class: GvoiceTeamQuit
	FString GVoiceTeamID;//[Offset: 0x0, Size: 12]
	FString GVoiceRoomID;//[Offset: 0xc, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x18, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x1c, Size: 4]
	uint64 UId;//[Offset: 0x20, Size: 8]

--------------------------------
Class: GvoiceTeamCreate
	FString GVoiceTeamID;//[Offset: 0x0, Size: 12]
	FString GVoiceRoomID;//[Offset: 0xc, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x18, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x1c, Size: 4]
	uint64 UId;//[Offset: 0x20, Size: 8]

--------------------------------
Class: GameSetting
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	GameSetting_BasicSetting BasicSetting;//[Offset: 0x8, Size: 44]
	GameSetting_ArtQuality ArtQuality;//[Offset: 0x34, Size: 8]
	GameSetting_Operate Operate;//[Offset: 0x3c, Size: 8]
	GameSetting_Vehicle Vehicle;//[Offset: 0x44, Size: 8]
	GameSetting_Sensibility Sensibility;//[Offset: 0x4c, Size: 136]
	GameSetting_PickUp PickUp;//[Offset: 0xd4, Size: 56]

--------------------------------
Class: GameSetting_BasicSetting
	int CrossHairColor;//[Offset: 0x0, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	int SingleShotWeaponShootMode;//[Offset: 0x8, Size: 4]
	int ShotGunShootMode;//[Offset: 0xc, Size: 4]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int LRShootMode;//[Offset: 0x14, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int LeftHandFire;//[Offset: 0x1c, Size: 4]
	int Gyroscope;//[Offset: 0x20, Size: 4]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool ShoulderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool ShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: GameSetting_ArtQuality
	int ArtStyle;//[Offset: 0x0, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameSetting_Operate
	int FireMode;//[Offset: 0x0, Size: 4]
	bool Touch_3D_Switcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameSetting_Vehicle
	int VehicleControlMode;//[Offset: 0x0, Size: 4]
	int DrivingViewMode;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameSetting_Sensibility
	int CameraLensSensibility;//[Offset: 0x0, Size: 4]
	GameSetting_Sensibility_FreeCam Sens_FreeCamera;//[Offset: 0x4, Size: 12]
	GameSetting_Sensibility_Cam Sens_Camera;//[Offset: 0x10, Size: 40]
	GameSetting_Sensibility_Fire Sens_Fire;//[Offset: 0x38, Size: 40]
	GameSetting_Sensibility_Gyroscope Sens_Gyroscope;//[Offset: 0x60, Size: 40]

--------------------------------
Class: GameSetting_Sensibility_FreeCam
	float VehicleEye;//[Offset: 0x0, Size: 4]
	float ParachuteEye;//[Offset: 0x4, Size: 4]
	float CamFpFreeEye;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Cam
	float CamLensSenNoneSniper;//[Offset: 0x0, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0xc, Size: 4]
	float CamLensSen3XSniper;//[Offset: 0x10, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x14, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x18, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x1c, Size: 4]
	float CamLensSenShoulderSniper;//[Offset: 0x20, Size: 4]
	float CamLensSenShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Fire
	float FireCamLensSenNoneSniper;//[Offset: 0x0, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0xc, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x10, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x14, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x18, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x1c, Size: 4]
	float FireCamLensSenShoulderSniper;//[Offset: 0x20, Size: 4]
	float FireCamLensSenShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Gyroscope
	float GyroscopeSenNoneSniper;//[Offset: 0x0, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0xc, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x10, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x14, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x18, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x1c, Size: 4]
	float GyroscopeShoulderSniper;//[Offset: 0x20, Size: 4]
	float GyroscopeShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_PickUp
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	GameSetting_PickUp_Drug Drug;//[Offset: 0x4, Size: 24]
	Gamesetting_PickUp_Grenade Grenade;//[Offset: 0x1c, Size: 16]
	GameSetting_PickUp_WeaponBullet[] WeaponBulletList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: GameSetting_PickUp_Drug
	int MedicalTreatment;//[Offset: 0x0, Size: 4]
	int Bandage;//[Offset: 0x4, Size: 4]
	int PainKiller;//[Offset: 0x8, Size: 4]
	int Adrenaline;//[Offset: 0xc, Size: 4]
	int EnergyDrink;//[Offset: 0x10, Size: 4]
	int FirstAidKit;//[Offset: 0x14, Size: 4]

--------------------------------
Class: Gamesetting_PickUp_Grenade
	int IncendiaryBomb;//[Offset: 0x0, Size: 4]
	int ShockBomb;//[Offset: 0x4, Size: 4]
	int SmokeBomb;//[Offset: 0x8, Size: 4]
	int GrenadeFragmented;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameSetting_PickUp_WeaponBullet
	int WeaponId;//[Offset: 0x0, Size: 4]
	int BulletCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ClientCircleFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString PicUrl;//[Offset: 0x14, Size: 12]
	uint32 GameStartTime;//[Offset: 0x20, Size: 4]
	uint32 NewCircleBornTime;//[Offset: 0x24, Size: 4]
	int NewCirclePositionX;//[Offset: 0x28, Size: 4]
	int NewCirclePositionY;//[Offset: 0x2c, Size: 4]
	int NewCirclePositionRadius;//[Offset: 0x30, Size: 4]
	int NewCircleCount;//[Offset: 0x34, Size: 4]
	int PlayerPositionX;//[Offset: 0x38, Size: 4]
	int PlayerPositionY;//[Offset: 0x3c, Size: 4]
	int PlayerPositionZ;//[Offset: 0x40, Size: 4]
	int PlayerHP;//[Offset: 0x44, Size: 4]
	uint32 OldCircleMoveTime;//[Offset: 0x48, Size: 4]
	uint32 OldCircleMoveEndTime;//[Offset: 0x4c, Size: 4]
	uint32 PlayerOutTime;//[Offset: 0x50, Size: 4]
	int CirclePoisonCount;//[Offset: 0x54, Size: 4]
	int CirclePoisonMin;//[Offset: 0x58, Size: 4]
	int CirclePoisonMax;//[Offset: 0x5c, Size: 4]
	int CirclePoisonAvg;//[Offset: 0x60, Size: 4]
	int CirclePoisonTotal;//[Offset: 0x64, Size: 4]
	int CirclePoisonDrop;//[Offset: 0x68, Size: 4]
	int CirclePoisonDead;//[Offset: 0x6c, Size: 4]
	int RecoveryCount;//[Offset: 0x70, Size: 4]
	int RecoveryMin;//[Offset: 0x74, Size: 4]
	int RecoveryMax;//[Offset: 0x78, Size: 4]
	int RecoveryTotal;//[Offset: 0x7c, Size: 4]
	int EnergyRecoveryCount;//[Offset: 0x80, Size: 4]
	int EnergyRecoveryMin;//[Offset: 0x84, Size: 4]
	int EnergyRecoveryMax;//[Offset: 0x88, Size: 4]
	int EnergyRecoveryTotal;//[Offset: 0x8c, Size: 4]
	int EnergyStartLv;//[Offset: 0x90, Size: 4]
	int EnergyStartTime;//[Offset: 0x94, Size: 4]
	FString EnergyItemUse;//[Offset: 0x98, Size: 12]
	int EnergyLvTimeInfo;//[Offset: 0xa4, Size: 4]
	FString EnergyRunFastTime;//[Offset: 0xa8, Size: 12]
	FString EnergyRecoveryLvTimeInfo;//[Offset: 0xb4, Size: 12]
	int EnergyEndLv;//[Offset: 0xc0, Size: 4]
	int EnergyEndTime;//[Offset: 0xc4, Size: 4]
	int PlayerMoveDis;//[Offset: 0xc8, Size: 4]
	int PlayerSpeedMax;//[Offset: 0xcc, Size: 4]
	int PlayerSpeedAvg;//[Offset: 0xd0, Size: 4]
	int PlayerCarSpeedMax;//[Offset: 0xd4, Size: 4]
	int PlayerCarSpeedAvg;//[Offset: 0xd8, Size: 4]
	int PlayerSquatMoveDis;//[Offset: 0xdc, Size: 4]
	int PlayerSquatMoveTime;//[Offset: 0xe0, Size: 4]
	int PlayerCreepMoveDis;//[Offset: 0xe4, Size: 4]
	int PlayerCreepMoveTime;//[Offset: 0xe8, Size: 4]
	int PlayerRunMoveDis;//[Offset: 0xec, Size: 4]
	int PlayerRunMoveTime;//[Offset: 0xf0, Size: 4]
	int PlayerDriveMoveDis;//[Offset: 0xf4, Size: 4]
	int PlayerDriveMoveTime;//[Offset: 0xf8, Size: 4]
	int PlayerCar;//[Offset: 0xfc, Size: 4]
	int PlayerCameraDistanceMax;//[Offset: 0x100, Size: 4]
	uint32 SecCircleFlowID;//[Offset: 0x104, Size: 4]
	byte AutoAimType;//[Offset: 0x108, Size: 1]
	int AutoAimTime;//[Offset: 0x10c, Size: 4]
	byte[] MrpcsFlowData;//[Offset: 0x110, Size: 12]

--------------------------------
Class: AttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	FString TargetOpenID;//[Offset: 0x7c, Size: 12]
	FString TargetUserName;//[Offset: 0x88, Size: 12]
	uint64 TargetRoleID;//[Offset: 0x98, Size: 8]
	int8 TargetRoleType;//[Offset: 0xa0, Size: 1]
	FString GunName;//[Offset: 0xa4, Size: 12]
	FString GunPartsType;//[Offset: 0xb0, Size: 12]
	int8 SightType;//[Offset: 0xbc, Size: 1]
	int BulletSpeed;//[Offset: 0xc0, Size: 4]
	int8 MagazineMax;//[Offset: 0xc4, Size: 1]
	int8 MagazineLeft;//[Offset: 0xc5, Size: 1]
	int ShotFrequency;//[Offset: 0xc8, Size: 4]
	int BulletDamage;//[Offset: 0xcc, Size: 4]
	int16 BulletDown;//[Offset: 0xd0, Size: 2]
	byte BulletDamageReduce;//[Offset: 0xd2, Size: 1]
	int Recoil;//[Offset: 0xd4, Size: 4]
	int ReloadTime;//[Offset: 0xd8, Size: 4]
	FString PlayerState;//[Offset: 0xdc, Size: 12]
	byte ShotPose;//[Offset: 0xe8, Size: 1]
	byte FireType;//[Offset: 0xe9, Size: 1]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xea, Size: 1]
	byte Sideways;//[Offset: 0xeb, Size: 1]
	int ShootingDeviationX;//[Offset: 0xec, Size: 4]
	int ShootingDeviationY;//[Offset: 0xf0, Size: 4]
	uint32 ZeroDistance;//[Offset: 0xf4, Size: 4]
	uint32 ShotTime;//[Offset: 0xf8, Size: 4]
	int HitTime;//[Offset: 0xfc, Size: 4]
	int PlayerPositionX;//[Offset: 0x100, Size: 4]
	int PlayerPositionY;//[Offset: 0x104, Size: 4]
	int PlayerPositionZ;//[Offset: 0x108, Size: 4]
	int GunPositionX;//[Offset: 0x10c, Size: 4]
	int GunPositionY;//[Offset: 0x110, Size: 4]
	int GunPositionZ;//[Offset: 0x114, Size: 4]
	int BulletsBornPositionX;//[Offset: 0x118, Size: 4]
	int BulletsBornPositionY;//[Offset: 0x11c, Size: 4]
	int BulletsBornPositionZ;//[Offset: 0x120, Size: 4]
	uint32 LastHitTime;//[Offset: 0x124, Size: 4]
	uint32 BulletFlyDistance;//[Offset: 0x128, Size: 4]
	uint32 BulletFlyTime;//[Offset: 0x12c, Size: 4]
	int HitPositionX;//[Offset: 0x130, Size: 4]
	int HitPositionY;//[Offset: 0x134, Size: 4]
	int HitPositionZ;//[Offset: 0x138, Size: 4]
	byte HitPart;//[Offset: 0x13c, Size: 1]
	bool bHitCar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13d, Size: 1]
	bool bTireOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13d, Size: 1]
	byte BulletCost;//[Offset: 0x13e, Size: 1]
	int HPstart;//[Offset: 0x140, Size: 4]
	int HPEnd;//[Offset: 0x144, Size: 4]
	int ArmorHPStart;//[Offset: 0x148, Size: 4]
	int ArmorHPEnd;//[Offset: 0x14c, Size: 4]
	int CarHPStart;//[Offset: 0x150, Size: 4]
	int CarHPEnd;//[Offset: 0x154, Size: 4]
	byte PlayerKill;//[Offset: 0x158, Size: 1]
	bool bArmorKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x159, Size: 1]
	bool bCarKill;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x159, Size: 1]
	int RecoilMoveX;//[Offset: 0x15c, Size: 4]
	int RecoilMoveY;//[Offset: 0x160, Size: 4]
	int WeaponAimFOV;//[Offset: 0x164, Size: 4]
	int BulletDamageDebuff;//[Offset: 0x168, Size: 4]
	int BulletDamageBuff;//[Offset: 0x16c, Size: 4]
	uint32 AtackFlowID;//[Offset: 0x170, Size: 4]
	int AutoAimSpeed;//[Offset: 0x174, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x178, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x17c, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x180, Size: 4]
	int GunID;//[Offset: 0x184, Size: 4]
	int IfIsOnCar;//[Offset: 0x188, Size: 4]
	bool InMoveablePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	int KillAICnt;//[Offset: 0x190, Size: 4]
	int KillRealPlayerCnt;//[Offset: 0x194, Size: 4]

--------------------------------
Class: AimFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	int AimTime;//[Offset: 0x7c, Size: 4]
	FString ShotCDTime;//[Offset: 0x80, Size: 12]
	int ShotCount;//[Offset: 0x8c, Size: 4]
	int ShotHitCount;//[Offset: 0x90, Size: 4]
	int ShotHeadHitCount;//[Offset: 0x94, Size: 4]
	int ShotPersonHitCount;//[Offset: 0x98, Size: 4]
	int ShotPersonKillCount;//[Offset: 0x9c, Size: 4]
	FString HitDistance;//[Offset: 0xa0, Size: 12]
	FString HitEachDistance;//[Offset: 0xac, Size: 12]
	FString HitAngle;//[Offset: 0xb8, Size: 12]
	FString HitEachCdTime;//[Offset: 0xc4, Size: 12]
	FString HitPartInfo;//[Offset: 0xd0, Size: 12]
	FString PlayerState;//[Offset: 0xdc, Size: 12]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	int8 SightType;//[Offset: 0xe9, Size: 1]
	uint32 AimFlowID;//[Offset: 0xec, Size: 4]

--------------------------------
Class: GameModeStateChangedParams
	FName GameModeState;//[Offset: 0x0, Size: 8]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: STExtraUnderWaterEffectComp.SceneComponent.ActorComponent.Object
	bool bTickWaterEffectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 1]
	FName UnderWaterFogTagName;//[Offset: 0x260, Size: 8]
	class ActorComponent* UnderWaterCamEffectClass;//[Offset: 0x268, Size: 4]
	Transform UnderWaterCamEffectTransform;//[Offset: 0x270, Size: 48]
	AkAudioEvent* SfxInWater;//[Offset: 0x2a0, Size: 4]
	AkAudioEvent* SfxOutWater;//[Offset: 0x2a4, Size: 4]
	float FoggyWeatherUnderWaterFogMaxOpacity;//[Offset: 0x2a8, Size: 4]
	float NormalWeatherUnderWaterFogMaxOpacity;//[Offset: 0x2ac, Size: 4]
	float HDRUnderWaterFogDensity;//[Offset: 0x2b0, Size: 4]
	float NormalUnderWaterFogDensity;//[Offset: 0x2b4, Size: 4]
	ExponentialHeightFogComponent* UnderWaterFogComp;//[Offset: 0x2b8, Size: 4]
	WaterSwimActor*[] WaterSwimObjs;//[Offset: 0x2bc, Size: 12]
	ExponentialHeightFogComponent*[] SceneFogComps;//[Offset: 0x2c8, Size: 12]
	CameraComponent* LastActiveCamComp;//[Offset: 0x2d4, Size: 4]
	PostProcessVolume* UnderWaterPPV;//[Offset: 0x2dc, Size: 4]
	void OnToggleUnderWaterPPV();// 0x2232834
	void AddWaterSwimActor(WaterSwimActor* Actor);// 0x22327bc
	void AddSceneFogComponent(ExponentialHeightFog* SceneFogActor);// 0x2232744

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x260, Size: 4]
	CustomHeightFog[] CustomHightFogDensity;//[Offset: 0x264, Size: 12]
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	float CustomFogLow_Height;//[Offset: 0x274, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x278, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x27c, Size: 16]
	float CustomFogHigh_Height;//[Offset: 0x28c, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x290, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x294, Size: 16]
	LinearColor FogInscatteringColor;//[Offset: 0x2a4, Size: 16]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x2b4, Size: 4]
	float InscatteringColorCubemapAngle;//[Offset: 0x2b8, Size: 4]
	LinearColor InscatteringTextureTint;//[Offset: 0x2bc, Size: 16]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x2cc, Size: 4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x2d0, Size: 4]
	float DirectionalInscatteringGapControl;//[Offset: 0x2d4, Size: 4]
	float DirectionalInscatteringExponent;//[Offset: 0x2d8, Size: 4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x2dc, Size: 4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x2e0, Size: 16]
	float FogHeightFalloff;//[Offset: 0x2f0, Size: 4]
	float FogMaxOpacity;//[Offset: 0x2f4, Size: 4]
	float StartDistance;//[Offset: 0x2f8, Size: 4]
	float FogCutoffDistance;//[Offset: 0x2fc, Size: 4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x304, Size: 4]
	Color VolumetricFogAlbedo;//[Offset: 0x308, Size: 4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x30c, Size: 16]
	float VolumetricFogExtinctionScale;//[Offset: 0x31c, Size: 4]
	float VolumetricFogDistance;//[Offset: 0x320, Size: 4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x324, Size: 4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	float VolumetricFogStartDistance;//[Offset: 0x32c, Size: 4]
	Texture2D* VolumetricFogNoiseTexture;//[Offset: 0x330, Size: 4]
	Transform VolumetricFogNoiseTransform;//[Offset: 0x340, Size: 48]
	void SetVolumetricFogStartDistance(float NewValue);// 0x4433238
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x44331c0
	void SetVolumetricFogNoiseTransform(Transform Transform);// 0x44330e0
	void SetVolumetricFogNoiseTexture(Texture2D* NewValue);// 0x4433068
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x4432ff0
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x4432f74
	void SetVolumetricFogDistance(float NewValue);// 0x4432efc
	void SetVolumetricFogAlbedo(Color NewValue);// 0x4432e8c
	void SetVolumetricFog(bool bNewValue);// 0x4432e0c
	void SetStartDistance(float Value);// 0x4432d94
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x4432d1c
	void SetInscatteringTextureTint(LinearColor Value);// 0x4432ca0
	void SetInscatteringColorCubemapAngle(float Value);// 0x4432c28
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x4432bb0
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x4432b38
	void SetFogMaxOpacity(float Value);// 0x4432ac0
	void SetFogInscatteringColor(LinearColor Value);// 0x4432a44
	void SetFogHeightFalloff(float Value);// 0x44329cc
	void SetFogDensity(float Value);// 0x43f6acc
	void SetFogCutoffDistance(float Value);// 0x4432954
	void SetDirectionalInscatteringStartDistance(float Value);// 0x44328dc
	void SetDirectionalInscatteringGapControl(float Value);// 0x4432864
	void SetDirectionalInscatteringExponent(float Value);// 0x44327ec
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x4432770
	void SetCustomFogInscatteringColor(LinearColor Value, int Index);// 0x44326b0
	void SetCustomFogDensityCoefficient(float Value, int Index);// 0x44325f4

--------------------------------
Class: CustomHeightFog
	float Height;//[Offset: 0x0, Size: 4]
	float DensityCoefficient;//[Offset: 0x4, Size: 4]
	LinearColor CustomFogInscatteringColor;//[Offset: 0x8, Size: 16]

--------------------------------
Class: WaterSwimActor.Actor.Object
	float Damage;//[Offset: 0x2fc, Size: 4]
	float interval;//[Offset: 0x300, Size: 4]
	class DamageType* DamageType;//[Offset: 0x304, Size: 4]
	class Pawn[] DamageFilters;//[Offset: 0x308, Size: 12]
	int[] BuffIDs;//[Offset: 0x314, Size: 12]
	int[] SkillBuffIDs;//[Offset: 0x320, Size: 12]
	BoxComponent* WaterBoxComp;//[Offset: 0x32c, Size: 4]
	bool IsLocationInWater(out const Vector Location);// 0x22f4690
	bool GetWaterZHeight(out float MinHeight, out float MaxHeight);// 0x22f45a8

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x330, Size: 1328]
	float Priority;//[Offset: 0x860, Size: 4]
	float BlendRadius;//[Offset: 0x864, Size: 4]
	float BlendWeight;//[Offset: 0x868, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86c, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86c, Size: 1]
	void RemoveBlendable(interface classNone InBlendableObject);// 0x45077e4
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x45076b4

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x2fc, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 1]
	void OnRep_bEnabled();// 0x1ed11c0

--------------------------------
Class: HalloweenVampireCloth
	bool bWearingHalloweenVampireCloth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int HalloweenVampireClothItemID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STParachuteState
	float ThrottleInput;//[Offset: 0x0, Size: 4]
	float SteerInput;//[Offset: 0x4, Size: 4]
	int8 State;//[Offset: 0x8, Size: 1]
	Rotator CameraRotation;//[Offset: 0xc, Size: 12]

--------------------------------
Class: UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharParachuteAnimData[] CharParachuteAnimDataList;//[Offset: 0x180, Size: 12]
	void ReleaseParachuteAnimAssets();// 0x27c8dd0
	void OnParachuteAnimAsyncLoadingFinished(FString AnimLoaded);// 0x1ffd0c8
	void OnAnimListAsyncLoadingFinished();// 0x27c8dbc
	bool HasAnimAsyncLoadingFinished();// 0x27c8d94
	void HandleAsyncLoadingFinishedEvent();// 0x27c8d80
	FString GetOwnerName();// 0x27c8cb8
	AnimationAsset* GetCharacterParachuteAnim(byte AnimType);// 0x27c8c38

--------------------------------
Class: CharParachuteAnimData
	byte ParachuteAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* ParachuteAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* ParachuteAnim;//[Offset: 0x30, Size: 4]

--------------------------------
Class: STReplicatedMoveState
	Vector_NetQuantize Location;//[Offset: 0x0, Size: 12]
	byte Roll;//[Offset: 0xc, Size: 1]
	uint32 View;//[Offset: 0x10, Size: 4]
	Vector_NetQuantize Velocity;//[Offset: 0x14, Size: 12]

--------------------------------
Class: ParachuteFollowComponent.ActorComponent.Object

--------------------------------
Class: ParachuteFollowState
	enum FollowState;//[Offset: 0x0, Size: 1]
	int LeaderIdx;//[Offset: 0x4, Size: 4]

--------------------------------
Class: LastEmoteInfo
	int EmoteId;//[Offset: 0x0, Size: 4]
	int AreaID;//[Offset: 0x4, Size: 4]
	float EmoteTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BaseFPPComponent.ActorComponent.Object
	bool bIsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	STExtraPlayerCharacter* Pawn;//[Offset: 0x100, Size: 4]
	FName ScopeAimCameraSocketName;//[Offset: 0x108, Size: 8]
	FName FPPSocketName;//[Offset: 0x110, Size: 8]
	FName BoltActionCurveName;//[Offset: 0x118, Size: 8]
	float ScopeZoomSpringArmLength;//[Offset: 0x120, Size: 4]
	float BoltActionHoldTimeDefault;//[Offset: 0x128, Size: 4]
	float BoltActionFov;//[Offset: 0x12c, Size: 4]
	float ScopeZoomAlpha;//[Offset: 0x130, Size: 4]
	<FName,float> ScopeZoomBackupMap;//[Offset: 0x134, Size: 60]
	float ScopeZoomSpeed;//[Offset: 0x170, Size: 4]
	<int,ScopeZoomConfig> ScopeZoomConfigMap;//[Offset: 0x174, Size: 60]
	int CurrentPlayAnimIndex;//[Offset: 0x1b0, Size: 4]
	DollyZoomParam ZoomScopeParam;//[Offset: 0x1b4, Size: 12]
	<uint64,int> WeaponAngledSightState;//[Offset: 0x1c4, Size: 60]
	<FName,float> ScopeZoomMap;//[Offset: 0x200, Size: 60]
	float TanHalfFOV;//[Offset: 0x240, Size: 4]
	bool InScopeInProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	bool IsRearSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 1]
	FName SourceScopeAimCameraSocketName;//[Offset: 0x248, Size: 8]
	FName TargetScopeAimCameraSocketName;//[Offset: 0x250, Size: 8]
	void UpdateScopeCameraOffsets(out DollyZoomParam Param, bool IsAngledSight);// 0x1f2ce5c
	float SwitchSightConfigMaterial();// 0x2bb69b8
	void SwitchScopeMeshAnim(byte Type);// 0x1f2cde4
	void SwitchRearSightTimelineUpdate(float Alpha);// 0x1f2cd6c
	void SwitchRearSightTimelineFinish(int TargetRearSightSocketIndex);// 0x1f2ccf4
	void SwitchRearSight(bool IsBegin);// 0x1f2cc6c
	void SwitchCameraMode(byte Mode);// 0x1f2cbf4
	float SwitchAngledSightConfigMaterial(bool forceSwitch);// 0x2bb69b8
	void StopScopeIn();// 0x2bb69b8
	float ShowReflectorSightTPPMaterial(bool forceADSState);// 0x2bb69b8
	float ShowAngledSightTPPMaterial(bool forceADSState);// 0x2bb69b8
	void SetWeaponAngledSightState(STExtraShootWeapon* Weapon, bool State);// 0x1f2cb28
	void SetTagCulling(bool IsUse);// 0x2bb69b8
	void SetNearClipPlane(bool EnableNearClip);// 0x1f2caa8
	void ScopingChange(bool InValue);// 0x1f2ca28
	void Scoping(byte NewType);// 0x1f2c9b0
	void ScopeZoomUpdate(float Alpha);// 0x1f2c938
	void ScopeZoomTick(float DeltaTime);// 0x1f2c8c0
	void ScopeTimelineUpdate(float Alpha);// 0x1f2c848
	void ScopeOutSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x1f2c78c
	void ScopeOutLogic();// 0x1f2c778
	void ScopeOutEnd();// 0x2bb69b8
	void ScopeOut(byte NewType);// 0x1f2c700
	void ScopeNotHandFold();// 0x1f2c6ec
	void ScopeInterrupt(byte NewType);// 0x1f2c674
	void ScopeInSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x1f2c5b8
	void ScopeInLogic();// 0x1f2c5a4
	void ScopeInEnd();// 0x2bb69b8
	void ScopeInContinue();// 0x1f2c590
	void ScopeInAfterTimeline();// 0x1f2c57c
	void ScopeIn(byte NewType);// 0x1f2c504
	void ScopeHandFold();// 0x1f2c4f0
	void PlayScopeInTimeline();// 0x2bb69b8
	bool IsUseZoomScope();// 0x1f2c4c8
	bool IsRPGScopeIn();// 0x1f2c4a0
	bool IsCurWeaponAttachedAngledSight();// 0x1f2c28c
	bool IsAngledSightBySlot(byte Slot);// 0x1f2c420
	bool IsAngledSight();// 0x1f2c3f0
	void InitScopeZoom(int WeaponId, int ScopeID);// 0x1f2c334
	bool HaveAngledSightBySlot(byte Slot);// 0x1f2c2b4
	bool HaveAngledSight();// 0x1f2c28c
	byte GetSightType();// 0x1f2c264
	float GetScopeZoomValue(int WeaponId, int ScopeID);// 0x1f2c1a0
	FName GetScopeZoomKey(int WeaponId, int ScopeID);// 0x1f2c0d4
	MaterialInstance* GetScopeMaterialOverride(STExtraShootWeapon* Weapon);// 0x2bb69b8
	float GetScopeFov(STExtraWeapon* Weapon, bool bIsAngled);// 0x2bb69b8
	MeshComponent* GetScopeCameraAttachTarget(bool IsAngled);// 0x1f2c044
	FName GetScopeAimCameraSocketName();// 0x1f2c004
	ScopeZoomConfig GetCurScopeZoomConfig();// 0x1f2bfbc
	STExtraWeapon* GetCurScopeWeapon();// 0x1f2bf94
	void GetCurrentScopeZoomFov(out float MinFov, out float CurFov);// 0x1f2beb4
	void CalculateDollyZoomParam(float SpringOffset, float MinFov, float CurFov, out DollyZoomParam Param);// 0x1f2bd54
	void BoltAction(float DeltaSeconds);// 0x1f2bcdc
	void AttachToSightKeepTransform();// 0x2bb69b8
	void AttachToSight();// 0x2bb69b8
	void ApplyDollyZoomParam(out const DollyZoomParam Param, bool bSyncToPawn);// 0x1f2bbfc
	void ActiveComponentTickable();// 0x1f2bbe8

--------------------------------
Class: ScopeZoomConfig
	int DisplayMaxScale;//[Offset: 0x0, Size: 4]
	int DisplayMinScale;//[Offset: 0x4, Size: 4]
	CurveFloat* FovCurve;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DollyZoomParam
	float FOV;//[Offset: 0x0, Size: 4]
	float Scale;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x180, Size: 12]
	CharacterMovementAnimData[] CharacterFPPAnimEditList;//[Offset: 0x18c, Size: 12]
	CharacterShieldAnimData[] CharacterShieldAnimEditList;//[Offset: 0x198, Size: 12]
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x1a4, Size: 12]
	CharacterJumpAnimData[] CharacterJumpEditListFPP;//[Offset: 0x1b0, Size: 12]
	CurveFloat* FallingIKCurve;//[Offset: 0x1bc, Size: 4]
	CharacterShovelAnimData[] CharacterShovelEditList;//[Offset: 0x1c0, Size: 12]
	CharacterShovelAnimData[] CharacterShovelEditListFPP;//[Offset: 0x1cc, Size: 12]
	CharAnimModifyData[] CharAnimModifyList;//[Offset: 0x1d8, Size: 12]
	CharacterVehAnimModifyData[] CharVehAnimModifyList;//[Offset: 0x1e4, Size: 12]
	bool IsInitByBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	bool EnablePreLoadingFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 1]
	bool EnableNewAnimInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 1]
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3, Size: 1]
	bool CurrentHoldShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 1]
	bool OnPreLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x27cb5d0
	void OnAsyncLoadingFinishedNew(AsyncLoadCharAnimParams LoadingParam);// 0x27cb334
	void OnAsyncLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x27cb098
	PlayerAnimData[] GetCharacterShovelAnim();// 0x27cafd8
	PlayerAnimData[] GetCharacterJumpAnim(byte JumpType);// 0x27caed0
	AnimationAsset* GetAnimationAsset(AnimationAsset* AnimPtr);// 0x27cad48

--------------------------------
Class: CharacterMovementAnimData
	byte AnimType;//[Offset: 0x0, Size: 1]
	FName AnimTypeName;//[Offset: 0x8, Size: 8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 48]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x40, Size: 48]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x70, Size: 48]

--------------------------------
Class: ChararacterPoseAnimData
	byte PoseType;//[Offset: 0x0, Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CharacterShieldAnimData
	byte AnimType;//[Offset: 0x0, Size: 1]
	FName AnimTypeName;//[Offset: 0x8, Size: 8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 48]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x40, Size: 48]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x70, Size: 48]

--------------------------------
Class: CharacterJumpAnimData
	byte JumpType;//[Offset: 0x0, Size: 1]
	FName JumpTypeName;//[Offset: 0x8, Size: 8]
	ChararacterJumpPhaseData JumpPhase_PreJump;//[Offset: 0x10, Size: 48]
	ChararacterJumpPhaseData JumpPhase_FallLoop0;//[Offset: 0x40, Size: 48]
	ChararacterJumpPhaseData JumpPhase_FallLoop1;//[Offset: 0x70, Size: 48]
	ChararacterJumpPhaseData JumpPhase_Land0;//[Offset: 0xa0, Size: 48]
	ChararacterJumpPhaseData JumpPhase_Land1;//[Offset: 0xd0, Size: 48]

--------------------------------
Class: ChararacterJumpPhaseData
	byte JumpPhase;//[Offset: 0x0, Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CharacterShovelAnimData
	CharacterShovelPhaseData ShovelPhase_Enter;//[Offset: 0x0, Size: 48]
	CharacterShovelPhaseData ShovelPhase_Shoveling;//[Offset: 0x30, Size: 48]
	CharacterShovelPhaseData ShovelPhase_Leave;//[Offset: 0x60, Size: 48]
	CharacterShovelPhaseData ShovelPhase_Crouch_Leave;//[Offset: 0x90, Size: 48]

--------------------------------
Class: CharacterShovelPhaseData
	enum ShovelPhase;//[Offset: 0x0, Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CharAnimModifyData
	int AppliedGameMode;//[Offset: 0x0, Size: 4]
	byte ModifyAnimListType;//[Offset: 0x4, Size: 1]
	byte AnimType;//[Offset: 0x5, Size: 1]
	byte PoseType;//[Offset: 0x6, Size: 1]
	byte JumpType;//[Offset: 0x7, Size: 1]
	byte JumpPhase;//[Offset: 0x8, Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10, Size: 40]

--------------------------------
Class: CharacterVehAnimModifyData
	enum VehicleType;//[Offset: 0x0, Size: 1]
	int SeatIdx;//[Offset: 0x4, Size: 4]
	byte VehicleAnimType;//[Offset: 0x8, Size: 1]
	AnimationAsset* VehicleAnimSoftPtr;//[Offset: 0x10, Size: 40]

--------------------------------
Class: AsyncLoadCharAnimParams

--------------------------------
Class: WeaponOverrideAttrs
	float GameModeOverride_DeviationMoveModifier;//[Offset: 0x0, Size: 4]
	float GameModeOverride_DeviationStanceJumpModifier;//[Offset: 0x4, Size: 4]
	float GameModeOverride_MeleeDamageAmountModifier;//[Offset: 0x8, Size: 4]
	float GameModeOverride_GrenadeDamageRadiusModifier;//[Offset: 0xc, Size: 4]
	float GameModeOverride_GrenadeDamageAmountModifier;//[Offset: 0x10, Size: 4]
	float GameModeOverride_GunsDamageAmountModifier;//[Offset: 0x14, Size: 4]

--------------------------------
Class: CharacterOverrideAttrs
	float GameModeOverride_SpeedScaleModifier;//[Offset: 0x0, Size: 4]
	float GameModeOverride_SwimSpeedScaleModifier;//[Offset: 0x4, Size: 4]
	float GameModeOverride_EnergySpeedScaleModifier;//[Offset: 0x8, Size: 4]
	float GameModeOverride_LastBreathSpeedScaleModifier;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BonfireActor.UAEBuffApplierActor.Actor.Object
	float RemainingLifeTime;//[Offset: 0x304, Size: 4]
	bool bHasBeenLit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	bool bHasBurnOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 1]
	RoastMeatActor* curRoastMeat;//[Offset: 0x30c, Size: 4]
	void RemingLifeTimeChanged(float previousRemaining);// 0x1ecc424
	void RecordBonFireSuccess();// 0x1f3cc04
	void OnRep_RemainingLifeTime(float previousRemaining);// 0x1f3cb8c
	void OnRep_HasBurnOut();// 0x1f3cb78
	void OnRep_HasBeenLit();// 0x1f3cb64
	void OnRep_CurRoastMeat();// 0x1f3cb50
	void IsBurnOutChanged();// 0x1f3cb34
	FString CastMsg_Implementation(FString Msg);// 0x1f3c9e8

--------------------------------
Class: UAEBuffApplierActor.Actor.Object
	Controller* InstigatorController;//[Offset: 0x2fc, Size: 4]
	Controller* GetTheInstigatorController();// 0x1ed4438

--------------------------------
Class: RoastMeatActor.Actor.Object
	BonfireActor* parentBonfire;//[Offset: 0x2fc, Size: 8]
	enum AnimalType;//[Offset: 0x304, Size: 1]
	bool IsDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 1]
	void RecordRoastMeatSuccess();// 0x20d4e64
	void OnRep_IsDone();// 0x20d4e50
	void CastActorMsg(FString Msg);// 0x20d4d8c

--------------------------------
Class: STCharacterBonfireLinkComp.ActorComponent.Object
	BonfireFanPickerData FanData;//[Offset: 0xbc, Size: 20]
	float ReturnToFindNewTimer;//[Offset: 0xd0, Size: 4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xd8, Size: 8]
	BonfireActor*[] bonFireCandidates;//[Offset: 0xe0, Size: 12]
	void RemoveBonfireCandidate(BonfireActor* newBonfire);// 0x21346c4
	void InitializeOwner(Pawn* _TempPawn);// 0x213464c
	void AddBonfireCandidate(BonfireActor* newBonfire);// 0x21345d4

--------------------------------
Class: BonfireFanPickerData
	float Radius;//[Offset: 0x0, Size: 4]
	float HightDiff;//[Offset: 0x4, Size: 4]
	float Angle;//[Offset: 0x8, Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InteractionEmoteConfig
	int SelfEmoteId;//[Offset: 0x0, Size: 4]
	int OtherEmoteId;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRespawnData
	byte RespawnCount;//[Offset: 0x0, Size: 1]
	Vector Location;//[Offset: 0x4, Size: 12]
	Rotator Rotation;//[Offset: 0x10, Size: 12]
	bool bCanRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: BaseVaultComponent.LuaActorComponent.ActorComponent.Object
	bool bCheckState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	bool bHoldingVaultButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 1]
	bool VaultCheckCPP();// 0x1f32380
	void StartAsyncLoadTeamVaultAnimRes();// 0x1eefba8
	void ServerRPC_VaultServer(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Actor* WindowActor, Rotator movedir);// 0x1f31ef8
	void ServerRPC_StopVault();// 0x1f31e9c
	void ServerRPC_FpsVaultServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x1f31bd0
	void MulticastRPC_VaultFail(FString Reason);// 0x1f31b0c
	void MulticastRPC_VaultAll(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Rotator movedir);// 0x1f31798
	void MulticastRPC_StopVault();// 0x1f3177c
	void MulticastRPC_FpsVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x1f31538
	void EndVaultCPP();// 0x1f3151c
	void DoVaultIgnoreStateCPP();// 0x1f31500
	void DoVaultCPP();// 0x1f314e4

--------------------------------
Class: InjuryParticleAttachOffset
	byte MovementMode;//[Offset: 0x0, Size: 1]
	Transform AttachTransform;//[Offset: 0x10, Size: 48]
	byte AttachLocationType;//[Offset: 0x40, Size: 1]

--------------------------------
Class: NetCarryBackState
	enum State;//[Offset: 0x0, Size: 1]
	enum DetachMethod;//[Offset: 0x1, Size: 1]
	STExtraBaseCharacter* CarryBackCharacter;//[Offset: 0x4, Size: 4]
	STExtraBaseCharacter* BeCarriedBackCharacter;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STCharacterCarryBackComp.LuaActorComponent.ActorComponent.Object
	FString ActorComponentName;//[Offset: 0x14c, Size: 12]
	int CarryBackSkillID;//[Offset: 0x158, Size: 4]
	int PutDownSkillID;//[Offset: 0x15c, Size: 4]
	int DSSwitchId;//[Offset: 0x160, Size: 4]
	enum State;//[Offset: 0x164, Size: 1]
	STExtraBaseCharacter* CarryBackCharacter;//[Offset: 0x168, Size: 4]
	STExtraBaseCharacter* BeCarriedBackCharacter;//[Offset: 0x16c, Size: 4]
	enum DetachMethod;//[Offset: 0x170, Size: 1]
	delegate OnEnterCarryBackState;//[Offset: 0x174, Size: 12]
	delegate OnExitCarryBackState;//[Offset: 0x180, Size: 12]
	delegate OnEnterBeCarriedBackState;//[Offset: 0x18c, Size: 12]
	delegate OnExitBeCarriedBackState;//[Offset: 0x198, Size: 12]
	bool bEnableBPInterrupted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	SkillReplaceCharAnimData[] AnimDataList;//[Offset: 0x1c4, Size: 12]
	float CorrectTickInterval;//[Offset: 0x1d0, Size: 4]
	bool bEnableTranformCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	bool bEnableCollisionCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d5, Size: 1]
	void StopPutDown();// 0x213538c
	void StopCarryBack(enum InDetachMethod);// 0x2135c1c
	void StopBePutDown();// 0x1ee1bb4
	void StopBeCarriedBack(enum InDetachMethod);// 0x2135b9c
	void StartPrePutDown();// 0x2055758
	void StartPreCarryBack(STExtraBaseCharacter* InCharacter);// 0x2025d08
	void StartPreBePutDown();// 0x1f3177c
	void StartPreBeCarriedBack(STExtraBaseCharacter* InCharacter);// 0x2135b1c
	void StartCorrectBeCarriedState(bool bInEnableTranformCorrect, bool bInEnableCollisionCorrect);// 0x2135a4c
	void SetCarryBackState(enum InState, STExtraBaseCharacter* InCarryBackCharacter, STExtraBaseCharacter* InBeCarriedBackCharacter);// 0x213594c
	void ResetCarryBackState();// 0x2135938
	void ReplaceCharacterAnimation(bool bReplace);// 0x21358b8
	void PutDownSomebody(bool bFront);// 0x2135838
	void PutDownFailed();// 0x2135824
	void OnHandleSkillEndEvent(Character* Character, enum StopReason, int SkillID);// 0x2135724
	void LocalPutDownFailed();// 0x2135708
	void LocalExitCarryBackState(enum InDetachMethod);// 0x2135688
	void LocalExitBeCarriedBackState(enum InDetachMethod);// 0x2135608
	void LocalEnterPutDownState();// 0x20e7bcc
	void LocalEnterCarryBackState();// 0x1f3151c
	void LocalEnterBePutDownState();// 0x21355ec
	void LocalEnterBeCarriedBackState();// 0x2096f88
	void LocalCompleteCarryBackState();// 0x1f31500
	void LocalCompleteBeCarriedBackState();// 0x20ebe60
	void LocalCarryBackFailed();// 0x1f7ff54
	bool IsInCarryBackState();// 0x21355c4
	bool IsInBeCarriedBackState();// 0x213559c
	bool IsCarryBackEnable();// 0x2135574
	void HandleCarrySkillEndEvent(enum StopReason, int SkillID);// 0x21354b0
	void CompletePutDown(bool bFront);// 0x2135428
	void CompleteCarryBack();// 0x20491e4
	void CompleteBePutDown(bool bFront);// 0x21353a0
	void CompleteBeCarriedBack();// 0x1eef854
	void CarryBackStateDelegate__DelegateSignature();// 0x2bb69b8
	void CarryBackSomebody();// 0x213538c
	void CarryBackFailed();// 0x2135378
	void BPOnCarryBackCharacterStateInterrupted(int stateID, int InterruptedBy);// 0x2bb69b8
	void BPOnBeCarriedBackCharacterStateInterrupted(int stateID, int InterruptedBy);// 0x2bb69b8
	void BePutDownBySomebody(bool bFront);// 0x1f5da78
	void BeCarriedBackBySomebody();// 0x1ee1bb4

--------------------------------
Class: SkillReplaceCharAnimData
	byte CharacterAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset*[] PoseAnimList;//[Offset: 0x4, Size: 12]
	AnimationAsset*[] FPPPoseAnimList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: PlayerDecalData
	int DecalId;//[Offset: 0x0, Size: 4]
	Transform DecalTransform;//[Offset: 0x10, Size: 48]
	int DecalInstanceId;//[Offset: 0x40, Size: 4]
	IdeaDecalInfo[] DecalInfos;//[Offset: 0x44, Size: 12]

--------------------------------
Class: SearchedTombBoxAndWrapperListResult
	PlayerTombBox* Box;//[Offset: 0x0, Size: 4]
	SearchedPickUpItemResult[] SearchedPickUpItemResultList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: DeathReplayData
	bool IsValidDeathReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool IsForCE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	FString SelfName;//[Offset: 0x4, Size: 12]
	FString PlayerName;//[Offset: 0x10, Size: 12]
	uint64 PlayerUID;//[Offset: 0x20, Size: 8]
	int DamageType;//[Offset: 0x28, Size: 4]
	int SubType;//[Offset: 0x2c, Size: 4]
	FString CauseName;//[Offset: 0x30, Size: 12]
	FString CauseActionName;//[Offset: 0x3c, Size: 12]
	bool IsBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool IsSuicide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	int AliasID;//[Offset: 0x4c, Size: 4]
	FString AliasTitle;//[Offset: 0x50, Size: 12]
	FString AliasNation;//[Offset: 0x5c, Size: 12]
	int AliasRank;//[Offset: 0x68, Size: 4]
	FString AliasPartnerName;//[Offset: 0x6c, Size: 12]
	int AliasPartnerRelation;//[Offset: 0x78, Size: 4]
	int AliasRankID;//[Offset: 0x7c, Size: 4]
	int SegmentLevel;//[Offset: 0x80, Size: 4]
	float KDNum;//[Offset: 0x84, Size: 4]
	int GameCount;//[Offset: 0x88, Size: 4]
	int WinCount;//[Offset: 0x8c, Size: 4]
	int TopTenCount;//[Offset: 0x90, Size: 4]
	int KillNum;//[Offset: 0x94, Size: 4]
	float Distance;//[Offset: 0x98, Size: 4]
	DeathReplayHitInfo OtherHitInfo;//[Offset: 0x9c, Size: 32]
	DeathReplayHitInfo SelfHitInfo;//[Offset: 0xbc, Size: 32]

--------------------------------
Class: DeathReplayHitInfo
	float Damage;//[Offset: 0x0, Size: 4]
	int HitCount;//[Offset: 0x4, Size: 4]
	int HeadShoot;//[Offset: 0x8, Size: 4]
	int LimbsShoot;//[Offset: 0xc, Size: 4]
	int BodyShoot;//[Offset: 0x10, Size: 4]
	int HandShoot;//[Offset: 0x14, Size: 4]
	int FootShoot;//[Offset: 0x18, Size: 4]
	float GunHitRate;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PlayerPosMarkerParam
	Character* Player;//[Offset: 0x0, Size: 4]
	float MarkTimeLen;//[Offset: 0x4, Size: 4]
	int MarkIcon;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PUBGDoor.UAENetActor.LuaActor.Actor.Object
	int iRegionDoor;//[Offset: 0x410, Size: 4]
	bool EnableForceAutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	bool EnableCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 1]
	float MaxNetCullDistanceSquared;//[Offset: 0x418, Size: 4]
	bool EnableRPCCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 1]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 1]
	float autoOpenDistanceSquared;//[Offset: 0x420, Size: 4]
	float autoOpenAngel;//[Offset: 0x424, Size: 4]
	float forwardSpeedRatio;//[Offset: 0x428, Size: 4]
	int doorState;//[Offset: 0x42c, Size: 4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	float DoorOperateTime;//[Offset: 0x434, Size: 4]
	StaticMeshComponent* doorMesh;//[Offset: 0x438, Size: 4]
	BoxComponent* interactionBox;//[Offset: 0x43c, Size: 4]
	BoxComponent* interForceBox;//[Offset: 0x440, Size: 4]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	int DoorStateEx;//[Offset: 0x448, Size: 4]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 1]
	StaticMeshComponent* doorMeshEx;//[Offset: 0x450, Size: 4]
	BoxComponent* interactionBoxEx;//[Offset: 0x454, Size: 4]
	BoxComponent* interForceBoxEx;//[Offset: 0x458, Size: 4]
	bool bUseDoorWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 1]
	bool bIsFobidUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45d, Size: 1]
	bool bIsFobidAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45e, Size: 1]
	delegate OnDoorBrokenDelegate;//[Offset: 0x460, Size: 12]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x46c, Size: 12]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x478, Size: 4]
	bool bAutoOpenTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	bool bAutoOpenStated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47d, Size: 1]
	bool bTriggeredDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47e, Size: 1]
	bool bAutoOpenTriggeredEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47f, Size: 1]
	bool bAutoOpenStatedEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	bool bTriggeredDoorEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 1]
	Character* PlayerCharacter;//[Offset: 0x484, Size: 4]
	float autoOpenAngelCosinValue;//[Offset: 0x488, Size: 4]
	StaticMesh* InitialMesh_C;//[Offset: 0x494, Size: 4]
	bool bInitedDataBeforeBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	FName DoorMeshCollisionProfileBeforeBroken;//[Offset: 0x4a0, Size: 8]
	FName DoorMeshBoxCollisionProfileBeforeBroken;//[Offset: 0x4a8, Size: 8]
	CollisionResponseContainer DoorMeshBoxCollisionResponses;//[Offset: 0x4b8, Size: 32]
	bool WasBrokenForObjectPoolReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 1]
	void SetDoorBroken(bool bExtraDoor);// 0x20b9be8
	void RefreshUIOnClient();// 0x20b9bd4
	void OpenDoorBy(Character* Character, bool extraDoor);// 0x20b9b10
	void OnRep_RepDoorStateEx();// 0x20b9afc
	void OnRep_RepDoorState();// 0x20b9ae8
	void OnRep_RepDoorBrokenEx();// 0x20b9ad4
	void OnRep_RepDoorBroken();// 0x20b9ac0
	void OnEndOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x20b9978
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x20b9830
	void OnDoorRPC(Character* Character, bool bAimingExtraDoor);// 0x20b976c
	void OnBPRespawned();// 0x1ecd2a0
	void OnBeginOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x20b9570
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x20b9374
	void On_DoorAniFinsih(const BoxComponent* InDoorCheckBox, bool extraDoor);// 0x20b92b0
	bool IsSameDoorState(int ClientState);// 0x20b9230
	void Init(BoxComponent* interactionBox, StaticMeshComponent* doorMesh, bool inDoubleDoor, BoxComponent* interactionBoxEx, StaticMeshComponent* doorMeshEx, BoxComponent* interForceBox, BoxComponent* interForceBoxEx);// 0x20b900c
	enum[] GetDamageableGameObjectType();// 0x20b8f44
	void ForceNetUpdate();// 0x208d7e0
	void DeCodeKey();// 0x1f7acc8
	void CloseDoorBy(Character* Character, bool extraDoor);// 0x20b8e80
	void ClientDoorRPC(int iDoorState, bool bDoorBroken, int iDoorStateEx, bool bDoorBrokenEx);// 0x20b8d1c
	void BPSetObjectPoolInitialData();// 0x1ecd2d8
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x2bb69b8
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x2bb69b8
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x2bb69b8

--------------------------------
Class: BackpackEmoteHandle.BattleItemHandleBase.ItemHandleBase.Object
	AnimationAsset* AnimAsset;//[Offset: 0xf8, Size: 40]
	float blendTime;//[Offset: 0x120, Size: 4]
	bool ShowWeaponWhenPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	bool bOnlyEmoteActionAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 1]
	LobbyGenderAnimData[] LobbyEnterEmoteAnimAssetList;//[Offset: 0x128, Size: 12]
	LobbyGenderAnimData[] LobbyLeaveEmoteAnimAssetList;//[Offset: 0x134, Size: 12]
	EmoteAnimConfig[] MainCharacterAnimConfig;//[Offset: 0x140, Size: 12]
	EmoteActionBase*[] EmoteActionList;//[Offset: 0x14c, Size: 12]
	AkAudioEvent* EmoteSoundStartEvent;//[Offset: 0x158, Size: 4]
	AkAudioEvent* EmoteSoundInterruptEvent;//[Offset: 0x15c, Size: 4]
	bool IsGenderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	AkAudioEvent*[] MaleEmoteSoundStartEventList;//[Offset: 0x164, Size: 12]
	AkAudioEvent*[] FemaleEmoteSoundStartEventList;//[Offset: 0x170, Size: 12]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x1f055ac
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x1f05188
	bool HandleDrop(int InCount, enum Reason);// 0x1f04ba4
	bool HandleDisuse(enum Reason);// 0x1ef599c
	BackpackComponent* GetBackpackComponent();// 0x1f07b2c
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x1f07a68

--------------------------------
Class: LobbyGenderAnimData
	AnimationAsset* BoyAnim;//[Offset: 0x0, Size: 40]
	AnimationAsset* GirlAnim;//[Offset: 0x28, Size: 40]

--------------------------------
Class: EmoteAnimConfig
	FName GenderStr;//[Offset: 0x0, Size: 8]
	class Character* MainCharacter;//[Offset: 0x8, Size: 40]
	AnimationAsset* MainCharacterAnimAsset;//[Offset: 0x30, Size: 40]
	bool CanRotateMainCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	Transform MainCharacterTransform;//[Offset: 0x60, Size: 48]
	bool RotateBackToZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	LevelSequence* EmoteLevelSequence;//[Offset: 0x94, Size: 4]
	EmoteAnimCharacterConfig[] MultiFollowerCharacters;//[Offset: 0x98, Size: 12]
	class Character* FollowerCharacter;//[Offset: 0xa8, Size: 40]
	bool NeedAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x220, Size: 4]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x224, Size: 60]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x260, Size: 60]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x29c, Size: 60]

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 12]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 12]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 24]
	FString ObjectPath;//[Offset: 0x28, Size: 12]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 28]
	FString ComponentName;//[Offset: 0x1c, Size: 12]
	Object* CachedComponent;//[Offset: 0x28, Size: 8]

--------------------------------
Class: EmoteAnimCharacterConfig
	class Character* Character;//[Offset: 0x0, Size: 40]
	Transform Transform;//[Offset: 0x30, Size: 48]
	bool NeedAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]

--------------------------------
Class: EmoteActionBase.Object
	float PropStartShowTime;//[Offset: 0x1c, Size: 4]
	float PropEndShowTime;//[Offset: 0x20, Size: 4]
	bool bOnlyInBornIsland;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	delegate OnActionReady;//[Offset: 0x38, Size: 12]
	void SetActionDelayTimeHandle(Object* InOuter, BackpackEmoteHandle* InHandle);// 0x1fb1bcc
	Object* GetSoftRefObj(out const SoftObjectPath AssetRef);// 0x1fb1af0
	class Object GetSoftRefClass(out const SoftObjectPath AssetRef);// 0x1fb1a14
	bool GetIsExecuting();// 0x1fb19f8
	void Destroy();// 0x1faf048
	void DelayShow();// 0x1fb0074

--------------------------------
Class: MovementRecordData
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	Vector Velocity;//[Offset: 0x18, Size: 12]
	float ServerTimeStamp;//[Offset: 0x24, Size: 4]
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	Vector VehicleLocation;//[Offset: 0x2c, Size: 12]
	byte PoseState;//[Offset: 0x38, Size: 1]
	enum MoveBaseState;//[Offset: 0x39, Size: 1]
	float PingMillisecond;//[Offset: 0x3c, Size: 4]
	bool IsCustomMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	uint64 PawnStates;//[Offset: 0x48, Size: 8]
	bool bHasWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]

--------------------------------
Class: ShootDamageTipsStr
	STExtraBaseCharacter* DamageTarget;//[Offset: 0x0, Size: 4]
	float Damage;//[Offset: 0x4, Size: 4]
	bool IsHeadShotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: TLog_ActivityEventType
	byte ActivityEventID;//[Offset: 0x0, Size: 1]
	Vector ActivityEventLoc;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ClientFatalDamageRecordData
	FString Causer;//[Offset: 0x0, Size: 12]
	FString CauserNation;//[Offset: 0xc, Size: 12]
	FString VictimName;//[Offset: 0x18, Size: 12]
	FString VictimNation;//[Offset: 0x24, Size: 12]
	FString FuzzyCauserName;//[Offset: 0x30, Size: 12]
	FString FuzzyVictimName;//[Offset: 0x3c, Size: 12]
	int DamageType;//[Offset: 0x48, Size: 4]
	int AdditionalParam;//[Offset: 0x4c, Size: 4]
	int CauserWeaponAvatarID;//[Offset: 0x50, Size: 4]
	int CauserClothAvatarID;//[Offset: 0x54, Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int ResultHealthStatus;//[Offset: 0x5c, Size: 4]
	byte RecordRelationShip;//[Offset: 0x60, Size: 1]
	int PreviousHealthStatus;//[Offset: 0x64, Size: 4]
	int causerAnchorPlatformResID;//[Offset: 0x68, Size: 4]
	int causerAnchorPlatformColorID;//[Offset: 0x6c, Size: 4]
	int realKillerAnchorPlatformResID;//[Offset: 0x70, Size: 4]
	int realKillerAnchorPlatformColorID;//[Offset: 0x74, Size: 4]
	int victimAnchorPlatformResID;//[Offset: 0x78, Size: 4]
	int victimAnchorPlatformColorID;//[Offset: 0x7c, Size: 4]
	FString CauserPicURL;//[Offset: 0x80, Size: 12]
	FString VictimPicURL;//[Offset: 0x8c, Size: 12]
	FString RealKillerName;//[Offset: 0x98, Size: 12]
	int RealKillNum;//[Offset: 0xa4, Size: 4]
	byte CauserType;//[Offset: 0xa8, Size: 1]
	byte VictimType;//[Offset: 0xa9, Size: 1]
	int CauserTeamID;//[Offset: 0xac, Size: 4]
	int VictimTeamID;//[Offset: 0xb0, Size: 4]
	bool IsUseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	LinearColor UseColor;//[Offset: 0xb8, Size: 16]
	byte[] ExpandDataContent;//[Offset: 0xc8, Size: 12]

--------------------------------
Class: STRadialDamageEvent.STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent
	bool bPlayHurtAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]

--------------------------------
Class: DotDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: WeatherInfo
	FString WeatherLevelName;//[Offset: 0x0, Size: 12]
	int WeatherID;//[Offset: 0xc, Size: 4]
	float WeatherTime;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PlayerNetStats
	FString ClientAddr;//[Offset: 0x0, Size: 12]
	FString LocalAddr;//[Offset: 0xc, Size: 12]
	float AvgPing;//[Offset: 0x18, Size: 4]
	float MaxPing;//[Offset: 0x1c, Size: 4]
	float HighPingPercent;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PlayerOBInfo
	bool IsEnableOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	uint64 UId;//[Offset: 0x8, Size: 8]
	int ZoneID;//[Offset: 0x10, Size: 4]
	uint32 PlayerKey;//[Offset: 0x14, Size: 4]
	int BattleMode;//[Offset: 0x18, Size: 4]
	bool ValidBattleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int GameCount;//[Offset: 0x20, Size: 4]
	int WinCount;//[Offset: 0x24, Size: 4]
	int TopTenCount;//[Offset: 0x28, Size: 4]
	int KillNum;//[Offset: 0x2c, Size: 4]
	float KDNum;//[Offset: 0x30, Size: 4]

--------------------------------
Class: GameModePlayerRolewearInfo
	GameModePlayerItem[] RolewearInfo;//[Offset: 0x0, Size: 12]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: GameModePlayerKnapsackExtInfo
	GameModePlayerKnapsackSingleInfo KnapsackExtInfo;//[Offset: 0x0, Size: 76]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	int WearIndex;//[Offset: 0x50, Size: 4]

--------------------------------
Class: GameModePlayerKnapsackSingleInfo
	int Parachute;//[Offset: 0x0, Size: 4]
	int BagSkin;//[Offset: 0x4, Size: 4]
	int HelmetSkin;//[Offset: 0x8, Size: 4]
	int FlySkin;//[Offset: 0xc, Size: 4]
	int GrenadeSkin;//[Offset: 0x10, Size: 4]
	GameModePlayerConsumableAvatar ConsumableAvatarList;//[Offset: 0x14, Size: 16]
	GameModePlayerItem[] WeaponList;//[Offset: 0x24, Size: 12]
	GameModePlayerItem[] VehicleSkinList;//[Offset: 0x30, Size: 12]
	GameModePlayerItem[] BackPackPendantList;//[Offset: 0x3c, Size: 12]
	int ShowVehicleSkin;//[Offset: 0x48, Size: 4]

--------------------------------
Class: GameModePlayerConsumableAvatar
	int GrenadeAvatarShoulei;//[Offset: 0x0, Size: 4]
	int GrenadeAvatarSmoke;//[Offset: 0x4, Size: 4]
	int GrenadeAvatarStun;//[Offset: 0x8, Size: 4]
	int GrenadeAvatarBurn;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameModePlayeWeaponSchemeInfo
	int SchemeIndex;//[Offset: 0x0, Size: 4]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	GameModePlayeWeaponSchemeSlotInfo[] SlotList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: GameModePlayeWeaponSchemeSlotInfo
	int SlotIndex;//[Offset: 0x0, Size: 4]
	int ItemId;//[Offset: 0x4, Size: 4]
	int Count;//[Offset: 0x8, Size: 4]
	int[] AttachList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: GameModePlayerItems
	GameModePlayerItem[] Items;//[Offset: 0x0, Size: 12]

--------------------------------
Class: GameModePlayerEquipmentAvatar
	int BagAvatar;//[Offset: 0x0, Size: 4]
	int HelmetAvatar;//[Offset: 0x4, Size: 4]
	int ArmorAvatar;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameModeWeaponAvatarData
	int ParentID;//[Offset: 0x0, Size: 4]
	int AvatarSpecificID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleAvatarSkinList
	int[] SkinList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: GameModePlayerExpressionItem.GameModePlayerItem

--------------------------------
Class: GameModeWeaponDIYPlanData
	int WeaponAvatarID;//[Offset: 0x0, Size: 4]
	int PlanID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SpecialPickItem
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DailyTaskStoreInfo
	int TaskId;//[Offset: 0x0, Size: 4]
	int State;//[Offset: 0x4, Size: 4]
	int Progress;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameModePlayerParams
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString PlanetailResLink;//[Offset: 0x4, Size: 12]
	uint64 UId;//[Offset: 0x10, Size: 8]
	FString OpenID;//[Offset: 0x18, Size: 12]
	int8 PlatID;//[Offset: 0x24, Size: 1]
	FName PlayerType;//[Offset: 0x28, Size: 8]
	FString PlayerName;//[Offset: 0x30, Size: 12]
	uint32 PlayerKey;//[Offset: 0x3c, Size: 4]
	int TeamID;//[Offset: 0x40, Size: 4]
	int64 IdxInTeam;//[Offset: 0x48, Size: 8]
	int PlayerBornPointID;//[Offset: 0x50, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	byte gender;//[Offset: 0x56, Size: 1]
	FString PIC_URL;//[Offset: 0x58, Size: 12]
	int Level;//[Offset: 0x64, Size: 4]
	int Segment_Level;//[Offset: 0x68, Size: 4]
	int AceImprintShowId;//[Offset: 0x6c, Size: 4]
	int AceImprintBaseId;//[Offset: 0x70, Size: 4]
	int AvatarBoxId;//[Offset: 0x74, Size: 4]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	GameModePlayerItem[] ItemList;//[Offset: 0x7c, Size: 12]
	GameModePlayerItem[] fireworksInfo;//[Offset: 0x88, Size: 12]
	int[] equip_plating_list;//[Offset: 0x94, Size: 12]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0xa0, Size: 12]
	int RolewearIndex;//[Offset: 0xac, Size: 4]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0xb0, Size: 12]
	GameModePlayerTaskData[] TaskDataList;//[Offset: 0xbc, Size: 12]
	GameModePlayerItem[] WeaponAvatarList;//[Offset: 0xc8, Size: 12]
	GameModePlayerItem[] VehicleAvatarList;//[Offset: 0xd4, Size: 12]
	VehicleAvatarData[] VehicleAdvanceAvatarList;//[Offset: 0xe0, Size: 12]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0xec, Size: 12]
	GameModeWeaponDIYPlanData[] WeaponDIYPlanData;//[Offset: 0xf8, Size: 12]
	int VehicleSkinInReady;//[Offset: 0x104, Size: 4]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x108, Size: 52]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x13c, Size: 44]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x168, Size: 24]
	GameModePlayerKnapsackExtInfo[] KnapsackExtInfoList;//[Offset: 0x180, Size: 12]
	GameModePlayeWeaponSchemeInfo[] WeaponSchemeInfoList;//[Offset: 0x18c, Size: 12]
	int CurWeaponSchemeIndex;//[Offset: 0x198, Size: 4]
	int PveLevel;//[Offset: 0x19c, Size: 4]
	int[] CharSkillList;//[Offset: 0x1a0, Size: 12]
	GameModePlayerBanChat banChat;//[Offset: 0x1ac, Size: 16]
	GameModePlayerBanChat banTarget;//[Offset: 0x1bc, Size: 16]
	SpecialPickItem[] SpecialPickItem;//[Offset: 0x1cc, Size: 12]
	AchievementPrize EquippedAchievementPrize;//[Offset: 0x1d8, Size: 12]
	int[] audioChat;//[Offset: 0x1e4, Size: 12]
	FName CurrentPlayerState;//[Offset: 0x1f0, Size: 8]
	FName CurrentCharacterState;//[Offset: 0x1f8, Size: 8]
	float SyncedTimestamp;//[Offset: 0x200, Size: 4]
	float DestinyValue;//[Offset: 0x204, Size: 4]
	float WarmScore;//[Offset: 0x208, Size: 4]
	float AIAllocMarkValue;//[Offset: 0x20c, Size: 4]
	int LeaderCount;//[Offset: 0x210, Size: 4]
	uint64 LastGameLeaderUID;//[Offset: 0x218, Size: 8]
	uint64[] LastGameTeammatesUID;//[Offset: 0x220, Size: 12]
	uint64 LastGameBattleID;//[Offset: 0x230, Size: 8]
	float RatingScore;//[Offset: 0x238, Size: 4]
	bool bDoPlayerUseAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	float MaxRankingScore;//[Offset: 0x240, Size: 4]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	uint64 WatchPlayerKey;//[Offset: 0x248, Size: 8]
	byte PlatformGender;//[Offset: 0x250, Size: 1]
	int planeAvatarId;//[Offset: 0x254, Size: 4]
	int DyeDebugFlag;//[Offset: 0x258, Size: 4]
	FString Nation;//[Offset: 0x25c, Size: 12]
	int MatchLabel;//[Offset: 0x268, Size: 4]
	int AnchorPlatColorID;//[Offset: 0x26c, Size: 4]
	int AnchorPlatResID;//[Offset: 0x270, Size: 4]
	bool OnlyTeammateSeeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	int64 LastGameResultTime;//[Offset: 0x278, Size: 8]
	int64 CorpsID;//[Offset: 0x280, Size: 8]
	int64 CampID;//[Offset: 0x288, Size: 8]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 1]
	FString IpCountryStr;//[Offset: 0x294, Size: 12]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	int VeteranRecruitIndex;//[Offset: 0x2a4, Size: 4]
	int MatchStrategyLabel;//[Offset: 0x2a8, Size: 4]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0x2ac, Size: 12]
	int LandId;//[Offset: 0x2b8, Size: 4]
	int FollowType;//[Offset: 0x2bc, Size: 4]
	uint64 FollowUID;//[Offset: 0x2c0, Size: 8]
	uint32 TaskSyncToDsTs;//[Offset: 0x2c8, Size: 4]
	BornItem[] BornItems;//[Offset: 0x2cc, Size: 12]
	uint64 LuckmateUID;//[Offset: 0x2d8, Size: 8]
	int CollectedEventType;//[Offset: 0x2e0, Size: 4]

--------------------------------
Class: GameModePlayerBanChat
	int end_time;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AchievementPrize
	int MedalAvatarID;//[Offset: 0x0, Size: 4]
	int NotifyTitleAvatarID;//[Offset: 0x4, Size: 4]
	int ScoreBoardAvatarID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ValidTouchMoveFrameConfig
	FString DeviceName;//[Offset: 0x0, Size: 12]
	int Enable;//[Offset: 0xc, Size: 4]
	int Frame;//[Offset: 0x10, Size: 4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: BattleSceneAvatarDisplayInfo
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PlayerUIDStr;//[Offset: 0xc, Size: 12]
	int PlayerGender;//[Offset: 0x18, Size: 4]
	bool bIsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int[] EquipedAvatarList;//[Offset: 0x20, Size: 12]
	int[] EquipedWeaponList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: SensibilityConfig
	SensibilityMode NormalMode;//[Offset: 0x0, Size: 40]
	SensibilityMode FireMode;//[Offset: 0x28, Size: 40]
	SensibilityMode MotionMode;//[Offset: 0x50, Size: 40]
	SensibilityMode MotionFireMode;//[Offset: 0x78, Size: 40]
	float VehicleEye;//[Offset: 0xa0, Size: 4]
	float ParachuteEye;//[Offset: 0xa4, Size: 4]
	float FPPEye;//[Offset: 0xa8, Size: 4]
	int SideMirrorModeC;//[Offset: 0xac, Size: 4]
	<int,SightMaterialConfig> MaterialConfigs;//[Offset: 0xb0, Size: 60]

--------------------------------
Class: SensibilityMode
	float NoAim;//[Offset: 0x0, Size: 4]
	float Sight1X;//[Offset: 0x4, Size: 4]
	float Sight2X;//[Offset: 0x8, Size: 4]
	float Sight3X;//[Offset: 0xc, Size: 4]
	float Sight4X;//[Offset: 0x10, Size: 4]
	float Sight6X;//[Offset: 0x14, Size: 4]
	float Sight8X;//[Offset: 0x18, Size: 4]
	float FPPNoAim;//[Offset: 0x1c, Size: 4]
	float Shoulder;//[Offset: 0x20, Size: 4]
	float ShoulderFPP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: SightMaterialConfig
	int Color;//[Offset: 0x0, Size: 4]
	int Type;//[Offset: 0x4, Size: 4]

--------------------------------
Class: KillOrPutDownMessage
	byte MsgType;//[Offset: 0x0, Size: 1]
	FString AttackActionName;//[Offset: 0x4, Size: 12]
	FString AttackName;//[Offset: 0x10, Size: 12]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int KillNum;//[Offset: 0x20, Size: 4]
	bool bShowKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bHideKillIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	FString FullMsg;//[Offset: 0x28, Size: 12]
	int victimAnchorPlatformResID;//[Offset: 0x34, Size: 4]
	FString VictimPlayerName;//[Offset: 0x38, Size: 12]
	FString CauserPlayerName;//[Offset: 0x44, Size: 12]
	FString CauserRealPlayerName;//[Offset: 0x50, Size: 12]
	bool bIsCauserTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bIsVictimTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	bool bIamCauser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	bool bIamVictim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f, Size: 1]
	byte[] ExpandDataContent;//[Offset: 0x60, Size: 12]

--------------------------------
Class: NewbieGuideComponent.ActorComponent.Object
	int CurTipsID;//[Offset: 0xbc, Size: 4]
	bool IsStartShowingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool OpenNewbieGuideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	float GuideInterval;//[Offset: 0xc4, Size: 4]
	int MaxGuideLevel;//[Offset: 0xc8, Size: 4]
	class STNewBieGuideConfig* uBRNewGuideConfig;//[Offset: 0xd0, Size: 40]
	class Object[] tGuideConfigClassArray;//[Offset: 0xf8, Size: 12]
	STNewBieGuideConfig*[] tGuideConfigArray;//[Offset: 0x104, Size: 12]
	class STNewBieGuideConfig* uModNewGuideConfig;//[Offset: 0x110, Size: 40]
	NewbieGuideItem[] tItems;//[Offset: 0x138, Size: 12]
	STExtraPlayerController* OwnerController;//[Offset: 0x144, Size: 4]
	int[] FinishedTips;//[Offset: 0x148, Size: 12]
	int[] FinishedCounts;//[Offset: 0x154, Size: 12]
	int PlayerLevel;//[Offset: 0x160, Size: 4]
	byte curPlayerCategory;//[Offset: 0x164, Size: 1]
	void TriggerNewbieEvent(FString NewbieEvent);// 0x206d7e0
	void ShowHideGuide(int TipsID, bool bShow);// 0x206d71c
	void SendNewbieMsg(int TipsID, bool isStart, int tipsIndex);// 0x206d610
	void OnUIAssetLoadFinsh(LoadGuideUIFinishRet inFinishRet);// 0x206d594
	void OnNewbieEventMapUpdate__DelegateSignature();// 0x2bb69b8
	void OnLoadGuideConfigFinish(LoadGuideConfig inFinishRet);// 0x206d414
	void InitComponent(STExtraPlayerController* _OwnerController, int[] _FinishedTips, int[] _FinishedCounts, byte _curPlayerCategory, int _PlayerLevel);// 0x206d0d0
	void HandleNewbieGuideEnd(FString GuideID, FString EndType);// 0x206cf90
	void HandleNewbieGuideBegin(FString GuideID);// 0x206ced4
	bool GetIsAllowNewGuide();// 0x206ceac
	bool GetIsAllowLuaNewGuide();// 0x206ce84
	void AddGuidItem(class STNewBieGuideConfig Config);// 0x206cd04

--------------------------------
Class: STNewBieGuideConfig.Object
	NewbieGuideItem[] tItems;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: NewbieGuideItem
	int ID;//[Offset: 0x0, Size: 4]
	FString Name;//[Offset: 0x4, Size: 12]
	byte Type;//[Offset: 0x10, Size: 1]
	int MaxGuideCounts;//[Offset: 0x14, Size: 4]
	int MaxGuideLevel;//[Offset: 0x18, Size: 4]
	byte[] SubjectPlayerTypes;//[Offset: 0x1c, Size: 12]
	int Priority;//[Offset: 0x28, Size: 4]
	int MuteFlag;//[Offset: 0x2c, Size: 4]
	int PreconditionID;//[Offset: 0x30, Size: 4]
	float PreconditionTipTimeGap;//[Offset: 0x34, Size: 4]
	STNewbieGuideConditionBase*[] Conditions;//[Offset: 0x38, Size: 12]
	STNewbieGuideSuccessListenerBase* QuickFinishedListener;//[Offset: 0x44, Size: 4]
	STNewbieGuideSuccessListenerBase*[] QuickFinishedListenerList;//[Offset: 0x48, Size: 12]
	float Duration;//[Offset: 0x54, Size: 4]
	NewbieGuideUIInfo[] UIInfos;//[Offset: 0x58, Size: 12]
	bool UseNewEdition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]

--------------------------------
Class: STNewbieGuideConditionBase.Object
	Controller* OwnerController;//[Offset: 0x60, Size: 8]
	FString LuaFilePath;//[Offset: 0x68, Size: 12]
	bool ReconnectRecover();// 0x1f81a70
	bool IsOK();// 0x1f81ab4

--------------------------------
Class: STNewbieGuideSuccessListenerBase.GSListenerBase.Object
	bool GuideFinishedByPlayer();// 0x206c860

--------------------------------
Class: GSListenerBase.Object
	delegate OnGSListenerBaseTrigger;//[Offset: 0x1c, Size: 12]
	Controller* OwnerController;//[Offset: 0x28, Size: 8]
	bool bAutoDisableWhenTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float DelayTime;//[Offset: 0x34, Size: 4]
	bool ReconnectRecover();// 0x1f81a70
	void OnEventTrigger();// 0x1ef5680
	Actor* GetCurrentEventOwnerActor();// 0x1ed3ca4
	bool EnableListener();// 0x1ff6d9c
	bool DisableListener();// 0x1f81ab4

--------------------------------
Class: NewbieGuideUIInfo
	class UAEUserWidget* WidgetClassPath;//[Offset: 0x0, Size: 40]
	bool isMountUIDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	FString MountName;//[Offset: 0x2c, Size: 12]
	FString MountOuterName;//[Offset: 0x38, Size: 12]
	AnchorData LayoutData;//[Offset: 0x44, Size: 40]
	FString LogicManagerNames;//[Offset: 0x6c, Size: 12]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	int ZOrder;//[Offset: 0x7c, Size: 4]
	Widget* UIWidget;//[Offset: 0x80, Size: 4]
	class Object* UIWidgetClass;//[Offset: 0x84, Size: 4]

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 16]
	Anchors Anchors;//[Offset: 0x10, Size: 16]
	Vector2D Alignment;//[Offset: 0x20, Size: 8]

--------------------------------
Class: LoadGuideUIFinishRet

--------------------------------
Class: LoadGuideConfig

--------------------------------
Class: TimeLineSyncComponent.ActorComponent.Object
	void RPC_SrvSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf, double InClientTime);// 0x22623a0
	void RPC_SrvSyncTimeLine(double InSrvSendTime, double InClientTime);// 0x226228c
	void RPC_GetClientTimeRespond(int Index, float serverLevelTime, int64 serverSystemTime, double serverBootTime);// 0x22620e0
	void RPC_GetClientTimeRequest(int Index);// 0x226202c
	void RPC_ClientSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf);// 0x2261f30
	void RPC_ClientSyncTimeLine(double InServerTime);// 0x2261e70
	void ReportDebugInfo(int RporetedId);// 0x2261dbc
	void OnServerAboutToReconnect();// 0x2261da8
	void GetClientTimeInterval();// 0x2261d94
	void CheckTimeLine();// 0x2261d80

--------------------------------
Class: TimeWatchDogComponent.ActorComponent.Object
	bool bUseTimeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float TimeStartDelay;//[Offset: 0xc0, Size: 4]
	float SyncInterval;//[Offset: 0xc4, Size: 4]
	void RPC_SrvSyncTimeLine(float InSrvSendTime, float InClientTime);// 0x226381c
	void RPC_ClientSyncTimeLine(float InServerTime);// 0x1ebeff8
	void OnTimeInspectorColdMove_Vehicle();// 0x2263808
	void OnTimeInspectorColdMove_Own();// 0x22637f4
	void OnServerAboutToReconnect();// 0x22637e0
	void CheckTimeLine();// 0x22637cc

--------------------------------
Class: HiggsBosonComponent.ActorComponent.Object
	FString TraceData;//[Offset: 0x1cc, Size: 12]
	FString GameTraceData;//[Offset: 0x1d8, Size: 12]
	uint32 HeartBreaks;//[Offset: 0x1e4, Size: 4]
	FString HeartInfo;//[Offset: 0x1e8, Size: 12]
	delegate OnSwiftHawkDelegate;//[Offset: 0x1f4, Size: 12]
	delegate OnGlueHiaRayResult;//[Offset: 0x200, Size: 12]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x20c, Size: 4]
	STExtraPlayerController* PlayerController;//[Offset: 0x210, Size: 4]
	void SwiftHawk(const byte[] Hawks, uint32 Magic);// 0x2019a5c
	void ServerShowSecurityAlert(FString Tips);// 0x1f6191c
	void RPC_ServerGlueHiaPark(int8 HeShui, const byte[] GlueHiaParkArr, uint32 HiaStatus, const byte[] GlueArg);// 0x201984c
	void RPC_ServerCapbo(int8 BoCapC, int8 InBoType, const byte[] BoDataArr);// 0x20196c8
	void RPC_ClientCoronaLab(byte bAllSwitch, const byte[] CoronaLab, uint32 CoronaState);// 0x2019544
	void OnWeaponAimInput(float InDistToEnemy, float InYaw, float InPitch, float InRoll);// 0x20193fc
	void OnTouchInput(float InYaw, float InPitch, float InRoll);// 0x20192fc
	void OnStopFireEvent();// 0x20192e8
	void OnStartFireEvent();// 0x20192d4
	void OnSkillInteruptVisual(const Actor* InTarget, const Actor* InCauser);// 0x2019218
	void OnSkillEndVisual(const Actor* InTarget, const Actor* InCauser);// 0x201915c
	void OnSkillEndTrans(const Actor* InTarget, const Actor* InCauser);// 0x20190a0
	void OnSkillBeginVisual(const Actor* InTarget, const Actor* InCauser);// 0x2018fe4
	void OnSkillBeginTrans(const Actor* InTarget, const Actor* InCauser);// 0x2018f28
	void OnPlayerScopeOut(bool bBegan);// 0x2018ea8
	void OnPlayerScopeIn(bool bBegan);// 0x2018e28
	void OnMyPawnRespawn(UAEPlayerController* InPlayerController);// 0x2018db0
	void OnKillSomeOneEvent(const Actor* InSomeOne);// 0x2018d38
	void OnGyroInput(float InYaw, float InPitch, float InRoll);// 0x2018c38
	void OnClientAdjustPosition(Vector NewLoc, enum Reason);// 0x2018b7c
	void OnCapboReturn(int BoCapC, int InBoType, out const byte[] RetData);// 0x2018a28
	void OnBulletImpactEvent(const Actor* InCauser, out const HitResult InImpactResult);// 0x2018948
	void FlushGameEnd();// 0x2018934
	void ClientSwiftHawk(int SequenceID);// 0x1f62800
	void ClientDoJT();// 0x2018920

--------------------------------
Class: PlayerAntiCheatManager.ActorComponent.Object
	VerifySwitch VsHitDetail;//[Offset: 0x134, Size: 12]
	VerifySwitch VsFlyDist2D;//[Offset: 0x140, Size: 12]
	VerifySwitch VsFlyDist3D;//[Offset: 0x14c, Size: 12]
	VerifySwitch VsFlyGravitySimple;//[Offset: 0x158, Size: 12]
	VerifySwitch VsFlyGravityDetail;//[Offset: 0x164, Size: 12]
	VerifySwitch VsRelMoveFailed;//[Offset: 0x170, Size: 12]
	VerifySwitch VsPureMoveSpeed;//[Offset: 0x17c, Size: 12]
	VerifySwitch VsNoHitDetail;//[Offset: 0x188, Size: 12]
	VerifySwitch VsFakeTraceMissMatch;//[Offset: 0x194, Size: 12]
	VerifySwitch VsSilentProtect01;//[Offset: 0x1a0, Size: 12]
	VerifySwitch VsSilentProtect02;//[Offset: 0x1ac, Size: 12]
	VerifySwitch VsLocusCheckHorizon;//[Offset: 0x1b8, Size: 12]
	VerifySwitch VsLocusCheckZ;//[Offset: 0x1c4, Size: 12]
	VerifySwitch VsLocusCheckHorizonSingle;//[Offset: 0x1d0, Size: 12]
	VerifySwitch VsLocusCheckHorizonBigBox;//[Offset: 0x1dc, Size: 12]
	VerifySwitch VsMuzzleDataWrong;//[Offset: 0x1e8, Size: 12]
	VerifySwitch VsMuzzleRangeCircle;//[Offset: 0x1f4, Size: 12]
	VerifySwitch VsMuzzleRangeUp;//[Offset: 0x200, Size: 12]
	VerifySwitch VsMuzzleRangeForward;//[Offset: 0x20c, Size: 12]
	VerifySwitch VsMuzzleRangeRight;//[Offset: 0x218, Size: 12]
	VerifySwitch VsDeConAndTimeOld;//[Offset: 0x224, Size: 12]
	VerifySwitch VsMaxWeaponToBaseFailed;//[Offset: 0x230, Size: 12]
	VerifySwitch VsBulletDirFailed;//[Offset: 0x23c, Size: 12]
	VerifySwitch VsBulletBornFailed;//[Offset: 0x248, Size: 12]
	VerifySwitch VsBoneScale;//[Offset: 0x254, Size: 12]
	VerifySwitch VsHitBoneNameNone;//[Offset: 0x260, Size: 12]
	VerifySwitch VsHitBoneHitMissMatch;//[Offset: 0x26c, Size: 12]
	VerifySwitch VsBulletID;//[Offset: 0x278, Size: 12]
	VerifySwitch VsWeaponHasNoBase;//[Offset: 0x284, Size: 12]
	VerifySwitch VsBlockStaticToDynamic;//[Offset: 0x290, Size: 12]
	VerifySwitch VsMoveTimeStampError;//[Offset: 0x29c, Size: 12]
	VerifySwitch VsVehicleTimeStampError;//[Offset: 0x2a8, Size: 12]
	VerifySwitch VsWatchTimeStampError;//[Offset: 0x2b4, Size: 12]
	int MaxShootPointPassWall;//[Offset: 0x2c0, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0x2c4, Size: 4]
	int MaxLocusFailTime;//[Offset: 0x2c8, Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0x2cc, Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0x2d0, Size: 4]
	float MaxSkeletonLength;//[Offset: 0x2d4, Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x2d8, Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x2dc, Size: 4]
	int MaxAllowVehicleAccTime;//[Offset: 0x2e0, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x2e4, Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x2e8, Size: 12]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x2f4, Size: 12]
	VerifySwitch VsJumpMaxHeight15;//[Offset: 0x300, Size: 12]
	VerifySwitch VsJumpMaxHeight2;//[Offset: 0x30c, Size: 12]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x318, Size: 12]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x324, Size: 12]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x330, Size: 12]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x33c, Size: 12]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x348, Size: 12]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x354, Size: 12]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x360, Size: 12]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x36c, Size: 12]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x378, Size: 12]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x384, Size: 12]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x390, Size: 12]
	VerifySwitch VsShootTimeDeConMerged;//[Offset: 0x39c, Size: 12]
	int MaxMergedStrategy1;//[Offset: 0x3a8, Size: 4]
	int MaxMergedStrategy2;//[Offset: 0x3ac, Size: 4]
	VerifySwitch VsShootTimeDeConFrameControl;//[Offset: 0x3b0, Size: 12]
	VerifySwitch VsShootTimeServerNoConnSpan;//[Offset: 0x3bc, Size: 12]
	VerifySwitch VsServerNoOldShoot;//[Offset: 0x3c8, Size: 12]
	VerifySwitch VsClientNotConnectShoot;//[Offset: 0x3d4, Size: 12]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x3e0, Size: 12]
	VerifySwitch VsParachuteVelocityCheck;//[Offset: 0x3ec, Size: 12]
	float MaxFuelConsume;//[Offset: 0x3f8, Size: 4]
	VerifySwitch VsHighMuzzleShootDown;//[Offset: 0x47c, Size: 12]
	VerifySwitch VsWeaponScopeHeightError;//[Offset: 0x488, Size: 12]
	VerifySwitch VsWeaponScopeDisError;//[Offset: 0x494, Size: 12]
	VerifySwitch VsOwnerHeadAndMuzzlePassWall;//[Offset: 0x4a0, Size: 12]
	VerifySwitch VsImpactPointAndActorDisBig;//[Offset: 0x4ac, Size: 12]
	VerifySwitch VsImpactPointAndBulletDisBig;//[Offset: 0x4b8, Size: 12]
	VerifySwitch VsShooterPosByNetdelayInvalid;//[Offset: 0x4c4, Size: 12]
	VerifySwitch VsVictmPosByNetdelayInvalid;//[Offset: 0x4d0, Size: 12]
	VerifySwitch VsShootVerifyInvalid;//[Offset: 0x4dc, Size: 12]
	bool bOpenDetailDataCollect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	bool bOpenSocialIslandJump2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 1]
	VerifySwitch VsClientImpactActorOffset;//[Offset: 0x4ec, Size: 12]
	VerifySwitch VsClientBulletOffset;//[Offset: 0x4f8, Size: 12]
	VerifySwitch VsClientBulletDir;//[Offset: 0x504, Size: 12]
	VerifySwitch VsClientWeaponHeight;//[Offset: 0x510, Size: 12]
	VerifySwitch VsClientDownShoot;//[Offset: 0x51c, Size: 12]
	VerifySwitch VsImpactActorPosWithNoHisPos;//[Offset: 0x528, Size: 12]
	VerifySwitch FarJump;//[Offset: 0x534, Size: 12]
	VerifySwitch VsShootAngleInVaild;//[Offset: 0x540, Size: 12]
	VerifySwitch VsMuzzleAndTailPosInVaild;//[Offset: 0x54c, Size: 12]
	VerifySwitch VsMuzzleAndImpactPassWall;//[Offset: 0x558, Size: 12]
	VerifySwitch VsMuzzleAndTailPassWall;//[Offset: 0x564, Size: 12]
	VerifySwitch VsImpactActorPosOffsetBig;//[Offset: 0x570, Size: 12]
	VerifySwitch VsImpactPointChangeSmall;//[Offset: 0x57c, Size: 12]
	VerifySwitch VsImpactBulletPosOffsetBig;//[Offset: 0x588, Size: 12]
	VerifySwitch VsTotalImactCharacterNum;//[Offset: 0x594, Size: 12]
	AntiCheatDetailData CatchReportAntiCheatDetailData;//[Offset: 0x5a0, Size: 28]
	int MaxCatchWeaponAntiDataNLength;//[Offset: 0x5bc, Size: 4]
	VerifySwitch ClientTimeSpeedAcc;//[Offset: 0x5c0, Size: 12]
	VerifySwitch SpeedCheatOver10;//[Offset: 0x5e8, Size: 12]
	VerifySwitch SpeedCheatOver15;//[Offset: 0x5f4, Size: 12]
	VerifySwitch SpeedCheatOver20;//[Offset: 0x600, Size: 12]
	VerifySwitch SpeedQuickCheck;//[Offset: 0x60c, Size: 12]
	VerifySwitch BulletDirError;//[Offset: 0x618, Size: 12]
	float VehicleSpeedZDeltaTotal;//[Offset: 0x668, Size: 4]
	int VehicleSpeedZDeltaOver10Times;//[Offset: 0x66c, Size: 4]
	int VehicleSpeedZDeltaOver10TimesWhenNoXY;//[Offset: 0x670, Size: 4]
	float ParachuteStartTime;//[Offset: 0x678, Size: 4]
	float ParachuteOpenTime;//[Offset: 0x67c, Size: 4]
	float ParachuteCloseTime;//[Offset: 0x680, Size: 4]
	float ParachuteStartHight;//[Offset: 0x684, Size: 4]
	float ParachuteOpenHight;//[Offset: 0x688, Size: 4]
	float ParachuteCloseHight;//[Offset: 0x68c, Size: 4]
	void ReportAntiCheatDetailData();// 0x20953a4
	void PushWeaponAntiData(out WeaponAntiData NewWeaponAntiData);// 0x2095308
	void OnRecoverOnServer();// 0x20952f4
	void OnPreReconnectOnServer();// 0x20952e0
	void ExitParachute();// 0x20952cc
	void EnterParachute();// 0x20952b8
	void EnterJumping();// 0x20952a4

--------------------------------
Class: AntiCheatDetailData
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x4, Size: 12]
	WeaponAntiData[] WeaponAntiDataList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: CommonCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]

--------------------------------
Class: SwitchCameraData.CameraData
	float StartCameraSwitchDelayTimeFrom_Normal;//[Offset: 0x14, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Near;//[Offset: 0x18, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Aim;//[Offset: 0x1c, Size: 4]
	float CameraSwitchTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: CameraData
	float CameraFOV;//[Offset: 0x0, Size: 4]
	Vector SpringArmSocketOffset;//[Offset: 0x4, Size: 12]
	float SpringArmLength;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AimCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]

--------------------------------
Class: CameraViewPitchLimitData
	float ViewPitchMin;//[Offset: 0x0, Size: 4]
	float ViewPitchMax;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ServerHitEnemyReplicatedData
	STExtraBaseCharacter* HitTargetPawn;//[Offset: 0x0, Size: 4]
	uint32 EventId;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponSystemReconnectReplicateData
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x0, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x8, Size: 8]
	FName[] GrenadeLogicSlotList;//[Offset: 0x10, Size: 12]
	ItemDefineID[] GrenadeDefineIDList;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: TeamMateStateInfo
	STExtraPlayerState* PlayerState;//[Offset: 0x0, Size: 4]
	Vector Location;//[Offset: 0x4, Size: 12]
	Rotator Rotation;//[Offset: 0x10, Size: 12]

--------------------------------
Class: TeamateStateUAVChangedCompressData
	Vector_NetQuantize100 Location;//[Offset: 0x0, Size: 12]
	uint32 View;//[Offset: 0xc, Size: 4]
	byte Roll;//[Offset: 0x10, Size: 1]
	byte uavType;//[Offset: 0x11, Size: 1]

--------------------------------
Class: CommonBtnComponent.ActorComponent.Object
	float CheckDoorDistanceSqr;//[Offset: 0xbc, Size: 4]
	PUBGDoor* TriggeredDoor;//[Offset: 0xc0, Size: 4]
	PUBGDoor* TriggeredDoorAux;//[Offset: 0xc4, Size: 4]
	void SetAutoOpenDoorMode(int Mode);// 0x1f7cecc
	void SetAutoOpenDoorEnable(bool bEnable);// 0x1f7ce4c
	void RPC_Server_DoorState(PUBGDoor* actionDoor, int ClientDoorState);// 0x1f7cd50
	void RPC_Client_DoorState(PUBGDoor* actionDoor, int doorState);// 0x1f7cc54
	bool IsAimingExtraDoor(PUBGDoor* actionDoor);// 0x1f7cbd4
	PUBGDoor* GetPriorityDoor();// 0x1f7cbac
	void DoorRequireRPC(PUBGDoor* actionDoor, bool bAimingExtraDoor, int ClientDoorState);// 0x1f7ca54
	void BP_SimulateUIClick(bool bExtraDoor);// 0x2bb69b8
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x2bb69b8

--------------------------------
Class: ChatComponent.ActorComponent.Object
	int end_time;//[Offset: 0xc0, Size: 4]
	FString Reason;//[Offset: 0xc4, Size: 12]
	int[] audioChat;//[Offset: 0xd0, Size: 12]
	QuickChatIDAndAudio[] chatQuickList;//[Offset: 0xdc, Size: 12]
	QuickChatIDAndAudio[] TurnplateChatQuickList;//[Offset: 0xe8, Size: 12]
	QuickChatOption[] allChatOption;//[Offset: 0xf4, Size: 12]
	FString TeammateColor;//[Offset: 0x100, Size: 12]
	FString MyColor;//[Offset: 0x10c, Size: 12]
	<int,FString> ActorNameList;//[Offset: 0x118, Size: 60]
	<FString,IngameFriendChat> FriendChatInfo;//[Offset: 0x154, Size: 60]
	QuickChatFlag[] ChatFlagList;//[Offset: 0x190, Size: 12]
	float SendMsgCD;//[Offset: 0x19c, Size: 4]
	float lastShowChatTime;//[Offset: 0x1a0, Size: 4]
	float ShowChatDuration;//[Offset: 0x1a4, Size: 4]
	QuickGroundFlag[] groundFlags;//[Offset: 0x1a8, Size: 12]
	FString EndChar;//[Offset: 0x1b4, Size: 12]
	FString ColonChar;//[Offset: 0x1c0, Size: 12]
	<int,int> TextID2AudioID;//[Offset: 0x1cc, Size: 60]
	InGameFilterChatMsg[] ChatFilterList;//[Offset: 0x208, Size: 12]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x214, Size: 4]
	int itemIDOnGround;//[Offset: 0x228, Size: 4]
	int itemOnGroundNetGUID;//[Offset: 0x22c, Size: 4]
	PickUpWrapperActor* itemOnGround;//[Offset: 0x230, Size: 4]
	Vector hitItemPosition;//[Offset: 0x234, Size: 12]
	bool hitGroundValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	Vector hitGroundPosition;//[Offset: 0x244, Size: 12]
	FString CongregationPlayerName;//[Offset: 0x250, Size: 12]
	FString CongregationPlayerKey;//[Offset: 0x25c, Size: 12]
	InGameChatMsg CurrMsg;//[Offset: 0x268, Size: 72]
	void UpdateQuickItemText(int MsgID, int resID, int alternateMsgID);// 0x2bb69b8
	void ShowTeamMsg(out const InGameChatMsg msgItem, bool isMe, bool ShowChat);// 0x1f739f4
	void ShowQuickPanel(bool bShow);// 0x1f73974
	void ServerSendMsg(const InGameChatMsg msgItem);// 0x1f737fc
	void ServerSendGift(const InGameChatMsg msgItem);// 0x1f73684
	void SendDirtyFilterContent(FString Content);// 0x2bb69b8
	void SendDirtyFilter(FString Name, FString Content, bool isMe);// 0x2bb69b8
	void ReportBattleChat(int MsgID, FString Msg, int msgExtraParam);// 0x2bb69b8
	void OnInviteNextBattle(FString gid, FString Name);// 0x1f73544
	void OnFilterFinish(FString filterText);// 0x2bb69b8
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x2bb69b8
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x2bb69b8
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x2bb69b8
	void LoadBankAndPlay(FString BankName, FString EventName);// 0x1f73404
	void InviteNextBattleReply(FString gid, FString Name, bool bReply);// 0x1f73278
	void FindTextIDByAudioID();// 0x2bb69b8
	void CloseChatHistoryList();// 0x2bb69b8
	void ClientReceiveMsg(const InGameChatMsg msgItem, bool isMe);// 0x1f730e4
	void ClientReceiveGift(const InGameChatMsg msgItem, bool isMe);// 0x1f72f50
	void AddQuickAudio(AkAudioEvent* audio, int chatID);// 0x1f72e94
	void AddOneMsgToUI1(FString Name, FString Content, int MsgID, int audioID, int ItemId, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat, float Distance);// 0x2bb69b8
	void AddFriendChat(FString gid, FString Name, FString Content, bool IsSelf);// 0x1f72abc

--------------------------------
Class: QuickChatIDAndAudio
	int chatTextID;//[Offset: 0x0, Size: 4]
	int RealTextID;//[Offset: 0x4, Size: 4]
	int AlternateTextID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: QuickChatOption
	int chatTextID;//[Offset: 0x0, Size: 4]
	AkAudioEvent* audioEvent1;//[Offset: 0x4, Size: 4]

--------------------------------
Class: IngameFriendChat
	IngameFriendChatMsg[] ChatList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: IngameFriendChatMsg
	FString Name;//[Offset: 0x0, Size: 12]
	FString Content;//[Offset: 0xc, Size: 12]
	bool IsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int MsgType;//[Offset: 0x1c, Size: 4]
	bool bReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: QuickChatFlag
	enum Type;//[Offset: 0x0, Size: 1]
	int[] chatIDList;//[Offset: 0x4, Size: 12]
	int AlternateChatID;//[Offset: 0x10, Size: 4]
	int FlagIndex;//[Offset: 0x14, Size: 4]
	int traceDist;//[Offset: 0x18, Size: 4]
	float minDist;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: QuickGroundFlag
	int Index;//[Offset: 0x0, Size: 4]
	int flagID;//[Offset: 0x4, Size: 4]
	Vector hitPosition;//[Offset: 0x8, Size: 12]

--------------------------------
Class: InGameFilterChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 12]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: InGameChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 12]
	uint32 playerIdentifier;//[Offset: 0xc, Size: 4]
	FString msgContent;//[Offset: 0x10, Size: 12]
	int MsgID;//[Offset: 0x1c, Size: 4]
	int audioID;//[Offset: 0x20, Size: 4]
	int ItemId;//[Offset: 0x24, Size: 4]
	FString PlayerKeyString;//[Offset: 0x28, Size: 12]
	bool hitValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	Vector hitPosition;//[Offset: 0x38, Size: 12]
	int itemIDOnGround;//[Offset: 0x44, Size: 4]

--------------------------------
Class: GuideComponent.ActorComponent.Object
	GuideInfo[] WidgetList;//[Offset: 0xbc, Size: 12]
	Widget* MaskWidget;//[Offset: 0xc8, Size: 8]
	void SetMaskWidgetOnTop(bool bTop);// 0x2014770
	void CreateGuideUI();// 0x2bb69b8

--------------------------------
Class: GuideInfo
	Widget* Widget;//[Offset: 0x0, Size: 4]
	int guildUI;//[Offset: 0x4, Size: 4]
	Vector2D Offset;//[Offset: 0x8, Size: 8]
	Vector2D Size;//[Offset: 0x10, Size: 8]
	int childData;//[Offset: 0x18, Size: 4]

--------------------------------
Class: QuickSignComponent.ActorComponent.Object
	delegate OnAddSignMarkDelegate;//[Offset: 0xbc, Size: 12]
	delegate OnDelSignMarkDelegate;//[Offset: 0xc8, Size: 12]
	bool IsBlockWhomInVoiceBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	int TextID_OutRange;//[Offset: 0xd8, Size: 4]
	FString PreFix_Command;//[Offset: 0xdc, Size: 12]
	FString PreFix_Command_Res;//[Offset: 0xe8, Size: 12]
	FString PreFix_Mark;//[Offset: 0xf4, Size: 12]
	int MinTraceDist;//[Offset: 0x100, Size: 4]
	int MaxTraceDist;//[Offset: 0x104, Size: 4]
	int ItemTraceDist;//[Offset: 0x108, Size: 4]
	int MarkMutualExclusionDist;//[Offset: 0x10c, Size: 4]
	int MiniMapAttentionIconID;//[Offset: 0x110, Size: 4]
	int MiniMapThingIconID;//[Offset: 0x114, Size: 4]
	float MinHighLightDangerousTime;//[Offset: 0x118, Size: 4]
	float MinHighLightDangerousDistance;//[Offset: 0x11c, Size: 4]
	float DangerousMarkLifeSpan;//[Offset: 0x120, Size: 4]
	<int,DangerousSignInfo> LastDangerousID;//[Offset: 0x124, Size: 60]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x160, Size: 4]
	<int,FString> CommandTypeIDMap;//[Offset: 0x164, Size: 60]
	<FString,class Object> MarkNameClassMap;//[Offset: 0x1a0, Size: 60]
	<FString,QuickSignMark> MarkInfoMap;//[Offset: 0x1dc, Size: 60]
	<FString,float> MarkLifeTimeMap;//[Offset: 0x218, Size: 60]
	<FString,QuickSignIDArray> MarkTypeArrayMap;//[Offset: 0x254, Size: 60]
	<FString,int> MsgIDActorNetGUIDMap;//[Offset: 0x290, Size: 60]
	int[] ServerCachedNetGUIDs;//[Offset: 0x2cc, Size: 12]
	int[] ActorNetGUIDTrashArray;//[Offset: 0x2d8, Size: 12]
	FString[] TempIDArray;//[Offset: 0x2e4, Size: 12]
	<FString,int> MsgKey2MiniMapID;//[Offset: 0x2f0, Size: 60]
	<FString,int> MsgKey2MiniMapIconTypeID;//[Offset: 0x32c, Size: 60]
	<FString,int> ConfigKeyToTextID;//[Offset: 0x368, Size: 60]
	<FString,enum> ConfigKeyToSignSubType;//[Offset: 0x3a4, Size: 60]
	<FString,QuickSignMark> CustomMarkInfoMap;//[Offset: 0x41c, Size: 60]
	void SwitchAndLoadBankAndPlay(FName SwitchGroup, FName SwitchState, FString BankName, FString EventName);// 0x20cc1e4
	void ShowMsgTipsVoice(out const QuickSignMsg msgItem, bool IsSelf);// 0x2bb69b8
	void ServerSendMsg(const QuickSignMsg msgItem, byte SignType);// 0x20cc09c
	void ServerMarkCustom(const QuickSignMsg msgItem, float ShareDistance, bool ShareWithTeammates);// 0x20cbef8
	void ServerDelNetGuid(int Guid);// 0x20cbe80
	void ServerDelMsg(FString MsgID);// 0x20cbd8c
	void ServerDelCustomMark(FString MsgID, bool ShareWithTeammates);// 0x20cbc3c
	void ServerAddNetGuid(int Guid);// 0x20cbbc4
	void ReportQuickSign(out const QuickSignMsg msgItem);// 0x2bb69b8
	void RemoveActorMask(int ActorNetGUID);// 0x20cbb10
	void OperMark(FString MsgID);// 0x20cba54
	void OnPickUpActor(int Guid);// 0x20cb9dc
	void MakeQuickNeed(enum SignSubType);// 0x20cb964
	void MakeQuickMark_PickupActor(PickUpWrapperActor* PickUpActor);// 0x20cb8ec
	void MakeQuickMark();// 0x20cb8d8
	void MakeQuickCommand(byte SignType);// 0x20cb860
	void MakeCustomMark(Vector targetPos, FString SignConfigKey);// 0x20cb760
	bool IsSelfMark(FString MsgID);// 0x20cb69c
	bool IsContainMark(FString MsgID);// 0x20cb5d8
	int GetVoiceAudioID(enum MsgType);// 0x2bb69b8
	bool GenerateMarkInfo(out const QuickSignMsg msgItem, out QuickSignMark MarkInfo);// 0x2bb69b8
	FString FindMarkNameClassKey(class Object uMarkClass);// 0x20cb4d4
	void DelMarkFromPool(FString MsgMark, bool bIsCheckSenderMap);// 0x20cb3cc
	void DealWithNewMsg(out const QuickSignMsg msgItem, bool IsSelf, FString SenderPlayerKey, bool ShowChat);// 0x20cb134
	void DealWithMarkCustomMsg(out const QuickSignMsg msgItem, bool IsSelf);// 0x20cb010
	void ClientReceiveMsg(const QuickSignMsg msgItem, bool IsSelf, FString SenderPlayerKey);// 0x20cae6c
	void ClientMarkCustomMsg(const QuickSignMsg msgItem, bool IsSelf);// 0x20cad50
	void ClientDelMsg(FString MsgID);// 0x20cac8c
	void ClientDelCustomMarkMsg(FString MsgID);// 0x1f6191c
	void CheckMsgValid();// 0x20cac78
	void AnalysisConfigKeyClass(FString ConfigID, FString ConfigScriptParam);// 0x20cab38
	void AddMarkToPool(out const QuickSignMark MsgMark);// 0x20caa54
	void AddActorMask(int ActorNetGUID);// 0x20ca9a0

--------------------------------
Class: DangerousSignInfo
	FString MsgID;//[Offset: 0x0, Size: 12]
	Vector LastDangerousLocation;//[Offset: 0xc, Size: 12]
	float LastMarkDangerousTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: QuickSignMark
	FString MsgID;//[Offset: 0x0, Size: 12]
	FString MarkType;//[Offset: 0xc, Size: 12]
	FString IconPath;//[Offset: 0x18, Size: 12]
	FString IconBGPath;//[Offset: 0x24, Size: 12]
	FString IconOuterPath;//[Offset: 0x30, Size: 12]
	FString IconOuterBGPath;//[Offset: 0x3c, Size: 12]
	FString IconOutScreenIconPath;//[Offset: 0x48, Size: 12]
	FString IconOutScreenBGPath;//[Offset: 0x54, Size: 12]
	FString IconOutScreenArrowPath;//[Offset: 0x60, Size: 12]
	FString ReplyID;//[Offset: 0x6c, Size: 12]
	Vector Loc;//[Offset: 0x78, Size: 12]
	int MaxNum;//[Offset: 0x84, Size: 4]
	int LifeSpan;//[Offset: 0x88, Size: 4]
	bool IsSelfMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]

--------------------------------
Class: QuickSignIDArray
	FString[] InnerArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: QuickSignMsg
	FString MsgID;//[Offset: 0x0, Size: 12]
	FString PlayerName;//[Offset: 0xc, Size: 12]
	Vector HitPos;//[Offset: 0x18, Size: 12]
	FString ConfigKey;//[Offset: 0x24, Size: 12]
	int audioID;//[Offset: 0x30, Size: 4]
	FString ParamString;//[Offset: 0x34, Size: 12]
	int BindActorGUID;//[Offset: 0x40, Size: 4]
	uint32 PlayerKey;//[Offset: 0x44, Size: 4]
	int MiniMapIconTypeId;//[Offset: 0x48, Size: 4]
	enum MsgType;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: BaseTaskComponent.ActorComponent.Object
	STExtraPlayerController* OwningPC;//[Offset: 0xbc, Size: 4]
	FString OwningPlayerName;//[Offset: 0xc0, Size: 12]
	UAETriggerObject*[] TaskTriggerObjects;//[Offset: 0xcc, Size: 12]
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0xd8, Size: 60]
	int RetrieveUseItemAreaType(int ItemId, Vector PlayerLocation);// 0x1f30350
	int RetrieveTaskAreaType(Vector PlayerLocation);// 0x1f302d8
	int[] RetrieveTaskAreaList(Vector PlayerLocation);// 0x1f301cc
	int RetrieveLandLocType(FString TargetName);// 0x1f3006c
	void ReportTaskAndSpecialCollection(byte TaskType, int TaskId, int process);// 0x1f2ff64
	bool RegisterEvent(class Object RegisterEventClass, UAETriggerObject* TriggerListener, byte TaskEventType);// 0x1f2fe54
	bool IsTriggerActive(int InTaskID);// 0x1f2fdd4
	bool IsSpecialPickItem(int InItemID);// 0x1f2fd54
	bool IsInSpecifiedArea(Vector PlayerLocation, FString outAreaAnchorsStr, FString InMapName, FString InTargetName);// 0x1f2f96c
	void HandlePlayerPickupItem(int ItemId, int Count, STExtraPlayerController* PC);// 0x1f2f86c
	void HandlePlayerKilling();// 0x1f2f858
	void HandlePlayerEnterArea(int AreaID);// 0x1f2f7e0
	void HandlePlayerDropItem(int ItemId, int Count, STExtraPlayerController* PC);// 0x1f2f6e0
	void HandlePlayerDoEmote(int EmoteIndex);// 0x1f2f668
	void HandleInitTaskData(int TaskId, int process, FString ext_info);// 0x1f2f480
	void HandleInitCollectionData(int ItemId, int CurrentCount, int TotalCount);// 0x1f2f380
	void HandleDeathBoxSpawned(Transform SpawnTransform);// 0x1f2f2a0
	UAETriggerObject* GetTriggerObject(int InTaskID);// 0x1f2f220
	int GetTaskSubTypeFromDataTable(int InTaskID);// 0x2bb69b8
	bool GetTaskParamsFromDataTable(int InTaskID, out FString outMainConditionParam, out int outTargetProcess);// 0x2bb69b8
	bool GetTaskParams(int InTaskID, out FString outMainConditionParamStr, out int outTaskProcess);// 0x1f2f0b0
	FString GetTaskClassPath(byte TaskType, int TaskUID);// 0x1f2ef5c
	int[] GetTaskAreaListFromDataTable(Vector InPlayerLocation);// 0x2bb69b8
	int GetTaskAreaIDFromDataTable(Vector InPlayerLocation);// 0x2bb69b8
	FString GetOwningPlayerName();// 0x1f2ee9c
	FString GetMapName();// 0x1f2eddc
	int GetLandLocIDFromDataTable(FString InTargetName);// 0x2bb69b8
	int GetItemUseAreaIDFromDataTable(int ItemId, Vector InPlayerLocation);// 0x2bb69b8
	void FireEvent(byte TaskEventType, int Param, FString ExtMsg);// 0x1f2ebf0
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x1f2eb2c
	UAETriggerObject_Task* CreateTriggerObject(byte TaskType, int TaskId);// 0x1f2ea60
	bool AddTrigger(byte TaskType, int TaskId, int process, FString ext_info);// 0x1f2e820
	void AddEventToTrigger(UAETriggerObject* TriggerObj, class Object Event, byte TaskEventType);// 0x1f2e718
	void ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x1f2e654

--------------------------------
Class: UAETriggerObject.Object
	enum RunType;//[Offset: 0x1c, Size: 1]
	enum TriggerObjectType;//[Offset: 0x1d, Size: 1]
	int EventDelayTime;//[Offset: 0x20, Size: 4]
	int ActionDelayTime;//[Offset: 0x24, Size: 4]
	FString TriggerName;//[Offset: 0x28, Size: 12]
	Actor* OuterActor;//[Offset: 0x34, Size: 4]
	class Object[] TriggerEventsClass;//[Offset: 0x38, Size: 12]
	TriggerAction*[] TriggerActions;//[Offset: 0x44, Size: 12]
	TriggerCondition*[] TriggerConditions;//[Offset: 0x50, Size: 12]
	FlowNodeBase* CarrierFlowNode;//[Offset: 0x5c, Size: 4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	TimerHandle TimerHandle_EventDelay;//[Offset: 0x70, Size: 8]
	TimerHandle TimerHandle_ActionDelay;//[Offset: 0x78, Size: 8]
	TriggerEvent* CurEvent;//[Offset: 0x80, Size: 4]
	FString DelayEventName;//[Offset: 0x84, Size: 12]
	FString FiredEventName;//[Offset: 0x90, Size: 12]
	<TriggerEvent*> TriggeredEvents;//[Offset: 0x9c, Size: 60]
	<TriggerAction*> CompleteActions;//[Offset: 0xd8, Size: 60]
	bool IsEnableCheckDo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x118, Size: 4]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	float TickInterval;//[Offset: 0x138, Size: 4]
	bool bShouldReplicateAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	bool bCacheParamToTriggerObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	Property*[] eventParams;//[Offset: 0x140, Size: 12]

--------------------------------
Class: TriggerAction.Object
	VariableSet* DataSource;//[Offset: 0x1c, Size: 4]
	bool bEnableActionTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	enum ExecPolicy;//[Offset: 0x29, Size: 1]
	UAETriggerObject* ParentTrigger;//[Offset: 0x2c, Size: 4]
	UAELevelDirector* ActionOuterActor;//[Offset: 0x30, Size: 4]
	bool bSupportNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]

--------------------------------
Class: VariableSet.Object
	VariableSetCachedActors DataActors;//[Offset: 0x58, Size: 64]

--------------------------------
Class: VariableSetCachedActors
	Actor* LastAccessActor;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: UAELevelDirector.Actor.Object
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 1]
	bool ClientEnvEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 1]
	bool ServerEnvEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fe, Size: 1]
	LevelDirectorInstAction[] InstanceActions;//[Offset: 0x300, Size: 12]
	FString[] ClassPaths;//[Offset: 0x30c, Size: 12]
	FString ConfigFilePath;//[Offset: 0x318, Size: 12]
	class UAELevelDirector_PlayerRepInfo* PlayerRepInfoClass;//[Offset: 0x324, Size: 4]
	FString ClientConfigFilePath;//[Offset: 0x328, Size: 12]
	UAELevelDirectorRepData LevelDirectorRepData;//[Offset: 0x334, Size: 16]
	<uint32,UAELevelDirector_PlayerRepInfo*> AllPlayersRepInfo;//[Offset: 0x344, Size: 60]
	UAETriggerFuncLib*[] FunctionLibList;//[Offset: 0x380, Size: 12]
	TriggersFlowBase* TriggersFlowTree;//[Offset: 0x38c, Size: 4]
	<FString,UAETriggerObject*> TriggerObjectMap;//[Offset: 0x390, Size: 60]
	VariableSet* AllVariableSet;//[Offset: 0x3cc, Size: 4]
	UAETriggerParamFuncLib* TriggerParamFuncLib;//[Offset: 0x3d0, Size: 4]
	LevelEventCenter* LevelEventCenter;//[Offset: 0x3d4, Size: 4]
	FString DescData;//[Offset: 0x3d8, Size: 12]
	UAELevelDirector_PlayerRepInfo* CurLevelDirector_PlayerRepInfo;//[Offset: 0x3e4, Size: 4]
	<uint32,UAELevelDirector_PlayerRepInfo*> HistoryLevelDirector_PlayerRepInfos;//[Offset: 0x3e8, Size: 60]
	TaskRepData TaskData;//[Offset: 0x42c, Size: 16]
	bool StartLevelDirector();// 0x4f66390
	void SetTriggerRunType(FString TriggerName, enum RunType);// 0x4f661f4
	void SetEnable(bool Enab);// 0x4f66178
	void S2Sim_CallExcuteAction();// 0x1ed11c0
	void RequestTriggerComplete(UAETriggerObject* CompleteTrigger);// 0x4f660c4
	void OnRep_LevelDirectorData();// 0x4f660b0
	bool InitialLevelDirector();// 0x4f66080
	UAETriggerObject* GetTrigger(FString NodeName, FString TriggerName);// 0x4f65e08
	bool GetHasBeenInit();// 0x4f65de0
	VariableSet* GetDataSet();// 0x4f65db8
	int GetCurTaskID();// 0x4f65d90
	void ForceExecuteTrigger(FString TriggerName);// 0x1ffd0c8
	bool FlowControllSubControll(out FString[] TriggerNames, FString NodeName);// 0x4f65b28
	bool FlowControllOr(out FString[] TriggerNames, FString NodeName);// 0x4f658c0
	bool FlowControllOneSequence(FString TriggerName, FString NodeName);// 0x4f65648
	bool FlowControllMultiSequence(out FString[] TriggerNames, FString NodeName);// 0x4f653e0
	bool FlowControllAnd(out FString[] TriggerNames, FString NodeName, bool DefaultActive);// 0x4f65128
	void DeactiveTrigger(FString NodeName, FString TriggerName);// 0x4f64eb8
	void DeactiveNode(FString NodeName);// 0x4f64d60
	void ClientExecuteAction(FString ActionClassName, int64 UId, const TriggerParamRepData[] RepParams, bool IsKeep, bool IsRevert, UAELevelDirector_PlayerRepInfo* InLevelDirector_PlayerRepInfo);// 0x4f64b08
	void AddEventToTrigger(FString TriggerName, class Object Event);// 0x4f6496c
	TriggerCondition* AddConditionToTrigger(FString TriggerName, class Object Condition);// 0x4f647c8
	TriggerAction* AddActionToTrigger(FString TriggerName, class Object Action);// 0x4f64624
	void ActiveTrigger(FString NodeName, FString TriggerName);// 0x4f643b4
	void ActiveNode(FString NodeName);// 0x4f6425c

--------------------------------
Class: LevelDirectorInstAction
	int64 ActionUniqueID;//[Offset: 0x0, Size: 8]
	TriggerAction* Action;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAELevelDirector_PlayerRepInfo.Info.Actor.Object
	TriggerActionRepData[] ActionRepDatas;//[Offset: 0x2fc, Size: 12]
	uint32 UniqueId;//[Offset: 0x308, Size: 4]
	UAELevelDirector* RelevantLevelDirector;//[Offset: 0x30c, Size: 4]
	void OnRep_LevelDirector();// 0x4f671ac
	void OnRep_ActionRepDatas();// 0x4f67198
	void ClientExecuteAction(const TriggerActionRepData InActionRepData);// 0x4f670b0

--------------------------------
Class: TriggerActionRepData
	int64 RepID;//[Offset: 0x0, Size: 8]
	int64 UId;//[Offset: 0x8, Size: 8]
	FString ActionClassName;//[Offset: 0x10, Size: 12]
	TriggerParamRepData[] ParamDatas;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: TriggerParamRepData
	byte ParamType;//[Offset: 0x0, Size: 1]
	byte ParamSubType;//[Offset: 0x1, Size: 1]
	FString ParamName;//[Offset: 0x4, Size: 12]
	byte[] ParamData;//[Offset: 0x10, Size: 12]

--------------------------------
Class: UAELevelDirectorRepData
	UFlowNodeRepData FlowNodeRepData;//[Offset: 0x0, Size: 16]

--------------------------------
Class: UFlowNodeRepData
	FString RepData;//[Offset: 0x0, Size: 12]
	int NodeID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: UAETriggerFuncLib.Object
	TriggerClassItem[] ClassItemList;//[Offset: 0x1c, Size: 12]
	VariableSet* DataSet;//[Offset: 0x28, Size: 4]
	Actor* GetLastIteratorActor();// 0x4f68674

--------------------------------
Class: TriggerClassItem
	FString TagName;//[Offset: 0x0, Size: 12]
	FString ClassFullPath;//[Offset: 0xc, Size: 12]
	float RandomRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TriggersFlowBase.Object
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x24, Size: 4]
	<FString,FlowNodeBase*> Nodes;//[Offset: 0x28, Size: 60]
	bool IsRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]

--------------------------------
Class: FlowNodeBase.Object
	FlowNodeBase* NextFlowNode;//[Offset: 0x1c, Size: 4]
	UFlowNodeRepData RepData;//[Offset: 0x20, Size: 16]
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool DefaltActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	TriggersFlowBase* CarriedFlow;//[Offset: 0x44, Size: 4]
	enum NodeType;//[Offset: 0x48, Size: 1]
	UAETriggerObject*[] TriggerObjects;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: UAETriggerParamFuncLib.UAETriggerFuncLib.Object

--------------------------------
Class: LevelEventCenter.Object
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0x28, Size: 60]
	<FString,LevelEventListenerList> EventListeners;//[Offset: 0x68, Size: 60]

--------------------------------
Class: TriggerEvent.Object
	FString EventName;//[Offset: 0x1c, Size: 12]
	Object* EventInstigator;//[Offset: 0x28, Size: 4]
	<FString,TriggerEventListenerTrigger> RelevantListener;//[Offset: 0x38, Size: 60]

--------------------------------
Class: TriggerEventListenerTrigger
	UAETriggerObject* ListenerTrigger;//[Offset: 0x0, Size: 4]

--------------------------------
Class: LevelEventListenerList
	<LevelEventListener*> Listeners;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LevelEventListener.Object
	FString EventName;//[Offset: 0x1c, Size: 12]
	<FString,FName> RelevantListenerCallbacks;//[Offset: 0x28, Size: 60]
	<FString> ObjectRelevantEvents;//[Offset: 0x64, Size: 60]
	Actor* ListenerEntity;//[Offset: 0xa0, Size: 4]
	Property*[] Params;//[Offset: 0xa4, Size: 12]

--------------------------------
Class: TaskRepData
	FString TaskName;//[Offset: 0x0, Size: 12]
	int TaskId;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TriggerCondition.Object
	VariableSet* DataSource;//[Offset: 0x1c, Size: 4]
	TriggerCondition*[] ChildConditions;//[Offset: 0x20, Size: 12]
	UAETriggerObject* ParentTrigger;//[Offset: 0x38, Size: 4]
	void AddChildCondition(TriggerCondition* NewChildCond);// 0x4f62e2c

--------------------------------
Class: UAETriggerObject_Task.UAETriggerObject.Object
	TriggerCondition* RootCondition;//[Offset: 0x150, Size: 4]
	byte[] TaskEventTypes;//[Offset: 0x154, Size: 12]
	TriggerAction*[] RedoTriggerActions;//[Offset: 0x160, Size: 12]
	int TaskId;//[Offset: 0x16c, Size: 4]
	byte TaskType;//[Offset: 0x170, Size: 1]
	void SetTaskProcess(int process, FString ext_info);// 0x22aa4f0
	void RedoAction();// 0x1ef133c
	void NofityTriggerComplete();// 0x1faf048
	bool IsConditionsSatisfy(const TriggerEvent* Event);// 0x1ef4b34
	void InitConfigurableCondition(int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x22aa30c
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x22aa240
	TriggerCondition* CreateSpecifiedSpaceCondition(byte SpecifiedSpace);// 0x22aa1b8
	TriggerCondition* CreateSpecifiedItemCondition(int ItemId);// 0x22aa138
	TriggerCondition* CreateSpecifiedAreaCondition(byte SpecifiedArea);// 0x22aa0b0
	TriggerAction* CreateRedoAction(byte ActionType);// 0x22aa028
	TriggerCondition* CreateORCondition(TriggerCondition*[] ChildConditions);// 0x22a9ec8
	TriggerCondition* CreateOperatorCondition(class TriggerCondition_Operator OperatorClass, TriggerCondition*[] ChildConditions);// 0x22a9d20
	TriggerCondition* CreateKillPlayerCondition();// 0x22a9cf8
	TriggerCondition* CreateGameModeCondition(enum GameModeType);// 0x22a9c78
	TriggerAction* CreateDoAction(byte ActionType);// 0x22a9bf0
	TriggerCondition* CreateCondition(class TriggerCondition ConditionClass);// 0x22a9b70
	TriggerCondition* CreateCollectItemCondition(int ItemId, int CollectCount);// 0x22a9aac
	TriggerCondition* CreateANDCondition(TriggerCondition*[] ChildConditions);// 0x22a994c
	TriggerAction* CreateAction(byte ActionType);// 0x22a98c4
	bool ConstructTask(int InTaskID, int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x22a968c
	byte[] ConstructRedoActions();// 0x2bb69b8
	byte[] ConstructEvents();// 0x2bb69b8
	TriggerCondition* ConstructConditions();// 0x2bb69b8
	byte[] ConstructActions();// 0x2bb69b8
	void AddEventTypes(byte[] EventTypes);// 0x22a9534
	bool ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x22a9460

--------------------------------
Class: TriggerCondition_Operator.TriggerCondition_Task.TriggerCondition.Object

--------------------------------
Class: TriggerCondition_Task.TriggerCondition.Object
	byte TaskConditionType;//[Offset: 0x3c, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool bIsConfigurable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	void SetTargetParam(int Value);// 0x2271e14
	void SetConditionParam(int Value);// 0x1ef77a8
	bool IsSatisfy(const TriggerEvent* Event);// 0x1ecd880
	bool IsSameCondition(byte InTaskConditionType);// 0x2271d8c
	bool FillDataSource(VariableSet* InDataSource);// 0x1f9a088
	bool DeactiveCondition(VariableSet* InDataSource);// 0x1f1cc70
	bool CompareParam(VariableSet* InDataSource);// 0x1f1e8b0
	bool ActiveCondition(VariableSet* InDataSource);// 0x1ef4b34

--------------------------------
Class: FriendObserver
	FString PlayerName;//[Offset: 0x0, Size: 12]
	byte gender;//[Offset: 0xc, Size: 1]

--------------------------------
Class: PlayerBaseInfoInOB
	Vector_NetQuantize Location;//[Offset: 0x0, Size: 12]
	int Health;//[Offset: 0xc, Size: 4]
	int HealthMax;//[Offset: 0x10, Size: 4]
	int LiveState;//[Offset: 0x14, Size: 4]
	int KillNum;//[Offset: 0x18, Size: 4]
	int KillNumBeforeDie;//[Offset: 0x1c, Size: 4]
	float SignalHP;//[Offset: 0x20, Size: 4]
	uint32 PlayerKey;//[Offset: 0x24, Size: 4]
	int GotAirDropNum;//[Offset: 0x28, Size: 4]
	int MaxKillDistance;//[Offset: 0x2c, Size: 4]
	int Damage;//[Offset: 0x30, Size: 4]
	int InDamage;//[Offset: 0x34, Size: 4]
	int Heal;//[Offset: 0x38, Size: 4]
	int HeadShotNum;//[Offset: 0x3c, Size: 4]
	int KillNumInVehicle;//[Offset: 0x40, Size: 4]
	int SurvivalTime;//[Offset: 0x44, Size: 4]
	int DriveDistance;//[Offset: 0x48, Size: 4]
	int marchDistance;//[Offset: 0x4c, Size: 4]
	int MonsterCatchupDistance;//[Offset: 0x50, Size: 4]
	int Assists;//[Offset: 0x54, Size: 4]
	int KillNumByGrenade;//[Offset: 0x58, Size: 4]
	int Rank;//[Offset: 0x5c, Size: 4]
	bool IsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float OutsideBlueCircleTime;//[Offset: 0x64, Size: 4]
	int Knockouts;//[Offset: 0x68, Size: 4]
	int rescueTimes;//[Offset: 0x6c, Size: 4]
	int UseSmokeGrenadeNum;//[Offset: 0x70, Size: 4]
	int UseFragGrenadeNum;//[Offset: 0x74, Size: 4]
	int CurWeaponID;//[Offset: 0x78, Size: 4]

--------------------------------
Class: PlayerInfoInOB.PlayerBaseInfoInOB
	uint64 UId;//[Offset: 0x80, Size: 8]
	FString PlayerName;//[Offset: 0x88, Size: 12]
	FString PlayerOpenID;//[Offset: 0x94, Size: 12]
	FString PicUrl;//[Offset: 0xa0, Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	int TeamID;//[Offset: 0xb0, Size: 4]
	FString TeamName;//[Offset: 0xb4, Size: 12]
	Pawn* Character;//[Offset: 0xc0, Size: 8]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool bHasDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]

--------------------------------
Class: AllStarReportData
	bool bShowReportFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int BeReportedNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TeamInfoInOB
	int TeamID;//[Offset: 0x0, Size: 4]
	FString TeamName;//[Offset: 0x4, Size: 12]
	bool IsShowLogo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	FString LogoPicUrl;//[Offset: 0x14, Size: 12]
	int KillNum;//[Offset: 0x20, Size: 4]
	int LiveMemberNum;//[Offset: 0x24, Size: 4]

--------------------------------
Class: ObservedData
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PicUrl;//[Offset: 0xc, Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int TeamID;//[Offset: 0x1c, Size: 4]
	uint64 UId;//[Offset: 0x20, Size: 8]
	Vector[] PosList;//[Offset: 0x28, Size: 12]

--------------------------------
Class: OwnerClientCreateWeaponCache
	ItemDefineID[] IDList;//[Offset: 0x0, Size: 12]
	uint32 CharacterGUID;//[Offset: 0xc, Size: 4]
	int SyncTicket;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeaponMgrInfo
	ItemDefineID[] ItemList;//[Offset: 0x0, Size: 12]
	WeaponManagerComponent* WeaponMgr;//[Offset: 0xc, Size: 4]

--------------------------------
Class: KillerTracker.Actor.Object
	Actor* TargetKiller;//[Offset: 0x2fc, Size: 4]
	Rotator TargetKillerRotation;//[Offset: 0x300, Size: 12]
	Actor* ReturnActor;//[Offset: 0x30c, Size: 4]
	SpringArmComponent* CameraSpringArm;//[Offset: 0x330, Size: 4]
	CameraComponent* ObservingCamera;//[Offset: 0x334, Size: 4]
	delegate OnTrackingEnd;//[Offset: 0x338, Size: 12]
	float MinMovingSpeed;//[Offset: 0x344, Size: 4]
	float MaxMovingTime;//[Offset: 0x348, Size: 4]
	float ObservingTime;//[Offset: 0x34c, Size: 4]
	float TrackingDelay;//[Offset: 0x350, Size: 4]
	float ExpectedMinObservingDistance;//[Offset: 0x354, Size: 4]
	float CameraAdjustSpeed;//[Offset: 0x358, Size: 4]
	float TrackerToTargetMaxTime;//[Offset: 0x360, Size: 4]
	bool bAdjustTargetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	float MinRotatingngSpeed;//[Offset: 0x368, Size: 4]
	static KillerTracker* StartTrackingKiller(class KillerTracker Template, Actor* Killer, PlayerController* PC, Vector InitLocation, Rotator InitRotation);// 0x20320e4
	void ForceEnd();// 0x20320d0

--------------------------------
Class: VehicleUserComponent.ActorComponent.Object
	bool bGameModeHasMobs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	ItemDefineID LastUsedItemDefineID;//[Offset: 0xc0, Size: 24]
	float LastFinishCD;//[Offset: 0xd8, Size: 4]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	delegate OnClosestVehicleChanged;//[Offset: 0xe0, Size: 12]
	STExtraVehicleBase* Vehicle;//[Offset: 0xec, Size: 4]
	STExtraVehicleBase* UnmannedVehicle;//[Offset: 0xf0, Size: 4]
	STExtraPlayerCharacter* Character;//[Offset: 0xf4, Size: 4]
	enum VehicleUserState;//[Offset: 0xf8, Size: 1]
	STExtraVehicleBase* LastDriveVehicle;//[Offset: 0xfc, Size: 4]
	float UpdateVehicleSpeedGUIInterval;//[Offset: 0x100, Size: 4]
	float UpdateClosestVehicleInterval;//[Offset: 0x108, Size: 4]
	STExtraVehicleBase*[] OverlappingVehicles;//[Offset: 0x114, Size: 12]
	STExtraVehicleBase*[] CullWaterRangeVehicles;//[Offset: 0x120, Size: 12]
	STExtraVehicleBase* CurrentClosestVehicle;//[Offset: 0x12c, Size: 4]
	bool EnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	float MaxAllowedExitSpeedDiff;//[Offset: 0x144, Size: 4]
	bool bRotateToViewOnExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	float NoFuelTipsDisplayCooldown;//[Offset: 0x158, Size: 4]
	bool bExitVehicleCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	float ExitVehicleCheckInterval;//[Offset: 0x168, Size: 4]
	float CurrentMoveForwardRate;//[Offset: 0x178, Size: 4]
	float CurrentMoveRightRate;//[Offset: 0x17c, Size: 4]
	float CurrentMoveUpRate;//[Offset: 0x180, Size: 4]
	float MaxCanAimAngle;//[Offset: 0x184, Size: 4]
	bool bPlayMusicEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	bool EnableTestPawnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 1]
	float BaseVehicleLockTime;//[Offset: 0x18c, Size: 4]
	float BaseVehicleServerAuTime;//[Offset: 0x190, Size: 4]
	float MaxVehicleLockTime;//[Offset: 0x194, Size: 4]
	float MaxVehicleServerAuTime;//[Offset: 0x198, Size: 4]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x1a0, Size: 4]
	bool bTestModeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 1]
	STExtraVehicleBase* CullWaterVehicle;//[Offset: 0x1b0, Size: 4]
	STExtraVehicleBase* LastCullWaterVehicle;//[Offset: 0x1b4, Size: 4]
	Rotator InputExtraRot;//[Offset: 0x1b8, Size: 12]
	Rotator CharRotVsVehiRot;//[Offset: 0x1c4, Size: 12]
	float ResetInputExtraRotTime;//[Offset: 0x1d4, Size: 4]
	bool isHelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dd, Size: 1]
	float DelayLeanOutTimeAfterChangeSeat;//[Offset: 0x210, Size: 4]
	float DelayScopeInTimeAfterChangeSeat;//[Offset: 0x218, Size: 4]
	float ControllerYawClampMin;//[Offset: 0x220, Size: 4]
	float ControllerYawClampMax;//[Offset: 0x224, Size: 4]
	enum CurrentSeatType;//[Offset: 0x228, Size: 1]
	STExtraVehicleBase* BornLandSpawnedVehicle;//[Offset: 0x254, Size: 4]
	float FastestAllowDistance;//[Offset: 0x258, Size: 4]
	float NearVehicleTickRate;//[Offset: 0x25c, Size: 4]
	int VehicleIconID;//[Offset: 0x260, Size: 4]
	float ForbidNightVehicleTipsCooldown;//[Offset: 0x27c, Size: 4]
	bool bBornInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	bool bIgnoreVehicleLookInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 1]
	delegate OnReceiveReqQuickSwitchSeat;//[Offset: 0x28c, Size: 12]
	delegate OnReceiveReqDriverLostSwitchSeat;//[Offset: 0x298, Size: 12]
	delegate OnRefuseExchangeVehicleSeat;//[Offset: 0x2a4, Size: 12]
	void UseVehicleWeaponOrNot();// 0x22e1134
	void UpdateVehWeaponPassengerViewLimit();// 0x22e1120
	void UpdatePassengerViewPitchLimit();// 0x22e110c
	void TurnVehicle(float Rate);// 0x22e1094
	void TryUseHorn(bool bUse);// 0x22e1014
	void TryShutDownUnmannedVehicle();// 0x22e1000
	void TryPauseUnmannedVehicle();// 0x22e0fec
	bool TryLeanOutOrIn(bool bAutoLeanOut, bool bForce);// 0x22e0f14
	void TryLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x22e0e9c
	void TryLaunchCurrentUnmannedVehicle();// 0x22e0e7c
	void TryExitVehicle();// 0x22e0e68
	void TryEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x22e0dac
	void TryChangeVehicleSeat();// 0x22e0d98
	bool TryChangeToVehicleSeat(int SeatIndex);// 0x22e0d18
	bool TryChangeFreeFireSeatAndScopeIn();// 0x22e0cf0
	bool TryChangeFreeFireSeatAndLeanOut();// 0x22e0cc8
	void TryAutonomousDriving(bool bEnable);// 0x22e0c48
	void TickVehicleCullWater(STExtraVehicleBase* InCullWaterVehicle);// 0x2bb69b8
	void TestMoveVehicleRight(float Rate);// 0x22e0bd0
	void TestMoveVehicleForward(float Rate);// 0x22e0b58
	void TestForceTurnVehicle(Rotator Rotation, bool bIsAdd);// 0x22e0a94
	void StopFireVehicleWeapon();// 0x22e0a80
	bool ShowVehicleWeaponUI();// 0x22e0a58
	void SetVehicleUserState(enum UserState);// 0x22e09e4
	void SetVehicleIgnoreLookInput(bool bNewIgnore);// 0x22e0964
	void SetLastDriveVehicle(STExtraVehicleBase* LastVehicle);// 0x22e08ec
	void SetIsAutoMoveForward(bool IsEnable);// 0x22e086c
	void SetClosestVehicle(STExtraVehicleBase* InVehicle);// 0x22e07f8
	void SetBrake(float Rate);// 0x22e0780
	void SetBoosting(bool bEnabled);// 0x22e0700
	void SetAirControlF(float Rate);// 0x22e0688
	void SetAirControlB(float Rate);// 0x22e0610
	void ServerUseVehicleWeaponOrNot(int SeatId, bool bUse);// 0x22e0500
	void ServerStopFireVehicleWeapon();// 0x22e04a4
	void ServerReqQuickSwitchSeat(STExtraPlayerCharacter* ReqTarget);// 0x22e03f0
	bool ServerForceEnterVehicle(STExtraVehicleBase* InVehicle, int SeatIdx);// 0x22e032c
	void ServerDriverLostReqSwitchSeat(STExtraPlayerCharacter* Driver);// 0x22e02b4
	void ServerAgreeQuickSwitchSeat(bool bIsAgree);// 0x22e01ec
	void Server_JoystickCenterClickHandler();// 0x22e0190
	void SendToServerUnmannedVehicleUse();// 0x22e0134
	void SendToServerUnmannedVehicleRecall();// 0x22e00d8
	void SendToServerUnmannedVehiclePause();// 0x22e007c
	void RspShutDownUnmannedVehicle(bool bSucceed);// 0x200e598
	void RspRefuseExchangeVehicleSeat(STExtraPlayerCharacter* acceptPlayer);// 0x22dfffc
	void RspPauseUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x202b390
	void RspLeanOut(bool bOut);// 0x22dff74
	void RspLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x22dfea8
	void RspExitVehicle(bool bSuccess);// 0x22dfe20
	void RspExchangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd);// 0x22dfd14
	void RspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x22dfbb8
	void RspChangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd, bool bNeedLeanOut, bool bNeedScopeIn);// 0x22dfa04
	void RspAutonomousDriving(bool bEnable, bool bSucceed);// 0x22df92c
	void ReqSyncViewTargetLastDriveInfo(STExtraPlayerController* ObserverController, STExtraBaseCharacter* ViewTargetCharacter);// 0x22df830
	void ReqShutDownUnmannedVehicle();// 0x22df7d4
	void ReqQuickSwitchSeat();// 0x22df7c0
	void ReqPauseUnmannedVehicle();// 0x22df764
	void ReqMarkLastestVehicle(STExtraPlayerController* STEPC, STExtraVehicleBase* InVehicle);// 0x22df668
	void ReqLeanOut(bool IsLeanOut);// 0x22df5a0
	void ReqLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x22df4ec
	void ReqExitVehicle(Vector ClientVehicleVelocity);// 0x22df440
	void ReqExchangeVehicleSeat();// 0x22df3e4
	void ReqEraseLastDriveVehicle();// 0x22df388
	void ReqEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x22df28c
	void ReqChangeVehicleSeat(int InSeatIndex);// 0x22df1d8
	void ReqChangeFreeFireSeatAndScopeIn(bool LeftSide);// 0x22df110
	void ReqChangeFreeFireSeatAndLeanOut(bool LeftSide);// 0x22df048
	void ReqAutonomousDriving(bool bEnable);// 0x22def80
	void ReqAcceptExchangeVehicleSeat(bool IsAccept);// 0x22deeb8
	void OnUnmannedVehicleDriverDead(enum EnteredState);// 0x22dee40
	void OnUnmannedVehicle_Standby_Reconnet();// 0x2bb69b8
	void OnShutDownUnmannedVehicleCompleted(float cdTime);// 0x2bb69b8
	void OnServerReconnected();// 0x22dee2c
	void OnScopeInAfterChangeSeat();// 0x22dee18
	void OnRep_DefineID();// 0x22dee04
	void OnRep_BornInVehicle();// 0x22dedf0
	void OnRefuseExchangeVehicleSeatDelegate__DelegateSignature(STExtraPlayerCharacter* OrignChar);// 0x2bb69b8
	void OnReceiveReqQuickSwitchSeatDelegate__DelegateSignature(STExtraPlayerCharacter* OrignChar);// 0x2bb69b8
	void OnReceiveReqDriverLostSwitchSeatDelegate__DelegateSignature(STExtraPlayerCharacter* Driver);// 0x2bb69b8
	void OnPauseUnmannedVehicleCompleted();// 0x2bb69b8
	void OnLeanOutAfterChangeSeat();// 0x22deddc
	void OnLaunchUnmannedVehicleCompleted();// 0x2bb69b8
	void OnInputAxisMoveRight(float Rate);// 0x2bb69b8
	void OnInputAxisMoveForward(float Rate);// 0x2bb69b8
	void OnExitVehicleCompleted();// 0x2bb69b8
	void OnEnterVehicleCompleted(enum SeatType);// 0x2bb69b8
	void OnCurrrentClosestVehicleChanged();// 0x2bb69b8
	void OnClientReconnected();// 0x22dedc8
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x2bb69b8
	void NotifyLeaveVehicleFailed();// 0x202721c
	void MoveVehicleUp(float Rate);// 0x22ded50
	void MoveVehicleRight(float Rate);// 0x22decd8
	void MoveVehicleForward(float Rate);// 0x22dec60
	void MaintenanceVehicle(float addpercenthp, bool fixtire);// 0x22deb9c
	bool IsControllingUnmannedVehicle();// 0x22deb74
	bool IsAutoDriving();// 0x22deb4c
	bool IgnoreVehicleLookInput();// 0x22deb24
	void HandleVehicleWeaponToLastWeapon(byte TargetChangeSlot);// 0x22deaac
	void HandleLocalEquipWeaponFromBackpackFinished();// 0x22dea98
	void HandleLocalBackpackCurrentWeaponFinished();// 0x22dea84
	bool HandleClientReconnecting();// 0x22dea5c
	enum GetVehicleUserState();// 0x22dea40
	STExtraVehicleBase* GetVehicle();// 0x22dea24
	STExtraVehicleBase* GetCurrentClosestVehicle();// 0x213b48c
	STExtraShootWeapon* GetCharacterVehicleWeapon();// 0x22de9fc
	bool GetAssistantState();// 0x22de9d4
	void ForceExitVehicle(bool bApplyVehicleVelocity, FString Reason, bool bMustExit);// 0x22de87c
	void FobidRspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x22de720
	void FlipTrackVehicleDirection();// 0x22de70c
	void FireVehicleWeapon();// 0x22de6f8
	void DoExitVehicle(bool bApplyVehicleVelocity, bool bMustExit);// 0x22de628
	void ClosestVehicleDelegate__DelegateSignature();// 0x2bb69b8
	void ClientReqQuickSwitchSeat(STExtraPlayerCharacter* ReqOrign);// 0x22de574
	void ClientDriverLostReqSwitchSeat(STExtraPlayerCharacter* Driver);// 0x1ebef5c
	void Client_UnbindTouchEvents();// 0x22de518
	void Client_ShouldBindTouchEvents();// 0x22de4bc
	bool CheckCanLeanOutVehicle();// 0x22de494
	void ChangeAssistantState(bool bEnter);// 0x22de414
	bool CanVehicleShoot(STExtraPlayerCharacter* PlayerCharacter);// 0x22de394
	bool CanUseVehicleHorn();// 0x22de36c
	bool CanLeanOutVehicle(STExtraVehicleBase* InVehicle, STExtraPlayerCharacter* InCharacter, int InSeatIndex);// 0x22de264
	bool CanAutoDriving();// 0x22de23c
	void BrakeTrackVehicle(bool bIsBrake);// 0x22de1bc
	void AgreeQuickSwitchSeat(bool bIsAgree);// 0x22de13c
	void AddVehicleFuel(float amount);// 0x22de0c4

--------------------------------
Class: ImpactMapValueData
	STEShootWeaponBulletImpactEffect*[] ImpactEffectList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: StateMachineComponent.ActorComponent.Object
	State*[] AllStateList;//[Offset: 0xbc, Size: 12]
	enum StartStateType;//[Offset: 0xc8, Size: 1]
	enum FinishStateType;//[Offset: 0xc9, Size: 1]
	State* CurrentState;//[Offset: 0xcc, Size: 4]
	enum CurrentStateType;//[Offset: 0xd0, Size: 1]
	enum LastStateType;//[Offset: 0xd1, Size: 1]

--------------------------------
Class: State.Object

--------------------------------
Class: MonsterTreasureBox.UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	enum[] DamageableGameObjectTypeList;//[Offset: 0x498, Size: 12]
	FString TreasureBoxName;//[Offset: 0x4a4, Size: 12]
	float TotalHP;//[Offset: 0x4b0, Size: 4]
	float BrokenHPPropotion;//[Offset: 0x4b4, Size: 4]
	float TotalTime;//[Offset: 0x4b8, Size: 4]
	int boxId;//[Offset: 0x4bc, Size: 4]
	Vector GroupLoc;//[Offset: 0x4c0, Size: 12]
	float DestroyTime;//[Offset: 0x4cc, Size: 4]
	float OperationalDistance;//[Offset: 0x4d0, Size: 4]
	float VisibleHUDlDistance;//[Offset: 0x4d4, Size: 4]
	ParticleSystem* StandbyEffect;//[Offset: 0x4d8, Size: 4]
	Transform StandbyEffectTrans;//[Offset: 0x4e0, Size: 48]
	ParticleSystem* OpenningEffect;//[Offset: 0x510, Size: 4]
	Transform OpenningEffectTrans;//[Offset: 0x520, Size: 48]
	ParticleSystem* OpennedEffect;//[Offset: 0x550, Size: 4]
	Transform OpennedEffectTrans;//[Offset: 0x560, Size: 48]
	ParticleSystem* BrokenEffect1;//[Offset: 0x590, Size: 4]
	Transform BrokenEffect1Trans;//[Offset: 0x5a0, Size: 48]
	ParticleSystem* BrokenEffect2;//[Offset: 0x5d0, Size: 4]
	Transform BrokenEffect2Trans;//[Offset: 0x5e0, Size: 48]
	MaterialInterface* BlackMat;//[Offset: 0x610, Size: 4]
	ProduceDropItemComponent* ProduceComponent;//[Offset: 0x614, Size: 4]
	SceneComponent* DefaultRoot;//[Offset: 0x618, Size: 4]
	class Controller[] InstigatorList;//[Offset: 0x61c, Size: 12]
	class Actor[] DamageCauserList;//[Offset: 0x628, Size: 12]
	enum PickUpBoxType;//[Offset: 0x634, Size: 1]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x635, Size: 1]
	bool bIconInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x636, Size: 1]
	int IconID;//[Offset: 0x638, Size: 4]
	bool bHideLightColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 1]
	bool bRegisterRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a2, Size: 1]
	bool bAutoActiveBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a3, Size: 1]
	int ClientAutoActiveBoxCD;//[Offset: 0x6a4, Size: 4]
	int AutoActiveBoxCD;//[Offset: 0x6a8, Size: 4]
	int HideLightColumn;//[Offset: 0x6ac, Size: 4]
	float GoUpAnimationWait;//[Offset: 0x6b0, Size: 4]
	float GoUpAnimationSpeed;//[Offset: 0x6b4, Size: 4]
	float GoUpAnimationHight;//[Offset: 0x6b8, Size: 4]
	bool GoUpAnimationHightEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 1]
	float GoUpAnimationYawSpeed;//[Offset: 0x6c0, Size: 4]
	float GoUpAnimationYawTotal;//[Offset: 0x6c4, Size: 4]
	Vector BoxCoverLoc;//[Offset: 0x6c8, Size: 12]
	Rotator BoxCoverRot;//[Offset: 0x6d4, Size: 12]
	bool bImmediateOpenBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	bool IsForbidOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1, Size: 1]
	bool GoUpAnimationAkAudioStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e2, Size: 1]
	SkeletalMeshComponent* NeedAnimationBoxMesh;//[Offset: 0x6e4, Size: 4]
	BoxComponent* NeedAnimationBoxCover;//[Offset: 0x6e8, Size: 4]
	float StartedTime;//[Offset: 0x708, Size: 4]
	enum CurState;//[Offset: 0x70c, Size: 1]
	uint32 StartedPlayerKey;//[Offset: 0x710, Size: 4]
	int StartedTeamId;//[Offset: 0x714, Size: 4]
	float CountdownTime;//[Offset: 0x718, Size: 4]
	float StartDestroytime;//[Offset: 0x71c, Size: 4]
	int MonsterBoxId;//[Offset: 0x720, Size: 4]
	int MonsterBoxTempleteId;//[Offset: 0x724, Size: 4]
	<FString,FString> DataStrs;//[Offset: 0x728, Size: 60]
	ParticleSystemComponent* StandbyEffectComp;//[Offset: 0x768, Size: 4]
	ParticleSystemComponent* OpenningEffectComp;//[Offset: 0x76c, Size: 4]
	ParticleSystemComponent* OpenedEffectComp;//[Offset: 0x770, Size: 4]
	ParticleSystemComponent* BrokenEffect1Comp;//[Offset: 0x774, Size: 4]
	ParticleSystemComponent* BrokenEffect2Comp;//[Offset: 0x778, Size: 4]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x77c, Size: 4]
	Object* TriggerActionHost;//[Offset: 0x7b0, Size: 4]
	void ShowMonsterTreasureBoxSkelemesh(bool IsShow);// 0x2bb69b8
	void ShowMonsterTreasureBox(PlayerController* PC);// 0x20568d4
	void SetDropItems(out const DropPropData[] DropItems, STExtraPlayerState* PlayerState);// 0x2bb69b8
	void SetClientClientAutoActiveBoxCD(int CD);// 0x205685c
	void SetAutoActiveBoxCD(int leftTime);// 0x20567e4
	void OnTreasureBoxPicked__DelegateSignature();// 0x2bb69b8
	void OnSomeonePickItem(uint32 InPC);// 0x205676c
	void OnRep_HideLightColumn();// 0x2056758
	void OnRep_CurState();// 0x2056744
	void OnBoxEmpty();// 0x2056730
	void OnAnimationStop();// 0x205671c
	bool IsShowIcon();// 0x20566f4
	int GetMonsterBoxId();// 0x20566cc
	enum[] GetDamageableGameObjectType();// 0x2056604
	enum GetCurState();// 0x20565dc
	int GetClientClientAutoActiveBoxCD();// 0x20565b4
	void DeActiveMonsterTreasureBox();// 0x20565a0
	bool CanBeDamaged();// 0x2056578
	void BPRepCurState();// 0x2bb69b8
	void BPOnStopMonsterTreasureBox();// 0x2bb69b8
	void BPOnStartMonsterTreasureBox();// 0x2bb69b8
	void BPOnHideLightColumn();// 0x2bb69b8
	void BPOnCountdownEnd();// 0x2bb69b8
	void BPOnBreakMonsterTreasureBox();// 0x2bb69b8
	void BPOnAnimationStop();// 0x2bb69b8
	void BPOnAnimationAkAudioStop();// 0x2bb69b8
	void BPOnAnimationAkAudioStart();// 0x2bb69b8
	FString BPGetTreasureBoxName();// 0x2bb69b8

--------------------------------
Class: UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	int iRegionHouse;//[Offset: 0x398, Size: 4]
	float WindowHideDistanceSquared;//[Offset: 0x39c, Size: 4]
	float WindowLoadDistanceSquared;//[Offset: 0x3a0, Size: 4]
	float WindowLoadDistanceSquaredOnVeryLowDevice;//[Offset: 0x3a4, Size: 4]
	float WindowLoadDistanceSquaredOnServer;//[Offset: 0x3a8, Size: 4]
	UAEWindowRepData[] WindowList;//[Offset: 0x3ac, Size: 12]
	<int,UAEWindowComponent*> WindowComponents;//[Offset: 0x3b8, Size: 60]
	bool bEnableWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 1]
	bool bShouldConsiderDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f5, Size: 1]
	bool SerializeDataUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	bool IsStickToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x445, Size: 1]
	byte[] SerializeData;//[Offset: 0x448, Size: 12]
	static void ProcessWindowCreateList();// 0x27d9fa0
	void OnRep_WindowList();// 0x27d9f8c
	void ClearWindowList();// 0x27d9f78
	void BroadcastWindowRepDataUpdated(UAEWindowRepData InRepData);// 0x27d9d50

--------------------------------
Class: ProduceDropItemComponent.ActorComponent.Object
	CustomDropRule CustomDropRule;//[Offset: 0xc0, Size: 3]
	HitResult GroundHitInfo;//[Offset: 0xc8, Size: 136]
	int produceID;//[Offset: 0x150, Size: 4]
	float DropGroundItemLifeSpan;//[Offset: 0x154, Size: 4]
	bool IsDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	PickUpWrapperActor*[] GenerateActorList;//[Offset: 0x15c, Size: 12]
	int GridStep;//[Offset: 0x168, Size: 4]
	STExtraCharacter* OwnerPawn;//[Offset: 0x16c, Size: 4]
	bool IsDropSuc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	int[] DropPlanIDList;//[Offset: 0x174, Size: 12]
	int[] NightDropPlanIDList;//[Offset: 0x180, Size: 12]
	int[] DayDropPlanIDList;//[Offset: 0x18c, Size: 12]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x198, Size: 4]
	float TombBoxLifeTime;//[Offset: 0x1a8, Size: 4]
	ParticleSystem* DropGroundEffect;//[Offset: 0x1b0, Size: 40]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	Transform DropGroundEffectTransform;//[Offset: 0x1e0, Size: 48]
	float DropGroundItemLifeOverride;//[Offset: 0x210, Size: 4]
	bool IsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]
	float startHeight;//[Offset: 0x218, Size: 4]
	bool bIsIgonreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	float DropGroundEffectLifeSpan;//[Offset: 0x220, Size: 4]
	bool DropGroundInRandomCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	Vector DropGroundCenterOffest;//[Offset: 0x228, Size: 12]
	float DropGroundOuterCircleRadius;//[Offset: 0x234, Size: 4]
	float DropGroundInnerCircleRadius;//[Offset: 0x238, Size: 4]
	float DropGroundStartAndgle;//[Offset: 0x23c, Size: 4]
	float DropGroundEndAngle;//[Offset: 0x240, Size: 4]
	bool bDropGroundAngleRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	Vector2D[] DropGroundAngleRangeList;//[Offset: 0x248, Size: 12]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 1]
	bool bHideDeadTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 1]
	int OpenDropGroundEffect;//[Offset: 0x258, Size: 4]
	int RandomDropGroundEffect;//[Offset: 0x25c, Size: 4]
	float MaxTraceDist;//[Offset: 0x260, Size: 4]
	bool bUseDropCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 1]
	bool bUseDropCurveAnim_DropToTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 1]
	delegate OnItemSpawned;//[Offset: 0x268, Size: 12]
	DropItemCurveAnimComponent* DropItemCurveAnimComponent;//[Offset: 0x274, Size: 4]
	bool IsFoeceNotTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	void StartDropToPosition(Vector DestinPos, Character* KillerPawn, Actor* DeadPawn, bool InTraceGround);// 0x20b5018
	void StartDrop(Actor* DeadCharacter, Controller* Killer);// 0x20b4f5c
	void SetProduceID(int produceID);// 0x20b4ee8
	void SetNightDropPlanIDList(out int[] DayIdList, out int[] NightIdList);// 0x20b4d84
	void SetDropPlanIDList(out int[] IDList);// 0x20b4cb8
	void SetDropItemLifeSpan(int ItemTime);// 0x20b4c40
	void RandomCircleDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans, Actor* IgnorePawn, Actor* KillerActor);// 0x20b4a50
	void OnOwnerPawnDead(STExtraSimpleCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x20b4850
	void NineGridDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans);// 0x20b46e0
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x20b45c0
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x20b4528
	PickUpWrapperActor*[] GetGenerateWrapperList();// 0x20b4410
	FString GetDropItemCfgList(out DropItemConfig[] DropList);// 0x20b42b4
	int GetCountStrNum(FString CountStr);// 0x20b4154
	FString GenerateDropItemByOwner(out DropPropData[] FinalDropItems);// 0x20b4000
	FString GenerateDropItemByCfg(out DropPropData[] FinalDropItems);// 0x20b3eac
	bool DropToTreasureBox(out const DropPropData[] PropData, Actor* TargetActor, FString BoxName, enum BoxType, Vector Offset, bool bIsAutoExpand, bool bFixBoxName);// 0x20b3b34
	void DropToTombBox(out const PickUpItemData[] PropData, Character* DeadPawn);// 0x20b3a38
	void DropToTarget(ItemDefineID DefineID, int Count, BackpackComponent* BackPack);// 0x20b3920
	Actor* DropToGround(out const PickUpItemData PropData, Transform WrapperTrans, Vector StartPos, bool ShowGroundEffect);// 0x20b3670
	void DropToCommonTreasureBox(Actor* Producer);// 0x20b35f0
	void DropToCommonLootBox(Actor* Producer, Transform BoxTrans, CommonTreasureBox* CommonTreasureBox);// 0x20b3480
	void DropOutPropsNearActor(out const DropPropData[] PropDataList, Actor* StartActor);// 0x20b3360
	void DropOutProps(out const DropPropData[] PropData, Character* KillerPawn, Actor* DeadPawn);// 0x20b3200
	void CalcDropItemListByDropRuleByCfg(out const DropItemConfig DropRuleCfg, out DropPropData[] DropItemList);// 0x20b30c8
	void CalcDropItemListByDropRule(out DropPropData[] DropItemList, int DropPlanId);// 0x20b2fac

--------------------------------
Class: CustomDropRule
	bool bTraceIgnorePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bTraceIgnoreWarteringArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAttachToTargetActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]

--------------------------------
Class: DropItemCurveAnimComponent.ActorComponent.Object
	Vector2D RangeHigh;//[Offset: 0xbc, Size: 8]
	Vector CustomStartOffset;//[Offset: 0xc4, Size: 12]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool UseTrailParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool ClientDropOneByOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	float ClientDropOneByOneInterval;//[Offset: 0xd4, Size: 4]
	float CustomGravity;//[Offset: 0xd8, Size: 4]
	float TrailParticleDelayTime;//[Offset: 0xdc, Size: 4]
	float LandDirectlyAfterTheReplicatedTime;//[Offset: 0xe0, Size: 4]
	float ParticleScale;//[Offset: 0xe4, Size: 4]
	ParticleSystem* DropTailsParticle;//[Offset: 0xe8, Size: 40]
	ParticleSystem* DropTailsParticleSystem;//[Offset: 0x110, Size: 4]
	bool bUseDropGroundParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	float DropGroundParticleLifeTime;//[Offset: 0x118, Size: 4]
	ParticleSystem* DropGroundParticle;//[Offset: 0x120, Size: 40]
	ParticleSystem* DropGroundParticleSystem;//[Offset: 0x148, Size: 4]
	DropGroupContainer[] ItemGroupList;//[Offset: 0x14c, Size: 12]
	CurveFloat* AnimCurve;//[Offset: 0x158, Size: 4]
	bool bUseAnimCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	void OnDropTailsLoadFinsh2(int GroupID);// 0x1f9c648
	void OnDropGroundLoadFinsh();// 0x1f9c634
	void AddItemClient(int Group, Vector InStartPos, Vector InEndPos, Actor* Target);// 0x1f9c4e4
	void AddDropActorServer(Actor* PickUpWrapper, Vector InStartPos, int UserAddr);// 0x1f9c3e0

--------------------------------
Class: DropGroupContainer
	int GroupIndex;//[Offset: 0x0, Size: 4]
	float GroupTime;//[Offset: 0x4, Size: 4]
	ItemCurveAnim[] List;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ItemCurveAnim
	enum CurState;//[Offset: 0x0, Size: 1]
	bool ShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float DropDuration;//[Offset: 0x4, Size: 4]
	float CurrentTime;//[Offset: 0x8, Size: 4]
	float DropStartSpeed;//[Offset: 0xc, Size: 4]
	float DelayDestroyParticleTime;//[Offset: 0x10, Size: 4]
	float DelayStartTime;//[Offset: 0x14, Size: 4]
	float DelayDestroyGroundParticleTime;//[Offset: 0x18, Size: 4]
	Vector StartPos;//[Offset: 0x1c, Size: 12]
	Vector EndPos;//[Offset: 0x28, Size: 12]
	Actor* TargetActor;//[Offset: 0x34, Size: 8]
	ParticleSystemComponent* TailParticleComponent;//[Offset: 0x3c, Size: 4]
	ParticleSystemComponent* GroundParticleComponent;//[Offset: 0x40, Size: 4]

--------------------------------
Class: DropItemConfig
	int ItemDropPercent;//[Offset: 0x0, Size: 4]
	int ItemDropRuleID;//[Offset: 0x4, Size: 4]
	int RandomCount;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DropPropData
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]
	int DropMode;//[Offset: 0x8, Size: 4]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: CommonTreasureBox.PlayerTombBox.LuaActor.Actor.Object
	void RegisterToCurveAnimComponent();// 0x1f7d404

--------------------------------
Class: UAEWindowRepData
	Transform Transform;//[Offset: 0x0, Size: 48]
	FString PathToLoad;//[Offset: 0x30, Size: 12]
	int ID;//[Offset: 0x3c, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x44, Size: 4]

--------------------------------
Class: UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x6a0, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a4, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x6a8, Size: 4]
	StaticMesh* BrokenMesh;//[Offset: 0x6ac, Size: 4]
	ParticleSystem* BrokenEffect;//[Offset: 0x6b0, Size: 4]
	void NotifyServerBroken();// 0x2bb69b8
	void NotifyRepDataUpdated(bool bInitial, bool bLocal);// 0x27e7c6c
	void LocalHandleWindowBrokenBP(bool bInitial, bool bLocal);// 0x2bb69b8
	void LocalHandleWindowBroken(bool bInitial, bool bLocal);// 0x27e7b9c
	void HandleBroken(PlayerController* Instigator, bool bLocal);// 0x27e7ad8
	UAEWindowRepData GetRepData();// 0x27e79a0

--------------------------------
Class: AvatarCapture.Actor.Object
	SkeletalMeshComponent* DisplayMesh;//[Offset: 0x2fc, Size: 4]
	MeshComponent* WeaponMesh;//[Offset: 0x300, Size: 4]
	STExtraPlayerController* ASTPC;//[Offset: 0x304, Size: 4]
	int[] IgnoreDisplayWeaponIDList;//[Offset: 0x308, Size: 12]
	<int,WeaponAnimAsset> WeaponAnimList;//[Offset: 0x314, Size: 60]
	class AnimInstance* animBP;//[Offset: 0x350, Size: 4]
	<int,class AnimInstance> AnimBP_SpecialMap;//[Offset: 0x354, Size: 60]
	class AnimInstance* AnimBP_Real;//[Offset: 0x390, Size: 4]
	delegate OnWeaponBlendAnim;//[Offset: 0x394, Size: 12]
	int CurUseWeaponSkinID;//[Offset: 0x3a0, Size: 4]
	bool bIsNewViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	<int,FName> SlotToSocket;//[Offset: 0x3a8, Size: 60]
	FName OBPlayerName;//[Offset: 0x3e8, Size: 8]
	STExtraCharacter* OBPlayerPawn;//[Offset: 0x3f0, Size: 4]
	CharacterAvatarComponent2* OBAvatar;//[Offset: 0x3f4, Size: 4]
	WeaponManagerComponent* OBWeaponMgr;//[Offset: 0x3f8, Size: 4]
	StaticMeshComponent*[] StMeshList;//[Offset: 0x3fc, Size: 12]
	SkeletalMeshComponent*[] SkMeshList;//[Offset: 0x408, Size: 12]
	SkeletalMeshComponent* PendantComponent;//[Offset: 0x414, Size: 4]
	FName[] HideBoneNames;//[Offset: 0x418, Size: 12]
	SkeletalMesh*[] SkMeshResList;//[Offset: 0x424, Size: 12]
	MeshComponent*[] WeaponAttachmentList;//[Offset: 0x430, Size: 12]
	SceneCaptureComponent2D* Capture2D;//[Offset: 0x43c, Size: 4]
	DirectionalLightComponent* DirectionalLight;//[Offset: 0x440, Size: 4]
	bool IsCaptureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	bool SetOBTarget(STExtraCharacter* PlayerPawn, CharacterAvatarComponent2* AvatarComp, WeaponManagerComponent* WeaponMgr);// 0x1eebd1c
	void SetEnable(bool IsEnable);// 0x1eebc9c
	void ResetWeaponPendant(int WeaponId);// 0x1eebc24
	void ResetBackpackPendant(CharacterAvatarComponent2* AvatarComponent);// 0x1eebbac
	void RenderCaptureScene();// 0x1eebb98
	void RefreshAvatar();// 0x1eebb84
	void OnWeaponSystemDataChanged(out WeaponSystemDataOnSimulateClient WeaponSystemData);// 0x1eebadc
	void OnWeaponAvatarEquipped(int SlotID, ItemDefineID NewItemID);// 0x1eeba0c
	void OnSimulatedWeaponChanged();// 0x1eeb9f8
	void OnAvatarEquipped(enum SlotType, bool IsEquipped, int ItemId);// 0x1eeb8ec
	void OnAvatarAllMeshLoaded();// 0x1eeb8d8
	SkeletalMesh* MergeMesh(out SkeletalMesh*[] SkMeshList, SkeletalMesh* RefMesh);// 0x1eeb7bc
	int[] GetWeaponSkinIDs();// 0x1eeb6fc
	CharacterAvatarComponent2* GetOBAvatarComponent();// 0x1eeb6d4
	AnimSequenceBase* GetAnimSeqAsset(SoftObjectPath AnimResRef);// 0x1eeb560
	void EquipWeapon();// 0x1eeb54c
	void EquipPlayerAvatar(CharacterAvatarComponent2* AvatarComponent);// 0x1eeb4d4
	void DisplayAvatar(bool IsEnable, STExtraCharacter* PlayerPawn);// 0x1eeb40c
	void CreateWeapon(bool IsSkeletalMesh);// 0x1eeb38c
	void BluePrintSetEnable(bool IsEnable);// 0x2bb69b8
	void ApplyAnimation();// 0x1eeb378

--------------------------------
Class: WeaponAnimAsset
	FName WeaponName;//[Offset: 0x0, Size: 8]
	AnimSequenceBase* AnimPose;//[Offset: 0x8, Size: 40]
	AnimSequenceBase* AnimAdd;//[Offset: 0x30, Size: 40]
	AnimSequenceBase* WeaponAnimBP;//[Offset: 0x58, Size: 40]

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x2c4, Size: 1]
	float FOVAngle;//[Offset: 0x2c8, Size: 4]
	float OrthoWidth;//[Offset: 0x2cc, Size: 4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2d0, Size: 4]
	byte CaptureSource;//[Offset: 0x2d4, Size: 1]
	byte CompositeMode;//[Offset: 0x2d5, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2e0, Size: 1328]
	float PostProcessBlendWeight;//[Offset: 0x810, Size: 4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x814, Size: 1]
	Matrix CustomProjectionMatrix;//[Offset: 0x820, Size: 64]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	Vector ClipPlaneBase;//[Offset: 0x864, Size: 12]
	Vector ClipPlaneNormal;//[Offset: 0x870, Size: 12]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x87c, Size: 1]
	void CaptureScene();// 0x451aaac
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x451a97c

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x25d, Size: 1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x260, Size: 12]
	Actor*[] HiddenActors;//[Offset: 0x26c, Size: 12]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x278, Size: 12]
	Actor*[] ShowOnlyActors;//[Offset: 0x284, Size: 12]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 1]
	float LODDistanceFactor;//[Offset: 0x294, Size: 4]
	float MaxViewDistanceOverride;//[Offset: 0x298, Size: 4]
	int CaptureSortPriority;//[Offset: 0x29c, Size: 4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x2a0, Size: 12]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x451a3f8
	void ShowOnlyActorComponents(Actor* InActor);// 0x451a380
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x451a308
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x451a290
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0x451a218
	void HideComponent(PrimitiveComponent* InComponent);// 0x451a1a0
	void HideActorComponents(Actor* InActor);// 0x451a128
	void ClearShowOnlyComponents(PrimitiveComponent* InComponent);// 0x451a0b0
	void ClearHiddenComponents();// 0x451a09c

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 12]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x359, Size: 1]
	float OcclusionMaskDarkness;//[Offset: 0x35c, Size: 4]
	float OcclusionDepthRange;//[Offset: 0x360, Size: 4]
	Vector LightShaftOverrideDirection;//[Offset: 0x364, Size: 12]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x370, Size: 4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x374, Size: 4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x378, Size: 4]
	int DynamicShadowCascades;//[Offset: 0x37c, Size: 4]
	float CascadeDistributionExponent;//[Offset: 0x380, Size: 4]
	float CascadeTransitionFraction;//[Offset: 0x384, Size: 4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x388, Size: 4]
	bool bUseIndependentShadowBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 1]
	float ShadowCenterOffset;//[Offset: 0x390, Size: 4]
	float ShadowIndependentRadius;//[Offset: 0x394, Size: 4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398, Size: 1]
	int FarShadowCascadeCount;//[Offset: 0x39c, Size: 4]
	float FarShadowDistance;//[Offset: 0x3a0, Size: 4]
	float DistanceFieldShadowDistance;//[Offset: 0x3a4, Size: 4]
	float LightSourceAngle;//[Offset: 0x3a8, Size: 4]
	float TraceDistance;//[Offset: 0x3ac, Size: 4]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x3b0, Size: 16]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 1]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c0, Size: 1]
	float SoftShadowSoftness;//[Offset: 0x3c4, Size: 4]
	float ShadowBlendFactor;//[Offset: 0x3c8, Size: 4]
	float BoundsScale;//[Offset: 0x3cc, Size: 4]
	float NearPlaneOffset;//[Offset: 0x3d0, Size: 4]
	float FarPlaneOffset;//[Offset: 0x3d4, Size: 4]
	float SplitNearOffset;//[Offset: 0x3d8, Size: 4]
	float SplitFarOffset;//[Offset: 0x3dc, Size: 4]
	float ShadowMapResolution;//[Offset: 0x3e0, Size: 4]
	Color ModulatedShadowColor;//[Offset: 0x3e4, Size: 4]
	ACESParameter[] ACESParameters;//[Offset: 0x3e8, Size: 12]
	bool bUsedShadowControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f4, Size: 1]
	float ShadowControl;//[Offset: 0x3f8, Size: 4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3fc, Size: 1]
	int AtmosphereSunLightIndex;//[Offset: 0x400, Size: 4]
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x404, Size: 16]
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x414, Size: 1]
	bool bCastsCloudShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x414, Size: 1]
	Texture* CloudShadowTexture;//[Offset: 0x418, Size: 4]
	float CloudShadowTileSize;//[Offset: 0x41c, Size: 4]
	float CloudShadowDensity;//[Offset: 0x420, Size: 4]
	Vector2D CloudShadowWinSpeed;//[Offset: 0x424, Size: 8]
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x4423bd8
	void SetOcclusionMaskDarkness(float NewValue);// 0x4423b60
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x4423af0
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x4423a70
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x44239f8
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x4423980
	void SetDynamicShadowCascades(int NewValue);// 0x4423908
	void SetCloudShadowWinSpeed(out const Vector2D InWinSpeed);// 0x4423884
	void SetCloudShadowTileSize(float InValue);// 0x442380c
	void SetCloudShadowTexture(Texture* InTexture);// 0x4423794
	void SetCloudShadowDensity(float InDensity);// 0x442371c
	void SetCastsCloudShadow(bool InValue);// 0x442369c
	void SetCascadeTransitionFraction(float NewValue);// 0x4423624
	void SetCascadeDistributionExponent(float NewValue);// 0x44235ac
	void SetAtmosphereSunLight(bool bNewValue);// 0x442352c

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ACESParameter
	LinearColor TintColor;//[Offset: 0x0, Size: 16]
	float Bright;//[Offset: 0x10, Size: 4]
	float Gray;//[Offset: 0x14, Size: 4]
	float ShoulderStrength;//[Offset: 0x18, Size: 4]
	float ToeStrength;//[Offset: 0x1c, Size: 4]
	float LinearStrength;//[Offset: 0x20, Size: 4]
	float LinearAngle;//[Offset: 0x24, Size: 4]

--------------------------------
Class: ClientSettingBaseOnGameMode
	bool bEnableBulletImpactFXTargetCullingByQualityLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BulletImpactFXTargetCullingByQualityLeveConfigItem[] BulletImpactFXTargetCullingByQualityLeveConfigList;//[Offset: 0x4, Size: 12]
	bool bBulletImpactFXAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bSimulateClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bAutonomousClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	int[] DisableBulletTrackDeviceQualityLevelConfigList;//[Offset: 0x14, Size: 12]
	int[] DisableSimulateClientBulletImpactFXDeviceQualityLevelConfigList;//[Offset: 0x20, Size: 12]
	int[] DisableSimulateClientMuzzleFXDeviceQualityLevelConfigList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: BulletImpactFXTargetCullingByQualityLeveConfigItem
	byte QualityLevel;//[Offset: 0x0, Size: 1]
	class Actor[] TargetClassConfigList;//[Offset: 0x4, Size: 12]
	class Object[] CachedClassList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: FootprintActorInfo
	enum PhysicalSurface;//[Offset: 0x0, Size: 1]
	class FootprintInstanceActor* FootprintClass;//[Offset: 0x8, Size: 40]

--------------------------------
Class: FootprintInstanceActor.Actor.Object
	InstancedStaticMeshComponent* InstancedMeshComponent;//[Offset: 0x2fc, Size: 4]

--------------------------------
Class: FootprintActorBlock
	<uint32,FootprintInstanceActor*> TeamFootprintInstanceActorMap;//[Offset: 0x0, Size: 60]
	FootprintInstanceActor* OthersFootprintInstanceActor;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: TrailMarkActorBlock
	TrailMarkActor*[] WorkingList;//[Offset: 0x0, Size: 12]
	TrailMarkActor*[] AssignableList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: IdeaDecalManager.Actor.Object
	<DecalBlock,MaterialInstanceDynamic*> DecalMaterialsLookupTable;//[Offset: 0x2fc, Size: 60]
	class Actor[] IgnoreActorClass;//[Offset: 0x338, Size: 12]
	float DecalLongestDistance;//[Offset: 0x344, Size: 4]
	IdeaDecalRenderComponent*[] DecalComponents;//[Offset: 0x348, Size: 12]
	RuntimeMeshComponent* Decal;//[Offset: 0x354, Size: 4]
	void RemoveDecalOnTimer(int[] DecalIdArray);// 0x201ebf0
	bool RemoveDecal(const int ID);// 0x201eb70
	int[] CreateNewDecal(out const Transform DecalTrans, MaterialInstanceDynamic* DecalMaterialInstance, out const Vector2D DecalUVOffset, out const Vector2D DecalUVScale, float AutoDisappearTime, byte TraceAxis, bool bNegativeDir, bool bIgnoreTransForEndPosition);// 0x201e7f0

--------------------------------
Class: DecalBlock
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 4]
	Texture* DecalTexure;//[Offset: 0x4, Size: 4]

--------------------------------
Class: IdeaDecalRenderComponent.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BackpackDecalHandle.BattleItemHandleBase.ItemHandleBase.Object
	MaterialInterface* DecalMaterial;//[Offset: 0xf4, Size: 4]
	Texture* DecalTexure;//[Offset: 0xf8, Size: 4]
	int CoordX;//[Offset: 0xfc, Size: 4]
	int CoordY;//[Offset: 0x100, Size: 4]
	Vector2D DecalSize;//[Offset: 0x104, Size: 8]
	bool bIsGifDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bIsMusicDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]
	int GifDecalFrameNum;//[Offset: 0x110, Size: 4]
	float GifDecalFrameTime;//[Offset: 0x114, Size: 4]
	AkAudioEvent* DecalSound;//[Offset: 0x118, Size: 4]
	float AttenuationRadius;//[Offset: 0x11c, Size: 4]
	float OutputVolume;//[Offset: 0x120, Size: 4]

--------------------------------
Class: SupplySpot.Actor.Object
	int TotalSupplyTimes;//[Offset: 0x2fc, Size: 4]
	int RemainSupplyTimes;//[Offset: 0x300, Size: 4]
	int SupplyBulletNum;//[Offset: 0x304, Size: 4]
	float ValidDistance;//[Offset: 0x308, Size: 4]
	delegate SupplySpotTimesChange;//[Offset: 0x30c, Size: 12]
	void ReqUseSupplySpot(STExtraPlayerController* InController);// 0x1edac74

--------------------------------
Class: EnhancerSpot.Actor.Object
	EnhancerSpotPlayerSkill[] SkillIdConfig;//[Offset: 0x2fc, Size: 12]
	int AddMonsterExpNum;//[Offset: 0x308, Size: 4]
	int RemainEnhancerTimesConfig;//[Offset: 0x30c, Size: 4]
	int RemainEnhancerTimes;//[Offset: 0x310, Size: 4]
	int UseSuccessTipsId;//[Offset: 0x314, Size: 4]
	float ValidDistance;//[Offset: 0x318, Size: 4]
	float SelfResetTime;//[Offset: 0x31c, Size: 4]
	bool IsAutoResetSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	enum EnhancerState;//[Offset: 0x321, Size: 1]
	float ReadyTime;//[Offset: 0x324, Size: 4]
	float FixReadyTime;//[Offset: 0x328, Size: 4]
	delegate EnhancerSpotTimesChange;//[Offset: 0x32c, Size: 12]
	void StateChangeDelegate();// 0x1f3ed9c
	void SetReadyTime(float SReadyTime);// 0x1fb36b0
	void SetEState(enum EState);// 0x1fb3638
	void RPC_Broadcast_NotifyReadyTime(enum SEnhancerState, float SReadyTime);// 0x1fb353c
	void ResetTimes();// 0x1fb3528
	void ResetSelf();// 0x1fb3514
	void ReqUseEnhancerSpot(STExtraPlayerController* InController);// 0x1fae2f0
	void ReadyTimeChangeDelegate();// 0x1edac58
	void OpenEffect();// 0x1ecd2d8
	void OnRep_StateChange();// 0x1fb3500
	void OnRep_ReadyTimeChange();// 0x1fb34ec
	void OnRep_FixReadyTimeChange();// 0x1fb34ec
	enum GetSpotState();// 0x1fb34d0
	void DelayResetSelf();// 0x1fb34bc
	void CloseEffect();// 0x1ecd2bc

--------------------------------
Class: EnhancerSpotPlayerSkill
	enum PawnSubType;//[Offset: 0x0, Size: 1]
	int SkillID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRevivalComponent.LuaActorComponent.ActorComponent.Object
	int RevivalCountDownTime;//[Offset: 0x14c, Size: 4]
	int GotoSpectatingTime;//[Offset: 0x150, Size: 4]
	int64 FinishRevivalTime;//[Offset: 0x158, Size: 8]
	int64 StartObserverTime;//[Offset: 0x160, Size: 8]
	STExtraPlayerController* OwningPC;//[Offset: 0x168, Size: 4]
	RevivalPointActor* CurServerRevivalPoint;//[Offset: 0x16c, Size: 8]
	GameBaseInfo GameBaseInfo;//[Offset: 0x178, Size: 104]
	DateTime BePickupTime;//[Offset: 0x1e0, Size: 8]
	void TickRevival(float DeltaSeconds);// 0x20a2ee4
	void SetRemainingRevivalTime(int InValue);// 0x20a2e6c
	void SetCaptureIDCardStatus(bool InValue);// 0x20a2dec
	void OnPlayerRevived(STExtraPlayerController* SaviorPC);// 0x20a2d74
	void OnPlayerQuitSpectating();// 0x20a2d60
	void OnPlayerGotoSpectating();// 0x20a2d4c
	void OnPlayerExitGame();// 0x20a2d38
	void OnPlayerEscapeWhenGameEnd(bool bIsPlayerAlive);// 0x20a2cb8
	void LeaveRevivalState(uint32 SaviorKey);// 0x20a2c40
	bool IsInWaittingRevivalState();// 0x20a2c18
	int GetRevivalCountDownTime();// 0x20a2bfc
	int GetRemainingRevivalTime();// 0x20a2bd4
	bool GetCaptureIDCardStatus();// 0x20a2bac
	int64 FindPlayerUIDFromKey(uint32 PlayerKey);// 0x20a2b2c
	void EnterRevivalState();// 0x20a2b18
	void CaptureIDCard(out const RevivalCardItemPickData InPickupData);// 0x20a2a1c
	void BePickupRevivalCard(out const RevivalCardItemPickData InPickupData);// 0x20a2920

--------------------------------
Class: RevivalPointActor.LuaActor.Actor.Object
	SceneComponent* DefaultRoot;//[Offset: 0x38c, Size: 4]
	float SmokeStartScaleDistance;//[Offset: 0x394, Size: 4]
	float SmokeEndScaleDistance;//[Offset: 0x398, Size: 4]
	float SmokeStartScaleValue;//[Offset: 0x39c, Size: 4]
	float SmokeEndScaleValue;//[Offset: 0x3a0, Size: 4]
	bool UseRevivalCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	float RevivalCDTime;//[Offset: 0x3a8, Size: 4]
	bool UseRevivalCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	int RevivalCount;//[Offset: 0x3b0, Size: 4]
	delegate OnHaveRevivedTeammates;//[Offset: 0x3b4, Size: 12]
	int ID;//[Offset: 0x3c0, Size: 4]
	enum CurState;//[Offset: 0x3c4, Size: 1]
	enum PreState;//[Offset: 0x3c5, Size: 1]
	int RevivalTime;//[Offset: 0x3c8, Size: 4]
	bool bCanBroadcastFatalDamageInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	int CurRevivalTime;//[Offset: 0x3d0, Size: 4]
	bool CanBeShowSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	int OperationalDistance;//[Offset: 0x3d8, Size: 4]
	<enum,ParticleSystem*> RevivalPointPS;//[Offset: 0x3dc, Size: 60]
	Transform PTowEleTransform;//[Offset: 0x420, Size: 48]
	<enum,ParticleSystem*> PTowEleMap;//[Offset: 0x450, Size: 60]
	FString ExParticleComponentTag;//[Offset: 0x48c, Size: 12]
	<enum,AkAudioEvent*> RevivalPointSounds;//[Offset: 0x498, Size: 60]
	AkAudioEvent* RevivalInterruptSound;//[Offset: 0x4d4, Size: 4]
	int SmokingdisappearTime;//[Offset: 0x4d8, Size: 4]
	bool UseShowMiniMapIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 1]
	int IconID;//[Offset: 0x4e0, Size: 4]
	uint32[] CurrentRevivingPlayers;//[Offset: 0x4e4, Size: 12]
	STExtraPlayerController* CurRevivalPC;//[Offset: 0x4f0, Size: 8]
	float RevivalCDTimeCur;//[Offset: 0x4f8, Size: 4]
	ParticleSystemComponent* DestoryStatePSCom;//[Offset: 0x510, Size: 8]
	void UpdateRevivalPointEffect();// 0x20d4050
	void StartRevival();// 0x20d403c
	void ShowOperatorUIByState();// 0x1f3ed9c
	void SetDisableMapUI();// 0x20d4028
	bool RevivalPlayers(STExtraPlayerController* InPC);// 0x20d3fa8
	bool RecheckCurrentRevivingPlayers();// 0x20d3f80
	void OnRep_ShowSmoking();// 0x20d3f6c
	void OnRep_RevivalPointState(enum LastPreState);// 0x20d3eec
	void OnRep_RevivalCDTimeCur();// 0x1ecd2bc
	void OnRep_CurrentRevivingPlayers();// 0x20d3ed8
	bool IsPlayerRevivedCurrently(uint32 PlayerKey);// 0x20d3e58
	bool GiveUpRevivalPlayers(STExtraPlayerController* InPC);// 0x20d3dd8
	float GetRevivalCDTimeCurPercent();// 0x20d3db0
	float GetRevivalCDTimeCur();// 0x20d3d88
	float GetRevivalCDTime();// 0x1f6d80c
	int GetId();// 0x20d3d60
	void DistanceChangedEvent(float Scale);// 0x2bb69b8
	void CheckOverlap();// 0x1edac58
	bool CanOperatorMe(STExtraPlayerController* InPC);// 0x20d3ce0

--------------------------------
Class: RevivalCardItemPickData
	uint32 PickUpPlayerID;//[Offset: 0x0, Size: 4]
	uint32 DroperPlayerID;//[Offset: 0x4, Size: 4]
	int64 PickupTime;//[Offset: 0x8, Size: 8]
	int64 DroperTime;//[Offset: 0x10, Size: 8]
	FString PickUpName;//[Offset: 0x18, Size: 12]
	FString DroperPlayerName;//[Offset: 0x24, Size: 12]

--------------------------------
Class: FloatingTextComponent.ActorComponent.Object
	int MaxWidgetNum;//[Offset: 0xd0, Size: 4]
	CurveFloat* OffsetXCurve;//[Offset: 0xd4, Size: 4]
	CurveFloat* OffsetYCurve;//[Offset: 0xd8, Size: 4]
	Vector RandomVector;//[Offset: 0xdc, Size: 12]
	float TextScale;//[Offset: 0xe8, Size: 4]
	LinearColor NormalTextColor;//[Offset: 0xec, Size: 16]
	float HeadShotTextScale;//[Offset: 0xfc, Size: 4]
	LinearColor HeadShotTextColor;//[Offset: 0x100, Size: 16]
	float BigDamageTextScale;//[Offset: 0x110, Size: 4]
	float BigDamage;//[Offset: 0x114, Size: 4]
	LinearColor BigDamageTextColor;//[Offset: 0x118, Size: 16]
	float MaxWidgetRemianTime;//[Offset: 0x128, Size: 4]
	int FloatTextZorder;//[Offset: 0x12c, Size: 4]
	bool bIgnoreZeorDamageSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	UserWidget*[] IdleWidgetList;//[Offset: 0x134, Size: 12]
	ShowTextWidgetData[] ShowWidgetList;//[Offset: 0x140, Size: 12]
	float[] RecycleTimeList;//[Offset: 0x14c, Size: 12]
	float RecycleTime;//[Offset: 0x158, Size: 4]
	STExtraPlayerController* PC;//[Offset: 0x15c, Size: 4]
	void UpdateTextWidgetPos(out ShowTextWidgetData ShowTextWidgetData);// 0x1fdc448
	void ShowFloatingText(out const FloatingTextData FloatingTextData);// 0x1fdc3bc
	void SetFloatingText(UserWidget* FloatingTextWidget, int Damage);// 0x2bb69b8
	void ReycleFloatingTextWidget();// 0x1fdc3a8
	void PlayFloatingTextAnim(out ShowTextWidgetData ShowTextWidgetData, int Damage, bool IsHeadShot);// 0x1fdc288
	void OnFloatingDamageText(float BaseDamage, bool IsHeadShot, out const DamageEvent DamageEvent, out const HitResult HitResult, const Actor* Victim);// 0x1fdc0a4
	ShowTextWidgetData GetShowTextWidgetData(out const FloatingTextData FloatingTextData);// 0x1fdbffc
	void ClientHandleFloatingTextArray(const FloatingTextData[] FloatingTextArray);// 0x1fdbf08

--------------------------------
Class: ShowTextWidgetData
	UserWidget* FloatingTextWidget;//[Offset: 0x0, Size: 4]
	float RecycleTime;//[Offset: 0x4, Size: 4]
	Vector ShowWorldPos;//[Offset: 0x8, Size: 12]
	Vector RandomOffset;//[Offset: 0x14, Size: 12]

--------------------------------
Class: FloatingTextData
	float BaseDamage;//[Offset: 0x0, Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ParachuteAnimAssetData
	<byte,AnimationAsset*> AnimAssetCache;//[Offset: 0x0, Size: 60]
	bool IsAnimCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: WeatherConfigComponent.ActorComponent.Object
	WeatherInfo WeatherLevelInfo;//[Offset: 0xc0, Size: 20]
	FString LastLoadedWeatherLevelName;//[Offset: 0xd4, Size: 12]
	FString DefaultWeatherLevelName;//[Offset: 0xe0, Size: 12]
	bool bLoadWeatherLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	bool bDefaulLevelLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 1]
	void UnloadStreamLevel(FString LevelName);// 0x27f03ac
	void SyncWeatherLevelInfo();// 0x27f0398
	void OnWeatherLevelChanged();// 0x2bb69b8
	void OnUnLoadStreamLevelCompleted();// 0x27f0384
	void OnRep_WeatherSyncCount();// 0x27f0370
	void OnLoadStreamLevelCompleted();// 0x27f035c
	void LoadWeatherLevel();// 0x27f0348
	void LoadStreamLevel(FString LevelName, int WeatherID);// 0x27f01ac
	void LoadDefaultWeatherLevel();// 0x27f0198
	void Init();// 0x1eed16c

--------------------------------
Class: DynamicWeatherExMgr.DynamicWeatherMgr.Actor.Object
	bool UseCircleIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 1]
	int CircleIndex;//[Offset: 0x428, Size: 4]
	WeatherControllerRepData SrcControllerCfg;//[Offset: 0x42c, Size: 28]
	WeatherControllerRepData DstControllerCfg;//[Offset: 0x448, Size: 28]
	ScreenAppearanceCfg ScreenAppearanceCfg;//[Offset: 0x468, Size: 32]
	float TickOBPlayerCD;//[Offset: 0x488, Size: 4]
	float TickWeatherFogCD;//[Offset: 0x48c, Size: 4]
	DynamicWeatherController* SrcController;//[Offset: 0x490, Size: 4]
	DynamicWeatherController* DstController;//[Offset: 0x494, Size: 4]
	STScreenAppearanceComponent* ScreenAppearanceComponent;//[Offset: 0x498, Size: 4]
	bool UseWeatherFogCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 1]
	WeatherFogCfg WeatherFogCfg;//[Offset: 0x4a0, Size: 68]
	PlayerKeyDstWeather[] PlayerKeyDstWeatherList;//[Offset: 0x4f0, Size: 12]
	PlayerKeyDstWeather[] OBPlayerKeyDstWeatherList;//[Offset: 0x4fc, Size: 12]
	void BlendToWeatherFog(bool bDstWeatherFog);// 0x1fa2318
	void BlendToWeather(bool bDstWeather);// 0x1fa2298

--------------------------------
Class: DynamicWeatherMgr.Actor.Object
	WeatherChangeConfig WeatherChangeConfig;//[Offset: 0x2fc, Size: 68]
	int CurUseFixWeatherIndex;//[Offset: 0x340, Size: 4]
	WeatherChangeControl WeatherChangeControl;//[Offset: 0x344, Size: 28]
	<enum,DynamicWeatherController*> DynamicWeatherLookupTable;//[Offset: 0x360, Size: 60]
	WeatherControllerRepData ControllerRepData;//[Offset: 0x39c, Size: 28]
	WeatherControllerRepData ControllerRepDataForReplay;//[Offset: 0x3b8, Size: 28]
	float ServerElapsedTime;//[Offset: 0x3d4, Size: 4]
	bool bAllowRPCRequire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	enum NextWeatherStatus;//[Offset: 0x3dd, Size: 1]
	float NextWeatherCountDownTime;//[Offset: 0x3e0, Size: 4]
	bool bEnableWeatherPredictionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 1]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x3ec, Size: 12]
	bool bDisableModifyControllerRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	STExtraGameStateBase* GameState;//[Offset: 0x40c, Size: 4]
	enum UICountDownType;//[Offset: 0x422, Size: 1]
	bool ForbidServerHandleRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x423, Size: 1]
	void StartTransition();// 0x1fa3038
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x1fa2fc0
	void RPCRequireControl();// 0x1fa2fac
	void RPCRequire();// 0x1fa2f98
	void RPC_S2C_UINotify(enum WeatherStatus);// 0x1fa2f18
	void RPC_S2C_ForceStopDynamicWeatherChange();// 0x1ed11c0
	void ReinitInDemoReplay();// 0x1fa2cac
	void RefreshWeatherPredictionUI();// 0x1fa2f04
	void OnWeatherChangeStarted(out const WeatherChangeEvent Event);// 0x1fa2e78
	void OnWeatherChangeSaturated(out const WeatherChangeEvent Event);// 0x1fa2dec
	void OnWeatherChangeRestoreStarted(out const WeatherChangeEvent Event);// 0x1fa2d60
	void OnWeatherChangeRestoreEnded(out const WeatherChangeEvent Event);// 0x1fa2cd4
	void OnRep_NextWeatherCountDownTime();// 0x1fa2c98
	void OnRep_ControllerDataForReplay();// 0x1fa2cc0
	void OnRep_ControllerData();// 0x1fa2cac
	void OnRep_bEnableWeatherPredictionUI();// 0x1fa2c98
	void OnDynamicWeatherChangeDelegate__DelegateSignature(out const WeatherChangeEvent Event);// 0x2bb69b8
	void HandleClientHasReactivated();// 0x1fa2c84
	void GotoSpecificWeather(int WeatherIndex);// 0x1fa2c0c
	bool GetNextWeatherDataByWeatherType(out WeatherChangeSequenceItem OutData, enum WeatherStatusType);// 0x1fa2b30
	bool GetNextWeatherData(out WeatherChangeSequenceItem OutData);// 0x1fa2a9c
	float GetNextWeatherCountDownTimeByType(enum Type);// 0x1fa2a1c
	float GetInProgressElapsedTimeSecWithWeather();// 0x1fa29f4
	float GetGlobalWeatherSystemTimeOnServer();// 0x1fa29cc
	WeatherDetailStatus GetCurrentWeatherDetailStatus();// 0x1fa2984
	void ForceStopDynamicWeatherChangeOnServer();// 0x1fa2970
	void ForceStartNextWeatherChangeOnServer();// 0x1fa295c
	void ClientInit(WeatherControllerRepData InitDataIn);// 0x1fa28ac

--------------------------------
Class: WeatherControllerRepData
	enum WeatherType;//[Offset: 0x0, Size: 1]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float ElapsedTime;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float SaturateTime;//[Offset: 0x10, Size: 4]
	float TimeMultiplier;//[Offset: 0x14, Size: 4]
	bool BlendInStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool BlendSaturated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool BlendOutStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool BlendOutEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]

--------------------------------
Class: WeatherChangeConfig
	float StartTimeMin;//[Offset: 0x0, Size: 4]
	float StartTimeMax;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float DurationTimeMin;//[Offset: 0x10, Size: 4]
	float DurationTimeMax;//[Offset: 0x14, Size: 4]
	enum LastWeatherStatus;//[Offset: 0x18, Size: 1]
	float LastWeatherAppearTime;//[Offset: 0x1c, Size: 4]
	bool bUseFixWeatherChangeSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	WeatherChangeWeight[] WeatherChangeWeights;//[Offset: 0x24, Size: 12]
	WeatherChangeSequenceItem[] WeatherChangeSequence;//[Offset: 0x30, Size: 12]
	float TimeMultiplier;//[Offset: 0x3c, Size: 4]
	bool bUseReadyGameStateEnetrAsOriginalTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bDisableReadyGameStateWeatherTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]

--------------------------------
Class: WeatherChangeWeight
	enum NewWeatherStatus;//[Offset: 0x0, Size: 1]
	float Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeatherChangeSequenceItem
	enum WeatherStatus;//[Offset: 0x0, Size: 1]
	float StartTime;//[Offset: 0x4, Size: 4]
	float TotalDurationTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeatherChangeControl
	bool WeatherChangeStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool WeatherChangeFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float WeatherChangeStartTime;//[Offset: 0x4, Size: 4]
	float ElapsedTime;//[Offset: 0x8, Size: 4]
	enum NextWeather;//[Offset: 0xc, Size: 1]
	float NextDuration;//[Offset: 0x10, Size: 4]
	float WeatherTotalWeight;//[Offset: 0x14, Size: 4]
	float TimelineOffset;//[Offset: 0x18, Size: 4]

--------------------------------
Class: DynamicWeatherController.ActorComponent.Object
	delegate DelegateOnWeatherChangeStarted;//[Offset: 0xbc, Size: 12]
	delegate DelegateOnWeatherChangeSaturated;//[Offset: 0xc8, Size: 12]
	delegate DelegateOnWeatherChangeRestoreStarted;//[Offset: 0xd4, Size: 12]
	delegate DelegateOnWeatherChangeRestoreEnded;//[Offset: 0xe0, Size: 12]
	delegate WeatherRecover;//[Offset: 0xec, Size: 12]
	enum DynamicWeatherType;//[Offset: 0xf8, Size: 1]
	MaterialParameterCollection* DyanmicWeatherCollection;//[Offset: 0xfc, Size: 4]
	CurveFloat* LightCurve;//[Offset: 0x100, Size: 4]
	float TargetLightValue;//[Offset: 0x104, Size: 4]
	bool bNotUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	CurveFloat* FogBlendInCurve;//[Offset: 0x10c, Size: 4]
	CurveFloat* FogBlendOutCurve;//[Offset: 0x110, Size: 4]
	CurveFloat* DirectionLightRotYBlendInCurve;//[Offset: 0x114, Size: 4]
	CurveFloat* DirectionLightRotZBlendInCurve;//[Offset: 0x118, Size: 4]
	CurveFloat* DirectionLightRotYBlendOutCurve;//[Offset: 0x11c, Size: 4]
	CurveFloat* DirectionLightRotZBlendOutCurve;//[Offset: 0x120, Size: 4]
	float UINotifyTimeBeforeStart;//[Offset: 0x124, Size: 4]
	FString UINotifyModuleName;//[Offset: 0x128, Size: 12]
	int ChangeStartUINotifyID;//[Offset: 0x134, Size: 4]
	int ChangeQuitUINotifyID;//[Offset: 0x138, Size: 4]
	float ChangeStartUINotifyAnimPlayRate;//[Offset: 0x13c, Size: 4]
	AkAudioEvent* UINotifyAKEventBeforeStart;//[Offset: 0x140, Size: 4]
	AkAudioEvent* ChangeStartUINotifyAKEvent;//[Offset: 0x144, Size: 4]
	AkAudioEvent* ChangeQuitUINotifyAKEvent;//[Offset: 0x148, Size: 4]
	bool bUseLowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 1]
	WeatherControllerRepData LocalControlData;//[Offset: 0x150, Size: 28]
	float RuningDirection;//[Offset: 0x16c, Size: 4]
	float RuningTime;//[Offset: 0x170, Size: 4]
	float LerpTotalTime;//[Offset: 0x174, Size: 4]
	FString WeatherName;//[Offset: 0x178, Size: 12]
	DirectionalLight* MainLight;//[Offset: 0x184, Size: 4]
	SkyLight* SkyLight;//[Offset: 0x188, Size: 4]
	ExponentialHeightFog* Fog;//[Offset: 0x18c, Size: 4]
	WeatherObject ObjectValues;//[Offset: 0x190, Size: 104]
	WeatherObject WeatherObjectSrc;//[Offset: 0x1f8, Size: 104]
	WeatherObject WeatherObjectLerp;//[Offset: 0x264, Size: 104]
	WeatherDetailStatus CurrentWeatherStatus;//[Offset: 0x2cc, Size: 12]
	void UINotifyCallbackOnServer();// 0x1fa1ae4
	void OnUserQualitySettingChanged(int renderlevel);// 0x1ebef5c

--------------------------------
Class: WeatherObject
	float MainLight_Density;//[Offset: 0x0, Size: 4]
	LinearColor MainLight_Color;//[Offset: 0x4, Size: 16]
	float MainLight_Temperature;//[Offset: 0x14, Size: 4]
	Rotator MainLight_Rotation;//[Offset: 0x18, Size: 12]
	float SkyLight_Density;//[Offset: 0x24, Size: 4]
	LinearColor SkyLight_Color;//[Offset: 0x28, Size: 16]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x38, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x3c, Size: 16]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x4c, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x50, Size: 16]
	float HeightFallOff;//[Offset: 0x60, Size: 4]
	float StartDistance;//[Offset: 0x64, Size: 4]

--------------------------------
Class: WeatherDetailStatus
	enum CurrentWeather;//[Offset: 0x0, Size: 1]
	float CurrentElapsedTime;//[Offset: 0x4, Size: 4]
	float TotalTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	AirDropPathData3D AirDropPathData;//[Offset: 0x458, Size: 60]
	bool IsTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x495, Size: 1]
	Vector BlueCircle;//[Offset: 0x498, Size: 12]
	Vector WhiteCircle;//[Offset: 0x4a4, Size: 12]
	float CirclePain;//[Offset: 0x4b0, Size: 4]
	bool bIsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 1]
	Vector AirAttackArea;//[Offset: 0x4b8, Size: 12]
	delegate OnSafeZoneTips;//[Offset: 0x4c4, Size: 12]
	delegate OnHideCircle;//[Offset: 0x4d0, Size: 12]
	delegate OnBlueCirclePreWarning;//[Offset: 0x4dc, Size: 12]
	delegate OnBlueCircleRun;//[Offset: 0x4e8, Size: 12]
	delegate OnBlueCircleSizeAndPosition;//[Offset: 0x4f4, Size: 12]
	delegate OnCharacterCircleWaveOver;//[Offset: 0x500, Size: 12]
	delegate VehiclePostInitComponentDelegate;//[Offset: 0x50c, Size: 12]
	delegate VehicleDestroyedDelegate;//[Offset: 0x518, Size: 12]
	delegate STExtraCharacterPostInitComponentDelegate;//[Offset: 0x524, Size: 12]
	delegate STExtraCharacterDestroyed;//[Offset: 0x530, Size: 12]
	int PlayerNum;//[Offset: 0x548, Size: 4]
	bool IsUseGameStartCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	delegate OnPlayerNumChange;//[Offset: 0x550, Size: 12]
	delegate OnBeKilledNumChange;//[Offset: 0x55c, Size: 12]
	delegate OnGameEnd;//[Offset: 0x568, Size: 12]
	bool bIsRevivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	bool bIngoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x576, Size: 1]
	bool bIsOpenDuelMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x577, Size: 1]
	bool IsShowDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	bool bHasSignalBarReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 1]
	bool bReInitUIAfterReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57b, Size: 1]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57d, Size: 1]
	bool bForbidDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57e, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57f, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x582, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x583, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 1]
	int[] forbitPickItemTypeList;//[Offset: 0x588, Size: 12]
	int TrainingCountdownTimer;//[Offset: 0x594, Size: 4]
	bool bIsWeaponAutoReloadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 1]
	FString GrenadeEffectPath;//[Offset: 0x59c, Size: 12]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a9, Size: 1]
	bool bGodzillaWarmUpSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5aa, Size: 1]
	bool bOpenNewbieGuideInDeathMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ab, Size: 1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 1]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x5b0, Size: 12]
	bool bIsPickUpFillBulletMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f9, Size: 1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fa, Size: 1]
	int nSignalGunEffectId;//[Offset: 0x5fc, Size: 4]
	byte nServerZoneId;//[Offset: 0x600, Size: 1]
	bool bRegisterPickUpsOnEnterFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x641, Size: 1]
	bool bEnablePickUpTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x642, Size: 1]
	bool bEnableUpdateClosestVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x643, Size: 1]
	bool bPlayVehicleMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x648, Size: 4]
	float PickUpColdCountDownToleranceTime;//[Offset: 0x64c, Size: 4]
	float PickUpColdCountDownMinTime;//[Offset: 0x650, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x654, Size: 4]
	bool bReportAllPickUpFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	bool bDebugEnableDamageEffectInTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x659, Size: 1]
	bool bEnabledReInitUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65a, Size: 1]
	delegate OnAirAttack;//[Offset: 0x65c, Size: 12]
	delegate OnInfectedAreaWarn;//[Offset: 0x668, Size: 12]
	delegate OnSkillManagerInitFinishDelegate;//[Offset: 0x674, Size: 12]
	bool IsFPPGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 1]
	bool IsCanSwitchFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x681, Size: 1]
	bool bResetBulletNumToMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x682, Size: 1]
	FName[] EnableMapPackages;//[Offset: 0x684, Size: 12]
	FName[] EnableMapLayers;//[Offset: 0x690, Size: 12]
	class ViewMaskManager* ViewMaskManagerClass;//[Offset: 0x69c, Size: 4]
	ViewMaskManager* ViewMaskManager;//[Offset: 0x6a0, Size: 4]
	class ModAdapter* ModAdapterClass;//[Offset: 0x6a4, Size: 4]
	ModAdapter* ModAdapter;//[Offset: 0x6a8, Size: 4]
	bool bEnableSignalSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ac, Size: 1]
	bool IsCanPlaceBuilding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ad, Size: 1]
	int PvePoliceOfficeTriggerCount;//[Offset: 0x6b0, Size: 4]
	int PveZombieGrenadeCount;//[Offset: 0x6b4, Size: 4]
	bool EnableVisualField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 1]
	VisualFieldFeatureParam VisualFieldFeatureParam;//[Offset: 0x6bc, Size: 48]
	VisualFieldFeature* VisualFieldFeature;//[Offset: 0x6ec, Size: 4]
	bool bIsShowCircleWarningTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 1]
	bool bReadyStateCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f1, Size: 1]
	int ReadyStateTime;//[Offset: 0x700, Size: 4]
	delegate ReConnectGameStateInfoNotify;//[Offset: 0x704, Size: 12]
	bool IsCircleShowSafeZoneTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x710, Size: 1]
	FString GameModeDisplayName;//[Offset: 0x714, Size: 12]
	int CurCircleWave;//[Offset: 0x720, Size: 4]
	bool bNoAliveHumanPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 1]
	bool EnableControllVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x725, Size: 1]
	GameModeFeatureSetData GameModeFeatureSet;//[Offset: 0x728, Size: 4]
	FName GameModeState;//[Offset: 0x740, Size: 8]
	bool bLessening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x748, Size: 1]
	float timeFromLessen;//[Offset: 0x74c, Size: 4]
	Vector CircleLessenFrom;//[Offset: 0x750, Size: 12]
	Vector CircleLessenTo;//[Offset: 0x75c, Size: 12]
	float timeForLessen;//[Offset: 0x768, Size: 4]
	byte CurCircleStatusInfo;//[Offset: 0x778, Size: 1]
	float CurCircleStateStartServerWorldSecond;//[Offset: 0x77c, Size: 4]
	float CurCircleStatusElapsedTime;//[Offset: 0x780, Size: 4]
	float CurCircleStatusLastTime;//[Offset: 0x784, Size: 4]
	byte CurAirAttackType;//[Offset: 0x788, Size: 1]
	int CurAirAttackWave;//[Offset: 0x78c, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x794, Size: 4]
	float ExtraRadius;//[Offset: 0x798, Size: 4]
	int AlivePlayerNum;//[Offset: 0x79c, Size: 4]
	int AliveTeamNum;//[Offset: 0x7a0, Size: 4]
	int NoneAIGameTime;//[Offset: 0x7a4, Size: 4]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x7a8, Size: 12]
	delegate ForceStopDynamicWeatherDelegate;//[Offset: 0x7b4, Size: 12]
	WeatherChangeEvent CurWeatherTypeCach;//[Offset: 0x7c0, Size: 2]
	GameModePlayerShowUpassInfo[] UpassInfoList;//[Offset: 0x7c4, Size: 12]
	GameModePlayerShowUpassInfo RepUpassInfoList;//[Offset: 0x7d0, Size: 120]
	enum GameModeType;//[Offset: 0xa28, Size: 1]
	enum GameModeConfigType;//[Offset: 0xa29, Size: 1]
	enum GameModeConfigSubType;//[Offset: 0xa2a, Size: 1]
	enum GameModeSubType;//[Offset: 0xa2b, Size: 1]
	int PlayerNumPerTeam;//[Offset: 0xa2c, Size: 4]
	FString[] OpenTagCullingMaps;//[Offset: 0xa30, Size: 12]
	bool bShouldUseCompletePB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3c, Size: 1]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3d, Size: 1]
	bool IsDark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3e, Size: 1]
	float FPVEWeatherPlaySpeed;//[Offset: 0xa4c, Size: 4]
	float WeatherPhaseIndex;//[Offset: 0xa50, Size: 4]
	enum[] WeatherProcessArray;//[Offset: 0xa54, Size: 12]
	delegate OnWeatherStateChange;//[Offset: 0xa60, Size: 12]
	delegate OnWeatherSpeedChange;//[Offset: 0xa6c, Size: 12]
	enum CurDynamicWeatherState;//[Offset: 0xa78, Size: 1]
	<FString,float> BeInvitedPlayers;//[Offset: 0xa7c, Size: 60]
	float InviteCountDownTime;//[Offset: 0xab8, Size: 4]
	CircleDataMining[] CircleDataMining;//[Offset: 0xabc, Size: 12]
	Vector[] CircleArray;//[Offset: 0xac8, Size: 12]
	GameDataMining GameDataMining;//[Offset: 0xad4, Size: 60]
	uint64 GameID;//[Offset: 0xb10, Size: 8]
	FString GameModeID;//[Offset: 0xb18, Size: 12]
	FString[] ModeUIManagerArrayCached;//[Offset: 0xb24, Size: 12]
	FString ModLogicSwitchTag;//[Offset: 0xb30, Size: 12]
	delegate OnValidDynamicLevelChanged;//[Offset: 0xb3c, Size: 12]
	LevelEventCenter* LevelEventCenter;//[Offset: 0xb48, Size: 4]
	Character* CurCastActorMsgOwner;//[Offset: 0xb4c, Size: 8]
	float StartFlyTime;//[Offset: 0xb54, Size: 4]
	int64 StartReadyUnixTimestamp;//[Offset: 0xb58, Size: 8]
	int64 StartFightingUnixTimestamp;//[Offset: 0xb60, Size: 8]
	int64 StartFinishedUnixTimestamp;//[Offset: 0xb68, Size: 8]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb81, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb82, Size: 1]
	int EnableNewStateMachine;//[Offset: 0xb84, Size: 4]
	float PlayerInBlueCircleClipTime;//[Offset: 0xb8c, Size: 4]
	float BroadcastClientDistance;//[Offset: 0xb90, Size: 4]
	int[] FinalWinTeams;//[Offset: 0xbac, Size: 12]
	uint32[] FinalWinPlayers;//[Offset: 0xbb8, Size: 12]
	uint32 GameTerminatorPlayerKey;//[Offset: 0xbc4, Size: 4]
	bool CanForbitPickupTeammateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc8, Size: 1]
	bool CanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc9, Size: 1]
	int[] ImprisonmentTeammateKillType;//[Offset: 0xbcc, Size: 12]
	int[] ImprisonmentTeammateGameType;//[Offset: 0xbd8, Size: 12]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe4, Size: 1]
	bool bIsUseStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe5, Size: 1]
	bool IsOpenHighPingTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe6, Size: 1]
	bool bEnableCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe7, Size: 1]
	FString GuideImageName;//[Offset: 0xbe8, Size: 12]
	FString GuideLuaTableName;//[Offset: 0xbf4, Size: 12]
	FString GuideLuaFunctionName;//[Offset: 0xc00, Size: 12]
	bool IsDisableTeamPanelPlayerStateInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0c, Size: 1]
	float PlayerNoOperationTime;//[Offset: 0xc10, Size: 4]
	float PlayerNoConfirmRetToGameTime;//[Offset: 0xc14, Size: 4]
	bool IsEnableHealthNumberText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc18, Size: 1]
	Vector2D SelfHealthOffset;//[Offset: 0xc1c, Size: 8]
	bool IsCollectHitFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc24, Size: 1]
	bool bOpenVehicleOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc25, Size: 1]
	UAELevelDirector* UAELevelDirector;//[Offset: 0xc28, Size: 4]
	MarkDispatchManager* MarkDispatchManager;//[Offset: 0xc2c, Size: 4]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xc30, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xc3c, Size: 12]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0xc48, Size: 12]
	MarkSyncData[] PrevLocalMarkDispatchData;//[Offset: 0xc54, Size: 12]
	DynamicWeatherMgr* DynamicWeatherMgr;//[Offset: 0xc60, Size: 4]
	class Actor* PreloadPoolActorClass;//[Offset: 0xc68, Size: 40]
	class Actor* CommonPreloadPoolActorClass;//[Offset: 0xc90, Size: 40]
	FString CommonPrePoolActorPath;//[Offset: 0xcb8, Size: 12]
	<FString,ActorExtraComponents> ActorExtraComponents;//[Offset: 0xcc4, Size: 60]
	XTriggerLuaRemoteComponent* LuaRemoteComponent;//[Offset: 0xd00, Size: 4]
	FieldOfViewNotificationComponentRegistry* FieldOfViewNotificationComponentRegistry;//[Offset: 0xd04, Size: 4]
	bool bUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd08, Size: 1]
	bool bAIUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd09, Size: 1]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0xd0c, Size: 12]
	bool IgnoreWhenAttackNotInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd18, Size: 1]
	bool bEnableVehicleWeakTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd19, Size: 1]
	bool bEnableVehicleDSWeakTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1a, Size: 1]
	delegate OnVeteranOrRecruitListUpdate;//[Offset: 0xd1c, Size: 12]
	bool bNewForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd28, Size: 1]
	FString FServerStartTime;//[Offset: 0xd2c, Size: 12]
	bool bIsLowMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd38, Size: 1]
	uint32 ServerStartTimestamp;//[Offset: 0xd3c, Size: 4]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0xd40, Size: 12]
	FString MainWeaponTableName;//[Offset: 0xd4c, Size: 12]
	class Object[] PlaneAvatarClassArray;//[Offset: 0xd58, Size: 12]
	<uint32,bool> SendStartFlowRecord;//[Offset: 0xd78, Size: 60]
	<uint32,bool> SendEndFlowRecord;//[Offset: 0xdb4, Size: 60]
	TslSimpleCollisionManager* SimpleCollisionManager;//[Offset: 0xdf0, Size: 4]
	DestructibleSurfaceManager* DestructibleSurfaceManager;//[Offset: 0xdf4, Size: 4]
	bool bUseNewGrenadeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf8, Size: 1]
	bool bEnablePlayerEventSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf9, Size: 1]
	bool bEnableAttrMod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdfa, Size: 1]
	bool bAvatarDownloadInBattleClientSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdfb, Size: 1]
	bool bEnableDeathPlaybackRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdfc, Size: 1]
	bool bEnableDisplayPlayerAddonCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdfd, Size: 1]
	int PlayerAddonCount;//[Offset: 0xe00, Size: 4]
	STExtraBaseCharacter*[] DyingCharacters;//[Offset: 0xe0c, Size: 12]
	bool bEnableCarryAllCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe18, Size: 1]
	MapUIMarkManager* MarkMgr;//[Offset: 0xe1c, Size: 4]
	FString RenderTargetMgrClassPath;//[Offset: 0xe20, Size: 12]
	WidgetToRenderTarget* RenderTargetMgr;//[Offset: 0xe2c, Size: 4]
	GameStateWeaponRule WeaponRule;//[Offset: 0xe30, Size: 32]
	bool bHasUnderEarthWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe50, Size: 1]
	void WeatherStateChangeDelegate__DelegateSignature();// 0x2bb69b8
	void WeatherSpeedChangeDelegate__DelegateSignature();// 0x2bb69b8
	void UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x21b167c
	void UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x21b1470
	void UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x21b10e8
	void UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x21b0f24
	STExtraBaseCharacter* TryGetCharacterByPlayerKey(FString PlayerKey);// 0x21b0dc4
	void SyncAirplaneAndAirDrops(out AirDropPathData3D InAirDropPathData);// 0x21b0ce0
	void SimulateAirAttackOver(int waveIndex);// 0x21b0c2c
	void ShowGameTips(int PlayerKey, int TipsID, FString Params);// 0x21b0ae8
	void SetTagCulling(bool IsUse);// 0x1f5da78
	void SetServerStartTime(uint32 nServerStartTime);// 0x21b0a70
	void SetSendStartFlow(uint32 PlayerKey);// 0x21b09f8
	void SetSendEndFlow(uint32 PlayerKey);// 0x21b0980
	void SetReConnectGameStateInfo(ReConnectGameStateInfo ReConnectInfo);// 0x21b0844
	static void SetOnGameStateEndPlay(delegate InOnGameStateEndPlay);// 0x21b07a8
	static void SetOnGameStateBeginPlay(delegate InOnGameStateBeginPlay);// 0x21b070c
	void SetIsLowMatch(int nClientType);// 0x21b0694
	void SetCustomRoute(out const Vector2D StartPoint, out const Vector2D EndPoint);// 0x21b05bc
	void SetCurAirAttackWave(int AirAttackWave);// 0x21b0544
	void SetCurAirAttackType(byte airattacktype);// 0x21b04cc
	void SetCircleInfo(GetCircleInfo ReConnectInfo);// 0x21b03c0
	void SetAvatarDownloadInBattleClientSwitch(bool bOpen);// 0x21b0340
	void SetAlivePlayerNum(int InAlivePlayerNum);// 0x21b02c8
	void ServerRemoteDestroyAllActor();// 0x21b02b4
	void ServerRemoteDestroyActor(int SingleId);// 0x21b023c
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x21b00e0
	void RPC_Client_RemoteDestroyAllActor();// 0x21b00c4
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x21b0044
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x21afeb0
	void PlayPawnActive(FString PlayerKey, Actor* PlayerCharacter);// 0x21afd0c
	void OnShowGeneralGameTipsDelegate__DelegateSignature(int TipsID, FString Params);// 0x2bb69b8
	void OnRep_WeatherStateChanged();// 0x21afcf8
	void OnRep_VisualFieldFeatureParam();// 0x21afce4
	void OnRep_VeteranRecruitListUpdate();// 0x21afcd0
	void OnRep_UpassInfoList();// 0x21afcbc
	void OnRep_StartFlyTime();// 0x21afca8
	void OnRep_ResetWeatherPlaySpeed();// 0x21afc94
	void OnRep_ReadyStateTime();// 0x1f3e96c
	void OnRep_ReadyStateCountingDown();// 0x1ee1bb4
	void OnRep_PlayerNumChange();// 0x1ee1bb4
	void OnRep_PlayerAddonCount();// 0x21afc78
	void OnRep_MarkSyncData();// 0x21afc64
	void OnRep_IsTrainingMode();// 0x21afc50
	void OnRep_IsShowDeadBox();// 0x21afc3c
	void OnRep_IsOpenDuelMode();// 0x1ee1bb4
	void OnRep_IsFPPMode();// 0x21afc28
	void OnRep_IsDark();// 0x21afc14
	void OnRep_GameTerminatorPlayerKey();// 0x21afc00
	void OnRep_GameModeType();// 0x21afbec
	void OnRep_GameModeSubType();// 0x21afbd8
	void OnRep_GameModeState();// 0x21afbbc
	void OnRep_GameModeFeatureSet();// 0x1ee1bb4
	void OnRep_FinalWinTeams();// 0x1ee1bb4
	void OnRep_FinalWinPlayers();// 0x1ee1bb4
	void OnRep_EnableSignalSystem();// 0x21afba8
	void OnRep_DynamicWeatherState();// 0x21afb94
	void OnRep_CircleArray();// 0x1ee1bb4
	void OnRep_AliveTeamNum();// 0x21afb80
	void OnRep_AlivePlayerNum();// 0x21afb6c
	void OnRep_AirDropPathData();// 0x21afb58
	void OnPlayerSkillStart(STExtraBaseCharacter* SkillOwner, int SkillID);// 0x20c0388
	void OnPlaneAvatarAsyncLoadComplete(out class Object[] ClassArrays);// 0x21afa8c
	void OnGameStateEndPlay__DelegateSignature(byte EndPlayReason);// 0x2bb69b8
	void OnGameStateBeginPlay__DelegateSignature(GameState* GameState);// 0x2bb69b8
	void OnGameModeDisplayNameChange();// 0x21afa78
	void OnCharacterTakeHeadShot(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState);// 0x20bfe84
	void OnCharacterTakeDamage(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState, float Damage);// 0x20bfd7c
	void NotifyDynamicWeatherChange(DynamicWeatherMgr* Mgr, WeatherChangeEvent Event);// 0x21af9bc
	void ModifyEnableSignalSystemOnServer(bool bEnable);// 0x21af93c
	bool IsSendStartFlow(uint32 PlayerKey);// 0x21af8bc
	bool IsSendEndFlow(uint32 PlayerKey);// 0x21af83c
	bool IsRevivalGame();// 0x21af814
	bool IsPVEMode();// 0x21af7ec
	bool IsNoCircleInfo();// 0x21af7c4
	bool IsMapUseTeamPattern();// 0x21af794
	bool IsInWhiteCircle(out const Vector pos);// 0x21af708
	bool IsInNight();// 0x1f3f478
	bool IsInBlueCircleByCircleMgr(Actor* _actor);// 0x21af688
	bool IsInBlueCircle(out const Vector pos);// 0x21af5fc
	bool IsFeatureSupported(enum SubSystemType);// 0x21af574
	bool IsEnableObjectPool();// 0x21af54c
	bool IsEnableDamageInfo();// 0x20f3aec
	TslSimpleCollisionManager* GetSimpleCollisionManager();// 0x21af524
	int GetServerStartUnixTimestamp();// 0x21af4fc
	FString GetServerStartTime();// 0x21af43c
	float GetRepServerWorldTimeSeconds();// 0x21af414
	ReConnectGameStateInfo GetReConnectGameStateInfo();// 0x21af368
	int GetPVEWeatherPhaseIndex();// 0x21af340
	STExtraPlayerState* GetPlayerStateByUID(uint64 PlayerUID);// 0x21af2bc
	XTriggerLuaRemoteComponent* GetLuaRemoteComponent();// 0x21af294
	bool GetIsReadyStateReport();// 0x21af264
	FName GetGameModeState();// 0x21af224
	FieldOfViewNotificationComponentRegistry* GetFieldOfViewNotificationComponentRegistry();// 0x21af1fc
	FString GetDSSwitchValueFastWithCache(const int InSwitchId);// 0x21af0f4
	FString GetDSSwitchValue(const int InSwitchId);// 0x21aefec
	DestructibleSurfaceManager* GetDestructibleSurfaceManager();// 0x21aefc4
	enum GetCurWeatherState();// 0x21aef9c
	enum GetCurDynamicWeatherState();// 0x21aef74
	int GetCurCircleWave();// 0x21aef58
	byte GetCurCircleState();// 0x21aef18
	int GetCurCircleIndex();// 0x20566cc
	GetCircleInfo GetCircleStateInfo();// 0x21aee8c
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x21aede0
	MarkSyncData[] GetAllMarkLocalData(byte _TYPE);// 0x21aed34
	int GetAlivePlayerNum();// 0x21aed0c
	AirDropPathData3D GetAirDropPathData();// 0x21aeb74
	STExtraBaseCharacter* FindCharacterByPlayerKey(FString PlayerKey);// 0x21aea14
	void ExecuteCVarConfig();// 0x21aea00
	void EnableObjectPool(bool bEnable);// 0x21ae980
	Widget* DeepFindWidgetInUserWidget(UserWidget* SourceWidget, FName WidgetName);// 0x21ae8bc
	void ClearAirDropPathData();// 0x21ae8a8
	bool CheckIsLowMatch();// 0x21ae880
	void CheckInitLuaRemoteEvent();// 0x21ae86c
	bool CheckDSSwitchOpen(const int SwitchId);// 0x21ae7e4
	bool CheckDamage(STExtraBaseCharacter* AttackCharacter, STExtraBaseCharacter* TargetBaseCharacter);// 0x2107180
	void ChangeWeatherStatus(WeatherChangeEvent Event);// 0x21ae76c
	void ChangeDynamicWeatherState(enum DayState);// 0x21ae6f4
	void BroadcastUISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x21ae5ec
	void BroadcastUISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x21ae3d8
	void BroadcastUIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x21ae20c
	void BroadcastUICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x21ae040
	void BroadcastTemporaryMessage(FString Message);// 0x21adf7c
	void BroadcastShowGameTips(int TipsID, FString Params);// 0x21ade74
	void BroadcastLuaTipsBehavior(FString BehaviorTag, int ID, FString Params1, FString Params2);// 0x21adc60
	void BroadcastEndCircle();// 0x21adc04
	void BroadcastCircleWaveOver(int Index);// 0x21adb50
	void BroadcastCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index, bool InbActiveScreenSize, float InScreenSizeFactor, float InExtraRadius, float Pain, bool IsCustomCircle);// 0x21ad83c
	void BroadcastCircleInfo(byte circleInfo, float Time, const Vector BlueCircleSync, const Vector WhiteCircleSync, int CircleInvertedIndex, enum State);// 0x21ad624
	void BroadcastAirAttackWarning(const Vector AirAttackAreaSrc, int waveIndex);// 0x21ad568
	void BroadcastAirAttackOrder(const AirAttackOrder airAttackOrderSrc, const Vector AirAttackAreaSrc, int waveIndex);// 0x21ad39c
	void AsyncLoadResFinishCallback();// 0x21ad388
	void AsyncLoadCommonResFinishCallback();// 0x21ad374
	void AddUseSpringJumpTimes(uint32 PlayerKey, int Times);// 0x20be728
	void AddUseEnhancerTimes(uint32 PlayerKey, int Times);// 0x20be664
	void AddPveZombieGrenadeCount(int Value);// 0x21ad2fc
	void AddPvePoliceOfficeTriggerCount(int Value);// 0x21ad284
	void AddPlayerScore(Controller* ScorePlayer, Controller* VictimPlayer, FString ScoreType, float DamagePoint);// 0x20be35c

--------------------------------
Class: UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	UAEGameSubsystem* GameBridge;//[Offset: 0x3dc, Size: 4]
	bool bTeamIDChgDeactivePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e5, Size: 1]
	FString WeaponAttrReloadTableName;//[Offset: 0x424, Size: 12]
	FString VehicleAttrReloadTableName;//[Offset: 0x430, Size: 12]
	FString DamageSearchTableName;//[Offset: 0x43c, Size: 12]
	bool IsInitTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x27d7d98
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x27d7c5c
	static WeaponAttrReloadTableStruct GetWeaponAttrReloadTableRow(int ID);// 0x27d7bb8
	static VehicleAttrReloadTableStruct GetVehicleAttrReloadTableRow(int ID);// 0x27d7b30
	UAEGameSubsystem* GetGameBridge();// 0x27d7b14
	bool CheckDSSwitchOpen(const int SwitchId);// 0x21ae7e4

--------------------------------
Class: LuaGameState.GameState.GameStateBase.Info.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x394, Size: 60]
	FString LuaFilePath;//[Offset: 0x3d0, Size: 12]

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x330, Size: 8]
	FName PreviousMatchState;//[Offset: 0x338, Size: 8]
	int ElapsedTime;//[Offset: 0x340, Size: 4]
	void OnRep_MatchState();// 0x1fd3460
	void OnRep_ElapsedTime();// 0x4437ec0

--------------------------------
Class: UAEGameSubsystem.Object
	delegate GameModeStateChangeEvent;//[Offset: 0x1c, Size: 12]
	delegate ActorOverlapEvent;//[Offset: 0x28, Size: 12]
	delegate ActorDieEvent;//[Offset: 0x34, Size: 12]
	delegate PawnDieEvent;//[Offset: 0x40, Size: 12]
	delegate CharacterDieEvent;//[Offset: 0x4c, Size: 12]
	delegate EnterAreaTriggerEvent;//[Offset: 0x58, Size: 12]
	delegate ExitAreaTriggerEvent;//[Offset: 0x64, Size: 12]
	delegate PawnPickupItemEvent;//[Offset: 0x70, Size: 12]
	delegate VehicleOverlapEvent;//[Offset: 0x7c, Size: 12]
	delegate InteractiveActorBeginEvent;//[Offset: 0x88, Size: 12]
	delegate InteractiveActorDoneEvent;//[Offset: 0x94, Size: 12]
	delegate CharacterStartSkill;//[Offset: 0xa0, Size: 12]
	delegate CharacterStopSkill;//[Offset: 0xac, Size: 12]
	delegate CharacterStartSkillPhase;//[Offset: 0xb8, Size: 12]
	delegate CharacterStopSkillPhase;//[Offset: 0xc4, Size: 12]
	delegate CharacterStartSkillCooldown;//[Offset: 0xd0, Size: 12]
	delegate CharacterStopSkillCooldown;//[Offset: 0xdc, Size: 12]
	delegate CharacterAddSkill;//[Offset: 0xe8, Size: 12]
	delegate CharacterRemoveSkill;//[Offset: 0xf4, Size: 12]
	delegate PlayerJoinEvent;//[Offset: 0x100, Size: 12]
	delegate PlayerRealExitEvent;//[Offset: 0x10c, Size: 12]
	delegate PlayerExitEvent;//[Offset: 0x118, Size: 12]
	delegate ProjectileStopEvent;//[Offset: 0x124, Size: 12]
	delegate ProjectileBounceEvent;//[Offset: 0x130, Size: 12]
	delegate DecoraterActorSpawnEvent;//[Offset: 0x13c, Size: 12]
	delegate RemoteEvent;//[Offset: 0x148, Size: 12]
	delegate PlayerDamageQueryEvent;//[Offset: 0x154, Size: 12]
	delegate PawnNearDeathEvent;//[Offset: 0x160, Size: 12]
	delegate PawnNearDeathOrRescuedEvent;//[Offset: 0x16c, Size: 12]
	delegate OnAIPawnSpawnEvent;//[Offset: 0x178, Size: 12]
	delegate OnCharacterRespawnEvent;//[Offset: 0x184, Size: 12]
	delegate ChooseEnemyLoseTargetEvent;//[Offset: 0x190, Size: 12]
	delegate FindEnemyWarningEvent;//[Offset: 0x19c, Size: 12]
	delegate ModFindEnemyWarningEvent;//[Offset: 0x1a8, Size: 12]
	delegate TaskInterActiveActorBeginEvent;//[Offset: 0x1b4, Size: 12]
	delegate TaskInterActiveActorDoneEvent;//[Offset: 0x1c0, Size: 12]
	delegate LevelAddedEvent;//[Offset: 0x1cc, Size: 12]
	delegate DSLuaGMEvent;//[Offset: 0x1d8, Size: 12]
	delegate OnWeaponFireEvent;//[Offset: 0x1e4, Size: 12]
	delegate PlayerPickUpItemEvent;//[Offset: 0x1f0, Size: 12]
	delegate PlayerDropItemEvent;//[Offset: 0x1fc, Size: 12]
	delegate PlayerUseItemEvent;//[Offset: 0x208, Size: 12]
	delegate PlayerDisUseItemEvent;//[Offset: 0x214, Size: 12]
	delegate PlayerSwapItemEvent;//[Offset: 0x220, Size: 12]
	delegate PlayerEquipItemEvent;//[Offset: 0x22c, Size: 12]
	delegate PlayerUnEquipItemEvent;//[Offset: 0x238, Size: 12]
	delegate PlayerConsumeEvent;//[Offset: 0x244, Size: 12]
	delegate PawnChangeTeamEvent;//[Offset: 0x250, Size: 12]

--------------------------------
Class: WeaponAttrReloadTableStruct
	int KeyID;//[Offset: 0x0, Size: 4]
	float AutoAimingConfig_InnerRange_Speed;//[Offset: 0x4, Size: 4]
	float AutoAimingConfig_InnerRange_CenterSpeedRate;//[Offset: 0x8, Size: 4]
	float AutoAimingConfig_InnerRange_RangeRate;//[Offset: 0xc, Size: 4]
	float AutoAimingConfig_InnerRange_SpeedRate;//[Offset: 0x10, Size: 4]
	float AutoAimingConfig_InnerRange_RangeRateSight;//[Offset: 0x14, Size: 4]
	float AutoAimingConfig_InnerRange_SpeedRateSight;//[Offset: 0x18, Size: 4]
	float AutoAimingConfig_InnerRange_CrouchRate;//[Offset: 0x1c, Size: 4]
	float AutoAimingConfig_InnerRange_ProneRate;//[Offset: 0x20, Size: 4]
	float AutoAimingConfig_InnerRange_DyingRate;//[Offset: 0x24, Size: 4]
	float AutoAimingConfig_InnerRange_DriveVehicleRate;//[Offset: 0x28, Size: 4]
	float AutoAimingConfig_InnerRange_InVehicleRate;//[Offset: 0x2c, Size: 4]
	float AutoAimingConfig_InnerRange_FreeFallRate;//[Offset: 0x30, Size: 4]
	float AutoAimingConfig_InnerRange_OpeningRate;//[Offset: 0x34, Size: 4]
	float AutoAimingConfig_InnerRange_LandingRate;//[Offset: 0x38, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbMaxRange;//[Offset: 0x3c, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbMinRange;//[Offset: 0x40, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbMinAttenuationDis;//[Offset: 0x44, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbMaxAttenuationDis;//[Offset: 0x48, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbActiveMinRange;//[Offset: 0x4c, Size: 4]
	float AutoAimingConfig_OuterRange_Speed;//[Offset: 0x50, Size: 4]
	float AutoAimingConfig_OuterRange_CenterSpeedRate;//[Offset: 0x54, Size: 4]
	float AutoAimingConfig_OuterRange_RangeRate;//[Offset: 0x58, Size: 4]
	float AutoAimingConfig_OuterRange_SpeedRate;//[Offset: 0x5c, Size: 4]
	float AutoAimingConfig_OuterRange_RangeRateSight;//[Offset: 0x60, Size: 4]
	float AutoAimingConfig_OuterRange_SpeedRateSight;//[Offset: 0x64, Size: 4]
	float AutoAimingConfig_OuterRange_CrouchRate;//[Offset: 0x68, Size: 4]
	float AutoAimingConfig_OuterRange_ProneRate;//[Offset: 0x6c, Size: 4]
	float AutoAimingConfig_OuterRange_DyingRate;//[Offset: 0x70, Size: 4]
	float AutoAimingConfig_OuterRange_DriveVehicleRate;//[Offset: 0x74, Size: 4]
	float AutoAimingConfig_OuterRange_InVehicleRate;//[Offset: 0x78, Size: 4]
	float AutoAimingConfig_OuterRange_FreeFallRate;//[Offset: 0x7c, Size: 4]
	float AutoAimingConfig_OuterRange_OpeningRate;//[Offset: 0x80, Size: 4]
	float AutoAimingConfig_OuterRange_LandingRate;//[Offset: 0x84, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbMaxRange;//[Offset: 0x88, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbMinRange;//[Offset: 0x8c, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbMinAttenuationDis;//[Offset: 0x90, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbMaxAttenuationDis;//[Offset: 0x94, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbActiveMinRange;//[Offset: 0x98, Size: 4]
	float AutoAimingConfig_ScopeRange_Speed;//[Offset: 0x9c, Size: 4]
	float AutoAimingConfig_ScopeRange_CenterSpeedRate;//[Offset: 0xa0, Size: 4]
	float AutoAimingConfig_ScopeRange_RangeRate;//[Offset: 0xa4, Size: 4]
	float AutoAimingConfig_ScopeRange_SpeedRate;//[Offset: 0xa8, Size: 4]
	float AutoAimingConfig_ScopeRange_RangeRateSight;//[Offset: 0xac, Size: 4]
	float AutoAimingConfig_ScopeRange_SpeedRateSight;//[Offset: 0xb0, Size: 4]
	float AutoAimingConfig_ScopeRange_CrouchRate;//[Offset: 0xb4, Size: 4]
	float AutoAimingConfig_ScopeRange_ProneRate;//[Offset: 0xb8, Size: 4]
	float AutoAimingConfig_ScopeRange_DyingRate;//[Offset: 0xbc, Size: 4]
	float AutoAimingConfig_ScopeRange_DriveVehicleRate;//[Offset: 0xc0, Size: 4]
	float AutoAimingConfig_ScopeRange_InVehicleRate;//[Offset: 0xc4, Size: 4]
	float AutoAimingConfig_ScopeRange_FreeFallRate;//[Offset: 0xc8, Size: 4]
	float AutoAimingConfig_ScopeRange_OpeningRate;//[Offset: 0xcc, Size: 4]
	float AutoAimingConfig_ScopeRange_LandingRate;//[Offset: 0xd0, Size: 4]
	float AutoAimingConfig_ScopeRange_AdsorbMaxRange;//[Offset: 0xd4, Size: 4]
	float AutoAimingConfig_ScopeRange_AdsorbMinRange;//[Offset: 0xd8, Size: 4]
	float AutoAimingConfig_ScopeRange_AdsorbMinAttenuationDis;//[Offset: 0xdc, Size: 4]
	float AutoAimingConfig_ScopeRange_AdsorbMaxAttenuationDis;//[Offset: 0xe0, Size: 4]
	float AutoAimingConfig_ScopeRange_AdsorbActiveMinRange;//[Offset: 0xe4, Size: 4]
	float AutoAimingConfig_FollowTimeMax;//[Offset: 0xe8, Size: 4]
	float AutoAimingConfig_MaxAngle;//[Offset: 0xec, Size: 4]
	int AutoAimingConfig_TriggerBeforeFire;//[Offset: 0xf0, Size: 4]
	FString AutoAimingConfig_SpeedCurvePath;//[Offset: 0xf4, Size: 12]
	FString AutoAimingConfig_DistanceCurvePath;//[Offset: 0x100, Size: 12]
	FString AutoAimingConfig_SensitiveCurvePath;//[Offset: 0x10c, Size: 12]
	float AccessoriesVRecoilFactor;//[Offset: 0x118, Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0x11c, Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0x120, Size: 4]
	float RecoilLeftMax;//[Offset: 0x124, Size: 4]
	float RecoilRightMax;//[Offset: 0x128, Size: 4]
	float RecoilKickADS;//[Offset: 0x12c, Size: 4]
	float ExtraHitPerformScale;//[Offset: 0x130, Size: 4]
	float DeviationBase;//[Offset: 0x134, Size: 4]
	float DeviationBaseAim;//[Offset: 0x138, Size: 4]
	float DeviationRecoilGain;//[Offset: 0x13c, Size: 4]
	float DeviationRecoilGainAim;//[Offset: 0x140, Size: 4]
	float DeviationMaxMove;//[Offset: 0x144, Size: 4]
	float DeviationMoveMultiplier;//[Offset: 0x148, Size: 4]
	float DeviationStanceJump;//[Offset: 0x14c, Size: 4]
	float DeviationShoulderMultiplier;//[Offset: 0x150, Size: 4]
	float GameDeviationFactor;//[Offset: 0x154, Size: 4]
	float HitPartCoffHead;//[Offset: 0x158, Size: 4]
	float HitPartCoffBody;//[Offset: 0x15c, Size: 4]
	float HitPartCoffLimbs;//[Offset: 0x160, Size: 4]
	float HitPartCoffHand;//[Offset: 0x164, Size: 4]
	float HitPartCoffFoot;//[Offset: 0x168, Size: 4]
	float ZombileHitPartCoffHead;//[Offset: 0x16c, Size: 4]
	float ZombileHitPartCoffBody;//[Offset: 0x170, Size: 4]
	float ZombileHitPartCoffLimbs;//[Offset: 0x174, Size: 4]
	float ZombileHitPartCoffHand;//[Offset: 0x178, Size: 4]
	float ZombileHitPartCoffFoot;//[Offset: 0x17c, Size: 4]
	float BaseImpactDamage;//[Offset: 0x180, Size: 4]
	float RangeModifier;//[Offset: 0x184, Size: 4]
	float ReferenceDistance;//[Offset: 0x188, Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x18c, Size: 4]
	float ReloadTime;//[Offset: 0x190, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x194, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x198, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x19c, Size: 4]
	float ReloadDurationStart;//[Offset: 0x1a0, Size: 4]
	float ReloadDurationLoop;//[Offset: 0x1a4, Size: 4]
	float MaxBulletNumInOneClip;//[Offset: 0x1a8, Size: 4]
	float InitBulletInClip;//[Offset: 0x1ac, Size: 4]
	float BulletFireSpeed;//[Offset: 0x1b0, Size: 4]
	float ImpactEffectSkipDistance;//[Offset: 0x1b4, Size: 4]
	float MaxImpactEffectSkipTime;//[Offset: 0x1b8, Size: 4]
	int bEnableVehicleShoot;//[Offset: 0x1bc, Size: 4]
	int bEnableLeanOutHolding;//[Offset: 0x1c0, Size: 4]
	float Bullet_RadialDamageParams_BaseDamage;//[Offset: 0x1c4, Size: 4]
	float Bullet_RadialDamageParams_MinimumDamage;//[Offset: 0x1c8, Size: 4]
	float Bullet_RadialDamageParams_DamageInnerRadius;//[Offset: 0x1cc, Size: 4]
	float Bullet_RadialDamageParams_DamageOuterRadius;//[Offset: 0x1d0, Size: 4]
	float Bullet_RadialDamageParams_DamageFalloff;//[Offset: 0x1d4, Size: 4]
	float Bullet_MaxNoGravityRange;//[Offset: 0x1d8, Size: 4]
	float Bullet_LaunchGravityScale;//[Offset: 0x1dc, Size: 4]
	FString Bullet_RadialDamageParams_DamageTypeClass;//[Offset: 0x1e0, Size: 12]
	FString ImpactActorTemplatePath;//[Offset: 0x1ec, Size: 12]
	FString BulletTemplatePath;//[Offset: 0x1f8, Size: 12]
	int ReloadWithNoCost;//[Offset: 0x204, Size: 4]
	FString MuzzleFX;//[Offset: 0x208, Size: 12]
	FString ScopeMuzzleFX;//[Offset: 0x214, Size: 12]
	FString RemoteMuzzleFX;//[Offset: 0x220, Size: 12]
	FString LocalSilencerMuzzleFX;//[Offset: 0x22c, Size: 12]
	FString ScopeSilencerMuzzleFX;//[Offset: 0x238, Size: 12]
	FString RemoteSilencerMuzzleFX;//[Offset: 0x244, Size: 12]
	FString LocalFiringSuppressorMuzzleFX;//[Offset: 0x250, Size: 12]
	FString ScopeFiringSuppressorMuzzleFX;//[Offset: 0x25c, Size: 12]
	FString RemoteFiringSuppressorMuzzleFX;//[Offset: 0x268, Size: 12]
	FString LocalCompensatorMuzzleFX;//[Offset: 0x274, Size: 12]
	FString ScopeCompensatorMuzzleFX;//[Offset: 0x280, Size: 12]
	FString RemoteCompensatorMuzzleFX;//[Offset: 0x28c, Size: 12]
	FString Bullet_AutonomousFPPFX;//[Offset: 0x298, Size: 12]
	FString Bullet_AutonomousTPPFX;//[Offset: 0x2a4, Size: 12]
	FString Bullet_AutonomousGunADSFX;//[Offset: 0x2b0, Size: 12]
	FString Bullet_OBFPPFX;//[Offset: 0x2bc, Size: 12]
	FString Bullet_OBTPPFX;//[Offset: 0x2c8, Size: 12]
	FString Bullet_OBGunADSFX;//[Offset: 0x2d4, Size: 12]
	FString Bullet_ReplayFPPFX;//[Offset: 0x2e0, Size: 12]
	FString Bullet_ReplayTPPFX;//[Offset: 0x2ec, Size: 12]
	FString Bullet_ReplayGunADSFX;//[Offset: 0x2f8, Size: 12]
	FString Bullet_DefaultFX;//[Offset: 0x304, Size: 12]
	int bSimulateBulletOptimize;//[Offset: 0x310, Size: 4]
	int WeaponDurability;//[Offset: 0x330, Size: 4]
	int ShootReduceDurabilityAmount;//[Offset: 0x334, Size: 4]

--------------------------------
Class: VehicleAttrReloadTableStruct
	int KeyID;//[Offset: 0x0, Size: 4]
	float HealthMax;//[Offset: 0x4, Size: 4]
	float Health;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AirDropPathData3D
	int AirDropIndex;//[Offset: 0x0, Size: 4]
	Vector StartLoc3D;//[Offset: 0x4, Size: 12]
	Vector TargetLoc3D;//[Offset: 0x10, Size: 12]
	Vector[] AirDropLocs3D;//[Offset: 0x1c, Size: 12]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	Vector MapCenter;//[Offset: 0x2c, Size: 12]
	float Radius;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ViewMaskManager.Object
	enum ViewMaskTypeSetting;//[Offset: 0x1c, Size: 1]
	class Actor[] FilterActorClassList;//[Offset: 0x20, Size: 12]
	void SetViewMaskType(enum NewMaskType);// 0x22ec41c
	bool IsPlayerViewMaskValid(STExtraBaseCharacter* BaseCharacter);// 0x22ec39c
	void Init();// 0x22ec388
	int ClearViewMaskForActor(Actor* MaskActor);// 0x22ec308
	int ApplyViewMaskForPlayer(STExtraBaseCharacter* BaseCharacter);// 0x22ec288
	int ApplyViewMaskForActorWithOwnerPlayer(Actor* MaskActor, STExtraBaseCharacter* BaseCharacter);// 0x22ec1c4

--------------------------------
Class: ModAdapter.Object
	Actor* SpawnPointLightActor(ModAdapterSpawnInfo SpawnInfo);// 0x20530b0
	Actor* SpawnModActorByClass(class Actor ActorClass, out const Transform SpawnTransform, Pawn* Instigator, Actor* Owner);// 0x2052f00

--------------------------------
Class: ModAdapterSpawnInfo
	Actor* RelatedActor;//[Offset: 0x0, Size: 4]
	FName LightType;//[Offset: 0x8, Size: 8]
	Transform SpawnTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: VisualFieldFeatureParam
	float VisualFieldUpdateInterval;//[Offset: 0x0, Size: 4]
	float MaxVisualFieldDistanceSquared;//[Offset: 0x4, Size: 4]
	FName[] VisualCheckBoneList;//[Offset: 0x8, Size: 12]
	float DefaultFOVAngle;//[Offset: 0x14, Size: 4]
	byte[] VisualCheckChanelList;//[Offset: 0x18, Size: 12]
	class Character[] ExcludeCheckCharacterClass;//[Offset: 0x24, Size: 12]

--------------------------------
Class: VisualFieldFeature.Object
	TimerHandle VisualFieldTickTimerHandle;//[Offset: 0x50, Size: 8]
	VisualFieldFrame VisualFieldFrame;//[Offset: 0x58, Size: 60]
	<int,float> VisualAngleLimitMap;//[Offset: 0x94, Size: 60]
	STExtraPlayerController* CachedLocalController;//[Offset: 0xd0, Size: 8]

--------------------------------
Class: VisualFieldFrame
	<int,VisualFieldCamp> VisualFieldFrameMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: VisualFieldCamp
	VisibleActorInfo[] VisibleActorList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: VisibleActorInfo
	VisualFieldMetaInfo VisibleActorMetaInfo;//[Offset: 0x0, Size: 16]
	Actor* VisibleActor;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameModeFeatureSetData
	uint32 GameModeFeatureSet_A;//[Offset: 0x0, Size: 4]

--------------------------------
Class: WeatherChangeEvent
	enum WeaterType;//[Offset: 0x0, Size: 1]
	enum WeaterChangeEvent;//[Offset: 0x1, Size: 1]

--------------------------------
Class: GameModePlayerShowUpassInfo
	FString PlayerName;//[Offset: 0x0, Size: 12]
	int updateTime;//[Offset: 0xc, Size: 4]
	int upassLevel;//[Offset: 0x10, Size: 4]
	int upassScore;//[Offset: 0x14, Size: 4]
	int planeAvatarId;//[Offset: 0x18, Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	FString iconUrl;//[Offset: 0x20, Size: 12]
	FString Nation;//[Offset: 0x2c, Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x38, Size: 52]
	int upassKeepBuy;//[Offset: 0x6c, Size: 4]
	int upassCurValue;//[Offset: 0x70, Size: 4]
	int nUpassPrimePlusCard;//[Offset: 0x74, Size: 4]

--------------------------------
Class: CircleDataMining
	Vector WhiteCircleCenter;//[Offset: 0x0, Size: 12]
	bool bDestinyCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int LeftPlayerNum;//[Offset: 0x10, Size: 4]

--------------------------------
Class: GameDataMining
	FString BattleID;//[Offset: 0x0, Size: 12]
	Vector PlaneStartPoint;//[Offset: 0xc, Size: 12]
	Vector PlaneEndPoint;//[Offset: 0x18, Size: 12]
	CircleDataMining[] CircleDataMining;//[Offset: 0x24, Size: 12]
	GameWatchReport[] WatchReport;//[Offset: 0x30, Size: 12]

--------------------------------
Class: GameWatchReport
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x4, Size: 12]
	uint64 player_uid;//[Offset: 0x10, Size: 8]
	float total_time;//[Offset: 0x18, Size: 4]
	WatchFlow[] watch_flow;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: WatchFlow
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint32 sec;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MarkDispatchManager.ActorComponent.Object
	int CurrentInstanceCount;//[Offset: 0xbc, Size: 4]
	int CurrentLocalInstanceCount;//[Offset: 0xc0, Size: 4]
	MarkDispatchAction[] ActionQueue;//[Offset: 0xc4, Size: 12]
	MarkDispatchAction[] BatchActionQueue;//[Offset: 0xd0, Size: 12]
	MarkDispatchAction[] FramingDispatchMarkQueue;//[Offset: 0xdc, Size: 12]
	int MarkCountProcessed;//[Offset: 0xe8, Size: 4]
	int OverflowFrameCount;//[Offset: 0xec, Size: 4]
	static MarkDispatchManager* GetMarkDispatchManager(Object* WorldContextObject);// 0x2045dd8
	int GenerateNewLocalInstanceID();// 0x2045db0
	int GenerateNewInstanceID();// 0x2045d8c
	void DispatchMarkData(MarkDispatchAction Data);// 0x2045bd4
	void ClearMarkDataByTypeID(int TypeId, enum MarkTypeIDClearType, STExtraPlayerState* WeakPlayerState);// 0x2045ad4

--------------------------------
Class: MarkDispatchAction
	enum ActionType;//[Offset: 0x0, Size: 1]
	enum RangeType;//[Offset: 0x1, Size: 1]
	MarkSyncData SyncData;//[Offset: 0x4, Size: 96]
	float DispatchDelayTime;//[Offset: 0x64, Size: 4]
	float RangeRad;//[Offset: 0x68, Size: 4]
	STExtraPlayerState* WeakPlayerState;//[Offset: 0x6c, Size: 8]
	float DispatchTime;//[Offset: 0x74, Size: 4]
	bool bIsFromLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	delegate OnMapAlertSet;//[Offset: 0x80, Size: 16]

--------------------------------
Class: ActorExtraComponents
	class ActorComponent[] BPComponents;//[Offset: 0x0, Size: 12]

--------------------------------
Class: XTriggerLuaRemoteComponent.ActorComponent.Object
	<FString,float> EventTagCDMap;//[Offset: 0xbc, Size: 60]
	float EventCDTime;//[Offset: 0xf8, Size: 4]
	bool LuaRemoteEvent(FString EventTag, FString CustomParam, Object* Object01, Object* Object02);// 0x2315348

--------------------------------
Class: FieldOfViewNotificationComponentRegistry.Object
	delegate FieldOfViewNotificationComponentRegisteredDelegate;//[Offset: 0x1c, Size: 12]
	delegate FieldOfViewNotificationComponentUnregisteredDelegate;//[Offset: 0x28, Size: 12]
	void Unregister(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x1fd97c0
	void Register(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x1fd9740
	void GetRegisteredFieldOfViewNotificationComponents(out FieldOfViewNotificationComponent*[] OutRegisteredFieldOfViewNotificationComponents);// 0x1fd966c
	static FieldOfViewNotificationComponentRegistry* Get(Object* WorldContext);// 0x1fd95f4
	void FieldOfViewNotificationComponentUnregisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x2bb69b8
	void FieldOfViewNotificationComponentRegisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x2bb69b8

--------------------------------
Class: FieldOfViewNotificationComponent.ActorComponent.Object
	delegate InFieldOfViewChangedDelegate;//[Offset: 0xbc, Size: 12]
	float CheckFrequencyLowerBoundInSeconds;//[Offset: 0xc8, Size: 4]
	float CheckFrequencyUpperBoundInSeconds;//[Offset: 0xcc, Size: 4]
	bool bSelfDebugLineTraceDrawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bCheckingFieldOfViewEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	enum FieldOfViewNotificationStatus;//[Offset: 0xd8, Size: 1]
	bool IsNotificationWorking();// 0x1fd9244
	static int IsGlobalDebugLineTraceDrawn();// 0x1fd9218
	void InFieldOfViewChangedDelegate__DelegateSignature(FieldOfViewNotificationComponent* Sender, enum OldFieldOfViewNotificationStatus);// 0x2bb69b8
	enum GetFieldOfViewNotificationStatus();// 0x1fd91f0

--------------------------------
Class: GameModeCVarConfigItem
	FString Key;//[Offset: 0x0, Size: 12]
	FString Value;//[Offset: 0xc, Size: 12]

--------------------------------
Class: TslSimpleCollisionManager.Actor.Object
	SimpleSpherePersistentChecker[] PersistentExplosiveItemFields;//[Offset: 0x314, Size: 12]
	float DamageFieldUpdatePeriod;//[Offset: 0x378, Size: 4]
	float DamageFieldPassedTime;//[Offset: 0x37c, Size: 4]
	void RegisterPersistentReceiver(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, int ID);// 0x2275698
	void RegisterBoundingSphere(out const Vector Origin, float Radius, TslSimpleCollisionReceiver* OwnerTracer);// 0x2275588
	void AddRandomPersistentCapsules(int Num, float RngRadius);// 0x2002758
	int AddCheckerToBoundingSphere(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, TslSimpleCollisionReceiver* Receiver, bool RebuildSphere);// 0x22753f0

--------------------------------
Class: SimpleSpherePersistentChecker
	PrimitiveComponent* TargetComponent;//[Offset: 0x0, Size: 4]
	SimpleCollisionSphere Sphere;//[Offset: 0x4, Size: 16]
	float PassedTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SimpleCollisionSphere
	Vector Origin;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SimpleCollisionCapsule
	Vector Start;//[Offset: 0x0, Size: 12]
	Vector End;//[Offset: 0xc, Size: 12]
	float Radius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TslSimpleCollisionReceiver.SceneComponent.ActorComponent.Object

--------------------------------
Class: DestructibleSurfaceManager.Info.Actor.Object

--------------------------------
Class: MapUIMarkManager.LuaActorComponent.ActorComponent.Object
	MarkPathSetting[] MarkPathSettingArray;//[Offset: 0x17c, Size: 12]
	class ScreenMarkManager* ScreenMarkMgrClass;//[Offset: 0x188, Size: 4]
	class ScreenRotationMarkManager* ScreenRotationMarkMgrClass;//[Offset: 0x18c, Size: 4]
	MapUIBase* m_pMiniMap;//[Offset: 0x190, Size: 4]
	MapUIBase* m_pEntireMap;//[Offset: 0x194, Size: 4]
	ScreenMarkManager* m_ScreenMarkManager;//[Offset: 0x198, Size: 4]
	ScreenRotationMarkManager* m_ScreenRotationMarkManager;//[Offset: 0x19c, Size: 4]
	int[] CurMarkInstList;//[Offset: 0x1a0, Size: 12]
	<int,MarkActorInstInfo> CurMarkActorInstMap;//[Offset: 0x1ac, Size: 60]
	delegate OnAlertItemListUpdateDelegate;//[Offset: 0x260, Size: 12]
	delegate OnMiniMapPointerException;//[Offset: 0x26c, Size: 12]
	STExtraGameStateBase* pExtraGameState;//[Offset: 0x278, Size: 4]
	STExtraPlayerController* pExtraPC;//[Offset: 0x27c, Size: 4]
	UIBPAsyncParams[] UIBPCallbackBuffer;//[Offset: 0x2a0, Size: 12]
	float TickRate_Internal;//[Offset: 0x2b4, Size: 4]
	float TickRate_Callback;//[Offset: 0x2b8, Size: 4]
	<int,MapMarkConfig> MapMarkConfigs;//[Offset: 0x2bc, Size: 60]
	void OnUIBPLoadCallBack(UIBPAsyncParams inCallBackParams);// 0x204afb4
	void OnShowOrHideLegendMarkWidget(FString Tag, bool bIsShow);// 0x204ae0c
	void OnMiniMapPointerExceptionDelegate__DelegateSignature();// 0x2bb69b8
	void OnAlertItemListUpdateDelegate__DelegateSignature(int Counts);// 0x2bb69b8

--------------------------------
Class: MarkPathSetting
	int UIBPSrcID;//[Offset: 0x0, Size: 4]
	FString UIBPSoftPtr;//[Offset: 0x4, Size: 12]
	FString UIDescription;//[Offset: 0x10, Size: 12]

--------------------------------
Class: ScreenMarkManager.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	<int,ScreenMarkGroupData> ScreenMarkGroupMap;//[Offset: 0x6c, Size: 60]
	Vector2D LimitXY;//[Offset: 0xa8, Size: 8]
	Vector2D LimitZW;//[Offset: 0xb0, Size: 8]
	Vector2D UIOffset;//[Offset: 0xb8, Size: 8]
	byte[] CheckObjectTypes;//[Offset: 0xc0, Size: 12]
	ActorVectorPair[] ActorVectorHeapToBind;//[Offset: 0x1a8, Size: 12]
	ActorVectorPair[] ActorVectorArrayToUnBind;//[Offset: 0x1b4, Size: 12]
	void UpdateBindingWidgetByPanel(int ID);// 0x20da2b8
	void UpdateBindingLocationWidget(int ID);// 0x20da240
	void UpdateBindingActorWidget(int ID);// 0x20da1c8
	void UnbindLocation(out const Vector BingdingLoction, int ID);// 0x20da0fc
	void UnbindActor(Actor* BindingObject, int ID);// 0x20da040
	bool RemoveBlockCheckIgnoreActor(int GroupID, Actor* Actor);// 0x20d9f7c
	void ReleaseGroupByID(int ID);// 0x20d9f04
	bool RecycleBindWidget(Widget* BindWidget, int ID);// 0x20d9e40
	void OnLocationUnbindUI(Widget* BindWidget, int ID);// 0x20d9d7c
	void OnLocationBindUI(Widget* BindWidget, int ID);// 0x20d9cb8
	void OnInitMarkGroupData(int ID);// 0x1fd9740
	void OnInit();// 0x1ef5680
	void OnActorUnbindUI(Actor* BindingObject, Widget* BindWidget, int ID);// 0x20d9bb0
	void OnActorBindUI(Actor* BindingObject, Widget* BindWidget, int ID);// 0x20d9aa8
	bool IsInBindingRange(out const Vector PlayerToCharacter, int ID);// 0x20d99d4
	bool InitMarkGroupData(int ID, bool bIsAsync);// 0x20d9908
	Widget* GetWidgetByActor(int ID, const Actor* Actor);// 0x20d9844
	Widget* FetchUI(int ID);// 0x20d97c4
	bool CheckShouldShow(Actor* Actor, out ScreenMarkGroupData GroupData);// 0x20d95d0
	bool BindToLoc(out const Vector BingdingLoction, int ID);// 0x20d94f4
	bool BindToActor(Actor* BindingObject, int ID);// 0x20d9430
	bool AddBlockCheckIgnoreActor(int GroupID, Actor* Actor);// 0x20d936c

--------------------------------
Class: ScreenMarkGroupData
	ScreenMarkGroupConfig Config;//[Offset: 0x0, Size: 64]
	UIDuplicatedItemPool* UIPool;//[Offset: 0x40, Size: 4]
	Actor*[] WorldObjectArr;//[Offset: 0x44, Size: 12]
	Vector[] WorldLocationArr;//[Offset: 0x50, Size: 12]
	Widget*[] HidingUIArr;//[Offset: 0x5c, Size: 12]
	Widget*[] ShowingUIArr;//[Offset: 0x68, Size: 12]
	ActorWidgetPair[] BindingActorUIArr;//[Offset: 0x74, Size: 12]
	<Vector,Widget*> BindingLocationPairs;//[Offset: 0x80, Size: 60]
	NormalActorPositionPanel* ScreenMarkPanel;//[Offset: 0xc4, Size: 4]
	Actor*[] IgnoreBlockArr;//[Offset: 0xc8, Size: 12]

--------------------------------
Class: ScreenMarkGroupConfig
	int MaxWidgetNum;//[Offset: 0x0, Size: 4]
	float MaxShowDistance;//[Offset: 0x4, Size: 4]
	float UpdateBindingInterval;//[Offset: 0x8, Size: 4]
	float UpdateBindingIntervalMax;//[Offset: 0xc, Size: 4]
	float ReduseBindingVelocityThreshold;//[Offset: 0x10, Size: 4]
	bool bIsBindingActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bIsUpdatedByPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	bool bBindOutScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]
	bool bBindBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17, Size: 1]
	FString UIPathName;//[Offset: 0x18, Size: 12]
	bool bCollapseWhenFree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	FName SkeletaSocketName;//[Offset: 0x28, Size: 8]
	Vector WorldPositionOffset;//[Offset: 0x30, Size: 12]

--------------------------------
Class: UIDuplicatedItemPool.Object
	bool bActiveItemListHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bCollapseWhenFree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	FString[] TagArray;//[Offset: 0x38, Size: 12]
	FString ItemBPClassPath;//[Offset: 0x44, Size: 12]
	class Object* ItemClass;//[Offset: 0x50, Size: 4]
	UserWidget*[] UsedItemList;//[Offset: 0x54, Size: 12]
	UserWidget*[] IdleItemList;//[Offset: 0x60, Size: 12]
	UserWidget*[] IdleItemListHold;//[Offset: 0x6c, Size: 12]
	void RemoveTagFromItemPool(FString TagName);// 0x22b1d6c
	void RemoveAllTagFromItemPool();// 0x22b1d58
	void RecycleUnusedItem();// 0x22b1d44
	void RecycleAllItems();// 0x22b1d30
	void OnAsyncLoadWidgetFinished(UserWidget* Widget, int InstID);// 0x22b1c74
	bool ItemPoolHasTag(FString TagName);// 0x22b1bb0
	bool ItemPoolHasOneTagAtLeast(out const FString[] TagNameList);// 0x22b1a74
	bool ItemPoolHasAllTag(out const FString[] TagNameList);// 0x22b1938
	void InitItemPool(FString ClassPath, int DefaultItemCounts);// 0x22b1838
	UserWidget* GetOneItem();// 0x22b1810
	void GetAllUsedItem(out UserWidget*[] ItemList);// 0x22b1744
	void GetAllTagFromItemPool(out FString[] tagList);// 0x22b1610
	void FreeOneItem(UserWidget* IdleItem);// 0x22b1598
	void AddTagToItemPool(FString TagName);// 0x22b14dc
	void AddMultiTagToItemPool(out const FString[] TagNameList);// 0x22b13a8

--------------------------------
Class: ActorWidgetPair
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Widget* Widget;//[Offset: 0x8, Size: 4]

--------------------------------
Class: NormalActorPositionPanel.LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	FName SkeletaSocketName;//[Offset: 0x358, Size: 8]
	Vector WorldPositionOffset;//[Offset: 0x360, Size: 12]
	Vector2D LimitXY;//[Offset: 0x36c, Size: 8]
	Vector2D LimitZW;//[Offset: 0x374, Size: 8]
	Vector2D UIOffset;//[Offset: 0x37c, Size: 8]
	CanvasPanel* AddToPanel;//[Offset: 0x384, Size: 4]
	int[] BindingGroupIDArr;//[Offset: 0x388, Size: 12]
	void UpdateBindingWidgetByPanel(int ID);// 0x1fa0fcc
	void OnRemoveGroup(int ID);// 0x2025d08
	void OnLocationUnbindUI(Widget* BindWidget, int ID);// 0x206f230
	void OnLocationBindUI(Widget* BindWidget, int ID);// 0x2074570
	void OnInitGroup(int ID);// 0x20744f0
	void OnActorUnbindUI(Actor* BindingObject, Widget* BindWidget, int ID);// 0x20743e8
	void OnActorBindUI(Actor* BindingObject, Widget* BindWidget, int ID);// 0x20742e0
	Widget*[] GetHidingUIArr(int ID, int MaxWidgetNum);// 0x2bb69b8
	Widget* DuplicateWidget(Widget* SourceWidget, const FName Name);// 0x207421c

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x388f8e0
	bool GetDontPaintWhenChildEmpty();// 0x388f8b8
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x388f838

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x24, Size: 40]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bSupportNotch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	int ZOrder;//[Offset: 0x50, Size: 4]
	void SetZOrder(int InZOrder);// 0x3890530
	void SetSupportNotch(bool InSupportNotch);// 0x38904b0
	void SetSize(Vector2D InSize);// 0x3890440
	void SetPosition(Vector2D InPosition);// 0x38903d0
	void SetOffsets(Margin InOffset);// 0x3890348
	void SetMinimum(Vector2D InMinimumAnchors);// 0x38902d8
	void SetMaximum(Vector2D InMaximumAnchors);// 0x3890268
	void SetLayout(out const AnchorData InLayoutData);// 0x38901d0
	void SetAutoSize(bool InbAutoSize);// 0x3890150
	void SetAnchors(Anchors InAnchors);// 0x38900c8
	void SetAlignment(Vector2D InAlignment);// 0x3890058
	int GetZOrder();// 0x3890030
	Vector2D GetSize();// 0x388fff0
	Vector2D GetPosition();// 0x388ffb0
	Margin GetOffsets();// 0x388ff6c
	AnchorData GetLayout();// 0x388ff18
	bool GetAutoSize();// 0x388fef0
	Anchors GetAnchors();// 0x388feac
	Vector2D GetAlignment();// 0x388fe6c
	bool GeSupportNotch();// 0x388fe44

--------------------------------
Class: ActorVectorPair
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Vector Vector;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ScreenRotationMarkManager.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	<int,ScreenRotationMarkGroupData> ScreenRotationMarkGroupMap;//[Offset: 0x6c, Size: 60]
	Vector PlayerLoc;//[Offset: 0xa8, Size: 12]
	Vector PlayerDir;//[Offset: 0xb4, Size: 12]
	class Widget* ImageType;//[Offset: 0x1bc, Size: 4]
	void UpdateBindingLocationWidgetRender(int ID, out ScreenRotationMarkGroupData GroupData);// 0x20dbccc
	void UpdateBindingLocationWidget(int ID, out ScreenRotationMarkGroupData GroupData);// 0x20dbb58
	void UpdateBindingActorWidgetRender(int ID, out ScreenRotationMarkGroupData GroupData);// 0x20db9e4
	void UpdateBindingActorWidget(int ID, out ScreenRotationMarkGroupData GroupData);// 0x20db870
	void UnbindLocation(out const Vector BingdingLoction, int ID);// 0x20db7a4
	void UnbindActor(Actor* BindingObject, int ID);// 0x20db6e8
	void ReleaseGroupByID(int ID);// 0x20db670
	bool RecycleBindWidget(Widget* BindWidget, int ID);// 0x20db5ac
	void OnInit();// 0x20db598
	bool InitMarkGroupData(int ID, bool bIsAsync);// 0x20db4cc
	Widget* GetWidgetByActor(int ID, const Actor* Actor);// 0x20db408
	Widget* FetchUI(int ID, out ScreenRotationMarkGroupData GroupData);// 0x20db28c
	enum CheckWidgetDisAndAngleValid(Vector TargetLoc, out ScreenRotationMarkGroupData GroupData, out float Angle, out float Distance);// 0x20db064
	bool BindToLoc(out const Vector BingdingLoction, int ID);// 0x20daf90
	bool BindToActor(Actor* BindingObject, int ID);// 0x20daecc

--------------------------------
Class: ScreenRotationMarkGroupData
	ScreenRotationMarkConfig Config;//[Offset: 0x0, Size: 72]
	UIDuplicatedItemPool* UIPool;//[Offset: 0x48, Size: 4]
	Actor*[] WorldObjectArr;//[Offset: 0x4c, Size: 12]
	Vector[] WorldLocationArr;//[Offset: 0x58, Size: 12]
	Widget*[] HidingUIArr;//[Offset: 0x64, Size: 12]
	Widget*[] ShowingUIArr;//[Offset: 0x70, Size: 12]
	<Actor*,Widget*> BindingActorUIMap;//[Offset: 0x7c, Size: 60]
	<Vector,Widget*> BindingLocationUIMap;//[Offset: 0xb8, Size: 60]
	CanvasPanel* RootPanel;//[Offset: 0xf4, Size: 4]

--------------------------------
Class: ScreenRotationMarkConfig
	ScreenRotationRangeValue DistanceRange;//[Offset: 0x0, Size: 16]
	ScreenRotationRangeValue AngleRange;//[Offset: 0x10, Size: 16]
	Actor* BindActor;//[Offset: 0x20, Size: 8]
	FString UIPathName;//[Offset: 0x28, Size: 12]
	float AngleOffset;//[Offset: 0x34, Size: 4]
	bool bIsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bIsBindingActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	float UpdateBindingInterval;//[Offset: 0x3c, Size: 4]
	int DefaultNum;//[Offset: 0x40, Size: 4]
	float Radius;//[Offset: 0x44, Size: 4]

--------------------------------
Class: ScreenRotationRangeValue
	float MaxValue;//[Offset: 0x0, Size: 4]
	bool IsCloseOutMaxValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float MinValue;//[Offset: 0x8, Size: 4]
	bool IsCloseInMinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: MapUIBase.Object
	delegate OnSetupUIMarkRoot;//[Offset: 0x1c, Size: 12]
	delegate OnUpdateMark;//[Offset: 0x28, Size: 12]
	delegate OnUpdateMultiMark;//[Offset: 0x34, Size: 12]
	delegate OnRepositionItemOnMap;//[Offset: 0x40, Size: 12]
	CanvasPanel* m_pMarkRoot;//[Offset: 0x4c, Size: 4]
	CanvasPanel*[] CustomTagMarkRootMap;//[Offset: 0x50, Size: 12]
	<int,MapUIMarkBaseWidget*> AllUIMarks;//[Offset: 0x5c, Size: 60]
	<int,MapImageMarkData> AllImageMarks;//[Offset: 0x98, Size: 60]
	bool bMapDynamicScaleDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool bRepositionMarkerAndPinDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	Vector LevelLandScapeCenterC;//[Offset: 0x114, Size: 12]
	Vector2D SelfMarkerAligmentC;//[Offset: 0x120, Size: 8]
	CanvasPanel* CanvasPanel_ShowAirPlaneRoute;//[Offset: 0x128, Size: 4]
	bool bIsShowAirPlaneRouteAfteHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	FString[] InnerCircleGameModeIDC;//[Offset: 0x130, Size: 12]
	FakeRadiationCircle* InnerCircle;//[Offset: 0x13c, Size: 4]
	float ImageBlueCircleScale;//[Offset: 0x140, Size: 4]
	MapRealTimeInfo MapRealTimeInfoC;//[Offset: 0x144, Size: 240]
	MapRealTimeInfo CacheMapRealTimeInfoC;//[Offset: 0x234, Size: 240]
	MapDataBase* CurrentMapData;//[Offset: 0x324, Size: 8]
	UserWidget* BindWidget;//[Offset: 0x32c, Size: 8]
	MapObjct* ParentMapObject;//[Offset: 0x334, Size: 8]
	Vector LandscapeCenterCpp;//[Offset: 0x33c, Size: 12]
	float LevelToMapScaleC;//[Offset: 0x348, Size: 4]
	float MapScaleCpp;//[Offset: 0x34c, Size: 4]
	Vector2D MapImageSizeCpp;//[Offset: 0x350, Size: 8]
	float MapScalingRadio;//[Offset: 0x358, Size: 4]
	int LocalPlayerIndexC;//[Offset: 0x35c, Size: 4]
	float MapImageExtentC;//[Offset: 0x360, Size: 4]
	float MapWindowExtentC;//[Offset: 0x364, Size: 4]
	bool bNeedDrawSelfGuideLineC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	bool bNeedDrawSelfGuideLineOutC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 1]
	LinearColor GuideLineColor;//[Offset: 0x36c, Size: 16]
	LinearColor WhiteCircleColorC;//[Offset: 0x37c, Size: 16]
	bool IsAntiAliasC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	float GuideLineDashSizeC;//[Offset: 0x390, Size: 4]
	float DefaultLineThicknessC;//[Offset: 0x394, Size: 4]
	bool bNeedDrawWhiteCircleC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	bool bNeedDrawCircleGuideLineC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 1]
	Vector2D MapAdjustLocation;//[Offset: 0x39c, Size: 8]
	CanvasPanel* PlayerAddPanel;//[Offset: 0x3a4, Size: 8]
	CanvasPanel* ExtraAddBottomPanel;//[Offset: 0x3ac, Size: 8]
	CanvasPanel* ExtraAddTopPanel;//[Offset: 0x3b4, Size: 8]
	bool bDrawOrHideAirDropPathDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool bIsDrawAirDropFlightPathBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 1]
	int AirDropIndex;//[Offset: 0x3c0, Size: 4]
	STExtraGameStateBase* CacheGameState;//[Offset: 0x3c8, Size: 8]
	void UpdatePlayersLocAndRotC(STExtraPlayerController* STEPC, STExtraPlayerState* STEPS, STExtraGameStateBase* STEGS);// 0x1fb505c
	void UpdateMultiMarkC(int Index, out const Vector2D[] MultiMarkLocs, bool IsShow, float Opacity);// 0x20475f4
	void UpdateMarkC(int Index, Vector2D FLoc, bool IsShow, float Opacity);// 0x20474a4
	void TickWidget(out const Geometry MyGeometry, float InDeltaTime);// 0x1fb4f64
	void ShowOrHideLegendMarks(FString Tag, bool bIsShow);// 0x20472fc
	void SetupUIMarkRoot();// 0x20472e8
	void RepositionMapMultiMarkC(int PlayerIndex, Vector2D CurSize);// 0x2047234
	void RepositionMapMarkC(int FIndex, int LocalPlayerIndex, Vector2D CurSize);// 0x2047134
	void RedrawAllMapMarkC(Vector2D CurSize);// 0x20470c4
	void ReCalMapInfoC();// 0x20470b0
	void OnUpdateUIMarks();// 0x2047094
	void OnUpdateImageMarks();// 0x1f1ee34
	void OnPaint(PaintContext InContext);// 0x2047000
	void InitMap(MapDataBase* InMapData, UserWidget* InUserWidget);// 0x1fb4e50
	World* GetWorldInternal();// 0x2046fd8
	float GetLevelToMapScale();// 0x1fb4e20
	STExtraGameStateBase* GetGameState();// 0x2046f90

--------------------------------
Class: MapUIMarkBaseWidget.LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool bLimitedInMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	bool isUpdateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x372, Size: 1]
	bool bDoCallFunctionWhenEnterEntireMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x373, Size: 1]
	bool bDoUsSelfZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	Vector2D LimitedSize;//[Offset: 0x378, Size: 8]
	int DefaultZOrder;//[Offset: 0x380, Size: 4]
	TextBlock* CountDownText;//[Offset: 0x384, Size: 4]
	FString CountDownFormat;//[Offset: 0x388, Size: 12]
	CanvasPanelSlot* ChangeSizeSlot;//[Offset: 0x3a8, Size: 4]
	float OriginSizeX;//[Offset: 0x3b0, Size: 4]
	float OriginSizeY;//[Offset: 0x3b4, Size: 4]
	UpdateStateChangePorperty[] UpdateStatePropertyArray;//[Offset: 0x3bc, Size: 12]
	void UpdateUIBPState(out const CustomMarkEventData InState);// 0x2049e10
	void UpdateMarkSize(float inScale);// 0x1f76444
	void UpdateMarkPosition(Vector2D NewMapPos, Vector2D MapAdjustOffset, float Angle, float MapWindowHalfExtent);// 0x2049cc0
	bool ShouldLimitedInMinimap();// 0x2049c98
	void SetWidgetCurRotation(Rotator WorldRot3D);// 0x2049c28
	void SetWidgetCurPostion(Vector WorldPos3D);// 0x2049bb8
	void SetUpdatePropertyArray(out const UpdateStateChangePorperty[] PropertyArray, int InitState);// 0x2049a6c
	void SetCountDwonText(TextBlock* TextBlock, int TotalSecond, bool IsShowZero, FString Format);// 0x2049830
	void SetChangeSizePanel(float SizeX, float SizeY, bool IsChangeSize, bool IsChangeInUpdate, float Ratio);// 0x204968c
	void RefreshPanelScale(float Scale);// 0x2049614
	void RefreshCountDownText();// 0x2049600
	void OnWidgetShow(out const CustomMarkEventData InState);// 0x2049514
	void OnUpdateState(out const CustomMarkEventData InState);// 0x2049428
	void OnUpdateMarkSize(float Scale, float Ratio);// 0x204936c
	void OnUpdateIconMap(int NewState);// 0x20492f4
	void OnUIBPShow(out const CustomMarkEventData InState);// 0x2049200
	void OnUIBPDestroy();// 0x20491e4
	void OnUIBPCreate(out const CustomMarkEventData InState, byte ParentState);// 0x20490a8
	void OnEnterEntireMap();// 0x2bb69b8
	Rotator GetWidgetCurWorldRot();// 0x2049060
	Vector GetWidgetCurWorldPos();// 0x2049018

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0xf0, Size: 12]
	delegate TextDelegate;//[Offset: 0x100, Size: 16]
	SlateColor ColorAndOpacity;//[Offset: 0x110, Size: 28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x130, Size: 16]
	SlateColor SelectColorAndOpacity;//[Offset: 0x140, Size: 28]
	SlateColor NoSelectColorAndOpacity;//[Offset: 0x15c, Size: 28]
	bool bHaveSelectColorAndOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	SlateFontInfo Font;//[Offset: 0x180, Size: 64]
	Vector2D ShadowOffset;//[Offset: 0x1c0, Size: 8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x1c8, Size: 16]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x1d8, Size: 16]
	float MinDesiredWidth;//[Offset: 0x1e8, Size: 4]
	bool AutoEllipsisText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 1]
	void SetVerticalJustification(byte InJustification);// 0x38a786c
	void SetText(FText InText);// 0x38a75bc
	void SetShadowOffset(Vector2D InShadowOffset);// 0x38a754c
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x38a74d0
	void SetSelectColor(bool bIsSelect);// 0x38a7450
	void SetOpacity(float InOpacity);// 0x38a73d8
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x38a7360
	void SetJustification(byte InJustification);// 0x38a72e8
	void SetFont(SlateFontInfo InFontInfo);// 0x38a6fd0
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x38a6cb0
	void SetAutoEllipsisText(bool InAutoEllipsisText);// 0x38a6c30
	FText GetText();// 0x38a6ad4

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xcc, Size: 4]
	byte Justification;//[Offset: 0xd0, Size: 1]
	byte VerticalJustification;//[Offset: 0xd1, Size: 1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	float WrapTextAt;//[Offset: 0xd4, Size: 4]
	enum WrappingPolicy;//[Offset: 0xd8, Size: 1]
	Margin Margin;//[Offset: 0xdc, Size: 16]
	float LineHeightPercentage;//[Offset: 0xec, Size: 4]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 4]
	Object* FontMaterial;//[Offset: 0x4, Size: 4]
	FontOutlineSettings OutlineSettings;//[Offset: 0x8, Size: 28]
	FName TypefaceFontName;//[Offset: 0x30, Size: 8]
	int Size;//[Offset: 0x38, Size: 4]
	bool IsBold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 4]
	Object* OutlineMaterial;//[Offset: 0x4, Size: 4]
	LinearColor OutlineColor;//[Offset: 0x8, Size: 16]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 1]

--------------------------------
Class: UpdateStateChangePorperty
	Widget* UpdateWidget;//[Offset: 0x0, Size: 4]
	FString[] IconPathArray;//[Offset: 0x4, Size: 12]
	enum[] IconVisibleArray;//[Offset: 0x10, Size: 12]
	LinearColor[] IconColorArray;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: MapImageMarkData
	int ConfigID;//[Offset: 0x0, Size: 4]
	Image* Image;//[Offset: 0x4, Size: 4]
	Vector CurrentWorldPos;//[Offset: 0x8, Size: 12]
	Rotator CurrentWorldRot;//[Offset: 0x14, Size: 12]
	Vector2D OriginalSize;//[Offset: 0x20, Size: 8]
	bool bIsUpdateSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	Vector2D MaxSize;//[Offset: 0x2c, Size: 8]

--------------------------------
Class: FakeRadiationCircle.Actor.Object

--------------------------------
Class: MapRealTimeInfo
	Vector2D MapCenterToPlayer;//[Offset: 0x0, Size: 8]
	Vector MapCenterToBlueCircle;//[Offset: 0x8, Size: 12]
	Vector MapCenterToWhiteCircle;//[Offset: 0x14, Size: 12]
	Vector2D PlayerCoord;//[Offset: 0x20, Size: 8]
	Vector2D SpectatedPlayerCoord;//[Offset: 0x28, Size: 8]
	Vector2D WhiteCircleCoord;//[Offset: 0x30, Size: 8]
	Vector2D BlueCircleCoord;//[Offset: 0x38, Size: 8]
	float WhiteCircleRadius;//[Offset: 0x40, Size: 4]
	float BlueCircleRadius;//[Offset: 0x44, Size: 4]
	Vector2D LastDriveVehicleCoord;//[Offset: 0x48, Size: 8]
	bool bCanPlayerSeeLastVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	AirplaneRouteData PlaneRouteData;//[Offset: 0x54, Size: 100]
	AirDropPathData AirDropPathData;//[Offset: 0xb8, Size: 56]

--------------------------------
Class: AirplaneRouteData
	float PlaneFlyingProcess;//[Offset: 0x0, Size: 4]
	Vector2D CanJumpLocInMap;//[Offset: 0x4, Size: 8]
	Vector2D ForceJumpLocInMap;//[Offset: 0xc, Size: 8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 4]
	Vector2D PlaneLocInMap;//[Offset: 0x1c, Size: 8]
	float PlaneRotation;//[Offset: 0x24, Size: 4]
	AirDropPathData[] AirDropPaths;//[Offset: 0x28, Size: 12]
	Vector2D CanJumpLocInMapForCamp;//[Offset: 0x34, Size: 8]
	Vector2D ForceJumpLocInMapForCamp;//[Offset: 0x3c, Size: 8]
	float CampRouteLengthInMap;//[Offset: 0x44, Size: 4]
	float CampRouteWidgetRotateAngle;//[Offset: 0x48, Size: 4]
	Vector2D LastValidCanJumpLocInMap;//[Offset: 0x4c, Size: 8]
	Vector2D LastValidForceJumpLocInMap;//[Offset: 0x54, Size: 8]
	float LastValidRouteWidgetRotateAngle;//[Offset: 0x5c, Size: 4]
	float LastValidRouteLengthInMap;//[Offset: 0x60, Size: 4]

--------------------------------
Class: AirDropPathData
	int AirDropIndex;//[Offset: 0x0, Size: 4]
	Vector2D StartLoc;//[Offset: 0x4, Size: 8]
	Vector2D TargetLoc;//[Offset: 0xc, Size: 8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 4]
	Vector2D[] AirDropLocs;//[Offset: 0x1c, Size: 12]
	Vector[] AirDropLocs3D;//[Offset: 0x28, Size: 12]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: MapDataBase.Object
	Widget*[] PlayerInfoRotWidgetArrayC;//[Offset: 0x1c, Size: 12]
	Widget*[] PlayerInfoBPArrayC;//[Offset: 0x28, Size: 12]
	Widget*[] PlayerMarkBPArrayC;//[Offset: 0x34, Size: 12]
	MapUIBase* CurrentMapUI;//[Offset: 0x40, Size: 4]
	STExtraGameStateBase* CacheGameState;//[Offset: 0x44, Size: 8]
	void Init(MapUIBase* INMapUI);// 0x2046168
	World* GetWorldInternal();// 0x2046140
	STExtraGameStateBase* GetGameState();// 0x20460f8

--------------------------------
Class: MapObjct.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	MapUIBase* CurrentHoldMapUI;//[Offset: 0x6c, Size: 8]
	World* GetWorldInternal();// 0x204840c
	void DrawCircle(Vector2D CircleCenter, LinearColor CircleColor, float CircleRadius, float MapWindowExtent, Vector2D PlayerCoord, byte MapType, bool bAntiAlias);// 0x20481cc

--------------------------------
Class: MarkActorInstInfo
	int UIBPInstID;//[Offset: 0x0, Size: 4]

--------------------------------
Class: UIBPAsyncParams
	MarkSyncData MarkData;//[Offset: 0x4, Size: 96]
	class Widget* UIIconSoftPtr;//[Offset: 0x68, Size: 40]
	class MapUIMarkBaseWidget* UIBPSoftPtr;//[Offset: 0x90, Size: 40]
	class Object* UIClass;//[Offset: 0xb8, Size: 4]

--------------------------------
Class: MapMarkConfig
	int ConfigID;//[Offset: 0x0, Size: 4]
	FString UIPath;//[Offset: 0x4, Size: 12]
	bool bIsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	Vector2D Size;//[Offset: 0x14, Size: 8]
	bool bIsUpdateSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	Vector2D MaxSize;//[Offset: 0x20, Size: 8]
	int ZOrder;//[Offset: 0x28, Size: 4]
	bool bIsControlByLegend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	FString LegendTags;//[Offset: 0x30, Size: 12]

--------------------------------
Class: WidgetToRenderTarget.Object
	<FName,TextureRenderTarget2DManagerWidgetInfo> NameToTextureRenderTarget2DManagerWidgetInfos;//[Offset: 0x1c, Size: 60]
	DrawTextToTextureRenderTarget2DParams[] CachedParams;//[Offset: 0x58, Size: 12]
	void ReleaseCachedParams();// 0x230bdb0
	bool ReceivePreDrawTextToTextureRenderTarget2DAsync(out DrawTextToTextureRenderTarget2DParams Params);// 0x2bb69b8
	void ReceivePostDrawTextToTextureRenderTarget2DAsync(out const DrawTextToTextureRenderTarget2DParams Params);// 0x2bb69b8
	void DrawTextToTextureRenderTarget2DAsync(out const DrawTextToTextureRenderTarget2DParams Params, out const delegate OnWidgetToRenderTargetDrawn);// 0x230bab0

--------------------------------
Class: TextureRenderTarget2DManagerWidgetInfo
	class UserWidget* UserWidgetClass;//[Offset: 0x0, Size: 40]
	class UserWidget* LoadedUserWidgetClass;//[Offset: 0x28, Size: 4]
	UserWidget* UserWidget;//[Offset: 0x2c, Size: 4]
	FName UpdateWidgetFunctionName;//[Offset: 0x30, Size: 8]

--------------------------------
Class: DrawTextToTextureRenderTarget2DParams
	FText Text;//[Offset: 0x0, Size: 12]
	FName WidgetName;//[Offset: 0x10, Size: 8]
	int DrawWidth;//[Offset: 0x18, Size: 4]
	int DrawHeight;//[Offset: 0x1c, Size: 4]
	TextureRenderTarget2D* OptionalInOutTextureRenderTarget2D;//[Offset: 0x20, Size: 4]
	bool bMaterialInstanceDynamicCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x28, Size: 40]
	FName TextureParameterName;//[Offset: 0x50, Size: 8]
	MaterialInstanceDynamic* OptionalInOutMaterialInstanceDynamic;//[Offset: 0x58, Size: 4]
	FString Payload;//[Offset: 0x5c, Size: 12]
	bool bParamsCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]

--------------------------------
Class: GameStateWeaponRule
	bool bForbidShootTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CheckForbidShootTime;//[Offset: 0x4, Size: 4]
	class Actor[] ForbidShootClassArray;//[Offset: 0x8, Size: 12]
	class Actor[] SwallowBulletClassArray;//[Offset: 0x14, Size: 12]

--------------------------------
Class: AirAttackOrder
	int waveIndex;//[Offset: 0x0, Size: 4]
	float FlightHeight;//[Offset: 0x4, Size: 4]
	float SeaLevelHeight;//[Offset: 0x8, Size: 4]
	uint16[] bombsInterval;//[Offset: 0xc, Size: 12]
	uint16 BombBaseDamage;//[Offset: 0x18, Size: 2]
	uint16 BombMinDamage;//[Offset: 0x1a, Size: 2]
	Vector2D[] bombsPosition2D;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: ScreenAppearanceCfg
	bool UseScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString ScreenAppearanceName;//[Offset: 0x4, Size: 12]
	byte ParticleType;//[Offset: 0x10, Size: 1]
	float ScreenAppearanceConcentration;//[Offset: 0x14, Size: 4]
	FName ShaderName;//[Offset: 0x18, Size: 8]

--------------------------------
Class: WeatherFogCfg
	enum[] WeatherTypeList;//[Offset: 0x0, Size: 12]
	ExponentialHeightFog* Fog;//[Offset: 0xc, Size: 4]
	WeatherDstFog DstWeatherFog;//[Offset: 0x10, Size: 20]
	WeatherSrcFog SrcWeatherFog;//[Offset: 0x24, Size: 12]
	float blendTime;//[Offset: 0x30, Size: 4]
	DynamicWeatherController*[] WeatherControllerList;//[Offset: 0x38, Size: 12]

--------------------------------
Class: WeatherDstFog
	bool UseStartDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float StartDistance;//[Offset: 0x4, Size: 4]
	bool UseDensityCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float CustomFogLow_DensityCoefficient;//[Offset: 0xc, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeatherSrcFog
	float StartDistance;//[Offset: 0x0, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x4, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PlayerKeyDstWeather
	STExtraPlayerController* PC;//[Offset: 0x0, Size: 4]

--------------------------------
Class: WeaponHitDetailInfo
	int TotalShootNum;//[Offset: 0x0, Size: 4]
	int[] HitNumEveryBodys;//[Offset: 0x4, Size: 12]

--------------------------------
Class: LastGameRemainItemData
	FName TombName;//[Offset: 0x0, Size: 8]
	Vector DropGroundPoint;//[Offset: 0x8, Size: 12]
	FString TargetPlayerUID;//[Offset: 0x14, Size: 12]
	RemainItemData[] RemainItemDataList;//[Offset: 0x20, Size: 12]

--------------------------------
Class: RemainItemData
	int ItemId;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x8, Size: 12]
	int SlotID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: ParachuteData
	uint64 UId;//[Offset: 0x0, Size: 8]
	float SlideDuration;//[Offset: 0x8, Size: 4]
	byte FollowState;//[Offset: 0xc, Size: 1]
	Vector ClientLandLocation;//[Offset: 0x10, Size: 12]
	Vector ClientLocation;//[Offset: 0x1c, Size: 12]
	Vector ServerLandLocation;//[Offset: 0x28, Size: 12]
	float SlideStartTime;//[Offset: 0x34, Size: 4]
	float SlideEndTime;//[Offset: 0x38, Size: 4]
	FString InputCount;//[Offset: 0x3c, Size: 12]
	FString PositionCheck;//[Offset: 0x48, Size: 12]
	FString ClientPositionDiff;//[Offset: 0x54, Size: 12]
	float LastCorrectionTime;//[Offset: 0x60, Size: 4]
	float LastCorrectionHeight;//[Offset: 0x64, Size: 4]
	Vector LastCorrectionLocation;//[Offset: 0x68, Size: 12]
	Vector LastCorrectedLocation;//[Offset: 0x74, Size: 12]

--------------------------------
Class: BattleOpenSequencerInfo
	Transform StartPosition;//[Offset: 0x0, Size: 48]
	VehicleWarStartVehicleInfo[] VehicleInfoList;//[Offset: 0x30, Size: 12]
	float Time;//[Offset: 0x3c, Size: 4]
	float ServerStartTimestamp;//[Offset: 0x40, Size: 4]

--------------------------------
Class: VehicleWarStartVehicleInfo
	Vector Position;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	STExtraVehicleBase* Vehicle;//[Offset: 0x18, Size: 4]
	VehicleWarStartVehiclePlayerInfo DriverInfo;//[Offset: 0x1c, Size: 12]
	VehicleWarStartVehiclePlayerInfo PassengerInfo;//[Offset: 0x28, Size: 12]

--------------------------------
Class: VehicleWarStartVehiclePlayerInfo
	int upassLevel;//[Offset: 0x0, Size: 4]
	int upassScore;//[Offset: 0x4, Size: 4]
	STExtraBaseCharacter* BasePlayer;//[Offset: 0x8, Size: 4]

--------------------------------
Class: StartFireInfo
	uint32 CurShootID;//[Offset: 0x0, Size: 4]
	uint32 CurClipID;//[Offset: 0x4, Size: 4]
	int CurBulletNumInClip;//[Offset: 0x8, Size: 4]
	byte ShootMode;//[Offset: 0xc, Size: 1]
	float StartFireTime;//[Offset: 0x10, Size: 4]
	double StartFireSysTime;//[Offset: 0x18, Size: 8]

--------------------------------
Class: STExtraExplosionEffect.Actor.Object
	ParticleSystem* FarComplexEffect;//[Offset: 0x2fc, Size: 4]
	ParticleSystem* NearSimpleEffect;//[Offset: 0x300, Size: 4]
	float NearToFarDistance;//[Offset: 0x304, Size: 4]
	AkAudioEvent* ExplosionSound;//[Offset: 0x308, Size: 4]
	float PlayEffectDelayTime;//[Offset: 0x30c, Size: 4]
	HitResult SurfaceHit;//[Offset: 0x310, Size: 136]
	bool bPlayFallbackEffectIfFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]

--------------------------------
Class: SACData
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0x0, Size: 12]
	LocalShootHitData[] ShootHitDataArray;//[Offset: 0xc, Size: 12]
	ShootTimeData[] ShootTimeDatas;//[Offset: 0x18, Size: 12]
	int ShootTimes;//[Offset: 0x24, Size: 4]
	byte[] TssSdkAntiData;//[Offset: 0x28, Size: 12]
	int TssSdkAntiDataLen;//[Offset: 0x34, Size: 4]
	int NetworkStatus;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ShootTimeData
	Vector ShootPos;//[Offset: 0x0, Size: 12]
	Vector GunPos;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormalSv MuzzleDir;//[Offset: 0x18, Size: 12]
	uint32 ShootID;//[Offset: 0x24, Size: 4]
	uint64 CurrentStates;//[Offset: 0x28, Size: 8]
	byte CapsuleHalfHeight;//[Offset: 0x30, Size: 1]
	float SkeletonLength;//[Offset: 0x34, Size: 4]
	ShootTimeInfo_NetQuantize ShootInfo;//[Offset: 0x40, Size: 64]
	double ShootSystemTime;//[Offset: 0x80, Size: 8]
	byte ShootTimeConDelta;//[Offset: 0x88, Size: 1]
	float ShootLevelTime;//[Offset: 0x8c, Size: 4]
	Vector GunTailPos;//[Offset: 0x90, Size: 12]
	byte ShotFlags;//[Offset: 0x9c, Size: 1]

--------------------------------
Class: Vector_NetQuantizeNormalSv.Vector

--------------------------------
Class: ShootTimeInfo_NetQuantize

--------------------------------
Class: HitTargetExtraData
	byte PlatForm;//[Offset: 0x0, Size: 1]
	int CharacterReplicatID;//[Offset: 0x4, Size: 4]
	int CharacterMovementReplicatID;//[Offset: 0x8, Size: 4]
	float LastReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0xc, Size: 4]
	float LastReplicatedTimePass;//[Offset: 0x10, Size: 4]
	float CapsulePreMoveDistance;//[Offset: 0x14, Size: 4]
	float MeshOffsetDistance;//[Offset: 0x18, Size: 4]
	float AverageFPS;//[Offset: 0x1c, Size: 4]
	float ImpactFrameDeltaTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: STExtraFireBalloon.Actor.Object
	BoxComponent* RootCollision;//[Offset: 0x348, Size: 4]
	StaticMeshComponent* BalloonMesh;//[Offset: 0x34c, Size: 4]
	FireBalloonMovementComponent* Movement;//[Offset: 0x350, Size: 4]
	int MapMarkTypeID;//[Offset: 0x354, Size: 4]
	enum MapMarkFlag;//[Offset: 0x358, Size: 1]
	Pawn* Driver;//[Offset: 0x360, Size: 4]
	float MoveUpValue;//[Offset: 0x364, Size: 4]
	byte MovementSmoothMode;//[Offset: 0x3a0, Size: 1]
	float MovementSmoothAlpha;//[Offset: 0x3a4, Size: 4]
	float MoveUpScale;//[Offset: 0x3a8, Size: 4]
	bool bAutoFallOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	float AutoFallOffSpeed;//[Offset: 0x3b0, Size: 4]
	Vector ControlInputVector;//[Offset: 0x3b4, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x3c0, Size: 12]
	float TickInterval;//[Offset: 0x3cc, Size: 4]
	FString LuaFilePath;//[Offset: 0x3d4, Size: 12]
	Vector2D FObservationArea;//[Offset: 0x3e0, Size: 8]
	bool bIsInObservationArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	void SetParachuteServerAuthorized(Pawn* InPawn);// 0x219e080
	void SetMoveUpValue(float InMoveUpValue);// 0x219e008
	void SetDriver(Pawn* InPawn);// 0x1edacf4
	void OnRep_Driver(Pawn* PrevDriver);// 0x1ecc424
	Pawn* GetDriver();// 0x219dfec
	void CheckWishTask();// 0x2bb69b8
	bool CanBeDriver(Pawn* InPawn);// 0x219df64
	void BPUpdateUIVisible();// 0x2bb69b8
	void BPUpdateObservationArea();// 0x2bb69b8
	void BPSetPlayCameraOffsetData(float FAlpha, bool IsUpdateCameraLocation);// 0x2bb69b8
	bool BlueprintIsNetRelevantFor(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0x2bb69b8

--------------------------------
Class: FireBalloonMovementComponent.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	enum MaxFlyHeightType;//[Offset: 0x135, Size: 1]
	float MaxFlyHeight;//[Offset: 0x138, Size: 4]
	float InitialMaxTarceDist;//[Offset: 0x13c, Size: 4]
	Vector InitialLocation;//[Offset: 0x140, Size: 12]
	delegate OnFireBalloonImpactDelegate;//[Offset: 0x14c, Size: 12]
	Actor* ActorOwner;//[Offset: 0x158, Size: 4]
	void SetSkipUpdate(bool bNewValue);// 0x219db24
	void ReceiveOnImpact(out const HitResult Hit, float TimeSlice, out const Vector MoveDelta);// 0x2bb69b8
	void OnFireBalloonImpactDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x2bb69b8
	float GetMaxFlyHeight();// 0x219dafc

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x124, Size: 4]
	float Acceleration;//[Offset: 0x128, Size: 4]
	float Deceleration;//[Offset: 0x12c, Size: 4]
	float TurningBoost;//[Offset: 0x130, Size: 4]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x134, Size: 1]

--------------------------------
Class: DeviceInfo
	FString GPUFamily;//[Offset: 0x0, Size: 12]
	FString GLVersion;//[Offset: 0xc, Size: 12]
	FString OSVersion;//[Offset: 0x18, Size: 12]
	FString DeviceMake;//[Offset: 0x24, Size: 12]
	FString DeviceModel;//[Offset: 0x30, Size: 12]
	FString VulkanVersion;//[Offset: 0x3c, Size: 12]
	FString MemorySizeInGB;//[Offset: 0x48, Size: 12]
	FString OpenID;//[Offset: 0x54, Size: 12]

--------------------------------
Class: SeekAndLockRPGBulletUploadData
	byte SeekAndLockStageType;//[Offset: 0x0, Size: 1]
	Actor* SeekAndLockTarget;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRemainTombBox.PlayerTombBox.LuaActor.Actor.Object
	FString TargetPlayerUID;//[Offset: 0x47c, Size: 12]
	int MiniMapIconID;//[Offset: 0x488, Size: 4]
	int MiniMapInstanceID;//[Offset: 0x48c, Size: 4]
	bool bIsSearchedRemainBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	void OnRep_IsSearchedRemainBox();// 0x20a0a24
	void HandleBoxIsSearched();// 0x1f98814

--------------------------------
Class: WarPlayerStateScore
	int Rank;//[Offset: 0x0, Size: 4]
	int Score;//[Offset: 0x4, Size: 4]
	enum ScoreChangeReason;//[Offset: 0x8, Size: 1]
	int ScoreChangeCauserPlayerID;//[Offset: 0xc, Size: 4]
	int HighestScore;//[Offset: 0x10, Size: 4]
	int FollowScore;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleMoveFlow
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	FString OpenID;//[Offset: 0x8, Size: 12]
	int8 PlatID;//[Offset: 0x14, Size: 1]
	uint16 AreaID;//[Offset: 0x16, Size: 2]
	FString ZoneID;//[Offset: 0x18, Size: 12]
	VehicleMovePoint[] PointList;//[Offset: 0x24, Size: 12]

--------------------------------
Class: VehicleMovePoint
	uint32 UniqueId;//[Offset: 0x0, Size: 4]
	int8 Type;//[Offset: 0x4, Size: 1]
	int X;//[Offset: 0x8, Size: 4]
	int Y;//[Offset: 0xc, Size: 4]
	int Z;//[Offset: 0x10, Size: 4]
	int Speed;//[Offset: 0x14, Size: 4]
	int8 VehicleN2oUse;//[Offset: 0x18, Size: 1]
	int8 VehicleCarPetUse;//[Offset: 0x19, Size: 1]
	int VehicleMoveDistance;//[Offset: 0x1c, Size: 4]
	int TimeStamp;//[Offset: 0x20, Size: 4]
	int8 RoleType;//[Offset: 0x24, Size: 1]

--------------------------------
Class: WeaponHitDisanceSectionArray
	int[] SectionArray;//[Offset: 0x0, Size: 12]
	int CaculateType;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SIslandInactiveClearComponent.ActorComponent.Object
	float ComponentTickInterval;//[Offset: 0xbc, Size: 4]
	float InactiveCheckGap;//[Offset: 0xc0, Size: 4]
	float InactiveTimeForTipPreTime;//[Offset: 0xc8, Size: 4]
	float PreActiveTime;//[Offset: 0xcc, Size: 4]
	float ClientSendActiveRPCGap;//[Offset: 0xd4, Size: 4]
	bool bIsClientActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	enum SIslandActiveType;//[Offset: 0xd9, Size: 1]
	Vector PrePawnLoc;//[Offset: 0xdc, Size: 12]
	Rotator PreControllerRotation;//[Offset: 0xe8, Size: 12]
	delegate OnInactiveTipInSocialIslandDelegate;//[Offset: 0xf4, Size: 12]
	void ServerMarkPlayerActive();// 0x20f5b30
	void OnInactiveTipInSocialIslandDelegate__DelegateSignature(float RemainTime);// 0x2bb69b8
	void MarkPlayerActive();// 0x20f5b1c
	void KickOutPlayer();// 0x20f5b08
	void ClientShowKickOutTip(float RemainTime);// 0x1ebef5c
	void ClientCachedActiveState();// 0x20f5af4
	bool CheckForMovement();// 0x20f5acc
	void CheckForInactive();// 0x2066168

--------------------------------
Class: ObservingReplay.GameReplay.Object
	delegate OnRequestStreamsComplete;//[Offset: 0xd8, Size: 12]
	delegate OnKillInfoDownloadComplete;//[Offset: 0xe4, Size: 12]
	<FString,uint32> ReportSequenceMap;//[Offset: 0x104, Size: 60]
	FString ReplayServerURL;//[Offset: 0x158, Size: 12]
	byte TlogBatchVersion;//[Offset: 0x164, Size: 1]
	int64 TlogBatchMaxSize;//[Offset: 0x168, Size: 8]
	uint32 SendTlogInterval;//[Offset: 0x178, Size: 4]
	RecordTlogBatch RecordTlogBatch;//[Offset: 0x180, Size: 16]
	void RequestReplaysFromServer(FString URLString);// 0x2079a7c
	void ClearStreams();// 0x2079a68

--------------------------------
Class: GameReplay.Object
	UserWidget* GMUI;//[Offset: 0x24, Size: 4]
	class UserWidget* GMUIClass;//[Offset: 0x28, Size: 40]
	enum ReplayType;//[Offset: 0x50, Size: 1]
	bool bIsPausePlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	STExtraPlayerController* PlayerController;//[Offset: 0xc8, Size: 4]
	KillInfoRecordData[] RecordKillInfoDataArray;//[Offset: 0xcc, Size: 12]
	bool StopRecordingReplay();// 0x1f81ab4
	bool StopPlay();// 0x1ff7440
	bool StartRecordingReplay();// 0x1f81a70
	void SetSpectatorName(FString SpectatorName, bool bGM);// 0x1ff7298
	bool SetReplayTimeDilation(float InDilation);// 0x1ff7218
	void SetReplayStreamer(FString InReplayStreamer);// 0x1ff7080
	void SetIsGMSpectator(bool bGM);// 0x1ff7004
	void SetCurrentReplayTimeToSeconds(float Seconds);// 0x1ff6f8c
	void SetCanChangeViewTarget(bool bCanChange);// 0x1ff6f0c
	void ResetPlaybackData();// 0x1ff6ef8
	void ReplayUnbindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x1ff6e80
	void ReplayOnWeaponChanged();// 0x1ff6e6c
	void ReplayOnSimulatedWeaponChanged();// 0x1ff6e58
	void ReplayOnBulletNumChanged();// 0x1ff6e44
	void ReplayBindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x1ff6dcc
	bool PlayReplay();// 0x1ff6d9c
	bool PauseReplay(bool bPaused);// 0x1ff6d0c
	bool IsInRecordState();// 0x1ff6ce4
	bool IsInPlayState();// 0x1ff6cbc
	bool IsFastForwarding();// 0x1ff6c94
	bool HaveRecordingData();// 0x1ff6c64
	void HandleChangeStatePC();// 0x1ff6c50
	STExtraBaseCharacter* GetViewCharacter();// 0x1ff6c28
	FString GetSpectatorName();// 0x1f95fbc
	float GetReplayRecordStartTime();// 0x1ff6c00
	PlayerCameraManager* GetPlayerCameraManager();// 0x1ff6bd8
	float GetCurrentReplayTotalTimeInSeconds();// 0x1ff6bb0
	float GetCurrentReplayCurTimeInSeconds();// 0x1ff6b88
	bool GetCanChangeViewTarget();// 0x1ff6b60

--------------------------------
Class: KillInfoRecordData
	FString Killer;//[Offset: 0x0, Size: 12]
	FString Victim;//[Offset: 0xc, Size: 12]
	bool bKillDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	uint64 KillTimeStampDemoTime;//[Offset: 0x20, Size: 8]
	uint64 KillTimeStampGameTime;//[Offset: 0x28, Size: 8]
	FString SafeLabel;//[Offset: 0x30, Size: 12]
	int SafeParam1;//[Offset: 0x3c, Size: 4]
	int SafeParam2;//[Offset: 0x40, Size: 4]
	float RecordTimestamp;//[Offset: 0x44, Size: 4]

--------------------------------
Class: RecordTlogBatch
	byte Version;//[Offset: 0x0, Size: 1]
	RecordTlog[] TlogArray;//[Offset: 0x4, Size: 12]

--------------------------------
Class: RecordTlog
	FString UId;//[Offset: 0x0, Size: 12]
	byte EventId;//[Offset: 0xc, Size: 1]
	FString OpenID;//[Offset: 0x10, Size: 12]
	int64 TimeStamp;//[Offset: 0x20, Size: 8]
	float DSElapsedSeconds;//[Offset: 0x28, Size: 4]
	<FString,FString> KeyValueMap;//[Offset: 0x2c, Size: 60]

--------------------------------
Class: DailyTaskReportInfo
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]
	uint32 TaskSyncToDsTs;//[Offset: 0xc, Size: 4]
	DailyTaskStoreInfo[] TaskInfo;//[Offset: 0x10, Size: 12]
	DailyTaskAwardInfo[] RewardInfo;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: DailyTaskAwardInfo
	int TaskId;//[Offset: 0x0, Size: 4]
	TaskAwardItemInfo[] AwardList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: TaskAwardItemInfo
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FatalDamageParameter
	FatalDamageStringParameter String;//[Offset: 0x0, Size: 84]
	int DamageType;//[Offset: 0x54, Size: 4]
	int AdditionalParam;//[Offset: 0x58, Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int ResultHealthStatus;//[Offset: 0x60, Size: 4]
	int Relationship;//[Offset: 0x64, Size: 4]
	int PreviousHealthStatus;//[Offset: 0x68, Size: 4]
	int realKillerNewKillNum;//[Offset: 0x6c, Size: 4]
	uint32 causerKey;//[Offset: 0x70, Size: 4]
	uint32 victimKey;//[Offset: 0x74, Size: 4]
	int causerAnchorPlatformResID;//[Offset: 0x78, Size: 4]
	int causerAnchorPlatformColorID;//[Offset: 0x7c, Size: 4]
	int victimAnchorPlatformResID;//[Offset: 0x80, Size: 4]
	int victimAnchorPlatformColorID;//[Offset: 0x84, Size: 4]
	int realKillerAnchorPlatformResID;//[Offset: 0x88, Size: 4]
	int realKillerAnchorPlatformColorID;//[Offset: 0x8c, Size: 4]
	int CauserWeaponAvatarID;//[Offset: 0x90, Size: 4]
	int CauserClothAvatarID;//[Offset: 0x94, Size: 4]
	int CauserType;//[Offset: 0x98, Size: 4]
	int VictimType;//[Offset: 0x9c, Size: 4]
	byte[] ExpandDataContent;//[Offset: 0xa0, Size: 12]

--------------------------------
Class: FatalDamageStringParameter
	FString CauserName;//[Offset: 0x0, Size: 12]
	FString VictimName;//[Offset: 0xc, Size: 12]
	FString FuzzyCauserName;//[Offset: 0x18, Size: 12]
	FString FuzzyVictimName;//[Offset: 0x24, Size: 12]
	FString RealKillerName;//[Offset: 0x30, Size: 12]
	FString CauserNation;//[Offset: 0x3c, Size: 12]
	FString VictimNation;//[Offset: 0x48, Size: 12]

--------------------------------
Class: GameBackendHUD.BackendHUD.Object
	GameBackendUtils* GetUtils();// 0x1ed3c74
	static GameBackendHUD* GetInstance();// 0x262a294
	GameFrontendHUD* GetGameFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x262a214
	GameFrontendHUD* GetFirstGameFrontendHUD(const Object* WorldContextObject);// 0x262a194

--------------------------------
Class: BackendHUD.Object
	Engine* Engine;//[Offset: 0x1c, Size: 4]
	FString BackendUtilsClassName;//[Offset: 0x20, Size: 12]
	BackendUtils* Utils;//[Offset: 0x2c, Size: 4]
	FrontendHUD*[] FrontendHUDList;//[Offset: 0x30, Size: 12]
	<uint32,FrontendHUD*> FrontendHUDMap;//[Offset: 0x3c, Size: 60]
	FrontendHUD* GetFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x45c1544
	FrontendHUD* GetFrontendHUD(int FrontendHUDIndex);// 0x45c14c4

--------------------------------
Class: GameBackendUtils.BackendUtils.Object
	UAETableManager* GetTableManager();// 0x2629ee8

--------------------------------
Class: BackendUtils.Object
	BackendHUD* OwningBackendHUD;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: UAETableManager.Object
	FString TableRelativeDir;//[Offset: 0x1c, Size: 12]
	FName[] TablesNeedReleasedInBattle;//[Offset: 0x28, Size: 12]
	FString ManualTableDirectory;//[Offset: 0x34, Size: 12]
	bool AllowItemTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	UAEDataTable*[] TableObjList;//[Offset: 0x104, Size: 12]
	World* CurWorld;//[Offset: 0x110, Size: 4]
	<FName,UAEDataTable*> TableObjMap;//[Offset: 0x114, Size: 60]
	<FName,UAEDataTable*> TableObjMap_Mod;//[Offset: 0x150, Size: 60]
	delegate OnTableCreateInFighting;//[Offset: 0x18c, Size: 12]
	FString PathCompressionConfigsPath;//[Offset: 0x210, Size: 12]
	bool bIsPathCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	bool bIsPathCompressionCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d, Size: 1]
	int PathCompressionCacheMaxSize;//[Offset: 0x220, Size: 4]
	FString BaseTableRelativeDir;//[Offset: 0x228, Size: 12]
	FString ModTableRelativeDir;//[Offset: 0x234, Size: 12]
	<FName,ModTable*> ModTableMap;//[Offset: 0x240, Size: 60]
	<FName,UAEDataTable*> ModTableObjMap;//[Offset: 0x27c, Size: 60]
	UAEDataTable*[] InGameTableObjList;//[Offset: 0x2b8, Size: 12]
	<FName,bool> CheckNeedModMap;//[Offset: 0x2c4, Size: 60]
	FString CurrentModName;//[Offset: 0x300, Size: 12]
	FString EmptyModName;//[Offset: 0x30c, Size: 12]
	<FString,BaseTableResMap*> LoadedTableMap;//[Offset: 0x318, Size: 60]
	<FString,bool> CheckMapTable;//[Offset: 0x354, Size: 60]
	void ReleaseTable(FName tableName);// 0x23d9e50
	UAEDataTable* GetTablePtr_Mod(FName tableName);// 0x23d9dd0
	UAEDataTable* GetTablePtr(FName tableName);// 0x23d9d50
	BaseTableResMap* GetTableMap(FString tableName);// 0x23d9c8c
	static bool GetTableData(FString tableName, FString Key, out TableRowBase OutRow);// 0x23d9398
	static UAETableManager* GetInstance();// 0x23d9370
	static UAEDataTable* GetDataTableStatic_Mod(FString tableName);// 0x23d92b4
	static UAEDataTable* GetDataTableStatic(FString tableName);// 0x23d91f8

--------------------------------
Class: ModTable.Object

--------------------------------
Class: BaseTableResMap.Object
	ScriptStruct* DataStruct;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: GameFrontendHUD.FrontendHUD.Object
	delegate OnHandleWebviewActionDelegate;//[Offset: 0x15c, Size: 12]
	delegate OnGetTicketNotifyDelegate;//[Offset: 0x168, Size: 12]
	delegate OnHandleServerListDownload;//[Offset: 0x174, Size: 12]
	FString CSVTableRelativeDir;//[Offset: 0x180, Size: 12]
	<FName,FString> GameStatusMap;//[Offset: 0x18c, Size: 60]
	<FString,bool> LanguageMap;//[Offset: 0x1c8, Size: 60]
	bool EnableTickLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 1]
	GVoiceInterface* GVoice;//[Offset: 0x218, Size: 4]
	bool DisableGVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	BugReporter* GameBugReporter;//[Offset: 0x220, Size: 4]
	GMLogShare* LogShare;//[Offset: 0x224, Size: 4]
	int MaxUpdateRetryTimes;//[Offset: 0x228, Size: 4]
	GDolphinUpdater* GDolphin;//[Offset: 0x234, Size: 4]
	Translator* Translator;//[Offset: 0x238, Size: 4]
	HttpWrapper* HttpWrapper;//[Offset: 0x23c, Size: 4]
	GCPufferDownloader* GPuffer;//[Offset: 0x240, Size: 4]
	LaggingReporter* LaggingReporter;//[Offset: 0x244, Size: 4]
	AsyncTaskDownloader* DownloadTask;//[Offset: 0x24c, Size: 4]
	bool bUseDolphinUpdateFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	bool bEnableUseDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 1]
	bool bEnableUseCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x296, Size: 1]
	bool bUseDolphinUpdateAfterCDNFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x297, Size: 1]
	bool bUseCDNUpdateAfterDolphinFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	bool bEnableEditorPufferDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 1]
	bool bIsWaitingUpdateStateData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 1]
	bool IsUsingDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29b, Size: 1]
	bool IsUsingCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	CDNUpdate* CDNUpdater;//[Offset: 0x2b0, Size: 4]
	int ODPaksPoolSize;//[Offset: 0x2b4, Size: 4]
	int ODPaksPoolSizeLowend;//[Offset: 0x2b8, Size: 4]
	int ODPaksPoolSizeLowendThreshold;//[Offset: 0x2bc, Size: 4]
	bool ODPaksEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	FName UnrealNetworkStatus;//[Offset: 0x2e8, Size: 8]
	float UnrealNetworkConnectingTimer;//[Offset: 0x300, Size: 4]
	float UnrealNetworkConnectingTime;//[Offset: 0x314, Size: 4]
	bool bUseDynamicCreateLuaManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	FString[] PersistentLuaManager;//[Offset: 0x31c, Size: 12]
	bool bPatchReInitSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x330, Size: 4]
	LuaEventBridge* LuaEventBridgeInstace;//[Offset: 0x334, Size: 4]
	BattleWindowMgrLuaUtils* LuaBattleWindowMgr;//[Offset: 0x338, Size: 4]
	LuaBlueprintMgr* LuaBlueprintSysMgr;//[Offset: 0x33c, Size: 4]
	FString ScriptBPRelativeDir;//[Offset: 0x344, Size: 12]
	FString ScriptRelativeDir;//[Offset: 0x350, Size: 12]
	FString InGameLuaDir;//[Offset: 0x35c, Size: 12]
	FString PreloadLuaFileRelativePath;//[Offset: 0x368, Size: 12]
	FString[] LuaDirList;//[Offset: 0x374, Size: 12]
	FString[] NoGCPackage;//[Offset: 0x380, Size: 12]
	float LuaTickTime;//[Offset: 0x38c, Size: 4]
	bool bCallLuaTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	bool bAutoLoginEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 1]
	int PingFirstReportIntervalSecond;//[Offset: 0x3b8, Size: 4]
	int PingReportIntervalSecond;//[Offset: 0x3bc, Size: 4]
	int LossSyncIntervalSecond;//[Offset: 0x3c0, Size: 4]
	int vmInstrumentOptimization;//[Offset: 0x3c4, Size: 4]
	TssManager* TssMgr;//[Offset: 0x3c8, Size: 4]
	float PingReportInterval;//[Offset: 0x3f0, Size: 4]
	uint32 ImageDownloadClearDayCount;//[Offset: 0x490, Size: 4]
	bool bUseSettingSubsystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 1]
	delegate UIStackChangeDelegate;//[Offset: 0x498, Size: 12]
	delegate UIStackRecoverDelegate;//[Offset: 0x4a4, Size: 12]
	delegate GetUserSettingsDelegate;//[Offset: 0x4b0, Size: 16]
	delegate SaveUserSettingsDelegate;//[Offset: 0x4c0, Size: 16]
	delegate OnFRefreshAdaptationUIEvent;//[Offset: 0x4d0, Size: 12]
	delegate OnFRefreshAdaptationExUIEvent;//[Offset: 0x4dc, Size: 12]
	FString UserSettingsClassName;//[Offset: 0x4e8, Size: 12]
	FString LanguageSettingsClassName;//[Offset: 0x4f4, Size: 12]
	FString ActiveSaveGameName;//[Offset: 0x500, Size: 12]
	FString CachedSaveGameName;//[Offset: 0x50c, Size: 12]
	FString LanguageSaveGameName;//[Offset: 0x518, Size: 12]
	class Object* UserSettingsClass;//[Offset: 0x524, Size: 4]
	SaveGame* UserSettings;//[Offset: 0x528, Size: 4]
	CustomSettingSaveGame[] CustomSettingSaveGames;//[Offset: 0x52c, Size: 12]
	ImageDownloader* ImageDownloaderInGame;//[Offset: 0x5e0, Size: 4]
	int FpsForWindowClient;//[Offset: 0x5e4, Size: 4]
	UDPPingCollector* UDPPingCollector;//[Offset: 0x5e8, Size: 4]
	bool UIElemLayoutJsonConfigSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec, Size: 1]
	bool NationAllSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ed, Size: 1]
	bool NationBattleSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ee, Size: 1]
	bool NationRankSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ef, Size: 1]
	bool SelfieSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 1]
	bool ReportBugSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f1, Size: 1]
	bool FirstVoicePopupSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f2, Size: 1]
	bool GDPRForbidVoiceSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f3, Size: 1]
	bool GDPRSettingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 1]
	int GDPRUserType;//[Offset: 0x5f8, Size: 4]
	bool bShouldShowAdaptTipInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fc, Size: 1]
	float fLaggingFPSDiffThreshold;//[Offset: 0x600, Size: 4]
	float fLaggingFPSDiffThresholdMin;//[Offset: 0x604, Size: 4]
	float fLaggingFPSDiffThresholdMax;//[Offset: 0x608, Size: 4]
	float fLaggingFrameTimeThreshold;//[Offset: 0x60c, Size: 4]
	float fLaggingFrameTimeThresholdMin;//[Offset: 0x610, Size: 4]
	float fLaggingFrameTimeThresholdMax;//[Offset: 0x614, Size: 4]
	float fFPSReportInterval;//[Offset: 0x618, Size: 4]
	bool bUnLoadNoGcPackage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 1]
	Package*[] NoGcPackages;//[Offset: 0x62c, Size: 12]
	bool bFlushAsyncLoadingBeforeGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 1]
	bool bEnablePandora;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x639, Size: 1]
	bool bEnableJMLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63b, Size: 1]
	bool bEnableH5Cache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	bool bCheckWorldNameForLoadConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c1, Size: 1]
	ColorBlindnessMgr* ColorBlindnessMgrInstace;//[Offset: 0x6c8, Size: 4]
	EffectSettingMgr* EffectSettingMgrInstace;//[Offset: 0x6cc, Size: 4]
	NativeHUDTickContainer[] NativeHUDTickList;//[Offset: 0x6d0, Size: 12]
	bool IsNativeHUDTickLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6dc, Size: 1]
	bool IsShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6dd, Size: 1]
	int NativeHUDTickIndex;//[Offset: 0x6e0, Size: 4]
	AsyncLoadHelper* AsyncLoadHelper;//[Offset: 0x6e4, Size: 4]
	FString BattleUtilsClassName;//[Offset: 0x6e8, Size: 12]
	BattleUtils* BattleUtils;//[Offset: 0x6f4, Size: 4]
	int DealyHideLoadingUI;//[Offset: 0x6fc, Size: 4]
	void VNGPostPersonalInfo(FString OpenID, FString Name, FString passportId, FString email, FString phone, FString address);// 0x262e2f0
	void UnRegisterUIShowHideEventDelegate(FString Source);// 0x262e198
	void TimeStatisticStop(int Type, FString Name);// 0x262dff8
	void TimeStatisticStart(int Type);// 0x262df80
	void TickUdpCollector(float DeltaTime);// 0x262df08
	void StatisVisibilityWidget(Widget* Widget);// 0x1fa0fcc
	void StatisLoadedTexture(Texture* Texture);// 0x1fa0fcc
	bool StartGrayUpdate();// 0x262dee0
	void StartDolphinUpdateAfterCDNUpdateFailed();// 0x262decc
	void StartCDNUpdateAfterDolphinUpdateFailed();// 0x262deb8
	void ShutdownUnrealNetwork();// 0x2087384
	void SetShouldShowAdaptTipInLobby(bool bShoudShow);// 0x262de38
	void SetGameSubMode(FString SubMode);// 0x262dd7c
	void SetGameStatusMap(<FName,FString> InGameStatusMap);// 0x262dbd0
	void SetClientEnterBattleStage(FString InStageStr);// 0x262db14
	void SetAccountByWebLogin(int Channel, FString OpenID, FString userId, FString TokenID, const int ExpireTime);// 0x262d8c0
	bool SaveUserSettingsByDelegate(SaveGame* SaveGame, FString LayoutName);// 0x262d7b8
	void RetryDownload();// 0x262d7a4
	void RetryCDNDownload();// 0x262d790
	void ResetUserSettings();// 0x262d77c
	void ReleaseBattleUtils();// 0x262d768
	void RegisterUserSettingsDelegate_Int(FString PropertyName, delegate Delegate);// 0x262d5a0
	void RegisterUserSettingsDelegate_Float(FString PropertyName, delegate Delegate);// 0x262d5a0
	void RegisterUserSettingsDelegate_Enum(FString PropertyName, delegate Delegate);// 0x262d5a0
	void RegisterUserSettingsDelegate_Bool(FString PropertyName, delegate Delegate);// 0x262d5a0
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x262d4fc
	void RegisterUIShowHideEventDelegate(FString Source, delegate Delegate);// 0x262d334
	void OnWebviewNotify(out const WebviewInfoWrapper webviewinfo);// 0x262d22c
	void OnWebviewActionNotify(FString URL);// 0x262d0d4
	void OnUAAssistantEvent(out const UAAssistantInfoWrapper UAAssistentInfo);// 0x262cfc8
	void OnSDKCallbackEvent(out const SDKCallbackInfoWrapper sdkCallbackInfo);// 0x262cebc
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x262cdf0
	void OnRefreshAccountInfo(bool Result, int InChannel, FString InOpenId);// 0x262cc00
	void OnQuickLoginNotify(out const WakeupInfoWrapper wakeupinfo);// 0x262caf4
	void OnPlatformFriendNotify(out const PlatformFriendInfoMap PlatformFriendInfoMap);// 0x262c9e4
	void OnNotUpdateFinished();// 0x262c9d0
	void OnLoginFlowNotify(int _Flow, int _Param, FString ExtraData);// 0x262c7e8
	void OnHttpImgResponse(Texture2D* Texture, ImageDownloader* downloader);// 0x262c72c
	void OnGroupNotify(out const GroupInfoWrapper groupInfo);// 0x262c66c
	void OnGetTicketNotify(FString Ticket);// 0x262c514
	void OnGetShortUrlNotify(int Ret, FString ShortUrl);// 0x262c374
	void OnGetCountryNoNotify(int country);// 0x262c2fc
	void OnGenQRImgNotify(int Ret, int Size, FString imgPath);// 0x262c1b8
	void OnGCloudNetStateChangeNotify(int State, int EventParam1, int EventParam2, int EventParam3);// 0x262c070
	void OnGameMasterEvent(FString EventName, int Ret);// 0x262bed4
	void OnCheckUpdateStateFinished(out const DownloaderInfo Info);// 0x262bdcc
	void NotifyLoadingUIOperation(int OperationType);// 0x262bd54
	void MakeToSuppotAdaptation(PanelSlot* PanelSlot);// 0x262bcdc
	void LuaDoString(FString LuaString);// 0x262bc18
	bool IsWindowOB();// 0x1fe93e0
	bool IsInstallPlatform(FString PlatForm);// 0x262bab8
	bool IsCEHideLobbyUI();// 0x262ba90
	bool HasAnyNetMsgToHandle();// 0x262ba68
	bool GetWidgetRenderCanChange();// 0x262ba40
	int GetUserSettingsProperty_Int(FString PropertyName);// 0x262b8e0
	bool GetUserSettingsProperty_Bool(FString PropertyName);// 0x262b780
	SaveGame* GetUserSettingsByDelegate(FString LayoutName);// 0x262b6bc
	SaveGame* GetUserSettings();// 0x1f23a40
	GDolphinUpdater* GetUpdater();// 0x262b6a0
	Translator* GetTranslator();// 0x262b684
	bool GetShouldShowAdaptTipInLobby();// 0x262b65c
	SettingSubsystem* GetSettingSubsystem();// 0x262b634
	GCPufferDownloader* GetPufferDownloader();// 0x262b618
	FString GetPingReportInfo();// 0x262b558
	FString GetPacketLossReportInfo();// 0x262b498
	LuaStateWrapper* GetLuaStateWrapper();// 0x1f9078c
	LuaEventBridge* GetLuaEventBridge();// 0x262b470
	LuaBlueprintMgr* GetLuaBlueprintSysMgr();// 0x262b448
	HttpWrapper* GetHttpWrapper();// 0x262b42c
	GVoiceInterface* GetGVoiceInterface();// 0x1f23a70
	FString GetGameSubMode();// 0x262b3c4
	GameStateBase* GetGameState();// 0x262b39c
	FString GetFPSReportInfo();// 0x262b2dc
	EffectSettingMgr* GetEffectSettingMgr();// 0x211c380
	int GetDetailNetInfoFromGCloud();// 0x1f07b2c
	SaveGame* GetCustomSetting(FString InSlotName);// 0x262b218
	ColorBlindnessMgr* GetColorBlindnessMgr();// 0x262b1e8
	Object* GetClientNetObj();// 0x262b1c0
	FString GetClientEnterBattleStage();// 0x262b158
	BugReporter* GetBugReporter();// 0x262b130
	BattleUtils* GetBattleUtils();// 0x262b108
	FString GetBattleIDHexStr();// 0x262b048
	int GetAutoRunModID();// 0x1f07b2c
	AsyncLoadHelper* GetAsyncLoadHelper();// 0x262b020
	void FinishModifyUserSettings();// 0x262b00c
	void EnableFPSAndMemoryLog(bool bEnable);// 0x262af8c
	void DispatchLongTimeNoOperation(out const int TimeOutCounter);// 0x262af04
	void DispatchConfirmMisKill(FString KillerName);// 0x262ae58
	void CreateBattleUtils();// 0x262ae44
	void ClearUIElemSettings();// 0x262ae30
	void CheckLocalizationLanguage();// 0x262ae1c
	void CallGlobalScriptFunction(FString InFunctionName);// 0x262ad58
	void BeginModifyUserSettings();// 0x262ad44
	void BattleUtilsGameEnd();// 0x262ad30
	void AfterLoadedEditorLogin();// 0x262ad1c
	void AddCustomSetting(FString InSlotName, SaveGame* InSaveGame);// 0x262ac1c
	void AddAdaptationWidgetDelegateEx(PanelSlot* PanelSlot);// 0x262aba4
	void AddAdaptationWidgetDelegate(PanelSlot* PanelSlot);// 0x262ab2c

--------------------------------
Class: GVoiceInterface.Object
	int lbsRoomMemberID;//[Offset: 0x54, Size: 4]
	delegate CheckTempLbsRoomOnJoinRoom;//[Offset: 0x90, Size: 16]
	delegate CheckTempLbsRoomOnQuitRoom;//[Offset: 0xa0, Size: 16]
	delegate OnSTTReportCallback;//[Offset: 0xb0, Size: 16]
	delegate OnRSTSCallback;//[Offset: 0xc0, Size: 16]
	FString ServerInfo;//[Offset: 0xd0, Size: 12]
	uint32 openGvoiceLog;//[Offset: 0xdc, Size: 4]
	uint32 MicVolumeMUFactor;//[Offset: 0xe0, Size: 4]
	uint32 SpeekerVolumeMUFactor;//[Offset: 0xe4, Size: 4]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xf4, Size: 4]
	void UploadRecordFile();// 0x263bde0
	void TestMic();// 0x263bdcc
	bool TeamSpeakerEnable();// 0x263bdb0
	bool TeamMicphoneEnable();// 0x263bd94
	void SwitchMode(enum CharMode);// 0x263bd1c
	void SwitchMicphoneWhenCorpsMode();// 0x263bd08
	void SwitchCampRoom(enum campMode);// 0x263bc90
	void StopRecord();// 0x263bc7c
	void StopPlayRecordFile();// 0x263bc68
	void StopInterphone();// 0x263bc54
	void StopCampMode();// 0x263bc40
	void StartRecord();// 0x263bc2c
	void StartInterphone();// 0x263bc18
	void StartCampMode(FString ZombieCampRoomName, FString ManCampRoomName, FString userId);// 0x263ba54
	void SpeechToText();// 0x263ba40
	void ShowOpenSpeakerAtFirstMsg();// 0x263ba2c
	void ShowCorpsModeCannotUseLBSVoice();// 0x263ba18
	void SetVoiceMode(int Type);// 0x263b9a0
	void SetSpeakerVolum(float Value);// 0x263b928
	void SetSpeakerStatus(bool Flag);// 0x263b8a8
	void SetReportBufferTime(int nTimeSec);// 0x263b830
	void SetPlayerVolume(FString InPlayerid, int InVol);// 0x263b694
	void SetMicphoneVolum(float Value);// 0x263b61c
	void SetMicphoneStatus(bool Flag);// 0x263b59c
	void SetLbsVoiceRadius(float Radius);// 0x263b528
	void SetLbsRoomEnableStatus(bool Flag);// 0x263b4a8
	void SetGameFrontendHUD(GameFrontendHUD* InHUD);// 0x263b430
	void SetCurrentDownloadFieldID(FString filedId);// 0x263b2d4
	void SetAllVoiceStatus(bool Flag);// 0x263b254
	void ResetWhenLogOut();// 0x263b240
	bool ReportPlayers(FString InExtraInfo, FString[] InOpenids);// 0x263af14
	int ReportFileForAbroad(FString InFilePath, bool InTranslate, bool InChangeVoice, int InTime);// 0x263ad68
	void ReactiveLbsStatus();// 0x263ad54
	void QuitTempLbsRoom(FString roomStr);// 0x263abfc
	void QuitRoom();// 0x263abe8
	void PlayRecordFile();// 0x263abd4
	void OpenTeamSpeakerOnly(bool ShowTips);// 0x263ab54
	int OpenTeamMicphoneOnly(bool ShowTips);// 0x263aacc
	int OpenTeamInterphone();// 0x263aaa4
	void OpenSpeakerByTempLbs(bool Open);// 0x263aa24
	int OpenSpeaker();// 0x263a9fc
	void OpenMicByTempLbs(bool Open);// 0x263a97c
	void OpenMicAndSpeakerAfterJoinLbsRoom();// 0x263a968
	int OpenMic();// 0x263a940
	void OpenIngameSpeaker();// 0x263a92c
	int OpenIngameMicphone();// 0x263a904
	void OpenAllSpeaker(bool ShowTips);// 0x263a884
	int OpenAllMicphone(bool ShowTips);// 0x263a7fc
	int OpenAllInterphone();// 0x263a7d4
	void OnRoomTypeChanged(FString itemtext);// 0x1ffd0c8
	void OnResume();// 0x263a7c0
	void OnPause();// 0x263a7ac
	bool LbsSpeakerEnable();// 0x263a790
	bool LbsMicphoneEnable();// 0x22603b4
	void JoinTempLbsRoom(FString room, FString userId);// 0x263a520
	void JoinRoom(FString room, FString userId);// 0x263a2b0
	void JoinLbsRoom(FString lbsRoom, FString userId);// 0x263a040
	bool IsTeamInterphoneOpenned();// 0x263a024
	bool IsLbsInterphoneOpenned();// 0x263a008
	bool IsInterphoneMode();// 0x2639fcc
	void InitGVoiceComponent(FString userId);// 0x2639e74
	bool HaveTeamRoom();// 0x2639e4c
	bool HaveLbsRoom();// 0x2639e24
	float GetVoiceLength();// 0x2639dfc
	int GetPlayerVolume(FString InPlayerid);// 0x2639c9c
	void GetAuthKey();// 0x2639c88
	void ForbidTeammateVoiceById(int memberID, bool IsEnable);// 0x2639bc4
	void EnbleMicAndSpeakerByRoomName(FString roomName, bool Enable);// 0x2639a1c
	int EnableReportForAbroad(bool InIsWholeRoundaudit);// 0x2639994
	bool EnableReportALLAbroad(bool InEnable, bool InWithEncryption, int InTimeout);// 0x2639874
	void DownloadRecordFile();// 0x2639860
	void CommonTestMic();// 0x263984c
	void CloseSpeaker();// 0x2639838
	void CloseMic();// 0x2639824
	void CloseIngameSpeaker();// 0x2639810
	void CloseIngameMicphone();// 0x26397fc
	void CloseAllSpeaker(bool ShowTips);// 0x263977c
	void CloseAllMicphone(bool ShowTips);// 0x26396fc
	void CheckAndEnableRoomSpeaker();// 0x26396e8
	void ChatShowAgeRestrictionMsgInLobby();// 0x26396d4
	void ChatShowAgeRestrictionMsgInFighting();// 0x26396c0
	void ChatShowAgeRestrictionMsgInChat();// 0x26396ac
	void ChatRequestPrivacyInSetting();// 0x2639698
	void ChatRequestPrivacyInGame();// 0x2639684

--------------------------------
Class: BugReporter.Object
	void SendScreenShot(FString errorReason, FString errorDescription, FString ImagePath, float X, float Y, float Z);// 0x261e470
	void SendLog(FString errorReason, FString errorDescription, float X, float Y, float Z, bool pullAll, bool zipLogUpload);// 0x261e08c
	void ReadZipLog(FString Filename);// 0x261df34
	byte[] CompressLog(bool pullAllLog);// 0x261de24

--------------------------------
Class: GMLogShare.Object
	static void ShareLogFile();// 0x21a8b6c
	static void Init();// 0x26392c4

--------------------------------
Class: GDolphinUpdater.Object
	<FString,FString> pakHashList;//[Offset: 0x50, Size: 60]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122, Size: 1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x124, Size: 4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x128, Size: 4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x12c, Size: 4]
	bool EnableRandomBackupURL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	bool EnablePufferUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 1]
	FString UpdateInfoPath;//[Offset: 0x144, Size: 12]
	bool OpenDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	void StartAppUpdate();// 0x2632e08
	void SetEnableCDNGetVersion(bool Enable);// 0x2632d88
	void OnUpdateError(int curVersionStage, int ErrorCode);// 0x2632ccc
	void OnDolphinBGDownloadDone();// 0x2632cb8
	bool IsUpdating();// 0x2632c90
	bool IsGrayUpdate();// 0x2632c68
	bool IsExamine();// 0x1fe93e0
	void Install();// 0x2632c54
	int GetTotalValue();// 0x2632c2c
	int GetCurValue();// 0x2632c04
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x2632ac4
	float GetCurPercent();// 0x2632a9c
	uint32 GetChannelIDWithHUD(GameFrontendHUD* InGameFrontendHUD);// 0x2632a1c
	uint32 GetChannelID();// 0x20632e0
	void FinishUpdate();// 0x2632a08
	void FinishPufferUpdate();// 0x26329f4
	void EnableIOSBGDownload4G(bool bEnableCellularAccess);// 0x1f5da78
	bool EnableCDNGetVersion();// 0x26329cc
	void ContinueUpdate();// 0x26329b8
	void CancelUpdate();// 0x26329a4
	void CancelAppUpdate();// 0x2632990

--------------------------------
Class: Translator.Object
	FString SubscriptionKey;//[Offset: 0x1c, Size: 12]
	FString StoredAccessToken;//[Offset: 0x28, Size: 12]
	delegate OnGetAccessTokenDelegate;//[Offset: 0x38, Size: 16]
	delegate OnDetectDelegate;//[Offset: 0x48, Size: 16]
	delegate OnTranslateDelegate;//[Offset: 0x58, Size: 16]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xb8, Size: 4]
	void TranslateV2(int Channel, int ID, FString Text);// 0x26884a8
	void Translate(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x2688168
	void PostMsg(FString URL, FString Content);// 0x2688028
	void OnTranslateV2(bool Success, FString Data);// 0x2687f1c
	void OnTranslate__DelegateSignature(bool IsSuccess, FString LanguageFrom, FString Translation);// 0x2bb69b8
	void OnTranslate(bool Success, FString Data);// 0x2687e10
	void OnGetAccessTokenV2(bool Success, FString Data);// 0x2687d04
	void OnGetAccessToken__DelegateSignature(bool IsSuccess, FString Token);// 0x2bb69b8
	void OnGetAccessToken(bool Success, FString Data);// 0x2687bf8
	void OnDetectV2(bool Success, FString Data);// 0x2687aec
	void OnDetect__DelegateSignature(bool IsSuccess, FString from, FString to);// 0x2bb69b8
	void OnDetect(bool Success, FString Data);// 0x26879e0
	bool HasTranslating();// 0x26879b8
	void GetAccessToken(bool bForceGet, FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x2687624
	void Detect(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x26872e4

--------------------------------
Class: HttpWrapper.Object
	delegate OnResponseEvent;//[Offset: 0x1c, Size: 12]
	void SimplePostForLua(FString URL, FString Content, int Priority, int QueueType);// 0x26403f4
	void SetQueueSize(int QueueType, int InSize);// 0x2640338
	void SetQueueEnable(bool InEnableQueue);// 0x26402bc
	void SetPoolEnable(bool InEnablePool);// 0x2640234
	int RequestForLua(FString URL, FString Verb, out <FString,FString> Headers, FString Content, int Priority, int QueueType);// 0x263ff00
	bool GetQueueEnable();// 0x263fee4
	bool GetPoolEnable();// 0x263febc
	int GetInternalIndex();// 0x263fea0
	void CancelRequestAll(int QueueType);// 0x263fe28
	void CancelRequest(int QueueType, int ReqIndex);// 0x263fd6c

--------------------------------
Class: GCPufferDownloader.Object
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	FString DownloadDir;//[Offset: 0x2a4, Size: 12]
	FString PufferTmpDir;//[Offset: 0x2b0, Size: 12]
	uint32 CleanFlagVer;//[Offset: 0x2bc, Size: 4]
	FString[] CleanFileNamePattern;//[Offset: 0x2c0, Size: 12]
	bool PreFetchPakEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	bool PreFetchFileClearEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 1]
	bool PreFetchConvertEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce, Size: 1]
	FString[] PreFetchPakNames;//[Offset: 0x2d0, Size: 12]
	uint32 PreFetchReserveredDiskSpace;//[Offset: 0x2dc, Size: 4]
	bool PreFetchODPak_Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	int PreFetchODPaks_MaxNum;//[Offset: 0x2e4, Size: 4]
	int PreFetchODPaks_BatchSize;//[Offset: 0x2e8, Size: 4]
	int PreFetchODPaks_FetchedNum;//[Offset: 0x2ec, Size: 4]
	int PreFetchODPaks_FetchedIndex;//[Offset: 0x2f0, Size: 4]
	FString[] PreFetchODPaks_Filenames;//[Offset: 0x2f4, Size: 12]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302, Size: 1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x304, Size: 4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x308, Size: 4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x30c, Size: 4]
	bool DisableBGDownloadNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	float PreFetchODPaks_StartTime;//[Offset: 0x314, Size: 4]
	FString PreFetchODPaks_ConfigName;//[Offset: 0x318, Size: 12]
	bool StopTask(uint64 TaskId);// 0x26380bc
	int StopMergeBinDiffPak(int outterTaskID);// 0x263803c
	bool StopCheckDownloadFileFraming(int outterTaskID);// 0x2637fbc
	void StopBGDownloadNotification();// 0x2637fa8
	bool StopAllTask();// 0x2637f80
	void StartDownloadItem(uint32 ItemId, uint32 Priority, delegate downloadDelegate);// 0x2637e54
	void StartBGDownloadNotification(uint64 InDownloadedSize);// 0x2637dd8
	void StartBatchDownloadItem(uint32[] ItemIDs, uint32 Priority, delegate OnBatchItemDownloadDelegate);// 0x2637bcc
	void SetTempProductIdBase(int ProductIdRaw);// 0x2637b54
	void SetTempProductId(FString ProductIdRaw);// 0x26379fc
	void SetPrefetchConfig(bool pakEnable, bool fileClearEnable, bool convertEnable, int reserveredDiskSpace, FString FileList, int InPreFetchODPaksMaxNum, int InPreFetchODPaksBatchSize);// 0x26376d8
	void SetIOSBGDownloadAttribute(bool bEnableCellularAccess, bool bEnableResumeData, int nMinFileSize, int nMaxTasks);// 0x2637578
	bool SetImmDLMaxSpeed(uint64 MaxSpeed);// 0x26374f4
	static int ReturnSplitMiniPakFilelist_LuaState();// 0x2635344
	static int ReturnLocalFiles_LuaState();// 0x2635344
	uint64 RequestFile(FString FilePath, bool ForceUpdate);// 0x2637344
	bool RemountPakFiles();// 0x263731c
	FString ReadFile(FString Filename);// 0x263713c
	bool PreFetchPakFiles();// 0x2637114
	int PreFetchODPakFilesUpdate();// 0x26370ec
	bool PreFetchODPakFilesPreProcess(bool Start);// 0x2637064
	bool PreFetchODPakFilesPostProcess(int ErrorCode);// 0x2636fe4
	bool PreFetchODPakFiles(bool Start);// 0x2636f5c
	void OnItemDownloadedInFighting(FString PackHash, FString ErrorCode);// 0x2636cec
	void OnHashGenerateFinished(int outterTaskID, FString hashCode);// 0x2636b4c
	int MoveFileTo(FString Filename, FString from, FString to);// 0x26367bc
	int MoveFile(FString from, FString to);// 0x2636544
	int MergeBinDiffPak(int outterTaskID, FString PakFilenameOld, FString PakFilenameDiff, FString PakFilenameNew, bool fast);// 0x263611c
	bool IsODPaks(FString FilePath);// 0x2635fbc
	bool IsODFileExists(FString Path);// 0x2635ef8
	bool IsInitSuccess();// 0x2635ed0
	bool IsFileReady(FString FilePath);// 0x2635d70
	bool IsFileExist(FString Filename, FString extension);// 0x2635af8
	bool InitializeODPaks();// 0x2635ad0
	FString GetTempWorkPath();// 0x2635a10
	void GetProductIDBase(out int[] ProductIDs);// 0x2635944
	void GetProductID(out int[] ProductIDs);// 0x2635878
	int GetODPakNum();// 0x1f9078c
	FString GetODPakName(FString Path);// 0x2635734
	uint32 GetInitErrcode();// 0x263570c
	uint64 GetFileSizeCompressed(FString FilePath);// 0x26355ac
	float GetFileSize(FString Filename);// 0x2635448
	FString GetDownloadPath();// 0x2635388
	float GetCurrentSpeed();// 0x2635360
	int GetBatchODPaksDownloadList_LuaState();// 0x2635344
	void EnableUseOldInterface(bool Enable);// 0x26352c4
	bool DeleteFileEvenIfUnfinished(FString FilePath);// 0x2635164
	static bool DeleteFile(FString fullPath);// 0x263500c
	bool ConvertPreFetchFiles();// 0x2634fe4
	FString ConvertItemIdToPakName(uint32 ItemId);// 0x2634edc
	bool ClearUselessODPaks();// 0x2634eb4
	bool ClearPreFetchODPaksFiles();// 0x2634e8c
	bool ClearPreFetchFiles();// 0x2634e64
	bool CheckDownloadFileFraming(int outterTaskID, FString Filename, int chunkSize);// 0x2634c78

--------------------------------
Class: LaggingReporter.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: AsyncTaskDownloader.BlueprintAsyncActionBase.Object
	delegate onRequestHandler;//[Offset: 0x3c, Size: 12]
	static AsyncTaskDownloader* DownloadContent(const FString URL, int loaderType, const FString savedDir, bool breakpointContinualTransfer);// 0x2619fdc

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x2047094

--------------------------------
Class: CDNUpdate.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x90, Size: 4]
	void StartUpdateApp();// 0x2627830
	void StartAppUpdate(bool StartGrayUpdate);// 0x26277b0
	void OnRequestProgress(out const CDNDownloaderInfo Info);// 0x26276e4
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x2627618
	bool IsUpdating();// 0x26275f0
	bool IsGrayUpdate();// 0x26275c8
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x2627488
	void FinishUpdate();// 0x2627474
	void ContinueUpdate();// 0x2627460
	void CancelUpdate();// 0x262744c

--------------------------------
Class: CDNDownloaderInfo
	enum State;//[Offset: 0x0, Size: 1]
	FString FileSavePath;//[Offset: 0x4, Size: 12]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int BytesSent;//[Offset: 0x14, Size: 4]
	int BytesReceived;//[Offset: 0x18, Size: 4]
	int ContentType;//[Offset: 0x1c, Size: 4]
	int ResponseCode;//[Offset: 0x20, Size: 4]

--------------------------------
Class: LuaStateWrapper.Object

--------------------------------
Class: LuaEventBridge.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x1c, Size: 8]
	<FString,EventTypeContainer> RegisterEventMap;//[Offset: 0x28, Size: 60]
	<FString,LuaEventTypeContainer> LuaRegisterEventMap;//[Offset: 0x64, Size: 60]
	<uint32,LuaEventTypeToIDSet> FilterKeyRegisterMap;//[Offset: 0xa0, Size: 60]
	LuaTemBPData*[] CurrentParamArray;//[Offset: 0xdc, Size: 12]
	Property*[] Params;//[Offset: 0xe8, Size: 12]
	void SyncLuaRegisterEventNum(FString EventType, FString EventId, int Number);// 0x23c5498
	LuaTemBPData*[] GetCurrentParam();// 0x23c5430
	void DeactivateEventsByFilterKey(out const uint32 FilterKey);// 0x23c53a8
	bool CheckNeedPostEventWithFilterKey(out const uint32 FilterKey, FString EventType, FString EventId, bool bCheckNeedPostLua);// 0x23c51b8
	void ActiveEventByFilterKey(out const uint32 FilterKey, FString EventType, FString EventId, const bool bActive);// 0x23c4fd0

--------------------------------
Class: EventTypeContainer
	<FString,EventIDContainer> EventIDContainer;//[Offset: 0x0, Size: 60]

--------------------------------
Class: EventIDContainer
	EventValueContainer[] EventValueContainer;//[Offset: 0x0, Size: 12]

--------------------------------
Class: EventValueContainer
	Object* ObjContext;//[Offset: 0x0, Size: 8]
	FString FunctionName;//[Offset: 0x8, Size: 12]
	FString EventType;//[Offset: 0x14, Size: 12]
	FString EventId;//[Offset: 0x20, Size: 12]

--------------------------------
Class: LuaEventTypeContainer
	<FString,int> EventIDContainer;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LuaEventTypeToIDSet
	<FString,LuaEventTypeIDSet> EventTypeToIDSet;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LuaEventTypeIDSet
	<FString> EventIDSet;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LuaTemBPData.Object

--------------------------------
Class: BattleWindowMgrLuaUtils.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x1c, Size: 8]
	FString LuaManagerName;//[Offset: 0x24, Size: 12]
	FString ShowUI;//[Offset: 0x30, Size: 12]
	FString HideUI;//[Offset: 0x3c, Size: 12]
	FString CheckWindowOpen;//[Offset: 0x48, Size: 12]

--------------------------------
Class: LuaBlueprintMgr.Object
	<FString,LuaBluepirntSys*> SystemMap;//[Offset: 0x1c, Size: 60]
	LuaBluepirntSys* GetSystemByName(const FString SystemName);// 0x2646dac
	void AddSystem(const FString SystemName, const FString BPPath);// 0x2646b3c

--------------------------------
Class: LuaBluepirntSys.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	void Init();// 0x2bb69b8

--------------------------------
Class: TssManager.Object
	FString TssHostInfo;//[Offset: 0x1c, Size: 12]
	FString TssCDNHostInfo;//[Offset: 0x28, Size: 12]
	FString TssBuildInIpInfo;//[Offset: 0x34, Size: 12]
	static int SendSkdData_LuaState();// 0x2635344
	static int SendEigeninfoData_LuaState();// 0x2635344
	static uint32 SaveSendEigeninfoCode_LuaState();// 0x2635344
	static int OnRecvData_LuaState();// 0x2635344
	static int GetUserTag4Lua_LuaState();// 0x2635344
	static int GetDeviceFeature_LuaState();// 0x2635344
	static int EigenArrayObfuscationVerify_LuaState();// 0x2635344

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: CustomSettingSaveGame
	FString LayoutSlotName;//[Offset: 0x0, Size: 12]
	SaveGame* SaveGame;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ImageDownloader.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 12]
	delegate OnFail;//[Offset: 0x28, Size: 12]
	FString FileURL;//[Offset: 0x34, Size: 12]
	FString CompreesedFileUrl;//[Offset: 0x40, Size: 12]
	FString FileSavePath;//[Offset: 0x4c, Size: 12]
	FString CompreesedFileSavePath;//[Offset: 0x58, Size: 12]
	FString UrlHash;//[Offset: 0x64, Size: 12]
	FString CompreesedUrlHash;//[Offset: 0x70, Size: 12]
	bool InvalidImageFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool SaveDiskFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	bool ForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 1]
	void Start(FString URL);// 0x2640d10
	static ImageDownloader* MakeDownloaderInGame();// 0x2640ce8
	static ImageDownloader* MakeDownloader();// 0x2640cc0
	Texture2D* GetTextureFromUrlWithoutDownload(FString URL);// 0x2640b60

--------------------------------
Class: UDPPingCollector.Object
	<FString,PingServerInfo> mUDPPingInfoMap;//[Offset: 0x44, Size: 60]
	delegate UDPPingShadowResultToLuaDelegate;//[Offset: 0x90, Size: 12]
	void TickUDPPing(float DeltaTime);// 0x268e804
	void setUDPPingServerAddress(FString ServerIP, FString ServerPort, int ZoneID, int WaterMarkType);// 0x268e508
	void PingServer(FString address, float Timeout, int WaterMarkType);// 0x268e328
	void OnPingServerResultDelegate__DelegateSignature(FString address, int IsSuccess, float Time);// 0x2bb69b8
	bool IsChooingZoneAccess();// 0x268e300
	bool isAllZoneHasPingValue();// 0x268e2d8
	void Init(float MinPingintervalTime, float pingintervalTime, float pingTimeoutSecond, float normalDelayMilliSecond, float maxAutoChooseZoneDelayMilliSecond);// 0x268e148
	float GetZoneServerDelay(FString ServerAddress);// 0x268dfe4
	int GetMinDealyAddress();// 0x268dfbc
	void ChoosingZone(int ZoneID, FString AddrIP);// 0x268de1c

--------------------------------
Class: PingServerInfo

--------------------------------
Class: Package.Object

--------------------------------
Class: ColorBlindnessMgr.Object
	<int,LinearColor> CBColorMap;//[Offset: 0x1c, Size: 60]
	<int,ParticleSysColor> CBParticleColorMap;//[Offset: 0x58, Size: 60]
	<uint32,ImageOriginal> HandleCBColorImageContaner;//[Offset: 0x94, Size: 60]
	<uint32,HandleMesh> HandleCBColorMeshContaner;//[Offset: 0xd0, Size: 60]
	<uint32,HandleParticleSystem> HandleCBColorParticleContaner;//[Offset: 0x10c, Size: 60]
	void Reset();// 0x1f7ba14
	void RemoveParticleSystem(ParticleSystemComponent* ParticleSystem);// 0x1f7b99c
	void RemoveMeshComponent(MeshComponent* Mesh);// 0x1f7b924
	void RemoveImage(Image* Image);// 0x1f7b8ac
	void HandleUserSettingChange();// 0x1f7b898
	LinearColor GetColorByType(int Type);// 0x1f7b80c
	void Clear();// 0x1f7b7f8
	void AddParticleSystem(ParticleSystemComponent* ParticleSystem, int Type);// 0x1f7b73c
	void AddMeshComponent(MeshComponent* Mesh, int Type);// 0x1f7b680
	void AddImage(Image* Image, LinearColor Color, int Type);// 0x1f7b574
	void AddColorByType(FString Type, LinearColor Color);// 0x1f7b3d0

--------------------------------
Class: ParticleSysColor
	<FString,LinearColor> colorMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ImageOriginal
	LinearColor OriginalColir;//[Offset: 0x8, Size: 16]
	int Type;//[Offset: 0x18, Size: 4]

--------------------------------
Class: HandleMesh
	int Type;//[Offset: 0x8, Size: 4]

--------------------------------
Class: HandleParticleSystem
	int Type;//[Offset: 0x8, Size: 4]

--------------------------------
Class: EffectSettingMgr.Object
	FString SingleLayerColorTable;//[Offset: 0x1c, Size: 12]
	FString MultiLayerColorTable;//[Offset: 0x28, Size: 12]
	void UpdateSingleLayerColor(LinearColor Color);// 0x1fa6014
	void UpdateMultiLayerColcor(FString Key, LinearColor Color);// 0x1fa5e70
	void SetParticleSystemColorSingleLayer(ParticleSystemComponent* ParticleSystem);// 0x1fa5df8
	void SetParticleSystemColorMultiLayer(ParticleSystemComponent* ParticleSystem);// 0x1fa5d80

--------------------------------
Class: NativeHUDTickContainer
	int WidgetIndex;//[Offset: 0x0, Size: 4]
	UAEUserWidget* pWidget;//[Offset: 0x4, Size: 8]

--------------------------------
Class: AsyncLoadHelper.Object
	<FString,Object*> PreloadObjectMap;//[Offset: 0x1c, Size: 60]
	void SetMaxTaskNum(int Num);// 0x1fd2400
	void RunNextTask();// 0x2619188
	void OnLoadCallBack(SoftObjectPath softObjPath);// 0x261901c
	void ClearOneTask(FString ObjectPath);// 0x2618ec4
	void ClearAllTask();// 0x2618eb0
	void AddTask(FString ObjectPath, int LoadPriority);// 0x2618d14

--------------------------------
Class: BattleUtils.Object
	GameFrontendHUD* OwningFrontendHUD;//[Offset: 0x60, Size: 4]
	UAEGameMode* BattleGameMode;//[Offset: 0x78, Size: 4]
	BattlePlayer*[] BattlePlayerList;//[Offset: 0x7c, Size: 12]
	BattleGameInfo CachedBattleGameInfo;//[Offset: 0x88, Size: 48]
	GameModeAIPlayerParams CachedAIPlayerParams;//[Offset: 0xb8, Size: 744]
	FString LuaFilePath;//[Offset: 0x3a0, Size: 12]
	uint32 SyncNewBattlePlayer(uint64 UId, out const PlayerInfoData Info);// 0x261ca88
	void SyncGameInfo(out const BattleGameInfo Info);// 0x261c97c
	void SyncGameExit();// 0x261c968
	void SyncBattlePlayerExit(uint64 UId, FName PlayerType, FString Reason);// 0x261c76c
	GameModePlayerParams RetrievePlayerParams(PlayerID PlayerID);// 0x261c694
	GameModeAIPlayerParams RetrieveAIPlayerParams(PlayerID PlayerID);// 0x261c5b4
	void ResponPlayerWeaponDIYData(uint64 PlayerUID, WeaponDIYData InWeaponDIYData);// 0x261c488
	void RequestSomePlayersBattleData(uint64[] PlayerUIDList, byte DataType);// 0x261c2ec
	void RequestPlayerWeaponDIYData(uint64 PlayerUID, int WeaponSkinID, int PlanID);// 0x261c1e4
	void RequestOnePlayersBattleData(uint64 PlayerUID, byte DataType);// 0x261c11c
	void RequestAllPlayersBattleData(byte DataType);// 0x261c0a4
	void OnPostLoadMapWithWorld(World* World);// 0x261c02c
	BattlePlayer* NewBattlePlayer();// 0x261c004
	BattleAIPlayer* NewBattleAIPlayer();// 0x261bfdc
	void HandleGameModeStateChanged(out const GameModeStateChangedParams Params);// 0x261bf4c
	UAEGameMode* GetBattleGameMode();// 0x261bf24
	void GenerateAIPlayerParams(out const PlayerInfoData Info);// 0x261be10
	BattlePlayer* FindPlayerByUID(uint64 UId, FName PlayerType);// 0x261bd44
	BattlePlayer* FindPlayerByPlayerName(FString PlayerName, FName PlayerType);// 0x261bb9c
	BattlePlayer* FindPlayerByPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x261bad8

--------------------------------
Class: BattlePlayer.Object
	uint64 UId;//[Offset: 0x20, Size: 8]
	PlayerInfoData PlayerInfoData;//[Offset: 0x28, Size: 152]
	PlayerAvatarData PlayerAvatarData;//[Offset: 0xc0, Size: 16]
	<int,WeaponDIYData> WeaponDIYData;//[Offset: 0xd0, Size: 60]
	BattleUtils* OwningBattleUtils;//[Offset: 0x10c, Size: 4]
	GameModePlayerParams ExtractGameModePlayerParams();// 0x261b35c

--------------------------------
Class: PlayerInfoData.ResponResult
	FString PlayerType;//[Offset: 0x4, Size: 12]
	FString PlayerName;//[Offset: 0x10, Size: 12]
	uint32 PlayerKey;//[Offset: 0x1c, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	byte PlayerGender;//[Offset: 0x21, Size: 1]
	int TeamID;//[Offset: 0x24, Size: 4]
	int64 CampID;//[Offset: 0x28, Size: 8]
	int PlayerBornPointID;//[Offset: 0x30, Size: 4]
	GameModePlayerItem[] ItemList;//[Offset: 0x34, Size: 12]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0x40, Size: 12]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0x4c, Size: 12]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0x58, Size: 12]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x64, Size: 44]
	int planeAvatarId;//[Offset: 0x90, Size: 4]
	int RolewearIndex;//[Offset: 0x94, Size: 4]

--------------------------------
Class: PlayerAvatarData.ResponResult
	AvatarBackpack[] AvatarBackpackData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AvatarBackpack
	int[] WeaponAvatarList;//[Offset: 0x0, Size: 12]
	int[] VehicleAvatarList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: BattleGameInfo
	uint64 GameID;//[Offset: 0x0, Size: 8]
	FString GameModeID;//[Offset: 0x8, Size: 12]
	int GameMapID;//[Offset: 0x14, Size: 4]
	int WeatherID;//[Offset: 0x18, Size: 4]
	FString WeatherName;//[Offset: 0x1c, Size: 12]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: GameModeAIPlayerParams.GameModePlayerParams
	int8 AIType;//[Offset: 0x2e4, Size: 1]

--------------------------------
Class: PlayerID
	FName PlayerType;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BattleAIPlayer.BattlePlayer.Object
	GameModeAIPlayerParams ExtractGameModeAIPlayerParams();// 0x261b814

--------------------------------
Class: WebviewInfoWrapper
	int ErrorCode;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x4, Size: 12]
	int extend;//[Offset: 0x10, Size: 4]
	int Extend2;//[Offset: 0x14, Size: 4]
	FString MsgData;//[Offset: 0x18, Size: 12]

--------------------------------
Class: UAAssistantInfoWrapper
	enum UAType;//[Offset: 0x0, Size: 1]
	int Result;//[Offset: 0x4, Size: 4]
	FString ExtraJson;//[Offset: 0x8, Size: 12]
	FString RetsultMsg;//[Offset: 0x14, Size: 12]

--------------------------------
Class: SDKCallbackInfoWrapper
	enum CallbackType;//[Offset: 0x0, Size: 1]
	FString CallbackParameter;//[Offset: 0x4, Size: 12]
	FString ExtraJson;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WakeupInfoWrapper

--------------------------------
Class: PlatformFriendInfoMap
	int page;//[Offset: 0x0, Size: 4]
	<FString,FString> friendsInfo;//[Offset: 0x4, Size: 60]

--------------------------------
Class: GroupInfoWrapper
	int SnsAction;//[Offset: 0x0, Size: 4]
	int Flag;//[Offset: 0x4, Size: 4]
	int ErrorCode;//[Offset: 0x8, Size: 4]
	int PlatForm;//[Offset: 0xc, Size: 4]
	FString Desc;//[Offset: 0x10, Size: 12]
	WechatGroupInfomation wechatGroupInfo;//[Offset: 0x1c, Size: 36]

--------------------------------
Class: WechatGroupInfomation
	FString OpenIdList;//[Offset: 0x0, Size: 12]
	FString MemberNum;//[Offset: 0xc, Size: 12]
	FString ChatRoomURL;//[Offset: 0x18, Size: 12]

--------------------------------
Class: DownloaderInfo
	enum State;//[Offset: 0x0, Size: 1]
	FString FileSavePath;//[Offset: 0x4, Size: 12]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int BytesSent;//[Offset: 0x14, Size: 4]
	int BytesReceived;//[Offset: 0x18, Size: 4]
	int ContentType;//[Offset: 0x1c, Size: 4]
	int ResponseCode;//[Offset: 0x20, Size: 4]
	FString StringContent;//[Offset: 0x24, Size: 12]

--------------------------------
Class: SettingSubsystem.GameInstanceSubsystem.Subsystem.Object
	FString CachedSaveGameName;//[Offset: 0x20, Size: 12]
	CustomSettingSaveGame[] CustomSettingSaveGames;//[Offset: 0x2c, Size: 12]
	delegate GetUserSettingsDelegate;//[Offset: 0x38, Size: 16]
	EffectSettingMgr* EffectSettingMgrInstace;//[Offset: 0x48, Size: 4]
	SaveGame* UserSettings;//[Offset: 0x4c, Size: 4]
	class Object* UserSettingsClass;//[Offset: 0x50, Size: 4]
	FString UserSettingsClassName;//[Offset: 0x54, Size: 12]
	FString ActiveSaveGameName;//[Offset: 0x60, Size: 12]
	FString LanguageSettingsClassName;//[Offset: 0x70, Size: 12]
	FString LanguageSaveGameName;//[Offset: 0x7c, Size: 12]
	<FString,bool> LanguageMap;//[Offset: 0xd0, Size: 60]
	bool SetUserSettings_String(FString PropertyName, FString Val);// 0x2685618
	bool SetUserSettings_Int(FString PropertyName, int Value);// 0x2685474
	bool SetUserSettings_Float(FString PropertyName, float Value);// 0x26852d0
	bool SetUserSettings_Enum(FString PropertyName, byte Value);// 0x268512c
	bool SetUserSettings_Bool(FString PropertyName, bool Value, bool IngoreSave);// 0x2684f2c
	void RegisterUserSettingsDelegate_Int(FString PropertyName, delegate Delegate);// 0x2684d64
	void RegisterUserSettingsDelegate_Float(FString PropertyName, delegate Delegate);// 0x2684d64
	void RegisterUserSettingsDelegate_Enum(FString PropertyName, delegate Delegate);// 0x2684d64
	void RegisterUserSettingsDelegate_Bool(FString PropertyName, delegate Delegate);// 0x2684d64
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x2684cc0
	SaveGame* GetUserSettingsByDelegate(FString LayoutName);// 0x2684bfc
	FString GetUserSettings_String(FString PropertyName);// 0x2684a1c
	int GetUserSettings_Int(FString PropertyName);// 0x26848bc
	float GetUserSettings_Float(FString PropertyName);// 0x2684758
	byte GetUserSettings_Enum(FString PropertyName);// 0x26845f8
	bool GetUserSettings_Bool(FString PropertyName);// 0x2684498
	SaveGame* GetUserSettings();// 0x2684470
	FString GetUserLanguageSettingsProperty_String(FString PropertyName);// 0x2684290
	EffectSettingMgr* GetEffectSettingMgr();// 0x2684268
	SaveGame* GetCustomSetting(FString InSlotName);// 0x26841a4
	void FinishModifyUserSettings();// 0x2684190
	void ClearUIElemSettings();// 0x268417c
	void CheckLocalizationLanguage();// 0x2684168
	void BeginModifyUserSettings();// 0x2684154
	void AddCustomSetting(FString InSlotName, SaveGame* InSaveGame);// 0x2684054

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x20, Size: 4]
	SoftObjectPath TinyFontName;//[Offset: 0x28, Size: 24]
	Font* SmallFont;//[Offset: 0x5c, Size: 4]
	SoftObjectPath SmallFontName;//[Offset: 0x60, Size: 24]
	Font* MediumFont;//[Offset: 0x78, Size: 4]
	SoftObjectPath MediumFontName;//[Offset: 0x80, Size: 24]
	Font* LargeFont;//[Offset: 0x98, Size: 4]
	SoftObjectPath LargeFontName;//[Offset: 0xa0, Size: 24]
	Font* SubtitleFont;//[Offset: 0xb8, Size: 4]
	SoftObjectPath SubtitleFontName;//[Offset: 0xc0, Size: 24]
	Font*[] AdditionalFonts;//[Offset: 0xd8, Size: 12]
	FString[] AdditionalFontNames;//[Offset: 0xec, Size: 12]
	class Console* ConsoleClass;//[Offset: 0xf8, Size: 4]
	SoftClassPath ConsoleClassName;//[Offset: 0x100, Size: 24]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118, Size: 4]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120, Size: 24]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x138, Size: 4]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x140, Size: 24]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x158, Size: 4]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x160, Size: 24]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x178, Size: 24]
	class NavigationSystem* NavigationSystemClass;//[Offset: 0x190, Size: 4]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x198, Size: 24]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1b0, Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1b4, Size: 4]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1b8, Size: 24]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1d0, Size: 24]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x1e8, Size: 4]
	SoftClassPath AIControllerClassName;//[Offset: 0x1f0, Size: 24]
	GameUserSettings* GameUserSettings;//[Offset: 0x208, Size: 4]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x20c, Size: 4]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x210, Size: 24]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x228, Size: 24]
	SoftClassPath GameSingletonClassName;//[Offset: 0x240, Size: 24]
	Object* GameSingleton;//[Offset: 0x258, Size: 4]
	SoftClassPath AssetManagerClassName;//[Offset: 0x260, Size: 24]
	AssetManager* AssetManager;//[Offset: 0x278, Size: 4]
	Texture2D* DefaultTexture;//[Offset: 0x27c, Size: 4]
	SoftObjectPath DefaultTextureName;//[Offset: 0x280, Size: 24]
	Texture* DefaultDiffuseTexture;//[Offset: 0x298, Size: 4]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2a0, Size: 24]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2b8, Size: 4]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2c0, Size: 24]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x2d8, Size: 4]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x2e0, Size: 24]
	Texture2D* DefaultBokehTexture;//[Offset: 0x2f8, Size: 4]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x300, Size: 24]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x318, Size: 4]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x320, Size: 24]
	Material* WireframeMaterial;//[Offset: 0x338, Size: 4]
	FString WireframeMaterialName;//[Offset: 0x33c, Size: 12]
	Material* DebugMeshMaterial;//[Offset: 0x348, Size: 4]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x350, Size: 24]
	Material* LevelColorationLitMaterial;//[Offset: 0x368, Size: 4]
	FString LevelColorationLitMaterialName;//[Offset: 0x36c, Size: 12]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x378, Size: 4]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x37c, Size: 12]
	Material* LightingTexelDensityMaterial;//[Offset: 0x388, Size: 4]
	FString LightingTexelDensityName;//[Offset: 0x38c, Size: 12]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x398, Size: 4]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x39c, Size: 12]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x3a8, Size: 4]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x3ac, Size: 12]
	Material* RemoveSurfaceMaterial;//[Offset: 0x3b8, Size: 4]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x3c0, Size: 24]
	Material* VertexColorMaterial;//[Offset: 0x3d8, Size: 4]
	FString VertexColorMaterialName;//[Offset: 0x3dc, Size: 12]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x3e8, Size: 4]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x3ec, Size: 12]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x3f8, Size: 4]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x3fc, Size: 12]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x408, Size: 4]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x40c, Size: 12]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x418, Size: 4]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x41c, Size: 12]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x428, Size: 4]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x42c, Size: 12]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x438, Size: 24]
	Material* ConstraintLimitMaterial;//[Offset: 0x450, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x454, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x458, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x45c, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x460, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x464, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x468, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x46c, Size: 4]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x470, Size: 4]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x478, Size: 24]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x490, Size: 4]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x498, Size: 24]
	Material* ArrowMaterial;//[Offset: 0x4b0, Size: 4]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x4b8, Size: 24]
	Material* OutlineMaterial;//[Offset: 0x4d0, Size: 4]
	SoftObjectPath OutlineMaterialName;//[Offset: 0x4d8, Size: 24]
	Material* OutlineMaskedMaterial;//[Offset: 0x4f0, Size: 4]
	SoftObjectPath OutlineMaskedMaterialName;//[Offset: 0x4f8, Size: 24]
	SoftObjectPath SmaaAreaTexName;//[Offset: 0x510, Size: 24]
	SoftObjectPath SmaaSearchTexName;//[Offset: 0x528, Size: 24]
	Texture2D* SmaaAreaTex;//[Offset: 0x540, Size: 4]
	Texture2D* SmaaSearchTex;//[Offset: 0x544, Size: 4]
	Material* DyeingColorMaterial;//[Offset: 0x548, Size: 4]
	SoftObjectPath DyeingColorMaterialName;//[Offset: 0x550, Size: 24]
	LinearColor LightingOnlyBrightness;//[Offset: 0x568, Size: 16]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x578, Size: 12]
	LinearColor[] QuadComplexityColors;//[Offset: 0x584, Size: 12]
	LinearColor[] LightComplexityColors;//[Offset: 0x590, Size: 12]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x59c, Size: 12]
	LinearColor[] LODColorationColors;//[Offset: 0x5a8, Size: 12]
	LinearColor[] HLODColorationColors;//[Offset: 0x5b4, Size: 12]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x5c0, Size: 12]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x5cc, Size: 4]
	float MaxES2PixelShaderAdditiveComplexityCount;//[Offset: 0x5d0, Size: 4]
	float MinLightMapDensity;//[Offset: 0x5d4, Size: 4]
	float IdealLightMapDensity;//[Offset: 0x5d8, Size: 4]
	float MaxLightMapDensity;//[Offset: 0x5dc, Size: 4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e0, Size: 1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x5e4, Size: 4]
	float RenderLightMapDensityColorScale;//[Offset: 0x5e8, Size: 4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x5ec, Size: 16]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x5fc, Size: 16]
	StatColorMapping[] StatColorMappings;//[Offset: 0x60c, Size: 12]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x618, Size: 4]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x620, Size: 24]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x638, Size: 12]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x644, Size: 12]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x650, Size: 12]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x65c, Size: 12]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x668, Size: 4]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x670, Size: 24]
	Texture2D* MiniFontTexture;//[Offset: 0x688, Size: 4]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x690, Size: 24]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x6a8, Size: 4]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x6b0, Size: 24]
	Texture2D* LightMapDensityTexture;//[Offset: 0x6c8, Size: 4]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x6d0, Size: 24]
	GameViewportClient* GameViewport;//[Offset: 0x6ec, Size: 4]
	FString[] DeferredCommands;//[Offset: 0x6f0, Size: 12]
	int TickCycles;//[Offset: 0x6fc, Size: 4]
	int GameCycles;//[Offset: 0x700, Size: 4]
	int ClientCycles;//[Offset: 0x704, Size: 4]
	float NearClipPlane;//[Offset: 0x708, Size: 4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70c, Size: 1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70c, Size: 1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70c, Size: 1]
	int MaximumLoopIterationCount;//[Offset: 0x710, Size: 4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x714, Size: 1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x714, Size: 1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x714, Size: 1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x714, Size: 1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x714, Size: 1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x714, Size: 1]
	float FixedFrameRate;//[Offset: 0x718, Size: 4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x71c, Size: 16]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x72c, Size: 1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x730, Size: 4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x734, Size: 1]
	Color C_WorldBox;//[Offset: 0x738, Size: 4]
	Color C_BrushWire;//[Offset: 0x73c, Size: 4]
	Color C_AddWire;//[Offset: 0x740, Size: 4]
	Color C_SubtractWire;//[Offset: 0x744, Size: 4]
	Color C_SemiSolidWire;//[Offset: 0x748, Size: 4]
	Color C_NonSolidWire;//[Offset: 0x74c, Size: 4]
	Color C_WireBackground;//[Offset: 0x750, Size: 4]
	Color C_ScaleBoxHi;//[Offset: 0x754, Size: 4]
	Color C_VolumeCollision;//[Offset: 0x758, Size: 4]
	Color C_BSPCollision;//[Offset: 0x75c, Size: 4]
	Color C_OrthoBackground;//[Offset: 0x760, Size: 4]
	Color C_Volume;//[Offset: 0x764, Size: 4]
	Color C_BrushShape;//[Offset: 0x768, Size: 4]
	float StreamingDistanceFactor;//[Offset: 0x76c, Size: 4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x770, Size: 12]
	byte TransitionType;//[Offset: 0x77c, Size: 1]
	FString TransitionDescription;//[Offset: 0x780, Size: 12]
	FString TransitionGameMode;//[Offset: 0x78c, Size: 12]
	float MeshLODRange;//[Offset: 0x798, Size: 4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79c, Size: 1]
	float CameraRotationThreshold;//[Offset: 0x7a0, Size: 4]
	float CameraTranslationThreshold;//[Offset: 0x7a4, Size: 4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x7a8, Size: 4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x7ac, Size: 4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b0, Size: 1]
	int MaxParticleResize;//[Offset: 0x7b4, Size: 4]
	int MaxParticleResizeWarn;//[Offset: 0x7b8, Size: 4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x7bc, Size: 12]
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0x7c8, Size: 28]
	float NetClientTicksPerSecond;//[Offset: 0x7e4, Size: 4]
	float DisplayGamma;//[Offset: 0x7e8, Size: 4]
	float MinDesiredFrameRate;//[Offset: 0x7ec, Size: 4]
	int ShaderPrecompileProgress;//[Offset: 0x7f0, Size: 4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x7f4, Size: 16]
	LinearColor SelectedMaterialColor;//[Offset: 0x804, Size: 16]
	LinearColor SelectionOutlineColor;//[Offset: 0x814, Size: 16]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x824, Size: 16]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x834, Size: 16]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x845, Size: 1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x845, Size: 1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x845, Size: 1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x845, Size: 1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x848, Size: 4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x850, Size: 4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x854, Size: 1]
	FString ParticleEventManagerClassPath;//[Offset: 0x858, Size: 12]
	float SelectionHighlightIntensity;//[Offset: 0x870, Size: 4]
	float SelectionMeshSectionHighlightIntensity;//[Offset: 0x874, Size: 4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x878, Size: 4]
	float HoverHighlightIntensity;//[Offset: 0x87c, Size: 4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x880, Size: 4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0x9d4, Size: 12]
	FString[] ServerActors;//[Offset: 0x9e0, Size: 12]
	FString[] RuntimeServerActors;//[Offset: 0x9ec, Size: 12]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9f8, Size: 1]
	int NextWorldContextHandle;//[Offset: 0xa08, Size: 4]

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	uint32 ResolutionSizeX;//[Offset: 0x60, Size: 4]
	uint32 ResolutionSizeY;//[Offset: 0x64, Size: 4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x68, Size: 4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x6c, Size: 4]
	int WindowPosX;//[Offset: 0x70, Size: 4]
	int WindowPosY;//[Offset: 0x74, Size: 4]
	int FullscreenMode;//[Offset: 0x78, Size: 4]
	int LastConfirmedFullscreenMode;//[Offset: 0x7c, Size: 4]
	int PreferredFullscreenMode;//[Offset: 0x80, Size: 4]
	uint32 Version;//[Offset: 0x84, Size: 4]
	int AudioQualityLevel;//[Offset: 0x88, Size: 4]
	float FrameRateLimit;//[Offset: 0x8c, Size: 4]
	int DesiredScreenWidth;//[Offset: 0x94, Size: 4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	int DesiredScreenHeight;//[Offset: 0x9c, Size: 4]
	float LastRecommendedScreenWidth;//[Offset: 0xa0, Size: 4]
	float LastRecommendedScreenHeight;//[Offset: 0xa4, Size: 4]
	float LastCPUBenchmarkResult;//[Offset: 0xa8, Size: 4]
	float LastGPUBenchmarkResult;//[Offset: 0xac, Size: 4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xb0, Size: 12]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xbc, Size: 12]
	float LastGPUBenchmarkMultiplier;//[Offset: 0xc8, Size: 4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	int HDRDisplayOutputNits;//[Offset: 0xd0, Size: 4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0xd4, Size: 12]
	void ValidateSettings();// 0x2087384
	bool SupportsHDRDisplayOutput();// 0x4449d00
	void SetVSyncEnabled(bool bEnable);// 0x4449c80
	void SetVisualEffectQuality(int Value);// 0x264bae4
	void SetViewDistanceQuality(int Value);// 0x4449c08
	void SetToDefaults();// 0x1ef1268
	void SetTextureQuality(int Value);// 0x4449b90
	void SetShadowQuality(int Value);// 0x4449b18
	void SetScreenResolution(IntPoint Resolution);// 0x4449aa8
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x4449a30
	void SetResolutionScaleValue(int NewScaleValue);// 0x44499b8
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x4449940
	void SetPostProcessingQuality(int Value);// 0x44498c8
	void SetOverallScalabilityLevel(int Value);// 0x1ef77a8
	void SetFullscreenMode(byte InFullscreenMode);// 0x4449850
	void SetFrameRateLimit(float NewLimit);// 0x44497d8
	void SetFoliageQuality(int Value);// 0x4449760
	void SetBenchmarkFallbackValues();// 0x444974c
	void SetAudioQualityLevel(int QualityLevel);// 0x44496d4
	void SetAntiAliasingQuality(int Value);// 0x444965c
	void SaveSettings();// 0x2117930
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x4449554
	void RevertVideoMode();// 0x4449540
	void ResetToCurrentSettings();// 0x1fb0074
	void LoadSettings(bool bForceReload);// 0x44088ec
	bool IsVSyncEnabled();// 0x4449518
	bool IsVSyncDirty();// 0x44494f0
	bool IsScreenResolutionDirty();// 0x44494c8
	bool IsHDREnabled();// 0x44494a0
	bool IsFullscreenModeDirty();// 0x4449478
	bool IsDirty();// 0x1ff7440
	int GetVisualEffectQuality();// 0x4449450
	int GetViewDistanceQuality();// 0x1ef570c
	int GetTextureQuality();// 0x4449428
	int GetShadowQuality();// 0x4449400
	IntPoint GetScreenResolution();// 0x44493b8
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x4449224
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x4449090
	float GetRecommendedResolutionScale();// 0x4449060
	byte GetPreferredFullscreenMode();// 0x4449038
	int GetPostProcessingQuality();// 0x2632a9c
	int GetOverallScalabilityLevel();// 0x4449010
	IntPoint GetLastConfirmedScreenResolution();// 0x4448fc8
	byte GetLastConfirmedFullscreenMode();// 0x4448fa0
	static GameUserSettings* GetGameUserSettings();// 0x4448f78
	byte GetFullscreenMode();// 0x4448f50
	float GetFrameRateLimit();// 0x4448f28
	int GetFoliageQuality();// 0x4448f00
	IntPoint GetDesktopResolution();// 0x4448eb8
	static IntPoint GetDefaultWindowPosition();// 0x4448e78
	static byte GetDefaultWindowMode();// 0x20c9154
	float GetDefaultResolutionScale();// 0x4448e48
	static IntPoint GetDefaultResolution();// 0x4448e08
	int GetCurrentHDRDisplayNits();// 0x4448de0
	int GetAudioQualityLevel();// 0x4448dc4
	int GetAntiAliasingQuality();// 0x4448d9c
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x4448cd4
	void ConfirmVideoMode();// 0x4448cc0
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x4448c38
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x4448bb8
	void ApplyNonResolutionSettings();// 0x1f1ee34
	void ApplyHardwareBenchmarkResults();// 0x1ef133c

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x1bc, Size: 12]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb, Size: 1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce, Size: 1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf, Size: 1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	int NumberOfSpawnedNotifications;//[Offset: 0x1d4, Size: 4]

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 12]
	StatColorMapEntry[] colorMap;//[Offset: 0xc, Size: 12]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 4]
	Color Out;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 8]
	FName NewGameName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 8]
	FName OldClassName;//[Offset: 0x8, Size: 8]
	FName NewClassName;//[Offset: 0x10, Size: 8]
	FName OldSubobjName;//[Offset: 0x18, Size: 8]
	FName NewSubobjName;//[Offset: 0x20, Size: 8]
	FName NewClassClass;//[Offset: 0x28, Size: 8]
	FName NewClassPackage;//[Offset: 0x30, Size: 8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 12]
	FString NewPluginName;//[Offset: 0xc, Size: 12]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 8]
	FName NewStructName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 12]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	FString Comment;//[Offset: 0x18, Size: 12]

--------------------------------
Class: RigidBodyErrorCorrection
	float LinearDeltaThresholdSq;//[Offset: 0x0, Size: 4]
	float LinearInterpAlpha;//[Offset: 0x4, Size: 4]
	float LinearRecipFixTime;//[Offset: 0x8, Size: 4]
	float AngularDeltaThreshold;//[Offset: 0xc, Size: 4]
	float AngularInterpAlpha;//[Offset: 0x10, Size: 4]
	float AngularRecipFixTime;//[Offset: 0x14, Size: 4]
	float BodySpeedThresholdSq;//[Offset: 0x18, Size: 4]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 8]
	FName DriverClassName;//[Offset: 0x8, Size: 8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 8]

--------------------------------
Class: SettingConfig_C.SaveGame.Object
	void ConditionSetFireGyroData(bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue2, bool CallFunc_EqualEqual_FloatFloat_ReturnValue3, bool CallFunc_EqualEqual_FloatFloat_ReturnValue4, bool CallFunc_EqualEqual_FloatFloat_ReturnValue5, bool CallFunc_EqualEqual_FloatFloat_ReturnValue6, bool CallFunc_EqualEqual_FloatFloat_ReturnValue7, bool CallFunc_EqualEqual_FloatFloat_ReturnValue8, bool CallFunc_EqualEqual_FloatFloat_ReturnValue9, bool CallFunc_EqualEqual_FloatFloat_ReturnValue10);// 0x2bb69b8
	void Init(FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x2bb69b8
	int CrossHairColor;//[Offset: 0x20, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool HitFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	int LeftHandFire;//[Offset: 0x28, Size: 4]
	int Gyroscope;//[Offset: 0x2c, Size: 4]
	int ArtQuality;//[Offset: 0x30, Size: 4]
	float ViewPercentage;//[Offset: 0x34, Size: 4]
	int FireMode;//[Offset: 0x38, Size: 4]
	int VehicleControlMode;//[Offset: 0x3c, Size: 4]
	bool JoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool ButtonLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	int CameraLensSensibility;//[Offset: 0x44, Size: 4]
	float CamLensSenNoneSniper;//[Offset: 0x48, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x4c, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0x50, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x54, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x58, Size: 4]
	int FireCameraLensSensibility;//[Offset: 0x5c, Size: 4]
	float FireCamLensSenNoneSniper;//[Offset: 0x60, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x64, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0x68, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x6c, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x70, Size: 4]
	int GyroscopeSensibility;//[Offset: 0x74, Size: 4]
	float GyroscopeSenNoneSniper;//[Offset: 0x78, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x7c, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0x80, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x84, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x88, Size: 4]
	bool MainVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	float MainVolumValue;//[Offset: 0x90, Size: 4]
	bool EffectVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float EffectVolumValue;//[Offset: 0x98, Size: 4]
	bool UIVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	float UIVolumValue;//[Offset: 0xa0, Size: 4]
	bool BGMVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float BGMVolumValue;//[Offset: 0xa8, Size: 4]
	bool VoiceSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	int VoiceChannel;//[Offset: 0xb0, Size: 4]
	bool MicphoneVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	float MicphoneVolumValue;//[Offset: 0xb8, Size: 4]
	bool SpeakerVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float SocialIslandOtherVolume;//[Offset: 0xc0, Size: 4]
	float SpeakerVolumValue;//[Offset: 0xc4, Size: 4]
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool DisableAutoPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	bool AkeyPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 1]
	bool AutoPickupGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 1]
	bool AutoPickupBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool AutoPickupPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool AutoPickupShieldBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	bool AutoPickupDrug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 1]
	bool BandageSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool MedicalSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool AnodyneSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	bool EnergyDrinksSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 1]
	bool AdrenalineSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool AutoPickupGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	bool ShouLiuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	bool YanWuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7, Size: 1]
	bool StunBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool FireBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	int LimitBandage;//[Offset: 0xdc, Size: 4]
	int LimitMedical;//[Offset: 0xe0, Size: 4]
	int LimitAnodyne;//[Offset: 0xe4, Size: 4]
	int LimitEnergyDrinks;//[Offset: 0xe8, Size: 4]
	int LimitAdrenaline;//[Offset: 0xec, Size: 4]
	int LimitShouliudan;//[Offset: 0xf0, Size: 4]
	int LimitYanwudan;//[Offset: 0xf4, Size: 4]
	int LimitZhenbaodan;//[Offset: 0xf8, Size: 4]
	int LimitRanshaodan;//[Offset: 0xfc, Size: 4]
	int LimitBullet9mm;//[Offset: 0x100, Size: 4]
	int LimitBullet7_62mm;//[Offset: 0x104, Size: 4]
	int Limit12koujing;//[Offset: 0x108, Size: 4]
	int Limit45koujing;//[Offset: 0x10c, Size: 4]
	int Limit300magenandanyao;//[Offset: 0x110, Size: 4]
	int Limitbolt;//[Offset: 0x114, Size: 4]
	int LimitBullet5;//[Offset: 0x118, Size: 4]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	int FPSLevel;//[Offset: 0x120, Size: 4]
	int ArtStyle;//[Offset: 0x124, Size: 4]
	int RecordTipShowLastTime;//[Offset: 0x128, Size: 4]
	<FString,DateTime> XinyueLastClickTime;//[Offset: 0x12c, Size: 60]
	<FString,DateTime> HuatiLastClickTime;//[Offset: 0x168, Size: 60]
	bool MomentSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	bool FreeModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a5, Size: 1]
	bool HDModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a6, Size: 1]
	<FString,DateTime> CollectEquipClickTime;//[Offset: 0x1a8, Size: 60]
	bool IsSimulatorFirstStartup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	int[] PlayerChatQuickTextIDList;//[Offset: 0x1e8, Size: 12]
	int[] ChatOptiongList1;//[Offset: 0x1f4, Size: 12]
	int LRShootMode;//[Offset: 0x200, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 1]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x205, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x206, Size: 1]
	int[] ChatOptiongList2;//[Offset: 0x208, Size: 12]
	int[] ChatOptiongList3;//[Offset: 0x214, Size: 12]
	bool HaveShowActorHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	int NewGetActorID;//[Offset: 0x224, Size: 4]
	bool DeviceAutoAdapt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	float 3DTouchValue;//[Offset: 0x22c, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	int ShotGunShootMode;//[Offset: 0x234, Size: 4]
	int SingleShotWeaponShootMode;//[Offset: 0x238, Size: 4]
	int isFirstOpenMicCheck;//[Offset: 0x23c, Size: 4]
	float VehicleEye;//[Offset: 0x240, Size: 4]
	float ParachuteEye;//[Offset: 0x244, Size: 4]
	FString ChatPrivacyAcceptedVersion;//[Offset: 0x248, Size: 12]
	int RepeatingWeaponShootMode;//[Offset: 0x254, Size: 4]
	int DrivingViewMode;//[Offset: 0x258, Size: 4]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	int FpViewValue;//[Offset: 0x260, Size: 4]
	float CamFpFreeEye;//[Offset: 0x264, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x268, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x26c, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x270, Size: 4]
	bool FirstTime_FPP_TPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool FirstTime_WarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	int DaliyWarmodeInfo;//[Offset: 0x278, Size: 4]
	FString currentLanguage;//[Offset: 0x27c, Size: 12]
	bool redBloodSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	FString lastViewDayTime;//[Offset: 0x28c, Size: 12]
	FString lastViewWeekTime;//[Offset: 0x298, Size: 12]
	bool openNewMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	bool hasOpenedSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 1]
	float CamLensSen3XSniper;//[Offset: 0x2a8, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x2ac, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x2b0, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x2b4, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x2b8, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x2bc, Size: 4]
	bool ShadowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	int RedDotCHColor;//[Offset: 0x2c4, Size: 4]
	int RedDotCHType;//[Offset: 0x2c8, Size: 4]
	int HolographicCHColor;//[Offset: 0x2cc, Size: 4]
	int HolographicCHType;//[Offset: 0x2d0, Size: 4]
	int Sinper2xCHColor;//[Offset: 0x2d4, Size: 4]
	int Sinper2xCHType;//[Offset: 0x2d8, Size: 4]
	int Sniper3xCHColor;//[Offset: 0x2dc, Size: 4]
	int Sniper3xCHType;//[Offset: 0x2e0, Size: 4]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 1]
	<int,int> PickUpCountSetting;//[Offset: 0x2e8, Size: 60]
	int LimitFirstAidKit;//[Offset: 0x324, Size: 4]
	FString XGLanguageTag;//[Offset: 0x328, Size: 12]
	FString XGTimezoneTag;//[Offset: 0x334, Size: 12]
	FString XGPushNightTag;//[Offset: 0x340, Size: 12]
	FString XGPushDayTag;//[Offset: 0x34c, Size: 12]
	bool DeviceAutoAdaptEX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	int SelectUIElemIndex1;//[Offset: 0x35c, Size: 4]
	int SelectUIElemIndex2;//[Offset: 0x360, Size: 4]
	int SelectUIElemIndex3;//[Offset: 0x364, Size: 4]
	bool VaultBtnSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	int LimitSniper2X;//[Offset: 0x36c, Size: 4]
	int LimitSniper3X;//[Offset: 0x370, Size: 4]
	int LimitSniper4X;//[Offset: 0x374, Size: 4]
	int LimitSniper6X;//[Offset: 0x378, Size: 4]
	int LimitSniper8X;//[Offset: 0x37c, Size: 4]
	bool LongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	bool LongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 1]
	int SidewaysMode;//[Offset: 0x384, Size: 4]
	int OpenMirrorMode;//[Offset: 0x388, Size: 4]
	bool CarMusicSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	bool OBS_TrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 1]
	bool OBS_Perspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38e, Size: 1]
	bool OBS_BulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38f, Size: 1]
	bool QuasiMirrorSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	int LobbyStyleID;//[Offset: 0x394, Size: 4]
	bool LobbyBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	bool LobbyHallowma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 1]
	bool SettingStyleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a, Size: 1]
	bool SettingBgmRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39b, Size: 1]
	float ScreenLightness;//[Offset: 0x39c, Size: 4]
	bool BloodStateSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool SettingBigHandOperateRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	bool LobbyIsChristmas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]
	bool MallShowGet10Animation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 1]
	FString FirstChargeVersion;//[Offset: 0x3a4, Size: 12]
	FString RechargePosSave;//[Offset: 0x3b0, Size: 12]
	bool FirstTime_PVEVPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool IslandBroadCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 1]
	bool ResidentEvilNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3be, Size: 1]
	bool AnniversaryNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bf, Size: 1]
	<int,int> PvePickUpCountSetting;//[Offset: 0x3c0, Size: 60]
	int LimitViscidityBomb;//[Offset: 0x3fc, Size: 4]
	int LimitZombieGrenade;//[Offset: 0x400, Size: 4]
	bool AutoPickUpLevel3Backpack_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	bool AutoPickUpPistol_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 1]
	bool VNGMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x406, Size: 1]
	int IngamePlayerInfo_OpenDate;//[Offset: 0x408, Size: 4]
	int SideMirrorMode;//[Offset: 0x40c, Size: 4]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0x410, Size: 12]
	bool OpenOthersPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 1]
	bool OpenMyPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 1]
	bool LobbyAnniversaryBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41e, Size: 1]
	bool FirstTime_SurvivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41f, Size: 1]
	int LimitYeDanGrenade;//[Offset: 0x420, Size: 4]
	int LimitAntidote;//[Offset: 0x424, Size: 4]
	bool QuickThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	int[] ChatOptiongList4;//[Offset: 0x42c, Size: 12]
	bool OpenMyPetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	int ScoreTips_TModeCnt;//[Offset: 0x43c, Size: 4]
	bool FirstTime_TMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	bool TurboEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 1]
	int FPPFireMode;//[Offset: 0x444, Size: 4]
	int SelectUIElemIndexFPP1;//[Offset: 0x448, Size: 4]
	int SelectUIElemIndexFPP2;//[Offset: 0x44c, Size: 4]
	int SelectUIElemIndexFPP3;//[Offset: 0x450, Size: 4]
	byte TurboLastQuality;//[Offset: 0x454, Size: 1]
	<FString,FString> PubgPlusGuideRecord;//[Offset: 0x458, Size: 60]
	<FString,FString> PubgPlusGuideConfig;//[Offset: 0x494, Size: 60]
	int[] UselessWeakGuidIDs;//[Offset: 0x4d0, Size: 12]
	bool SettingOperateZombieLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 1]
	bool HelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dd, Size: 1]
	bool HasShowHeavyWeaponFirsttimeTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4de, Size: 1]
	int[] ChatOptiongList5;//[Offset: 0x4e0, Size: 12]
	int[] ChatOptiongList6;//[Offset: 0x4ec, Size: 12]
	bool FirstTime_TMode_Slid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 1]
	int TD_FireMode;//[Offset: 0x4fc, Size: 4]
	int TD_FPPFireMode;//[Offset: 0x500, Size: 4]
	bool TD_3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	float TD_3DTouchValue;//[Offset: 0x508, Size: 4]
	bool FirstTime_TMode_HardPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
	bool ShovelSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50d, Size: 1]
	int isFirstOpenMicCheckVehicleWar;//[Offset: 0x510, Size: 4]
	bool VulkanEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 1]
	int LimitSnowMan;//[Offset: 0x518, Size: 4]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	bool UniversalSignSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 1]
	bool OpenChatHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51e, Size: 1]
	int ColorBlindnessType;//[Offset: 0x520, Size: 4]
	bool DeathPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 1]
	bool UAVSingleOperate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 1]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x526, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x528, Size: 4]
	float UAVScopePercent;//[Offset: 0x52c, Size: 4]
	bool OpenUAVHelicopter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	bool FirstTime_ShowAutoGroupParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 1]
	int SideMirrorType;//[Offset: 0x534, Size: 4]
	int SideMirrorColor;//[Offset: 0x538, Size: 4]
	bool AutoPickUpSideSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 1]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53d, Size: 1]
	bool isCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53e, Size: 1]
	FString CloudSensitivityPlayerId;//[Offset: 0x540, Size: 12]
	bool SettingHasOperateQuickSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	bool SettingSideSightFunctionRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d, Size: 1]
	bool SettingUploadSensibilityRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54e, Size: 1]
	bool SettingClassicCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54f, Size: 1]
	bool SettingTDCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	bool SettingQuickSwitchRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 1]
	bool SocialIslandCanAcceptDuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 1]
	bool RotateViewWithSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 1]
	bool DisableAutoPickDropMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 1]
	int AutoPickClipType;//[Offset: 0x558, Size: 4]
	int[] QuickSignIDList;//[Offset: 0x55c, Size: 12]
	int[] QuickSignWheelIDList;//[Offset: 0x568, Size: 12]
	bool RotateViewWithPeekSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	bool DynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 1]
	bool SettingEffectRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x576, Size: 1]
	int HitEffectColor;//[Offset: 0x578, Size: 4]
	int HurtEffectColor;//[Offset: 0x57c, Size: 4]
	bool EnemyLocationMarkSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool bHasMapCBToES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 1]
	int ProfiledScreenSwitch;//[Offset: 0x584, Size: 4]
	bool FirstTime_TMode_ArmsRace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	bool bOpenSprHghQltyComparison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 1]
	int BuildDoubleClick;//[Offset: 0x58c, Size: 4]
	float BuildDoubleClickDuration;//[Offset: 0x590, Size: 4]
	float DoubleClickSpeed;//[Offset: 0x594, Size: 4]
	int DoubleClickDistance;//[Offset: 0x598, Size: 4]
	bool ChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 1]
	int BattleFPS;//[Offset: 0x5a0, Size: 4]
	int BattleRenderStyle;//[Offset: 0x5a4, Size: 4]
	int BattleRenderQuality;//[Offset: 0x5a8, Size: 4]
	int LobbyFPS;//[Offset: 0x5ac, Size: 4]
	int LobbyRenderStyle;//[Offset: 0x5b0, Size: 4]
	int LobbyRenderQuality;//[Offset: 0x5b4, Size: 4]
	bool HasGraphicsSeparateConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	bool SettingOperateInfect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 1]
	bool FirstTime_Infect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ba, Size: 1]
	bool OBS_LogoShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bb, Size: 1]
	bool OBS_HitFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 1]
	<int,int> BulletPickUpCountSetting_XT;//[Offset: 0x5c0, Size: 60]
	<int,int> Drug_PickUpCountSetting_XT;//[Offset: 0x5fc, Size: 60]
	<int,int> NormalInfilling_PickUpCountSetting_XT;//[Offset: 0x638, Size: 60]
	<int,int> HalloweenInfilling_PickUpCountSetting_XT;//[Offset: 0x674, Size: 60]
	<int,int> ThrowObj_PickUpCountSetting_XT;//[Offset: 0x6b0, Size: 60]
	<int,int> MultipleMirror_PickUpCountSetting_XT;//[Offset: 0x6ec, Size: 60]
	bool RingThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 1]
	bool isOtherCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 1]
	bool IsCloudAndLocalSame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72a, Size: 1]
	bool RingThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72b, Size: 1]
	bool CarPreciseChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	bool SettingSensibilityEnterTrainRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d, Size: 1]
	bool SettingVehicleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72e, Size: 1]
	bool LRSwitcherGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72f, Size: 1]
	<int,int> PickUpCountSetting_Drug;//[Offset: 0x730, Size: 60]
	<int,int> PickUpCountSetting_ThrowObj;//[Offset: 0x76c, Size: 60]
	<int,int> PickUpCountSetting_MultipleMirror;//[Offset: 0x7a8, Size: 60]
	<int,int> PickUpCountSetting_FixConsumeItemMap;//[Offset: 0x7e4, Size: 60]
	bool bTranslatePickupSettingToMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x820, Size: 1]
	bool OBS_CustomKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x821, Size: 1]
	bool LocalHideHelmet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x822, Size: 1]
	bool SettingDisableAutoPickupDropMirrorRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x823, Size: 1]
	bool UseIngameLike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 1]
	bool ScreenShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x825, Size: 1]
	float CamLensSenShoulderTPP;//[Offset: 0x828, Size: 4]
	float CamLensSenShoulderFPP;//[Offset: 0x82c, Size: 4]
	float FireCamLensSenShoulderTPP;//[Offset: 0x830, Size: 4]
	float GyroscopeSenShoulderTPP;//[Offset: 0x834, Size: 4]
	float FireCamLensSenShoulderFPP;//[Offset: 0x838, Size: 4]
	float GyroscopeSenShoulderFPP;//[Offset: 0x83c, Size: 4]
	bool ShoulderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 1]
	bool RotateViewWithShoulderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x841, Size: 1]
	int ShoulderMode;//[Offset: 0x844, Size: 4]
	bool SettingHasOperatedShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 1]
	bool SettingHasOperatedRotateWithShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x849, Size: 1]
	bool OBS_SmokeGrenadeCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84a, Size: 1]
	bool OBS_SmokeGrenadeAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84b, Size: 1]
	bool bGunAccessoriesAddDefauleM4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 1]
	bool bGunAccessoriesGuidedRemoveSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84d, Size: 1]
	bool bGunAccessoriesGuidedAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84e, Size: 1]
	bool bGunAccessoriesGuidedSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84f, Size: 1]
	bool bGunAccessoriesGuidedEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 1]
	bool bAddedGunAccessories;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 1]
	bool bGunSensitivityGuidedEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x852, Size: 1]
	bool bGunSensitivityGuidedAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x853, Size: 1]
	bool bGunSensitivityGuidedCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 1]
	int GunSensitivitySingleTrainingGuideCount;//[Offset: 0x858, Size: 4]
	bool bGunSensitivitySingleTrainingGuideTiped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85c, Size: 1]
	bool OBS_ShowOwnWeaponKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85d, Size: 1]
	bool isCloudSensitivityUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85e, Size: 1]
	FString CloudSensitivityPlayerId_Custom;//[Offset: 0x860, Size: 12]
	bool isOtherCloudSensitivityUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86c, Size: 1]
	bool IsCloudAndLocalSame_SensitivityCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86d, Size: 1]
	bool isCloudAccessoriesUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86e, Size: 1]
	FString CloudAccessoriesPlayerId_Custom;//[Offset: 0x870, Size: 12]
	bool isOtherCloudAccessoriesUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 1]
	bool IsCloudAndLocalSame_AccessoriesCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87d, Size: 1]
	int TpViewValue;//[Offset: 0x880, Size: 4]
	bool bHasCloudCustomSensitivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x884, Size: 1]
	int PickUpListMode;//[Offset: 0x888, Size: 4]
	bool GyroReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88c, Size: 1]
	bool bHasCloudCustomAccessories;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88d, Size: 1]
	float FireGyroscopeSenNoneSniper;//[Offset: 0x890, Size: 4]
	float FireGyroscopeSenRedDotSniper;//[Offset: 0x894, Size: 4]
	float FireGyroscopeSen2XSniper;//[Offset: 0x898, Size: 4]
	float FireGyroscopeSen4XSniper;//[Offset: 0x89c, Size: 4]
	float FireGyroscopeSen8XSniper;//[Offset: 0x8a0, Size: 4]
	float FireGyroscopeSen3XSniper;//[Offset: 0x8a4, Size: 4]
	float FireGyroscopeSen6XSniper;//[Offset: 0x8a8, Size: 4]
	float FireGyroscopeSenNoneSniperFp;//[Offset: 0x8ac, Size: 4]
	bool AutoParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 1]
	bool MapMarkEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b1, Size: 1]
	float FireGyroscopeSenShoulderTPP;//[Offset: 0x8b4, Size: 4]
	float FireGyroscopeSenShoulderFPP;//[Offset: 0x8b8, Size: 4]
	bool FireGyroscopeRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bc, Size: 1]
	bool HasOperateRingThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bd, Size: 1]
	bool HasOperatedRingThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8be, Size: 1]
	bool SettingBasicGyroRverseRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bf, Size: 1]
	bool bLbsNear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 1]
	bool bLbsWarZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c1, Size: 1]
	bool AutoContinueHeal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c2, Size: 1]
	bool FocalLengthModifySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c3, Size: 1]
	bool FocalLengthModifySwitchRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c4, Size: 1]
	bool bRecordWonderfulReplayOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c5, Size: 1]
	int AntiAliasingValue;//[Offset: 0x8c8, Size: 4]
	bool OneKeyProneAndCrouchSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 1]
	bool HasOperateOneKeyProneAndCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cd, Size: 1]
	bool bLbsMain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ce, Size: 1]
	bool bLbsChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cf, Size: 1]
	bool bOpenBattleNewBieAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 1]
	bool bOpenLobbyNewBieAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d1, Size: 1]
	int JoystickSprintSensitity;//[Offset: 0x8d4, Size: 4]
	bool bHideIngameUIAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d8, Size: 1]
	bool bCloseHitHeadAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d9, Size: 1]
	int HightLightReshowAirLineTimes;//[Offset: 0x8dc, Size: 4]
	bool bHasSetWonderfulReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 1]
	bool bIsShowedHideUIGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e1, Size: 1]
	bool bAmericanCustomSettingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e2, Size: 1]
	float CamLensSenNoneSniper;//[Offset: 0x8e4, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x8e8, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0x8ec, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x8f0, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x8f4, Size: 4]
	float FireCamLensSenNoneSniper;//[Offset: 0x8f8, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x8fc, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0x900, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x904, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x908, Size: 4]
	float GyroscopeSenNoneSniper;//[Offset: 0x90c, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x910, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0x914, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x918, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x91c, Size: 4]
	float VehicleEye;//[Offset: 0x920, Size: 4]
	float ParachuteEye;//[Offset: 0x924, Size: 4]
	float CamFpFreeEye;//[Offset: 0x928, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x92c, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x930, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x934, Size: 4]
	float CamLensSen3XSniper;//[Offset: 0x938, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x93c, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x940, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x944, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x948, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x94c, Size: 4]
	float CamLensSenShoulderTPP;//[Offset: 0x950, Size: 4]
	float CamLensSenShoulderFPP;//[Offset: 0x954, Size: 4]
	float FireCamLensSenShoulderTPP;//[Offset: 0x958, Size: 4]
	float GyroscopeSenShoulderTPP;//[Offset: 0x95c, Size: 4]
	float FireCamLensSenShoulderFPP;//[Offset: 0x960, Size: 4]
	float GyroscopeSenShoulderFPP;//[Offset: 0x964, Size: 4]
	float FireGyroscopeSenNoneSniper;//[Offset: 0x968, Size: 4]
	float FireGyroscopeSenRedDotSniper;//[Offset: 0x96c, Size: 4]
	float FireGyroscopeSen2XSniper;//[Offset: 0x970, Size: 4]
	float FireGyroscopeSen4XSniper;//[Offset: 0x974, Size: 4]
	float FireGyroscopeSen8XSniper;//[Offset: 0x978, Size: 4]
	float FireGyroscopeSen3XSniper;//[Offset: 0x97c, Size: 4]
	float FireGyroscopeSen6XSniper;//[Offset: 0x980, Size: 4]
	float FireGyroscopeSenNoneSniperFp;//[Offset: 0x984, Size: 4]
	float FireGyroscopeSenShoulderTPP;//[Offset: 0x988, Size: 4]
	float FireGyroscopeSenShoulderFPP;//[Offset: 0x98c, Size: 4]
	bool bInitedCustomSensitivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x990, Size: 1]
	bool bFireGyroSenUseGryo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x991, Size: 1]
	bool bFireCamSenUseCam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x992, Size: 1]
	bool bUploadedGyroscope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x993, Size: 1]
	bool AutoHitMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x994, Size: 1]
	bool bResetDeathPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x995, Size: 1]
	bool SwitchSoundVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x996, Size: 1]
	bool bConsumeThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x997, Size: 1]
	int[] MaxACCount;//[Offset: 0x998, Size: 12]
	int[] DefaultACCount;//[Offset: 0x9a4, Size: 12]
	bool HasOperateSoundVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b0, Size: 1]
	bool UseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b1, Size: 1]
	<FString,int> OpenStoreTimes;//[Offset: 0x9b4, Size: 60]
	<int,int> setting_ver_info;//[Offset: 0x9f0, Size: 60]

--------------------------------
Class: STExtraGameInstance.UAEGameInstance.GameInstance.Object
	delegate OnUserQualitySettingChanged;//[Offset: 0x334, Size: 12]
	delegate OnRenderQualitySettingsChanged;//[Offset: 0x340, Size: 12]
	delegate OnUserMsaaSettingChanged;//[Offset: 0x34c, Size: 12]
	delegate OnWaterReflectionSettingChanged;//[Offset: 0x358, Size: 12]
	delegate OnCampRoomChanged;//[Offset: 0x364, Size: 12]
	delegate ScreenOrientationChangedNotify;//[Offset: 0x370, Size: 12]
	RenderQualitySettings renderQualitySettingsLastSet;//[Offset: 0x37c, Size: 8]
	RenderQualitySettings renderQualitySettingsApplying;//[Offset: 0x384, Size: 8]
	RenderQualitySettings renderQualitySettingsInit;//[Offset: 0x38c, Size: 8]
	UserDetailSetting UserDetailSetting;//[Offset: 0x394, Size: 104]
	bool ExeCmdSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 1]
	bool LobbyRenderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x425, Size: 1]
	bool LobbyRenderSwitchLow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x426, Size: 1]
	bool TemporaryFixedLobbyRenderSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x427, Size: 1]
	bool LobbyRenderSwitchMid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	bool LobbyRenderSwitchHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	int iEnableRegionID;//[Offset: 0x42c, Size: 4]
	SwitchesInMaps[] SwitchesInMaps;//[Offset: 0x430, Size: 12]
	RenderItem[] LobbyBackupRenderSettings;//[Offset: 0x43c, Size: 12]
	RenderItem[] LobbyRenderSettingsUltralHigh;//[Offset: 0x448, Size: 12]
	RenderItem[] LobbyRenderSettingsHigh;//[Offset: 0x454, Size: 12]
	RenderItem[] LobbyRenderSettingsMid;//[Offset: 0x460, Size: 12]
	RenderItem[] LobbyRenderSettingsLow;//[Offset: 0x46c, Size: 12]
	RenderItem[] LowFPSBackupRenderSettings;//[Offset: 0x478, Size: 12]
	RenderItem[] LowFPSRenderSettingProfileHigh;//[Offset: 0x484, Size: 12]
	RenderItem[] LowFPSRenderSettingProfileMid;//[Offset: 0x490, Size: 12]
	RenderItem[] MobileHDROpenConfig;//[Offset: 0x49c, Size: 12]
	RenderItem[] MobileHDRCloseConfig;//[Offset: 0x4a8, Size: 12]
	RenderItem[] MobileUltralHighOpenConfig;//[Offset: 0x4b4, Size: 12]
	RenderItem[] MobileUltralHighCloseConfig;//[Offset: 0x4c0, Size: 12]
	RenderItem[] MobileVerySmoothOpenConfig;//[Offset: 0x4cc, Size: 12]
	RenderItem[] MobileVerySmoothCloseConfig;//[Offset: 0x4d8, Size: 12]
	RenderItem[] MobileMSAAOpenConfig;//[Offset: 0x4e4, Size: 12]
	RenderItem[] Mobile2xMSAAOpenConfig;//[Offset: 0x4f0, Size: 12]
	RenderItem[] MobileMSAACloseConfig;//[Offset: 0x4fc, Size: 12]
	RenderItem[] MobilePPOpenConfig;//[Offset: 0x508, Size: 12]
	RenderItem[] MobilePPCloseConfig;//[Offset: 0x514, Size: 12]
	FString[] RePairDeleteDir;//[Offset: 0x520, Size: 12]
	RenderStyleParameterInMaps[] RenderStyleParamsInMaps;//[Offset: 0x52c, Size: 12]
	MaterialParametersStyle[] MaterialParametersStyleArray;//[Offset: 0x538, Size: 12]
	ObjectPoolClassConfig[] ObjectPoolClassConfigs;//[Offset: 0x544, Size: 12]
	FName[] ObjectPoolIgnoringProperties;//[Offset: 0x550, Size: 12]
	FString AutoTestMissionType;//[Offset: 0x568, Size: 12]
	FString CustomLineStr;//[Offset: 0x574, Size: 12]
	enum GamePlayMode;//[Offset: 0x580, Size: 4]
	Vector2D FOVRange;//[Offset: 0x584, Size: 8]
	Vector2D FOVScreenSizeCullingFactorRange;//[Offset: 0x58c, Size: 8]
	bool bFOVChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 1]
	bool PVENightChangeCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x595, Size: 1]
	float SwimRotateX;//[Offset: 0x598, Size: 4]
	bool IsCutdownForHighTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59c, Size: 1]
	FString[] BPGameSubsystemClassPath;//[Offset: 0x5a0, Size: 12]
	WonderfulRecordingCut* WonderfulRecordingCut;//[Offset: 0x5d0, Size: 4]
	ClientInGameReplay* ClientInGameReplay;//[Offset: 0x5d4, Size: 4]
	DeathPlayback* DeathPlayback;//[Offset: 0x5d8, Size: 4]
	CompletePlayback* CompletePlayback;//[Offset: 0x5dc, Size: 4]
	ObservingReplay* ObservingReplay;//[Offset: 0x5e0, Size: 4]
	WonderfulPlayback* WonderfulPlayback;//[Offset: 0x5e4, Size: 4]
	MaterialInstanceDynamic* m_CustomTexMat;//[Offset: 0x5e8, Size: 4]
	AutoRobotModule* AutoModule;//[Offset: 0x5ec, Size: 4]
	FeatureSetCollection* FeatureSetCollection;//[Offset: 0x648, Size: 4]
	AvatarItemDownload* AssociatedAvatarItemDownload;//[Offset: 0x64c, Size: 4]
	FadeDynamicStyleInfo FadeInfo;//[Offset: 0x650, Size: 12]
	float DefaultGray;//[Offset: 0x65c, Size: 4]
	RemoteControlManager* RemoteControlManager;//[Offset: 0x69c, Size: 4]
	void WaterReflectionSettingChanged__DelegateSignature(bool bOpenWaterReflection);// 0x2bb69b8
	void UserQualitySettingChanged__DelegateSignature(int UserQualitySettingLevel);// 0x2bb69b8
	void UserMsaaSettingChanged__DelegateSignature(bool UserMsaaSetting);// 0x2bb69b8
	void UpdateWorldCullDistanceVolumes();// 0x21a41c4
	void TestAyncLoad();// 0x21a41b0
	void SuperBattleWithPlayerName(FString IP, FString PlayerName, int PlayerKey);// 0x21a402c
	void SuperBattle(FString IP);// 0x1ffd0c8
	void StopRemoteControl();// 0x1ee1bb4
	void StartRemoteControlWithFile();// 0x1ee1bb4
	void StartRemoteControl(FString Name, FString Host, int Port);// 0x21a3d78
	void SetWorldDoorCullDistance(int Distance);// 0x21a3d00
	void SetWorldCullDistanceVolumeEnable(FString Name, int Enable);// 0x21a3b64
	void SetWorldCompositionRelativeDistance(int LODIndex, float Distance);// 0x21a3aa8
	void SetWaterReflectionSetting(bool bDoOpen);// 0x21a3a28
	void SetUserVulkanSetting(bool Enable);// 0x21a39a8
	void SetUserSetingShadowQuality(bool bShadow);// 0x21a3928
	void SetUserSetingMobilceContentSCale(float mcs);// 0x21a38b0
	bool SetSoundEffectQuality(int Type);// 0x21a3830
	void SetRenderQuality(RenderQualitySettings RenderQualitySettings);// 0x21a3784
	void SetKillZValue(float KillZ);// 0x21a370c
	void SetHZBMobileState();// 0x1ee1bb4
	void SetFOVScreenSizeCullingFactor(float FOV);// 0x21a3694
	void SetEnableCullDistanceVolumeOffset(FString Name, bool Enable);// 0x21a34ec
	void SetEnableCullDistanceVolumeMovable(FString Name, bool Enable);// 0x21a3344
	static void SetCustomRouteLine();// 0x21a3330
	static void SetAutoMissionType();// 0x21a331c
	void ScreenOrientationChangedDelegate__DelegateSignature(int inScreenOrientation);// 0x2bb69b8
	void ReSetFOVScreenSizeCullingFactor();// 0x21a3308
	void RenderQualitySettingsChanged__DelegateSignature(RenderQualitySettings RenderQualitySettings);// 0x2bb69b8
	void RenderForLowFPS();// 0x21a32f4
	void RemovePPVBlendableMaterial(MaterialInterface* InMaterial);// 0x21a327c
	void RefuseRenderForLowFPS();// 0x21a3268
	void RefreshObjectPoolConfig();// 0x21a3254
	void QuitGame();// 0x21a3240
	void PreSetRenderQuality(RenderQualitySettings RenderQualitySettings, out bool renderLevelChanged);// 0x21a3140
	void PreLoadBPGameSubsystem();// 0x21a312c
	void OnStopAutoTest();// 0x21a3118
	void OnStartAutoTest();// 0x1ee1bb4
	void ObjectPoolServerSwitch(bool bOn);// 0x21a3098
	void ModifyAllLandscapeStreamingDistance(int Distance);// 0x1fa0fcc
	void MakeLevelStreamingDistanceShorterWhenLanded();// 0x21a3084
	bool IsViewedByReplay(const Actor* InActor);// 0x21a3004
	bool isUsingAssumedNameInReplay();// 0x21a2fdc
	bool IsSupportTagCulling();// 0x21a2fc0
	bool IsSupportSwitchSoundEffectQuality();// 0x21a2f98
	bool IsSupportSwitchRenderLevelRuntime();// 0x21a2f70
	bool IsSupportMSAA();// 0x21a2f48
	bool IsSupportLDR();// 0x21a2f20
	static bool IsSecAutoRunTest();// 0x20bade0
	bool IsRunningOnVulkan();// 0x21a2ef8
	bool IsPVENightChangeCullDistance();// 0x21a2ed0
	bool IsPlayingObservingReplay();// 0x21a2ea8
	bool IsOpenMSAA();// 0x21a2e80
	bool IsOpenHDR();// 0x21a2e58
	bool IsIOSOneGigabyteDevice();// 0x1fe93e0
	bool IsInTournamentMap();// 0x21a2e30
	static bool IsGAutomatorTest();// 0x21a2e08
	bool IsFoldingScreenDevice(float baseValue);// 0x21a2d88
	static bool IsAutoRunTestGamePVEProfile();// 0x21a2d60
	static bool IsAutoRunTestGamePVE();// 0x21a2d38
	static bool IsAutoRunTestGameBindCompoment();// 0x21a2d10
	static bool IsAutoRunTestGame();// 0x21a2ce8
	void GVoiceCampRoomChanged__DelegateSignature(enum CampRoomType);// 0x2bb69b8
	void GMStandalone(FString Map);// 0x21a2b90
	WonderfulRecordingCut* GetWonderfulRecordingCut();// 0x21a2b68
	WonderfulPlayback* GetWonderfulPlayback();// 0x21a2b40
	bool GetWaterReflectionSetting();// 0x21a2b18
	bool GetUserVulkanSetting();// 0x21a2af0
	bool GetUserSetingShadowQuality();// 0x21a2ac8
	int GetUserQualitySettingLevel();// 0x21a2aac
	int GetSuppotMSAA();// 0x21a2a90
	int GetSoundEffectQuality();// 0x21a2a68
	RenderQualitySettings GetRenderQualityLastSet();// 0x21a2a10
	RenderQualitySettings GetRenderQualityApplying();// 0x21a29b8
	ObservingReplay* GetObservingReplay();// 0x21a2990
	FString GetLoadWeatherName(FString InWeatherName);// 0x21a2844
	bool GetIsHighWeatherLevel(FString InWeatherLevelName);// 0x21a2778
	bool GetIsFirstInitWaterReflectionSetting();// 0x21a2750
	static STExtraGameInstance* GetInstance();// 0x21a2728
	int GetExactDeviceLevel();// 0x21a2700
	int GetDeviceUpdateVersionFlag();// 0x21a26d0
	FString GetDeviceProfilerLevel();// 0x21a2610
	byte GetDeviceMaxSupportSoundEffect();// 0x21a25e8
	byte GetDeviceMaxSupportLevel();// 0x21a25c0
	int GetDeviceMaxFPSByDeviceLevel(byte renderlevel);// 0x21a2540
	int GetDeviceLimit();// 0x21a2518
	int GetDeviceLevel();// 0x1f24d20
	bool GetDefaultSoundEffectQuality();// 0x21a24f0
	DeathPlayback* GetDeathPlayback();// 0x21a24c8
	FString GetCurrentRHI();// 0x21a2408
	CompletePlayback* GetCompletePlayback();// 0x21a23e0
	ClientInGameReplay* GetClientInGameReplay();// 0x21a23b8
	static int GetAutoRunTestServerIdx();// 0x21a2390
	static FString GetAutoRunPassWD();// 0x21a22d8
	static FString GetAutoRunLuaTest();// 0x21a2220
	static FString GetAutoRunAccount();// 0x21a2168
	AvatarItemDownload* GetAssociatedAvatarItemDownload();// 0x21a2140
	bool GetApplyingShadowQuality();// 0x21a2118
	FString GetActiveDeviceProfile();// 0x21a2058
	void ExecuteCMD(FString CMDkey, FString CMDvalue);// 0x21a1de8
	void EnableStreamingLevelLOD(bool bEnable);// 0x21a1d68
	void EnableObjectPoolByClassName(FName ClassName, bool Enable);// 0x21a1c9c
	void DrawMateritalToTexRenderTarget(TextureRenderTarget2D* TextureRenderTarget, Texture2D* tex1, Texture2D* tex2);// 0x21a1b9c
	bool DeleteSavedFiles(bool allfilesSaved);// 0x21a1b14
	TextureRenderTarget2D* CreateTexRenderTarget(int Width, int Height);// 0x21a1a50
	TextureRenderTarget2D* CreateCustomTex(Texture2D* TexResFirst, Texture2D* TexResSecond);// 0x21a198c
	void ChangeLevelFXActor(FString LevelName, bool isLoad);// 0x21a1884
	void ChangeCullDistanceVolume(bool UpdateCulldisImmediate);// 0x21a1804
	void bHideGroundLevels(bool Disable);// 0x21a1784
	void AutoActiveVerySmoothRenderItems(bool forceClose);// 0x21a1704
	void AutoActiveUltralHighRenderItems();// 0x21a16f0
	void AutoActiveLDR();// 0x21a16dc
	void AttachCameraViewToCharacter(STExtraBaseCharacter* Character);// 0x21a1664
	void AddOrUpdatePPVBlendableMaterial(MaterialInterface* InMaterial, float InWeight);// 0x21a15a8
	bool ActiveStyle_PPForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x21a1498
	void ActiveStyle_PP(byte Level);// 0x21a1418
	bool ActiveStyle_ACESForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x21a1308
	void ActiveStyle(byte Level);// 0x21a1288
	void ActiveNightVision(bool bSet);// 0x21a1208
	void ActiveMSAA(bool bOpenMSAA, int MSAAValue);// 0x21a1140
	void ActiveDynamicStyle(bool bSet, byte Type, float InterpSpeed, bool bNeedDestroyComp);// 0x21a0fdc

--------------------------------
Class: UAEGameInstance.GameInstance.Object
	ClientBaseInfo ClientBaseInfo;//[Offset: 0x1d0, Size: 224]
	delegate EnginePreTick;//[Offset: 0x2b0, Size: 12]
	FrontendHUD* AssociatedFrontendHUD;//[Offset: 0x2ec, Size: 4]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x2f4, Size: 4]
	bool bStandAloneFromLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	delegate OnPreBattleResult;//[Offset: 0x314, Size: 12]
	FString[] HighWeatherNames;//[Offset: 0x320, Size: 12]
	int HighWeatherMinRenderQuality;//[Offset: 0x32c, Size: 4]
	int HighWeatherMaxRenderQuality;//[Offset: 0x330, Size: 4]
	void SetLuaStateWrapper(LuaStateWrapper* TLuaStateWrapper);// 0x23d52cc
	void OpenAssetLoadLog();// 0x1ee1bb4
	void OnPreBattleResult__DelegateSignature();// 0x2bb69b8
	void LuaLeakDetect();// 0x23d52b8
	void LuaDoString(FString LuaString);// 0x23d51fc
	float GetWeatherTime();// 0x23d51e0
	FString GetWeatherLevelName();// 0x23d50c8
	int GetWeatherID();// 0x23d50a8
	LuaStateWrapper* GetLuaStateWrapper();// 0x23d5080
	FString GetLoadWeatherName(FString InWeatherName);// 0x21a2844
	bool GetIsHighWeatherLevel(FString InWeatherLevelName);// 0x21a2778
	FString GetGameId();// 0x23d4fb4
	int GetDeviceLevel();// 0x1f24d20
	UAEDataTable* GetDataTable_Mod(FString tableName);// 0x23d4ef0
	UAEDataTable* GetDataTable(FString tableName);// 0x23d4e2c
	FrontendHUD* GetAssociatedFrontendHUD();// 0x23d4e04
	void CloseAssetLoadLog();// 0x1ee1bb4

--------------------------------
Class: ClientBaseInfo
	FString OpenID;//[Offset: 0x0, Size: 12]
	uint64 RoleID;//[Offset: 0x10, Size: 8]
	FString GameSvrId;//[Offset: 0x18, Size: 12]
	FString GameAppID;//[Offset: 0x24, Size: 12]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	uint64 GameID;//[Offset: 0x48, Size: 8]
	FString BattleServerIP;//[Offset: 0x50, Size: 12]
	uint32 BattleServerPort;//[Offset: 0x5c, Size: 4]
	FString UserName;//[Offset: 0x60, Size: 12]
	FString PicUrl;//[Offset: 0x6c, Size: 12]
	uint32 PlayerKey;//[Offset: 0x78, Size: 4]
	int8 WeatherID;//[Offset: 0x80, Size: 1]
	FString WeatherLevelName;//[Offset: 0x84, Size: 12]
	float WeatherTime;//[Offset: 0x90, Size: 4]
	int[] MrpcsData;//[Offset: 0x94, Size: 12]
	<int,FString> AdvConfig;//[Offset: 0xa4, Size: 60]

--------------------------------
Class: RenderQualitySettings
	byte RenderQualitySetting;//[Offset: 0x0, Size: 1]
	byte RenderStyleSetting;//[Offset: 0x1, Size: 1]
	bool RenderMSAASetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	int RenderMSAAValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UserDetailSetting
	int DeviceQualityLevel;//[Offset: 0x0, Size: 4]
	int TCQualityGrade;//[Offset: 0x4, Size: 4]
	int DeviceMaxSoundEffectLevel;//[Offset: 0x8, Size: 4]
	int DeviceMaxQualityLevel;//[Offset: 0xc, Size: 4]
	int UserQualitySetting;//[Offset: 0x10, Size: 4]
	int DeviceSupportHDR;//[Offset: 0x14, Size: 4]
	int IsOpenHDR;//[Offset: 0x18, Size: 4]
	int UserHDRSetting;//[Offset: 0x1c, Size: 4]
	int IsSupportMSAA;//[Offset: 0x20, Size: 4]
	bool UserMsaaSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	int UserMSAAValue;//[Offset: 0x28, Size: 4]
	float UserMCSSetting;//[Offset: 0x2c, Size: 4]
	int UserShadowSetting;//[Offset: 0x30, Size: 4]
	int UserShadowSwitch;//[Offset: 0x34, Size: 4]
	int UserTeamQualityEnhanceSetting;//[Offset: 0x38, Size: 4]
	int PUBGLimitSetting;//[Offset: 0x3c, Size: 4]
	int PUBGDeviceUpdateFlag;//[Offset: 0x40, Size: 4]
	int PUBGDeviceFPSDef;//[Offset: 0x44, Size: 4]
	int PUBGDeviceFPSLow;//[Offset: 0x48, Size: 4]
	int PUBGDeviceFPSMid;//[Offset: 0x4c, Size: 4]
	int PUBGDeviceFPSHigh;//[Offset: 0x50, Size: 4]
	int PUBGDeviceFPSHDR;//[Offset: 0x54, Size: 4]
	int PUBGDeviceFPSUltralHigh;//[Offset: 0x58, Size: 4]
	bool IsSupportTagCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int PUBGTeamQualityEnhance;//[Offset: 0x60, Size: 4]
	int UserVulkanSetting;//[Offset: 0x64, Size: 4]

--------------------------------
Class: SwitchesInMaps
	FString MapName;//[Offset: 0x0, Size: 12]
	SwitchesItem[] Switches;//[Offset: 0xc, Size: 12]

--------------------------------
Class: SwitchesItem
	FString Key;//[Offset: 0x0, Size: 12]
	float Value;//[Offset: 0xc, Size: 4]
	FString DependKey;//[Offset: 0x10, Size: 12]
	float DependValue;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: RenderItem
	FString RenderKey;//[Offset: 0x0, Size: 12]
	float RenderValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: RenderStyleParameterInMaps
	byte DynamicStyleName;//[Offset: 0x0, Size: 1]
	FString[] PostProcessParams;//[Offset: 0x4, Size: 12]
	ACESParameter ACESParams;//[Offset: 0x10, Size: 40]

--------------------------------
Class: MaterialParametersStyle
	FString StyleName;//[Offset: 0x0, Size: 12]
	MaterialParameterFloat[] Floats;//[Offset: 0xc, Size: 12]
	MaterialParameterVector[] Vectors;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MaterialParameterFloat
	FName Name;//[Offset: 0x0, Size: 8]
	float Value;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MaterialParameterVector
	FName Name;//[Offset: 0x0, Size: 8]
	Vector Vector;//[Offset: 0x8, Size: 12]

--------------------------------
Class: WonderfulRecordingCut.Object
	WonderfulCutOutputData[] WonderfulCutOutputDataList;//[Offset: 0x1c, Size: 12]
	WonderfulCutContinuousKillOutputData[] WonderfulCutContinuousKillOutputDataList;//[Offset: 0x28, Size: 12]
	bool bIsChickenDinner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float ChickenDinnerTimeSecs;//[Offset: 0x60, Size: 4]
	bool bIsShowSmallCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	float ShowSmallCircleTimeSecs;//[Offset: 0x68, Size: 4]
	WonderfulCutShootDamageData[] ShootDamageDataList;//[Offset: 0x6c, Size: 12]
	void StopRecord(bool bRankFirst);// 0x230e38c
	void StartRecord();// 0x230e378
	void SortShootDamageData(out WonderfulCutShootDamageSortData[] LargeCircleDataList, out WonderfulCutShootDamageSortData[] SmallCircleDataList);// 0x230e13c
	void RemoveOutputDataInContinuousKillRange(out WonderfulCutShootDamageSortData[] SortDataList);// 0x230e008
	void CaptureRecordCut(byte CaptureType, int DamagePlayerID, bool bAI, byte ShootDamageType, float ShootDistance, FString CauserName);// 0x230dd2c
	void BuildOutputData();// 0x230dd18
	void BuildContinuousKillOutputData();// 0x230dd04

--------------------------------
Class: WonderfulCutOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 4]
	float EndTimeSecs;//[Offset: 0x4, Size: 4]
	byte WonderfulCutType;//[Offset: 0x8, Size: 1]
	float ShootDistance;//[Offset: 0xc, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WonderfulCutContinuousKillOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 4]
	float EndTimeSecs;//[Offset: 0x4, Size: 4]
	int KillNum;//[Offset: 0x8, Size: 4]
	float FarthestKillDistance;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WonderfulCutShootDamageData
	int DamagePlayerID;//[Offset: 0x0, Size: 4]
	WonderfulCut_OneShootDamage[] ShootDamageList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WonderfulCut_OneShootDamage
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte CaptureType;//[Offset: 0x1, Size: 1]
	byte ShootDamageType;//[Offset: 0x2, Size: 1]
	float DamageTimeSecs;//[Offset: 0x4, Size: 4]
	float ShootDistance;//[Offset: 0x8, Size: 4]
	FString CauserName;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WonderfulCutShootDamageSortData
	float DamageIntervalSecs;//[Offset: 0x0, Size: 4]
	float DamageTimeSecs;//[Offset: 0x4, Size: 4]
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	byte CaptureType;//[Offset: 0x9, Size: 1]
	byte ShootDamageType;//[Offset: 0xa, Size: 1]
	float ShootDistance;//[Offset: 0xc, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: ClientInGameReplay.GameReplay.Object
	bool bGWonderfulPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bDeathPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool bWonderfulPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]
	int ConditionKillNums;//[Offset: 0xdc, Size: 4]
	enum WonderfulKeepState;//[Offset: 0xe0, Size: 1]
	bool bCanKeepReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	DeathReplayData DeathReplayData;//[Offset: 0xe8, Size: 224]
	BattleDeathPlaybackInfo BattleDeathPlaybackInfo;//[Offset: 0x200, Size: 8]
	BattleWonderfulInfo BattleWonderfulInfo;//[Offset: 0x208, Size: 56]
	LobbyWonderfulInfo LobbyWonderfulInfo;//[Offset: 0x240, Size: 96]
	void SetSaveTimestamp(uint64 InCurrentTime);// 0x1f79bc0
	void SetGWonderfulPlaybackSwitch(bool bInSwitch);// 0x1f79b40
	void SetDeathReplayData(out const DeathReplayData ReplayData);// 0x1f79a60
	void SetClientVersion(FString InAppVersion, FString InSrcVersion);// 0x1f79920
	void OnPlayerRespawnNotify();// 0x1f7990c
	void OnKillOrPutDownMessageEvent();// 0x1f798f8
	void OnBattleResultStopRecordingNotify();// 0x1f798e4
	bool IsSwitchedOffByDevice();// 0x1f798bc
	bool HaveWonderfulPlaybackData();// 0x1f79894
	bool HaveDeathPlaybackData();// 0x1f7986c
	enum GetWonderfulKeepState();// 0x1f7982c
	FString GetCompressedFileName();// 0x1f7976c
	int[] GetAllWonderfulPeriodType();// 0x1f796ac
	void EnableWonderfulPlayback(bool bEnable);// 0x1f7962c
	void EnableDeathPlayback(bool bEnable);// 0x1f795ac
	void DeleteWonderfulPeriod(int PeriodIndex);// 0x1f79534
	void ClearWonderfulPeriod();// 0x1f79520
	bool CheckKillNumsCondition();// 0x1f794f8
	void AddWonderfulPeriod(enum InWonderfulType, float InStartTime, float InEndTime, out const float[] InAdditionalData, int InPeriodIndex);// 0x1f79314

--------------------------------
Class: BattleDeathPlaybackInfo
	float DeathPlaybackStartTime;//[Offset: 0x0, Size: 4]
	float DeathPlaybackEndTime;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BattleWonderfulInfo
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint64 GameID;//[Offset: 0x8, Size: 8]
	FString PlayerName;//[Offset: 0x10, Size: 12]
	FString OpenID;//[Offset: 0x1c, Size: 12]
	WonderfulPeriodInfo[] WonderfulPeriodInfoArray;//[Offset: 0x28, Size: 12]

--------------------------------
Class: WonderfulPeriodInfo
	float WonderfulStartTime;//[Offset: 0x0, Size: 4]
	float WonderfulEndTime;//[Offset: 0x4, Size: 4]
	int WonderfulPeriodIndex;//[Offset: 0x8, Size: 4]
	WonderfulTypeInfo WondefulTypeInfo;//[Offset: 0xc, Size: 16]

--------------------------------
Class: WonderfulTypeInfo
	enum WondefulType;//[Offset: 0x0, Size: 1]
	float[] AdditionalData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: LobbyWonderfulInfo
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint64 GameID;//[Offset: 0x8, Size: 8]
	uint64 SaveTimestamp;//[Offset: 0x10, Size: 8]
	FString ModeID;//[Offset: 0x18, Size: 12]
	int SegmentLevel;//[Offset: 0x24, Size: 4]
	float TotalTime;//[Offset: 0x28, Size: 4]
	WonderfulTypeInfo[] TypeInfoArray;//[Offset: 0x2c, Size: 12]
	FString AppVersion;//[Offset: 0x38, Size: 12]
	FString SrcVersion;//[Offset: 0x44, Size: 12]
	enum ErrorCode;//[Offset: 0x50, Size: 1]
	WonderfulWeSeeInfo[] WeSeeInfoArray;//[Offset: 0x54, Size: 12]

--------------------------------
Class: WonderfulWeSeeInfo
	float StartTime;//[Offset: 0x0, Size: 4]
	float EndTime;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DeathPlayback.GameReplay.Object
	DeathReplayData DeathReplayData;//[Offset: 0xd8, Size: 224]
	DeathPlayCameraShot* DeathPlayCameraShot;//[Offset: 0x1b8, Size: 4]
	void SetMurderInfo();// 0x1f96194
	void OnKillOrPutDownMessageEvent();// 0x1f96180
	void OnDeathEvent(STExtraBaseCharacter* BaseCharacter);// 0x1f96108
	void OnClientObserveCharacterEvent();// 0x1f960f4
	bool IsSwitchedOffByDevice();// 0x1f960cc
	bool IsNewDeathReplay();// 0x1f960a4
	bool HaveRecordingData_New();// 0x1f9607c
	FString GetReplayTargetName();// 0x1f95fbc
	STExtraPlayerCharacter* GetDeadCharacter();// 0x1f95f94
	BattleDeathPlaybackInfo GetBattleDeathPlaybackInfo();// 0x1f95f54

--------------------------------
Class: DeathPlayCameraShot.Actor.Object
	FString LuaFilePath;//[Offset: 0x340, Size: 12]
	void StopCameraShot();// 0x1ed11c0
	void StartCameraShot(PlayerController* PlayerController);// 0x1edacf4

--------------------------------
Class: CompletePlayback.GameReplay.Object
	class UserWidget* UIClass;//[Offset: 0xd8, Size: 40]
	UAEUserWidget* ReplayUI;//[Offset: 0x100, Size: 4]
	int MaxHoursForKeepingFiles;//[Offset: 0x104, Size: 4]
	bool isUsingAssumedName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	FString[] ExcludedGameModes;//[Offset: 0x10c, Size: 12]
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 1]
	uint32[] TeammateKeyArray;//[Offset: 0x120, Size: 12]
	byte TlogBatchVersion;//[Offset: 0x12c, Size: 1]
	int64 TlogBatchMaxSize;//[Offset: 0x130, Size: 8]
	uint32 SendTlogInterval;//[Offset: 0x140, Size: 4]
	RecordTlogBatch RecordTlogBatch;//[Offset: 0x148, Size: 16]
	bool bUseWeseeStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	FString RecordTargetUID;//[Offset: 0x15c, Size: 12]
	int RecordTargetTeamID;//[Offset: 0x168, Size: 4]
	<FString,uint32> ReportSequenceMap;//[Offset: 0x228, Size: 60]
	bool PlayDemoWithFilename(FString DemoName);// 0x1f7d978
	FString GetDemoPlayTime();// 0x1f7d8b8

--------------------------------
Class: WonderfulPlayback.GameReplay.Object
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	enum WonderfulPlayType;//[Offset: 0xdb, Size: 1]
	void SetWonderfulPlayType(enum InWonderfulPlayType);// 0x230cec8
	bool PlayReplayMemory();// 0x230cea0
	bool PlayReplayFile(FString DemoName);// 0x230cddc
	bool PlayReplayAgain();// 0x230cdb4
	bool IsSwitchedOffByDevice();// 0x230cd8c
	void GetUserWonderfulList(out FString[] OutWonderfulList, FString InRoleId);// 0x230cbc8
	uint64 GetTargetUID();// 0x230cba0
	FString GetTargetPlayerName();// 0x230cae0
	FString GetTargetOpenID();// 0x230ca20
	uint64 GetTargetGameID();// 0x230c9f8
	FString GetReplayFileNamePart();// 0x230c938
	WonderfulTypeInfo GetCurWonderfulTypeInfo();// 0x230c870
	void GetAllWonderfulList(out FString[] OutWonderfulList);// 0x230c73c
	void FetchBattleWonderfulInfo();// 0x230c728
	uint64[] DecryptFileName(FString DemoFullPathName);// 0x230c5e4
	FString BPGetTargetUID();// 0x230c524
	FString BPGetTargetGameID();// 0x230c464
	enum AnalysizeReplayFile(FString InReplayFileName);// 0x230c3a0
	LobbyWonderfulInfo AnalysizeInfoFile(FString InInfoFileName);// 0x230c2b8

--------------------------------
Class: AutoRobotModule.Object

--------------------------------
Class: FeatureSetCollection.Object
	FeatureConfigItem[] FeatureConfigItemList;//[Offset: 0x1c, Size: 12]
	FeatureSetItem[] FeatureSetItemList;//[Offset: 0x28, Size: 12]

--------------------------------
Class: FeatureConfigItem
	FString TargetClassName;//[Offset: 0x0, Size: 12]
	int bUseFeatureSet;//[Offset: 0xc, Size: 4]
	FString[] ExcludeComponentsList_DS;//[Offset: 0x10, Size: 12]
	FString[] ExcludeComponentsList_Autonomous;//[Offset: 0x1c, Size: 12]
	FString[] ExcludeComponentsList_Team;//[Offset: 0x28, Size: 12]
	FString[] ExcludeComponentsList_NonTeam;//[Offset: 0x34, Size: 12]
	FString[] ExcludeComponentsList_DSAI;//[Offset: 0x40, Size: 12]
	FString[] ExcludeComponentsList_ClientAI;//[Offset: 0x4c, Size: 12]
	FString[] ExcludeComponentsList_Standalone;//[Offset: 0x58, Size: 12]
	FString[] ExcludeComponentsList_StandaloneAI;//[Offset: 0x64, Size: 12]

--------------------------------
Class: FeatureSetItem

--------------------------------
Class: AvatarItemDownload.Object
	int DisableInBattleThreshold;//[Offset: 0x1c, Size: 4]
	void StartDownloadItem(uint32 ItemId, uint32 Priority, delegate OnItemDownloadDelegate);// 0x1ef7a3c
	void StartBatchDownloadItem(uint32[] ItemIDs, uint32 Priority, delegate OnBatchItemDownloadDelegate);// 0x1ef7828
	void SetDisableInBattleThreshold(uint32 InThreshold);// 0x1ef77a8
	int GetDisableInBattleThreshold();// 0x1ed3c74

--------------------------------
Class: FadeDynamicStyleInfo

--------------------------------
Class: RemoteControlManager.Object
	bool Tick(float DeltaTime);// 0x20cee90
	void Stop();// 0x1ee1bb4
	bool BeginWithFile();// 0x1fe93e0
	bool Begin(FString Name, FString Host, int Port);// 0x20cebd4

--------------------------------
Class: BP_STRUCT_BlueholeHurtEffectConfig_type
	FString ColorA_0_53F9F300120D08787CAD4F6400DF1E21;//[Offset: 0x0, Size: 12]
	FString ColorB_1_53FAF340120D08797CAD4F6500DF1E22;//[Offset: 0xc, Size: 12]
	FString ColorG_2_53FFF480120D087E7CAD4F6E00DF1E27;//[Offset: 0x18, Size: 12]
	FString ColorR_3_540AF740120D08897CAD4F7500DF1E32;//[Offset: 0x24, Size: 12]
	FString ID_4_722F46406A7371C3780F88AE0B284084;//[Offset: 0x30, Size: 12]
	FString ResPath_5_101890C0245C77892EEC8CC30D7AECB8;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: BP_STRUCT_KoreaHurtEffectConfig_type
	FString ColorA_0_463EE38073B0E8305CFF6EAE0F8DA261;//[Offset: 0x0, Size: 12]
	FString ColorB_1_463FE3C073B0E8315CFF6EAF0F8DA262;//[Offset: 0xc, Size: 12]
	FString ColorG_2_4644E50073B0E8365CFF6EA80F8DA267;//[Offset: 0x18, Size: 12]
	FString ColorR_3_464FE7C073B0E8415CFF6E9F0F8DA272;//[Offset: 0x24, Size: 12]
	FString ID_4_7F7536C04FE524AB454A945D09B40F34;//[Offset: 0x30, Size: 12]
	FString ResPath_5_0DED414024DEE0F1299E986806532848;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: BP_STRUCT_JapanHurtEffectConfig_type
	FString ColorA_0_7161A1805092E8283C37D458017CA281;//[Offset: 0x0, Size: 12]
	FString ColorB_1_7162A1C05092E8293C37D459017CA282;//[Offset: 0xc, Size: 12]
	FString ColorG_2_7167A3005092E82E3C37D442017CA287;//[Offset: 0x18, Size: 12]
	FString ColorR_3_7172A5C05092E8393C37D449017CA292;//[Offset: 0x24, Size: 12]
	FString ID_4_4B93F4C06A90502378DD12550EB4E124;//[Offset: 0x30, Size: 12]
	FString ResPath_5_5790FF405EB723F9117DDA6C072326A8;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: BP_STRUCT_VNHurtEffectConfig_type
	FString ColorA_0_7D96F0000B2443BE0817B8950597C5D1;//[Offset: 0x0, Size: 12]
	FString ColorB_1_7D97F0400B2443BF0817B8940597C5D2;//[Offset: 0xc, Size: 12]
	FString ColorG_2_7D9CF1800B2443C40817B8930597C5D7;//[Offset: 0x18, Size: 12]
	FString ColorR_3_7DA7F4400B2443CF0817B8840597C5C2;//[Offset: 0x24, Size: 12]
	FString ID_5_57064340101F06091D643D670393B5C4;//[Offset: 0x30, Size: 12]
	FString ResPath_6_41070DC0638F9D1F5F3BC77009F153E8;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: BP_STRUCT_GlobalHurtEffectConfig_type
	FString ColorA_0_22F27B40670E563B084B4DAB0F7D1981;//[Offset: 0x0, Size: 12]
	FString ColorB_1_22F37B80670E563C084B4DA80F7D1982;//[Offset: 0xc, Size: 12]
	FString ColorG_2_22F87CC0670E5641084B4DAD0F7D1987;//[Offset: 0x18, Size: 12]
	FString ColorR_3_23037F80670E564C084B4DB80F7D1992;//[Offset: 0x24, Size: 12]
	FString ID_4_1EC84E807CB64F767420B3EF092FEF24;//[Offset: 0x30, Size: 12]
	FString ResPath_5_7AD0F90011863CA45B459C05075A9648;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: BP_STRUCT_BlueholeHitEffectConfig_type
	FString ID_0_2E9026C02E6AE54D311F78F4021D9A54;//[Offset: 0x0, Size: 12]
	FString Layer1ColorA_1_62E27F005A367E3856CC8AD60E50D7A1;//[Offset: 0xc, Size: 12]
	FString Layer1ColorB_2_62E37F405A367E3956CC8AD50E50D7A2;//[Offset: 0x18, Size: 12]
	FString Layer1ColorG_3_62E880805A367E3E56CC8AD80E50D7A7;//[Offset: 0x24, Size: 12]
	FString Layer1ColorR_4_62F383405A367E4956CC8AC50E50D7B2;//[Offset: 0x30, Size: 12]
	FString Layer2ColorA_5_21EABF4028E6A19F15CD6A640D50D7A1;//[Offset: 0x3c, Size: 12]
	FString Layer2ColorB_6_21EBBF8028E6A1A015CD6A650D50D7A2;//[Offset: 0x48, Size: 12]
	FString Layer2ColorG_7_21F0C0C028E6A1A515CD6A6E0D50D7A7;//[Offset: 0x54, Size: 12]
	FString Layer2ColorR_8_21FBC38028E6A1B015CD6A750D50D7B2;//[Offset: 0x60, Size: 12]
	FString Layer3ColorA_9_60F2FF807796C50644BCCD790C50D7A1;//[Offset: 0x6c, Size: 12]
	FString Layer3ColorB_10_60F3FFC07796C50744BCCD780C50D7A2;//[Offset: 0x78, Size: 12]
	FString Layer3ColorG_11_60F901007796C50C44BCCD770C50D7A7;//[Offset: 0x84, Size: 12]
	FString Layer3ColorR_12_610403C07796C51744BCCD080C50D7B2;//[Offset: 0x90, Size: 12]
	FString Layer4ColorA_13_1FFB3FC04646E86D222AAFA20350D7A1;//[Offset: 0x9c, Size: 12]
	FString Layer4ColorB_14_1FFC40004646E86E222AAFA10350D7A2;//[Offset: 0xa8, Size: 12]
	FString Layer4ColorG_15_200141404646E873222AAFA40350D7A7;//[Offset: 0xb4, Size: 12]
	FString Layer4ColorR_16_200C44004646E87E222AAFB10350D7B2;//[Offset: 0xc0, Size: 12]
	FString ResPath_17_5CB03140570F34CF370E01C100E9B118;//[Offset: 0xcc, Size: 12]
	FString SettingColorA_18_78BEEB001EC66138380176F00A906191;//[Offset: 0xd8, Size: 12]
	FString SettingColorB_19_78BFEB401EC66139380176F70A906192;//[Offset: 0xe4, Size: 12]
	FString SettingColorG_20_78C4EC801EC6613E380176CA0A906197;//[Offset: 0xf0, Size: 12]
	FString SettingColorR_21_78CFEF401EC66149380176C70A906182;//[Offset: 0xfc, Size: 12]

--------------------------------
Class: BP_STRUCT_KoreaHitEffectConfig_type
	FString ID_0_24E657402045C5513215900907325EE4;//[Offset: 0x0, Size: 12]
	FString Layer1ColorA_1_78362F806C3EB5A27592B9890A9BF861;//[Offset: 0xc, Size: 12]
	FString Layer1ColorB_2_78372FC06C3EB5A37592B98A0A9BF862;//[Offset: 0x18, Size: 12]
	FString Layer1ColorG_3_783C31006C3EB5A87592B98F0A9BF867;//[Offset: 0x24, Size: 12]
	FString Layer1ColorR_4_784733C06C3EB5B37592B99A0A9BF872;//[Offset: 0x30, Size: 12]
	FString Layer2ColorA_5_373E6FC03E5CF0D969850E51099BF861;//[Offset: 0x3c, Size: 12]
	FString Layer2ColorB_6_373F70003E5CF0DA69850E56099BF862;//[Offset: 0x48, Size: 12]
	FString Layer2ColorG_7_374471403E5CF0DF69850E2B099BF867;//[Offset: 0x54, Size: 12]
	FString Layer2ColorR_8_374F74003E5CF0EA69850E26099BF872;//[Offset: 0x60, Size: 12]
	FString Layer3ColorA_9_7646B000107B2C1063163E5F089BF861;//[Offset: 0x6c, Size: 12]
	FString Layer3ColorB_10_7647B040107B2C1163163E5E089BF862;//[Offset: 0x78, Size: 12]
	FString Layer3ColorG_11_764CB180107B2C1663163E25089BF867;//[Offset: 0x84, Size: 12]
	FString Layer3ColorR_12_7657B440107B2C2163163E2E089BF872;//[Offset: 0x90, Size: 12]
	FString Layer4ColorA_13_354EF0406299674731C7E897079BF861;//[Offset: 0x9c, Size: 12]
	FString Layer4ColorB_14_354FF0806299674831C7E896079BF862;//[Offset: 0xa8, Size: 12]
	FString Layer4ColorG_15_3554F1C06299674D31C7E891079BF867;//[Offset: 0xb4, Size: 12]
	FString Layer4ColorR_16_355FF4806299675831C7E886079BF872;//[Offset: 0xc0, Size: 12]
	FString SettingColorA_17_7E425B802DDA8C3E19FFB76F013EBDD1;//[Offset: 0xcc, Size: 12]
	FString SettingColorB_18_7E435BC02DDA8C3F19FFB76C013EBDD2;//[Offset: 0xd8, Size: 12]
	FString SettingColorG_19_7E485D002DDA8C4419FFB751013EBDD7;//[Offset: 0xe4, Size: 12]
	FString SettingColorR_20_7E535FC02DDA8C4F19FFB75C013EBDC2;//[Offset: 0xf0, Size: 12]
	FString ResPath_21_4EF521C06CF12EC7512E0C520BBB4D58;//[Offset: 0xfc, Size: 12]

--------------------------------
Class: BP_STRUCT_JapanHitEffectConfig_type
	FString ID_0_2004154035E60089325471EE00425C34;//[Offset: 0x0, Size: 12]
	FString Layer1ColorA_1_56DDED805AB1952A7719137C086EA861;//[Offset: 0xc, Size: 12]
	FString Layer1ColorB_2_56DEEDC05AB1952B7719137D086EA862;//[Offset: 0x18, Size: 12]
	FString Layer1ColorG_3_56E3EF005AB195307719137A086EA867;//[Offset: 0x24, Size: 12]
	FString Layer1ColorR_4_56EEF1C05AB1953B7719136D086EA872;//[Offset: 0x30, Size: 12]
	FString Layer2ColorA_5_15E62DC02CCFD06102CF06030B6EA861;//[Offset: 0x3c, Size: 12]
	FString Layer2ColorB_6_15E72E002CCFD06202CF06020B6EA862;//[Offset: 0x48, Size: 12]
	FString Layer2ColorG_7_15EC2F402CCFD06702CF061D0B6EA867;//[Offset: 0x54, Size: 12]
	FString Layer2ColorR_8_15F732002CCFD07202CF06120B6EA872;//[Offset: 0x60, Size: 12]
	FString Layer3ColorA_9_54EE6E007EEE0B9813DAB5170A6EA861;//[Offset: 0x6c, Size: 12]
	FString Layer3ColorB_10_54EF6E407EEE0B9913DAB5080A6EA862;//[Offset: 0x78, Size: 12]
	FString Layer3ColorG_11_54F46F807EEE0B9E13DAB50D0A6EA867;//[Offset: 0x84, Size: 12]
	FString Layer3ColorR_12_54FF72407EEE0BA913DAB5780A6EA872;//[Offset: 0x90, Size: 12]
	FString Layer4ColorA_13_13F6AE40510C46CF68D4DCAF056EA861;//[Offset: 0x9c, Size: 12]
	FString Layer4ColorB_14_13F7AE80510C46D068D4DCA0056EA862;//[Offset: 0xa8, Size: 12]
	FString Layer4ColorG_15_13FCAFC0510C46D568D4DCA5056EA867;//[Offset: 0xb4, Size: 12]
	FString Layer4ColorR_16_1407B280510C46E068D4DC50056EA872;//[Offset: 0xc0, Size: 12]
	FString SettingColorA_17_08EB1980027FAA0615B3A9020C6BBDF1;//[Offset: 0xcc, Size: 12]
	FString SettingColorB_18_08EC19C0027FAA0715B3A9030C6BBDF2;//[Offset: 0xd8, Size: 12]
	FString SettingColorG_19_08F11B00027FAA0C15B3A91C0C6BBDF7;//[Offset: 0xe4, Size: 12]
	FString SettingColorR_20_08FC1DC0027FAA1715B3A9130C6BBDE2;//[Offset: 0xf0, Size: 12]
	FString ResPath_21_7A17DFC049D32EBF221C5AF806CC4D78;//[Offset: 0xfc, Size: 12]

--------------------------------
Class: BP_STRUCT_VNHitEffectConfig_type
	FString ID_17_1855A3C018BE7CE74928E35406902744;//[Offset: 0x0, Size: 12]
	FString Layer1ColorA_1_4996FC000E081E3E2ECB32D60D3C5A11;//[Offset: 0xc, Size: 12]
	FString Layer1ColorB_2_4997FC400E081E3F2ECB32C90D3C5A12;//[Offset: 0x18, Size: 12]
	FString Layer1ColorG_3_499CFD800E081E442ECB32CC0D3C5A17;//[Offset: 0x24, Size: 12]
	FString Layer1ColorR_4_49A800400E081E4F2ECB33390D3C5A02;//[Offset: 0x30, Size: 12]
	FString Layer2ColorA_5_089F3C405B10804508668D7F0E3C5A11;//[Offset: 0x3c, Size: 12]
	FString Layer2ColorB_6_08A03C805B10804608668D700E3C5A12;//[Offset: 0x48, Size: 12]
	FString Layer2ColorG_7_08A53DC05B10804B08668D750E3C5A17;//[Offset: 0x54, Size: 12]
	FString Layer2ColorR_8_08B040805B10805608668D600E3C5A02;//[Offset: 0x60, Size: 12]
	FString Layer3ColorA_9_47A77C802818E24C47025FA50F3C5A11;//[Offset: 0x6c, Size: 12]
	FString Layer3ColorB_10_47A87CC02818E24D47025FA40F3C5A12;//[Offset: 0x78, Size: 12]
	FString Layer3ColorG_11_47AD7E002818E25247025FAF0F3C5A17;//[Offset: 0x84, Size: 12]
	FString Layer3ColorR_12_47B880C02818E25D47025FB40F3C5A02;//[Offset: 0x90, Size: 12]
	FString Layer4ColorA_13_06AFBCC0752144532F29F712003C5A11;//[Offset: 0x9c, Size: 12]
	FString Layer4ColorB_14_06B0BD00752144542F29F713003C5A12;//[Offset: 0xa8, Size: 12]
	FString Layer4ColorG_15_06B5BE40752144592F29F6EC003C5A17;//[Offset: 0xb4, Size: 12]
	FString Layer4ColorR_16_06C0C100752144642F29F6E3003C5A02;//[Offset: 0xc0, Size: 12]
	FString SettingColorA_18_5304E80078FE8A3257CFE4B00B489841;//[Offset: 0xcc, Size: 12]
	FString SettingColorB_19_5305E84078FE8A3357CFE4B10B489842;//[Offset: 0xd8, Size: 12]
	FString SettingColorG_20_530AE98078FE8A3857CFE48E0B489847;//[Offset: 0xe4, Size: 12]
	FString SettingColorR_21_5315EC4078FE8A4357CFE4810B489852;//[Offset: 0xf0, Size: 12]
	FString ResPath_22_064D2E40633E42F55CDC31C801A16AC8;//[Offset: 0xfc, Size: 12]

--------------------------------
Class: BP_STRUCT_GlobalHitEffectConfig_type
	FString ID_0_0DB94F0058294F3A04F02029003DEC94;//[Offset: 0x0, Size: 12]
	FString Layer1ColorA_1_193A67401A3937D379BAA750090EF7D1;//[Offset: 0xc, Size: 12]
	FString Layer1ColorB_2_193B67801A3937D479BAA753090EF7D2;//[Offset: 0x18, Size: 12]
	FString Layer1ColorG_3_194068C01A3937D979BAA756090EF7D7;//[Offset: 0x24, Size: 12]
	FString Layer1ColorR_4_194B6B801A3937E479BAA763090EF7C2;//[Offset: 0x30, Size: 12]
	FString Layer2ColorA_5_5842A7807EFA541A4F4A16C50C0EF7D1;//[Offset: 0x3c, Size: 12]
	FString Layer2ColorB_6_5843A7C07EFA541B4F4A16C40C0EF7D2;//[Offset: 0x48, Size: 12]
	FString Layer2ColorG_7_5848A9007EFA54204F4A16C30C0EF7D7;//[Offset: 0x54, Size: 12]
	FString Layer2ColorR_8_5853ABC07EFA542B4F4A16F40C0EF7C2;//[Offset: 0x60, Size: 12]
	FString Layer3ColorA_9_174AE7C063BB706137E935960B0EF7D1;//[Offset: 0x6c, Size: 12]
	FString Layer3ColorB_10_174BE80063BB706237E935950B0EF7D2;//[Offset: 0x78, Size: 12]
	FString Layer3ColorG_11_1750E94063BB706737E935980B0EF7D7;//[Offset: 0x84, Size: 12]
	FString Layer3ColorR_12_175BEC0063BB707237E935850B0EF7C2;//[Offset: 0x90, Size: 12]
	FString Layer4ColorA_13_56532800487C8CA85663AED0060EF7D1;//[Offset: 0x9c, Size: 12]
	FString Layer4ColorB_14_56542840487C8CA95663AED1060EF7D2;//[Offset: 0xa8, Size: 12]
	FString Layer4ColorG_15_56592980487C8CAE5663AEDA060EF7D7;//[Offset: 0xb4, Size: 12]
	FString Layer4ColorR_16_56642C40487C8CB95663AEC1060EF7C2;//[Offset: 0xc0, Size: 12]
	FString SettingColorA_17_5126B340631EA20D7C7C0CF6066E64F1;//[Offset: 0xcc, Size: 12]
	FString SettingColorB_18_5127B380631EA20E7C7C0CF7066E64F2;//[Offset: 0xd8, Size: 12]
	FString SettingColorG_19_512CB4C0631EA2137C7C0CF0066E64F7;//[Offset: 0xe4, Size: 12]
	FString SettingColorR_20_5137B780631EA21E7C7C0CE7066E64E2;//[Offset: 0xf0, Size: 12]
	FString ResPath_21_2BA8B9801447FA32396A63CB0CCBB678;//[Offset: 0xfc, Size: 12]

--------------------------------
Class: BP_STRUCT_GuideText_type
	int GuideID_0_A5FF72E542F02CBBCE5E2696B9B5AE1E;//[Offset: 0x0, Size: 4]
	int TriggerTimes_1_092A596A4CD84CDBCEAB7CAC1E5C6784;//[Offset: 0x4, Size: 4]
	FString text4_2_0681BED6478BF4BE2672C1B126FF6E1E;//[Offset: 0x8, Size: 12]
	FString text1_3_0B618F7F449909BFB58A3E98E3DB73DE;//[Offset: 0x14, Size: 12]
	FString text2_4_F5471C1F44A2ADB1B71AD3A2991F2C29;//[Offset: 0x20, Size: 12]
	FString text3_5_5E534A744DCD782353B99F94D72CF42E;//[Offset: 0x2c, Size: 12]
	int IsFloat_7_5631F6C015B003AF4D2C60B3037F0B64;//[Offset: 0x38, Size: 4]
	int ShapeType_8_6317EF000ACBA582315244FA09B48A85;//[Offset: 0x3c, Size: 4]
	int XOffset_10_1D6AFA00689E1E0E6D67A078005D0714;//[Offset: 0x40, Size: 4]
	int YOffset_11_5C733A401ADE00450611FA950F5D0704;//[Offset: 0x44, Size: 4]
	int OutOffset_12_336A92002DF8BFBC469DDB2F0A823C04;//[Offset: 0x48, Size: 4]

--------------------------------
Class: BP_STRUCT_JKColorBlindnessConfig_type
	FString CBBlueColorA_0_1A321BC068EC5CE10F6EEF990DA69541;//[Offset: 0x0, Size: 12]
	FString CBBlueColorB_1_1A331C0068EC5CE20F6EEF9E0DA69542;//[Offset: 0xc, Size: 12]
	FString CBBlueColorG_2_1A381D4068EC5CE70F6EEF930DA69547;//[Offset: 0x18, Size: 12]
	FString CBBlueColorR_3_1A43200068EC5CF20F6EEFAE0DA69552;//[Offset: 0x24, Size: 12]
	FString CBGreenColorA_4_4571D60028624EFE0DB593EC02ABB561;//[Offset: 0x30, Size: 12]
	FString CBGreenColorB_5_4572D64028624EFF0DB593E302ABB562;//[Offset: 0x3c, Size: 12]
	FString CBGreenColorG_6_4577D78028624F040DB593E602ABB567;//[Offset: 0x48, Size: 12]
	FString CBGreenColorR_7_4582DA4028624F0F0DB5939302ABB572;//[Offset: 0x54, Size: 12]
	FString CBRedColorA_8_41F0E0805F44DE5C3DFB5D0601E64FD1;//[Offset: 0x60, Size: 12]
	FString CBRedColorB_9_41F1E0C05F44DE5D3DFB5D0701E64FD2;//[Offset: 0x6c, Size: 12]
	FString CBRedColorG_10_41F6E2005F44DE623DFB5D0C01E64FD7;//[Offset: 0x78, Size: 12]
	FString CBRedColorR_11_4201E4C05F44DE6D3DFB5D1701E64FC2;//[Offset: 0x84, Size: 12]
	FString ID_12_0AB56BC00DEC06DD7427B978061094A4;//[Offset: 0x90, Size: 12]
	FString NormalColorA_13_71D012C041F9112D68401C9A05E69591;//[Offset: 0x9c, Size: 12]
	FString NormalColorB_14_71D1130041F9112E68401C9B05E69592;//[Offset: 0xa8, Size: 12]
	FString NormalColorG_15_71D6144041F9113368401C9405E69597;//[Offset: 0xb4, Size: 12]
	FString NormalColorR_16_71E1170041F9113E68401CAB05E69582;//[Offset: 0xc0, Size: 12]

--------------------------------
Class: BP_STRUCT_VNColorBlindnessConfig_type
	FString CBBlueColorA_0_48A05F80565F18D25FB7B3780DADA841;//[Offset: 0x0, Size: 12]
	FString CBBlueColorB_1_48A15FC0565F18D35FB7B3790DADA842;//[Offset: 0xc, Size: 12]
	FString CBBlueColorG_2_48A66100565F18D85FB7B3760DADA847;//[Offset: 0x18, Size: 12]
	FString CBBlueColorR_3_48B163C0565F18E35FB7B3090DADA852;//[Offset: 0x24, Size: 12]
	FString CBGreenColorA_4_797A39C016C4BF072EFE2933021A8561;//[Offset: 0x30, Size: 12]
	FString CBGreenColorB_5_797B3A0016C4BF082EFE2932021A8562;//[Offset: 0x3c, Size: 12]
	FString CBGreenColorG_6_79803B4016C4BF0D2EFE290D021A8567;//[Offset: 0x48, Size: 12]
	FString CBGreenColorR_7_798B3E0016C4BF182EFE2902021A8572;//[Offset: 0x54, Size: 12]
	FString CBRedColorA_8_77B50440671A3E3B5F43162201E6BC01;//[Offset: 0x60, Size: 12]
	FString CBRedColorB_9_77B60480671A3E3C5F43162101E6BC02;//[Offset: 0x6c, Size: 12]
	FString CBRedColorG_10_77BB05C0671A3E415F43162401E6BC07;//[Offset: 0x78, Size: 12]
	FString CBRedColorR_11_77C60880671A3E4C5F43163101E6BC12;//[Offset: 0x84, Size: 12]
	FString ID_19_20AE6F800EBB4E6435B639D10F2D94A4;//[Offset: 0x90, Size: 12]
	FString NormalColorA_13_203E56802F6BCD1E3143D4E005EDA891;//[Offset: 0x9c, Size: 12]
	FString NormalColorB_14_203F56C02F6BCD1F3143D4E105EDA892;//[Offset: 0xa8, Size: 12]
	FString NormalColorG_15_204458002F6BCD243143D4EA05EDA897;//[Offset: 0xb4, Size: 12]
	FString NormalColorR_16_204F5AC02F6BCD2F3143D49105EDA882;//[Offset: 0xc0, Size: 12]

--------------------------------
Class: BP_STRUCT_ColorBlindnessConfig_type
	FString CBBlueColorA_19_362F368060B105F828F4BADE0EAF4721;//[Offset: 0x0, Size: 12]
	FString CBBlueColorB_27_363036C060B105F928F4BADF0EAF4722;//[Offset: 0xc, Size: 12]
	FString CBBlueColorG_29_3635380060B105FE28F4BAA40EAF4727;//[Offset: 0x18, Size: 12]
	FString CBBlueColorR_23_36403AC060B1060928F4BAAF0EAF4732;//[Offset: 0x24, Size: 12]
	FString CBGreenColorA_17_5F0D90C03949D01D2EBEC7C9023492B1;//[Offset: 0x30, Size: 12]
	FString CBGreenColorB_28_5F0E91003949D01E2EBEC7CE023492B2;//[Offset: 0x3c, Size: 12]
	FString CBGreenColorG_32_5F1392403949D0232EBEC7C3023492B7;//[Offset: 0x48, Size: 12]
	FString CBGreenColorR_25_5F1E95003949D02E2EBEC7DE023492A2;//[Offset: 0x54, Size: 12]
	FString CBRedColorA_18_12FF5B40473229556BCC523607F696F1;//[Offset: 0x60, Size: 12]
	FString CBRedColorB_26_13005B80473229566BCC522907F696F2;//[Offset: 0x6c, Size: 12]
	FString CBRedColorG_30_13055CC04732295B6BCC522C07F696F7;//[Offset: 0x78, Size: 12]
	FString CBRedColorR_24_13105F80473229666BCC521907F696E2;//[Offset: 0x84, Size: 12]
	FString ID_35_5A5046801FF3596E474DD8DF0D82F7A4;//[Offset: 0x90, Size: 12]
	FString NormalColorA_31_0DCD2D8036DBB8744E67B41408EF47F1;//[Offset: 0x9c, Size: 12]
	FString NormalColorB_22_0DCE2DC036DBB8754E67B41508EF47F2;//[Offset: 0xa8, Size: 12]
	FString NormalColorG_21_0DD32F0036DBB87A4E67B41E08EF47F7;//[Offset: 0xb4, Size: 12]
	FString NormalColorR_20_0DDE31C036DBB8854E67B42508EF47E2;//[Offset: 0xc0, Size: 12]

--------------------------------
Class: BP_STRUCT_BattleSound_type
	FString Bank_0_184E3DC068C2BF413A229E4A0982F59B;//[Offset: 0x0, Size: 12]
	int ID_1_2A476200426F1DEA2637969B03D982A4;//[Offset: 0xc, Size: 4]
	FString Region_2_79F1F7C0268B0C797F1F0D4403F807DE;//[Offset: 0x10, Size: 12]
	FString Event_3_1B79FF4077296A014966EB0F082BF7C4;//[Offset: 0x1c, Size: 12]
	int SoundID_4_46DBA4405283EB7B3BA231390F57D0E4;//[Offset: 0x28, Size: 4]

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 12]
	byte ArgumentValueType;//[Offset: 0xc, Size: 1]
	FText ArgumentValue;//[Offset: 0x10, Size: 12]
	int ArgumentValueInt;//[Offset: 0x1c, Size: 4]
	float ArgumentValueFloat;//[Offset: 0x20, Size: 4]
	enum ArgumentValueGender;//[Offset: 0x24, Size: 1]

--------------------------------
Class: BP_STRUCT_EmoteBPTable_type
	FString Path_0_247605C000C1809320361CC70BC26958;//[Offset: 0x0, Size: 12]
	FString CName_1_20BFF38058E1993E3181765E0C385985;//[Offset: 0xc, Size: 12]
	int ID_2_6D1FE5C03D4B9B6365DA363A01FBC3D4;//[Offset: 0x18, Size: 4]
	FString LobbyPath_3_17CBE3C0186812E1377BBB6D07222BE8;//[Offset: 0x1c, Size: 12]
	FString LobbyEmoteAdapt_4_6274998039C4B44E5D4A1AFE0DB5A954;//[Offset: 0x28, Size: 12]

--------------------------------
Class: ItemRecordData
	int ItemId;//[Offset: 0x4, Size: 4]
	int itemType;//[Offset: 0x8, Size: 4]
	int ItemSubType;//[Offset: 0xc, Size: 4]
	int BPID;//[Offset: 0x10, Size: 4]
	int WeightforOrder;//[Offset: 0x14, Size: 4]
	int Worth;//[Offset: 0x18, Size: 4]
	int ItemCapacity;//[Offset: 0x1c, Size: 4]
	int[] Attach;//[Offset: 0x20, Size: 12]
	int BulletID;//[Offset: 0x2c, Size: 4]
	int ProposeBulletNum;//[Offset: 0x30, Size: 4]
	int Durability;//[Offset: 0x34, Size: 4]
	int ItemSoundID;//[Offset: 0x38, Size: 4]
	int ItemQuality;//[Offset: 0x3c, Size: 4]
	int ItemPickupRule;//[Offset: 0x40, Size: 4]
	int AIFullVaule;//[Offset: 0x44, Size: 4]
	float Weight;//[Offset: 0x48, Size: 4]
	int MaxCount;//[Offset: 0x4c, Size: 4]
	bool AutoEquipandDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool Consumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool Equipable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	FString ItemName;//[Offset: 0x54, Size: 12]
	FString ItemBigIcon;//[Offset: 0x60, Size: 12]
	FString ItemDesc;//[Offset: 0x6c, Size: 12]
	FString ItemSmallIcon;//[Offset: 0x78, Size: 12]
	FString KillWhiteIcon;//[Offset: 0x84, Size: 12]
	FString ItemWhiteIcon;//[Offset: 0x90, Size: 12]
	FString RedEmotionSoundPath;//[Offset: 0x9c, Size: 12]
	FString PickupDesc;//[Offset: 0xa8, Size: 12]
	FString BackpackSimple;//[Offset: 0xb4, Size: 12]
	FString SpecialIcon;//[Offset: 0xc0, Size: 12]
	FString ItemBigIcon2;//[Offset: 0xcc, Size: 12]
	FString ItemSmallIcon2;//[Offset: 0xd8, Size: 12]
	int Electricity;//[Offset: 0xe4, Size: 4]
	int ItemAttrsFlag;//[Offset: 0xe8, Size: 4]

--------------------------------
Class: UIAdaptationStructure
	FString DeviceName_2_A8CF6E1F40D8116DD8A17D97AD6515ED;//[Offset: 0x0, Size: 12]
	float LeftOffset_5_61C5916847A6DB0845C03799C935F0CD;//[Offset: 0xc, Size: 4]
	float RightOffset_7_338321234218040563FB88B423EA8023;//[Offset: 0x10, Size: 4]
	float TopOffset_9_68D32A004301A63A4ABF20B129DBC8DE;//[Offset: 0x14, Size: 4]
	float BottomOffset_11_0C31E5BC4AA9CD8E9DBA4A9D456E101E;//[Offset: 0x18, Size: 4]

--------------------------------
Class: GlobalConfigActor.Actor.Object
	bool bInitComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	void Init();// 0x1f3cb34

--------------------------------
Class: BP_SAVEGAME_UIElemLayout_C.SaveGame.Object
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict1;//[Offset: 0x20, Size: 60]
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict2;//[Offset: 0x5c, Size: 60]
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict3;//[Offset: 0x98, Size: 60]
	bool IsDataValid1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool IsDataValid2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	bool IsDataValid3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	float RushTriggerLength1;//[Offset: 0xd8, Size: 4]
	float RushTriggerLength2;//[Offset: 0xdc, Size: 4]
	float RushTriggerLength3;//[Offset: 0xe0, Size: 4]
	FString SaveSlotName;//[Offset: 0xe4, Size: 12]
	FString LayoutName1;//[Offset: 0xf0, Size: 12]
	FString LayoutName2;//[Offset: 0xfc, Size: 12]
	FString LayoutName3;//[Offset: 0x108, Size: 12]
	int TimeTag;//[Offset: 0x114, Size: 4]
	int[] InvalidArray1;//[Offset: 0x118, Size: 12]
	int[] InvalidArray2;//[Offset: 0x124, Size: 12]
	int[] InvalidArray3;//[Offset: 0x130, Size: 12]

--------------------------------
Class: BP_STRUCT_UIElemLayoutDetail
	int Type_23_55DBE0E544DAFBECC9EFB6BB17ABA028;//[Offset: 0x0, Size: 4]
	Vector2D Scale_17_041C81B04F88C44906CC9C9124ED2CF5;//[Offset: 0x4, Size: 8]
	float Opacity_7_DA1E8BC343F74DC18A9B0FBB6DA17CCB;//[Offset: 0xc, Size: 4]
	Anchors AnchorType_16_8C6A88824F5B4009F1532EBCA05CA534;//[Offset: 0x10, Size: 16]
	Vector2D RelativePos_19_41E2D4F647EC741044D6AC9C8DD94ED4;//[Offset: 0x20, Size: 8]
	Vector2D OriginSize_22_61D9CB8A48FFB415806311A1771BDF74;//[Offset: 0x28, Size: 8]

--------------------------------
Class: TemBPDataAddr
	uint64 Value;//[Offset: 0x0, Size: 8]

--------------------------------
Class: PubgmAutoRun.ActorComponent.Object
	delegate PubgmAutoRunSimulateAction;//[Offset: 0xbc, Size: 12]
	bool bRoutePointInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	XTPoint*[] RoutePoints;//[Offset: 0xcc, Size: 12]
	void VehicleTowardTo(float X, float Y, float Z);// 0x20bb0e0
	void VehicleMoveTo(float X, float Y, float Z);// 0x20bafe0
	void VehicleMoveAndTowardTo(float X, float Y, float Z, float x1, float y1, float Z1);// 0x20bae08
	void OnPubgmAutoRunSimulateAction__DelegateSignature(int SimActionType);// 0x2bb69b8
	static bool NeedCmdAutoRun();// 0x20bade0
	void NativeSimulateAction(int SimActionType);// 0x20bad68
	void InitRoutePoint();// 0x20bad54
	void GMGotoPosition(int X, int Y, int Z);// 0x20bac54
	Vector[] GetRangeActorsPostions(int ActorType, Vector OriginPos, float RangeRadius);// 0x20baabc
	Vector GetPoisonCircleLocation();// 0x20baa74
	static float GetPlayerSpeed(int SpeedIdx);// 0x20ba9f0
	bool GetNearestXTPointToVehicle(out Transform FirstPoint, out Transform SecendPoint, bool bNext);// 0x20ba840
	float ForceVehiclePosPull(bool bNext);// 0x20ba7b4

--------------------------------
Class: XTPoint.Actor.Object
	int CustomIValue;//[Offset: 0x2fc, Size: 4]
	int GetIntValueTwo();// 0x2314fdc
	int GetIntValueThree();// 0x1ed4438
	int GetIntValueOne();// 0x225553c

--------------------------------
Class: AutoTestInterface.ActorComponent.Object
	void StarJumpPlane();// 0x1ee0ef0

--------------------------------
Class: AutoRunTest.ActorComponent.Object
	bool IsSimulateZombieBoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]

--------------------------------
Class: BP_PlayerPawn_C.STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x31b0, Size: 4]
	void HandleOnLanded(float ForceLandTime, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2bb69b8
	void GetGameModeState(out FName CurModeState, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, FName CallFunc_GetGameModeState_ReturnValue);// 0x2bb69b8
	void CallTryVault(bool bTryEnter);// 0x2bb69b8
	FString GetGrenadeNameByGrenadeID(int InGrenadeID, <int,FName> CallFunc_GetGrenadeIDToNameDict_ReturnValue, FName CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue);// 0x2bb69b8
	void SetTpCameraFov(float FOV, float CallFunc_NormalizeAxis_ReturnValue, float CallFunc_ClampAngle_ReturnValue);// 0x2bb69b8
	void OnRep_Cache(ForceStill)();// 0x2bb69b8
	void SetCapsuleParentBounds(bool UseParentBounds);// 0x2bb69b8
	void ClearDecalBakingRTCache(GameStateBase* CallFunc_GetGameState_ReturnValue, DecalBakingActorMgr* CallFunc_GetWorldInstance_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HasAuthority_ReturnValue);// 0x2bb69b8
	void GetGrenadeWeaponMap(out <FName,class STExtraWeapon> OutWeaponMap, <FName,class STExtraWeapon> CallFunc_GetGrenadeLogicSocketToWeaponClassMap_ReturnValue, bool CallFunc_EnableLoadWeaponClassMapOptimize_ReturnValue, int ___int_Variable, int CallFunc_Add_IntInt_ReturnValue, <FName,FString> CallFunc_GetGrenadeLogicSocketToWeaponPathMap_ReturnValue, FName[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, class STExtraWeapon CallFunc_GetWeaponClassFromPath_ReturnValue);// 0x2bb69b8
	void TriggerActivityByID(bool GetNameOnly, out FString UIName, out int ActivityID, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BattleInteractiveDataStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x2bb69b8
	void RegisterInitGrenadeMap(delegate K2Node_CreateDelegate_OutputDelegate, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void InitGrenadeMapData(<FName,class STExtraWeapon> CallFunc_GetGrenadeWeaponMap_OutWeaponMap, WeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, int[] CallFunc_GetGrenadeIDsOrder_ReturnValue, bool CallFunc_IsValid_ReturnValue, <int,FName> CallFunc_GetGrenadeIDToNameDict_ReturnValue, <int,FString> CallFunc_GetGrenadeToSlotIndexDict_ReturnValue);// 0x2bb69b8
	bool IsAngledSightAvailable(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue2, bool CallFunc_EqualEqual_VectorVector_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x2bb69b8
	void RefreshAngledSightUI(bool HaveAngledSight, bool IsAngledSight, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void ShowAngledSightState(bool IsAngled, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchInteger_CmpSuccess);// 0x2bb69b8
	void GetAngledSightRotator(STExtraShootWeapon* NewParam, out Rotator NewParam1, int CallFunc_GetWeaponID_ReturnValue, int CallFunc_GetScopeID_ReturnValue, int CallFunc_GetAdjustWeaponID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_WeaponScopeFOV_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, FString CallFunc_Conv_RotatorToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x2bb69b8
	void AngledSightAnimLogic(byte Selection, STExtraShootWeapon* ShootWeapon, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_GetAngledSightRotator_NewParam1, int CallFunc_GetScopeID_ReturnValue, int CallFunc_GetWeaponID_ReturnValue, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetController_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsAngledSight_ReturnValue, bool CallFunc_HaveAngledSight_ReturnValue, DollyZoomParam CallFunc_UpdateScopeCameraOffsets_Param, float CallFunc_GetScopeFov_ReturnValue, DollyZoomParam K2Node_MakeStruct_DollyZoomParam, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue2);// 0x2bb69b8
	void AngledSightAnimUpdate(float InputPin, bool bIsOnlyTurn, Vector CallFunc_GetSocketLocation_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsAngledSightAvailable_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue2, Vector CallFunc_VLerp_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, float CallFunc_SwitchSightConfigMaterial_ReturnValue, float CallFunc_ShowReflectorSightTPPMaterial_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue2, float CallFunc_Lerp_ReturnValue3, DollyZoomParam K2Node_MakeStruct_DollyZoomParam, bool CallFunc_IsAngledSight_ReturnValue2, Rotator CallFunc_RLerp_ReturnValue);// 0x2bb69b8
	void Replay_CreateEnemyFrameUI(bool isPlayingCompletePlayback, bool is enemy, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, MaterialBillboardComponent* CallFunc_AddComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue);// 0x2bb69b8
	void Replay_SetVisiableOfFrameUI(bool is Visiable, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void UpdateEmoteWeaponIdInfo(int ID, out bool Ret, int Length, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, STExtraWeapon*[] CallFunc_GetAllInventoryWeaponList_ReturnValue, int CallFunc_Array_Length_ReturnValue, STExtraWeapon* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID CallFunc_GetItemDefineID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x2bb69b8
	void AllowWater(out bool bCanEnter, bool CallFunc_CanEnterWaterArea_ReturnValue);// 0x2bb69b8
	bool ShouldRedBlood(bool CallFunc_GetRedBloodSwitch_ReturnValue);// 0x2bb69b8
	void CheckHasVehicleAvatar(STExtraVehicleBase* InVehicle, STExtraBaseCharacter* PlayerCharacter, out int InItemID, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bb69b8
	void ChangeCurVehicleAvatar(STExtraVehicleBase* InVehicle, STExtraBaseCharacter* CallFunc_GetDriver_ReturnValue, STExtraBaseCharacter* CallFunc_GetDriver_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsDedicatedServer_ReturnValue, STExtraPlayerController* CallFunc_GetController_ReturnValue2, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsDriver_ReturnValue);// 0x2bb69b8
	void HandleOnChangedVehicleSeat(STExtraVehicleBase* CallFunc_GetCurrentVehicle_ReturnValue);// 0x2bb69b8
	void GetMasterBoneComponent(out MeshComponent* MasterBoneComponent);// 0x2bb69b8
	void InitDefaultAvatarByResID(int AGender, int Head, int Hair);// 0x2bb69b8
	void GetGrenadeCameraShakeByDir(Vector ImpulseDir, out class CameraShake RetVar, class CameraShake RetVar, Vector CallFunc_Multiply_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, Vector CallFunc_GetActorRightVector_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue2, Vector CallFunc_Normal_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue3, Vector CallFunc_Normal_ReturnValue3, FString CallFunc_Conv_VectorToString_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x2bb69b8
	BackpackEmoteHandle* GetEmoteHandle(int ItemId, BP_STExtraPlayerController_C* PC, int ID, ItemDefineID K2Node_MakeStruct_ItemDefineID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, BackpackEmoteHandle* K2Node_DynamicCast_AsBackpack_Emote_Handle, bool K2Node_DynamicCast_bSuccess2, BackpackEmoteHandle* CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3);// 0x2bb69b8
	FString GetShootWeaponNameByWeapon(int ItemDefineID, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x2bb69b8
	CameraComponent* GetThirdPersonCamera();// 0x2bb69b8
	SpringArmComponent* GetThirdPersonSpringArm();// 0x2bb69b8
	CameraComponent* GetFPPCamera();// 0x2bb69b8
	SpringArmComponent* GetFPPSpringArm();// 0x2bb69b8
	CameraComponent* GetFirstPersonCamera();// 0x2bb69b8
	SpringArmComponent* GetFirstPersonSpringArm();// 0x2bb69b8
	CameraComponent* GetScopeCamera();// 0x2bb69b8
	SpringArmComponent* GetScopeSpringArm();// 0x2bb69b8
	ActorComponent*[] GetNonSimulatedComponents_OnFighting(ActorComponent*[] K2Node_MakeArray_Array);// 0x2bb69b8
	bool ShouldAutoScopeWhenPeek(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates(ActorComponent*[] K2Node_MakeArray_Array);// 0x2bb69b8
	void GetControllerViewCamera(out CameraComponent* Camera, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, Actor* CallFunc_GetViewTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, CameraComponent*[] CallFunc_GetComponentsByClass_ReturnValue, int CallFunc_Array_Length_ReturnValue, CameraComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsActive_ReturnValue);// 0x2bb69b8
	ActorComponent*[] GetNonSimulatedComponents(ActorComponent* Components, ActorComponent*[] K2Node_MakeArray_Array);// 0x2bb69b8
	ActorComponent*[] GetNonDedicatedComponents(ActorComponent*[] Components, ActorComponent*[] K2Node_MakeArray_Array, ActorComponent*[] K2Node_MakeArray_Array2);// 0x2bb69b8
	void HandleOnDetachedVehicle(STExtraVehicleBase* NewParam, bool CallFunc_IsValid_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult);// 0x2bb69b8
	void HandleOnAttachedVehicle(STExtraVehicleBase* InVehicle, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	SpringArmComponent* GetActiveSpringArm(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsActive_ReturnValue);// 0x2bb69b8
	void AimInterupted(Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x2bb69b8
	void GetWeapon(out Vector NewParam, out Rotator NewParam1, out bool bHaveWeapon, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale);// 0x2bb69b8
	void ClientHandlePreOnPlane(bool CallFunc_SwitchPoseState_ReturnValue);// 0x2bb69b8
	void ResetBPCameraSetting();// 0x2bb69b8
	void ShowDebugArrow(SceneComponent* self2, Rotator InRot, LinearColor Color, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x2bb69b8
	void IsAutonomous(out bool NewParam, bool CallFunc_HasAuthority_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2bb69b8
	void PickUp(PickUpWrapperActor* NewParam);// 0x2bb69b8
	void DoPickUpTarget();// 0x2bb69b8
	void RotateMesh(Rotator NewParam, Rotator NewLocalVar, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Subtract_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue);// 0x2bb69b8
	void SetAllCollisionEnabled(bool bEnable);// 0x2bb69b8
	void MoveOutScope();// 0x2bb69b8
	void MoveInScope(bool bHasSetMesh);// 0x2bb69b8
	void Reload(bool CallFunc_ReloadCurrentWeapon_ReturnValue);// 0x2bb69b8
	void SwitchCrouch(byte NewParam, byte PreState, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum2_CmpSuccess);// 0x2bb69b8
	void UserConstructionScript(CameraComponent* ___object_Variable, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Add_ReturnValue3, int CallFunc_Array_Add_ReturnValue4, int CallFunc_Array_Add_ReturnValue5, int CallFunc_Array_Add_ReturnValue6);// 0x2bb69b8
	void ParachuteCamBlend__FinishedFunc();// 0x2bb69b8
	void ParachuteCamBlend__UpdateFunc();// 0x2bb69b8
	void LerpAlpha__FinishedFunc();// 0x2bb69b8
	void LerpAlpha__UpdateFunc();// 0x2bb69b8
	void ScopeTimeline__FinishedFunc();// 0x2bb69b8
	void ScopeTimeline__UpdateFunc();// 0x2bb69b8
	void AngledSigntTimeline__FinishedFunc();// 0x2bb69b8
	void AngledSigntTimeline__UpdateFunc();// 0x2bb69b8
	void RearSightTimeline__FinishedFunc();// 0x2bb69b8
	void RearSightTimeline__UpdateFunc();// 0x2bb69b8
	void TurnLerpAlpha__FinishedFunc();// 0x2bb69b8
	void TurnLerpAlpha__UpdateFunc();// 0x2bb69b8
	void InpActEvt_T_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_Fire_K2Node_InputActionEvent(Key Key);// 0x2bb69b8
	void InpActEvt_Fire_K2Node_InputActionEvent(Key Key);// 0x2bb69b8
	void InpActEvt_Vault_K2Node_InputActionEvent(Key Key);// 0x2bb69b8
	void InpActEvt_Q_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_Q_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_Z_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_V_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_C_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_LeftAlt_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_LeftAlt_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_R_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_Z_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_LeftShift_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_LeftShift_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void InpActEvt_F10_K2Node_InputKeyEvent(Key Key);// 0x2bb69b8
	void CE(ForceStill)(bool ForceStill);// 0x2bb69b8
	void CE(ForceStill(ServerOnly))(bool ForceStill);// 0x2bb69b8
	void OnPetOwnerPossessed();// 0x2bb69b8
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x2bb69b8
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x2bb69b8
	void ReloadEvent();// 0x2bb69b8
	void OnEquipWeapon(byte Slot);// 0x2bb69b8
	void SwitchCamera(STR_CameraSetting CameraSetting);// 0x2bb69b8
	void OnNotifyHurt();// 0x2bb69b8
	void NotifyPickUp(bool bIsAvailable);// 0x2bb69b8
	void OnLanded(out const HitResult Hit);// 0x2bb69b8
	void OnPoseStateChange(byte LastState, byte CurState);// 0x2bb69b8
	void K2_UpdateCustomMovement(float DeltaTime);// 0x2bb69b8
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x2bb69b8
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x2bb69b8
	void ParachuteOnWater();// 0x2bb69b8
	void NotifyTombBox(bool bIsAvailable);// 0x2bb69b8
	void DoAutoReloadCurrentWeapon();// 0x2bb69b8
	void OnUnEquipWeapon();// 0x2bb69b8
	void BPResetCharacter();// 0x2bb69b8
	void OnInitGrenadeData();// 0x2bb69b8
	void VaultFailPawnBluePrint(out const FString Content);// 0x2bb69b8
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x2bb69b8
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x2bb69b8
	void ScopeInStop();// 0x2bb69b8
	void PlayScopeInTimeline(float Rate);// 0x2bb69b8
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0x2bb69b8
	void ReceivePossessed(Controller* NewController);// 0x2bb69b8
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x2bb69b8
	void OnWeaponEquipmentUpdate();// 0x2bb69b8
	void BindAndExecStateChanged();// 0x2bb69b8
	void StateEnterHandler_Event(enum State);// 0x2bb69b8
	void OnHitByCake();// 0x2bb69b8
	void EnablePet(bool Enable);// 0x2bb69b8
	void OnEnterStateForBp(enum State);// 0x2bb69b8
	void OnLeaveStateForBp(enum State);// 0x2bb69b8
	void ReceiveDestroyed();// 0x2bb69b8
	void PawnVaultServerStopCheckBluePrint();// 0x2bb69b8
	void PawnVaultStopBluePrint();// 0x2bb69b8
	void OnMiniTreeTriggerServerLogicCPP();// 0x2bb69b8
	void SwitchSightAngledLocal(byte Type, bool IsOnlyTurn);// 0x2bb69b8
	void DoAngledSight(bool IsPush);// 0x2bb69b8
	void DoNormalSight(bool IsPush);// 0x2bb69b8
	void StopSwitchAngledSight();// 0x2bb69b8
	void CustomEvent(STExtraShootWeapon* Weapon, enum Type, bool bEquip);// 0x2bb69b8
	void CustomEvent(bool bIsBegin);// 0x2bb69b8
	void CustomEvent();// 0x2bb69b8
	void OnBPStateCheckIn();// 0x2bb69b8
	void DynamicHoldGun(bool BoolValue);// 0x2bb69b8
	void LuaReceiveBeginPlay();// 0x2bb69b8
	void SwitchRearSight(int PrevIndex, int NewIndex, Rotator AngleRotator);// 0x2bb69b8
	void BPOnRespawned();// 0x2bb69b8
	void RemoveRemainingCameraBlood(int SeatType);// 0x2bb69b8
	void StopTurningInPlace();// 0x2bb69b8
	void TurnInPlace(Rotator TurnInPlaceStart, Rotator TurnInPlaceTarget, CurveFloat* Curve, AnimMontage* TurnAnimation);// 0x2bb69b8
	void ExecuteUbergraph_BP_PlayerPawn(int EntryPoint, FName ___name_Variable, FName ___name_Variable2, delegate K2Node_CreateDelegate_OutputDelegate, Key K2Node_InputKeyEvent_Key13, Key K2Node_InputKeyEvent_Key14, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, bool ___bool_Variable, Key ___struct_Variable, bool ___bool_IsClosed_Variable, bool ___bool_Has_Been_Initd_Variable, Key K2Node_InputKeyEvent_Key15, bool ___bool_IsClosed_Variable2, bool ___bool_Has_Been_Initd_Variable2, bool K2Node_CustomEvent_ForceStill2, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_CustomEvent_ForceStill, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Key K2Node_InputKeyEvent_Key16, bool CallFunc_HasAuthority_ReturnValue, const TemBPDataAddr[] K2Node_MakeArray_Array, Controller* K2Node_Event_Killer, Actor* K2Node_Event_DamageCauser3, HitResult K2Node_Event_KillingHitInfo, Vector K2Node_Event_KillingHitImpulseDir, class DamageType K2Node_Event_KillingHitDamageType, byte K2Node_Event_slot, delegate K2Node_CreateDelegate_OutputDelegate2, STExtraShootWeapon* CallFunc_GetShootWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate3, STR_CameraSetting K2Node_CustomEvent_CameraSetting, bool CallFunc_isAutonomous_NewParam, int CallFunc_PostEvent_ReturnValue, int CallFunc_PostEvent_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue, bool K2Node_CustomEvent_bIsAvailable2, HitResult K2Node_Event_Hit, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, byte K2Node_Event_LastState, byte K2Node_Event_CurState, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue3, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue4, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Key K2Node_InputActionEvent_Key, float K2Node_Event_DeltaTime, byte K2Node_Event_PrevMovementMode, byte K2Node_Event_NewMovementMode, byte K2Node_Event_PrevCustomMode, byte K2Node_Event_NewCustomMode, delegate K2Node_CreateDelegate_OutputDelegate4, bool CallFunc_IsDedicatedServer_ReturnValue, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType2, Controller* K2Node_Event_InstigatedBy2, Actor* K2Node_Event_DamageCauser2, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue, bool K2Node_CustomEvent_bIsAvailable, delegate K2Node_CreateDelegate_OutputDelegate5, delegate K2Node_CreateDelegate_OutputDelegate6, delegate K2Node_CreateDelegate_OutputDelegate7, Controller* CallFunc_GetController_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, int CallFunc_PostEvent_ReturnValue3, int CallFunc_PostEvent_ReturnValue4, bool K2Node_SwitchEnum_CmpSuccess, Controller* CallFunc_GetController_ReturnValue3, bool CallFunc_ShouldUpdateHPOnUI_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess3, bool K2Node_SwitchEnum2_CmpSuccess, Controller* CallFunc_GetController_ReturnValue4, int CallFunc_PostEvent_ReturnValue5, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess4, Key ___struct_Variable2, bool K2Node_SwitchInteger_CmpSuccess, Key K2Node_InputActionEvent_Key2, bool CallFunc_IsLocalControlOrView_ReturnValue, CameraComponent* CallFunc_GetControllerViewCamera_Camera, Controller* CallFunc_GetController_ReturnValue5, bool CallFunc_IsValid_ReturnValue4, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess5, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate8, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess6, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller6, bool K2Node_DynamicCast_bSuccess7, Key K2Node_InputActionEvent_Key3, FString K2Node_Event_content, float K2Node_Event_dis2, float K2Node_Event_height2, float K2Node_Event_length2, FString K2Node_Event_VaultKey2, Vector K2Node_Event_startPos2, Actor* K2Node_Event_checkActor2, float K2Node_Event_crossblockMaxFall2, float K2Node_Event_crossblockMaxDis2, Vector K2Node_Event_hitpoint2, Actor* K2Node_Event_WindowActor, Rotator K2Node_Event_movedir2, float K2Node_Event_dis, float K2Node_Event_height, float K2Node_Event_length, FString K2Node_Event_VaultKey, Vector K2Node_Event_startPos, Actor* K2Node_Event_checkActor, float K2Node_Event_crossblockMaxFall, float K2Node_Event_crossblockMaxDis, Vector K2Node_Event_hitpoint, Rotator K2Node_Event_movedir, Controller* CallFunc_GetController_ReturnValue6, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller7, bool K2Node_DynamicCast_bSuccess8, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, Controller* CallFunc_GetController_ReturnValue7, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller8, bool K2Node_DynamicCast_bSuccess9, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller9, bool K2Node_DynamicCast_bSuccess10, FString CallFunc_GetPlayerKey_ReturnValue, bool CallFunc_HaveAngledSightBySlot_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, float CallFunc_ShowReflectorSightTPPMaterial_ReturnValue, Key K2Node_InputKeyEvent_Key17, bool CallFunc_SetCurrentPersonPerspective_ReturnValue, bool CallFunc_SetCurrentPersonPerspective_ReturnValue2, float K2Node_CustomEvent_Rate, bool CallFunc_IsCharacterSprinting_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue5, bool CallFunc_Not_PreBool_ReturnValue3, bool K2Node_SwitchEnum3_CmpSuccess, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue2, bool CallFunc_SwitchPoseState_ReturnValue3, bool CallFunc_SwitchPoseState_ReturnValue4, bool CallFunc_SwitchPoseState_ReturnValue5, bool CallFunc_SwitchPoseState_ReturnValue6, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue3, bool CallFunc_IsValid_ReturnValue5, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate9, bool CallFunc_IsValid_ReturnValue6, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue5, bool CallFunc_IsValid_ReturnValue7, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue6, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess11, float K2Node_Event_DamageReceived, const DamageType* K2Node_Event_DamageType, Vector K2Node_Event_Origin, float K2Node_Event_Radius, HitResult K2Node_Event_HitInfo, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, Vector K2Node_Event_ImpulseDir, class CameraShake CallFunc_GetGrenadeCameraShakeByDir_RetVar, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess12, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, bool CallFunc_IsAutoRunTestGame_ReturnValue, bool CallFunc_IsValid_ReturnValue8, CameraShake* CallFunc_PlayCameraShake_ReturnValue, Controller* K2Node_Event_NewController, bool CallFunc_IsValid_ReturnValue9, AkAudioEvent* K2Node_Event_LocalAkEvent, AkAudioEvent* K2Node_Event_RemoteAkEvent, bool CallFunc_IsValid_ReturnValue10, bool CallFunc_IsValid_ReturnValue11, int ___int_Array_Index_Variable2, int CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate10, byte ___byte_Variable, bool CallFunc_IsLocalControlOrView_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue2, SceneComponent* CallFunc_GetAttachParent_ReturnValue, bool CallFunc_IsValid_ReturnValue12, Actor* CallFunc_GetOwner_ReturnValue2, STExtraVehicleBase* K2Node_DynamicCast_AsSTExtra_Vehicle_Base, bool K2Node_DynamicCast_bSuccess13, float CallFunc_ShowReflectorSightTPPMaterial_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate11, bool CallFunc_ShouldRedBlood_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttachedWithMgr_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttachedWithMgr_ReturnValue2, bool CallFunc_IsValid_ReturnValue13, bool CallFunc_IsValid_ReturnValue14, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue7, bool CallFunc_IsValid_ReturnValue15, enum K2Node_CustomEvent_state, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue8, bool CallFunc_AllowWater_bCanEnter, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller10, bool K2Node_DynamicCast_bSuccess14, byte ___byte_Variable2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_IsLocalControlOrView_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue2, CameraComponent* CallFunc_GetControllerViewCamera_Camera2, bool CallFunc_Not_PreBool_ReturnValue4, bool CallFunc_IsValid_ReturnValue16, bool CallFunc_BooleanAND_ReturnValue3, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, int ___int_Loop_Counter_Variable2, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess15, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsShowBlood_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue5, bool K2Node_Event_Enable, bool CallFunc_IsValid_ReturnValue17, enum K2Node_Event_State2, bool CallFunc_EqualEqual_ByteByte_ReturnValue5, bool CallFunc_IsValid_ReturnValue18, enum K2Node_Event_State, bool CallFunc_EqualEqual_ByteByte_ReturnValue6, bool CallFunc_IsValid_ReturnValue19, bool CallFunc_IsValid_ReturnValue20, int ___int_Array_Index_Variable3, int CallFunc_Array_Get_Item2, FName CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue2, bool CallFunc_IsValid_ReturnValue21, bool CallFunc_IsValid_ReturnValue22, Controller* CallFunc_GetController_ReturnValue8, bool CallFunc_IsAngledSight_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller11, bool K2Node_DynamicCast_bSuccess16, bool CallFunc_Not_PreBool_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue6, bool CallFunc_IsAngledSight_ReturnValue2, byte K2Node_Event_type, bool K2Node_Event_IsOnlyTurn, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool K2Node_CustomEvent_IsPush2, Controller* CallFunc_GetController_ReturnValue9, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller12, bool K2Node_DynamicCast_bSuccess17, bool CallFunc_Not_PreBool_ReturnValue6, bool K2Node_SwitchInteger2_CmpSuccess, int CallFunc_PostEvent_ReturnValue6, bool CallFunc_IsAngledSight_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue7, bool ___bool_Variable2, bool CallFunc_Not_PreBool_ReturnValue8, bool CallFunc_IsAngledSight_ReturnValue4, bool K2Node_CustomEvent_IsPush, Controller* CallFunc_GetController_ReturnValue10, bool CallFunc_Not_PreBool_ReturnValue9, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller13, bool K2Node_DynamicCast_bSuccess18, bool CallFunc_IsAngledSight_ReturnValue5, bool K2Node_SwitchInteger3_CmpSuccess, bool CallFunc_IsAngledSight_ReturnValue6, delegate K2Node_CreateDelegate_OutputDelegate12, bool CallFunc_IsAngledSight_ReturnValue7, bool CallFunc_Not_PreBool_ReturnValue10, bool CallFunc_BooleanAND_ReturnValue7, bool CallFunc_IsAngledSight_ReturnValue8, bool CallFunc_Not_PreBool_ReturnValue11, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, bool CallFunc_BooleanAND_ReturnValue8, AkComponent* CallFunc_GetAkComponent_ReturnValue, int CallFunc_PostAkEvent_ReturnValue, int CallFunc_PostAkEvent_ReturnValue2, bool CallFunc_IsValid_ReturnValue23, Key K2Node_InputKeyEvent_Key, int CallFunc_PostEvent_ReturnValue7, bool CallFunc_IsAngledSightAvailable_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue9, bool CallFunc_BooleanOR_ReturnValue2, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue2, bool CallFunc_K2_AttachToComponent_ReturnValue2, bool CallFunc_IsAngledSightAvailable_ReturnValue2, bool CallFunc_IsAngledSight_ReturnValue10, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue9, bool CallFunc_BooleanAND_ReturnValue10, STExtraShootWeapon* K2Node_CustomEvent_weapon, enum K2Node_CustomEvent_type, bool K2Node_CustomEvent_bEquip, bool CallFunc_IsAngledSightBySlot_ReturnValue, byte K2Node_Select_Default, bool CallFunc_EqualEqual_ByteByte_ReturnValue7, Controller* CallFunc_GetController_ReturnValue11, bool K2Node_CustomEvent_bIsBegin, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess19, Controller* CallFunc_GetController_ReturnValue12, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller14, bool K2Node_DynamicCast_bSuccess20, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue12, bool CallFunc_BooleanAND_ReturnValue11, bool CallFunc_IsAngledSight_ReturnValue11, Key ___struct_Variable3, bool CallFunc_HaveAngledSight_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue12, bool CallFunc_BooleanAND_ReturnValue12, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_BooleanAND_ReturnValue13, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue14, Key K2Node_InputKeyEvent_Key2, bool CallFunc_IsAngledSight_ReturnValue13, bool CallFunc_HaveAngledSight_ReturnValue2, bool CallFunc_IsValid_ReturnValue24, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, bool K2Node_CustomEvent_BoolValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue3, bool CallFunc_K2_AttachToComponent_ReturnValue3, FString CallFunc_GetPlayerNameSafety_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue6, int ___int_Loop_Counter_Variable3, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue3, Controller* CallFunc_GetControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue25, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller15, bool K2Node_DynamicCast_bSuccess21, bool CallFunc_IsLocallyControlled_ReturnValue3, int K2Node_CustomEvent_PrevIndex, int K2Node_CustomEvent_NewIndex, Rotator K2Node_CustomEvent_AngleRotator, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, bool CallFunc_IsValid_ReturnValue26, FName CallFunc_GetRearSightSocket_ReturnValue, FName CallFunc_GetRearSightSocket_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue27, Key K2Node_InputKeyEvent_Key3, bool CallFunc_IsLocalControlorView_ReturnValue4, bool CallFunc_EnterState_ReturnValue, bool CallFunc_BooleanAND_ReturnValue15, FName CallFunc_GetGameModeState_CurModeState, bool CallFunc_EqualEqual_NameName_ReturnValue, FName K2Node_Select2_Default, bool CallFunc_EqualEqual_NameName_ReturnValue2, bool CallFunc_IsDedicatedServer_ReturnValue3, PlayerController* CallFunc_GetPlayerController_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue13, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess22, bool CallFunc_BooleanOR_ReturnValue4, int K2Node_CustomEvent_SeatType, SceneComponent*[] CallFunc_GetChildrenComponents_Children, Key K2Node_InputKeyEvent_Key4, SceneComponent* CallFunc_Array_Get_Item3, int CallFunc_Array_Length_ReturnValue3, ParticleSystemComponent* K2Node_DynamicCast_AsParticle_System_Component, bool K2Node_DynamicCast_bSuccess23, bool CallFunc_Less_IntInt_ReturnValue3, Key K2Node_InputKeyEvent_Key5, bool CallFunc_EqualEqual_ObjectObject_ReturnValue3, Key ___struct_Variable4, Key K2Node_InputKeyEvent_Key6, Key K2Node_InputKeyEvent_Key7, Key ___struct_Variable5, Key K2Node_InputKeyEvent_Key8, Rotator K2Node_CustomEvent_TurnInPlaceStart, Rotator K2Node_CustomEvent_TurnInPlaceTarget, CurveFloat* K2Node_CustomEvent_Curve, AnimMontage* K2Node_CustomEvent_TurnAnimation, float CallFunc_PlayAnimMontage_ReturnValue, float CallFunc_GetTimeRange_MinTime, float CallFunc_GetTimeRange_MaxTime, Key K2Node_InputKeyEvent_Key9, Rotator CallFunc_RLerp_ReturnValue, Key K2Node_InputKeyEvent_Key10, Key K2Node_InputKeyEvent_Key11, Key K2Node_InputKeyEvent_Key12, Key ___struct_Variable6);// 0x2bb69b8
	void OnTriggerVault__DelegateSignature(bool bTryEnter);// 0x2bb69b8
	void OnCakePlacement__DelegateSignature(bool Success);// 0x2bb69b8
	void UnequipWeaponComplete__DelegateSignature();// 0x2bb69b8
	void EquipWeaponComplete__DelegateSignature();// 0x2bb69b8
	BP_CharacterCarryBackComp_C* BP_CharacterCarryBackComp;//[Offset: 0x31b4, Size: 4]
	InteractManagerComponent* InteractManager;//[Offset: 0x31b8, Size: 4]
	BuildSystemComp_BP_C* BuildSystemComp_BP;//[Offset: 0x31bc, Size: 4]
	HoldComponent_C* ShoulderHoldComp;//[Offset: 0x31c0, Size: 4]
	BP_SkillManagerComponent_C* BP_SkillManagerComponent;//[Offset: 0x31c4, Size: 4]
	CustomCameraComponent* Camera;//[Offset: 0x31c8, Size: 4]
	CapsuleComponent* ShareBounds;//[Offset: 0x31cc, Size: 4]
	ChildActorComponent* BP_PaintDecalDetectLine1;//[Offset: 0x31d0, Size: 4]
	CapsuleComponent* Capsule;//[Offset: 0x31d4, Size: 4]
	HoldComponent_C* AngledSightHoldComp;//[Offset: 0x31d8, Size: 4]
	CharacterAnimList_Skill_C* CharacterAnimList_Skill;//[Offset: 0x31dc, Size: 4]
	CharacterAnimList_Parachute_C* CharacterAnimList_Parachute;//[Offset: 0x31e0, Size: 4]
	StaticMeshComponent* Scope;//[Offset: 0x31e4, Size: 4]
	PostProcessComponent* PostProcess;//[Offset: 0x31e8, Size: 4]
	SpringArmComponent* ShoulderCameraSpringArm;//[Offset: 0x31ec, Size: 4]
	SceneComponent* ShoulderCameraOffset;//[Offset: 0x31f0, Size: 4]
	CharacterAnimList_Base_C* CharacterAnimList_Base;//[Offset: 0x31f4, Size: 4]
	SplineComponent* PetParachuteSpline;//[Offset: 0x31f8, Size: 4]
	PetComponent_BP_C* PetComponent_BP;//[Offset: 0x31fc, Size: 4]
	CharacterAvatarComp2_BP_C* CharacterAvatarComp2_BP;//[Offset: 0x3200, Size: 4]
	StaticMeshComponent* ScopeStaticMesh;//[Offset: 0x3204, Size: 4]
	HoldComponent_C* PeekHoldComp;//[Offset: 0x3208, Size: 4]
	HoldComponent_C* AimHoldComp;//[Offset: 0x320c, Size: 4]
	ObserverCameraComponent* ObserverCameraFPPMode;//[Offset: 0x3210, Size: 4]
	FPPSpringArmComponent* FPPSpringArm;//[Offset: 0x3214, Size: 4]
	FPPComponent_C* FPPComponent;//[Offset: 0x3218, Size: 4]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x321c, Size: 4]
	CameraComponent* ScopingCamera;//[Offset: 0x3220, Size: 4]
	SpringArmComponent* ScopingSpringArm;//[Offset: 0x3224, Size: 4]
	CapsuleComponent* HitBox_Prone;//[Offset: 0x3228, Size: 4]
	CapsuleComponent* HitBox_Stand;//[Offset: 0x322c, Size: 4]
	Vault_Controller_C* Vault_Controller;//[Offset: 0x3230, Size: 4]
	BP_SwimController_C* BP_SwimController;//[Offset: 0x3234, Size: 4]
	BP_AutoAimingComponent_C* BP_AutoAimingComponent;//[Offset: 0x3238, Size: 4]
	CharacterWeaponManagerComponent* CharacterWeaponManager;//[Offset: 0x323c, Size: 4]
	PickupManagerComponent* PickupManager;//[Offset: 0x3240, Size: 4]
	SceneComponent* CameraRoot;//[Offset: 0x3244, Size: 4]
	CustomSpringArmComponent* CustomSpringArm;//[Offset: 0x3248, Size: 4]
	CameraSettingComponent_C* CameraSettingComponent;//[Offset: 0x324c, Size: 4]
	float RearSightTimeline_RearSightUpdate_B52340D847258BFCFCCDAC8659F0041C;//[Offset: 0x3250, Size: 4]
	byte RearSightTimeline__Direction_B52340D847258BFCFCCDAC8659F0041C;//[Offset: 0x3254, Size: 1]
	TimelineComponent* RearSightTimeline;//[Offset: 0x3258, Size: 4]
	float AngledSigntTimeline_NewTrack_0_1A55FFB84346668215A22AA5D66EFECA;//[Offset: 0x325c, Size: 4]
	byte AngledSigntTimeline__Direction_1A55FFB84346668215A22AA5D66EFECA;//[Offset: 0x3260, Size: 1]
	TimelineComponent* AngledSigntTimeline;//[Offset: 0x3264, Size: 4]
	float ScopeTimeline_NewTrack_1_FBCE53A7433799FDD4E08AA77C9DCE27;//[Offset: 0x3268, Size: 4]
	byte ScopeTimeline__Direction_FBCE53A7433799FDD4E08AA77C9DCE27;//[Offset: 0x326c, Size: 1]
	TimelineComponent* ScopeTimeline;//[Offset: 0x3270, Size: 4]
	float ParachuteCamBlend_Alpha_A00EF93A482E11D3825F6F8F58409606;//[Offset: 0x3274, Size: 4]
	byte ParachuteCamBlend__Direction_A00EF93A482E11D3825F6F8F58409606;//[Offset: 0x3278, Size: 1]
	TimelineComponent* ParachuteCamBlend;//[Offset: 0x327c, Size: 4]
	float LerpAlpha_LerpAlpha_BBB653CA48682C1A42A33C890A409F07;//[Offset: 0x3280, Size: 4]
	byte LerpAlpha__Direction_BBB653CA48682C1A42A33C890A409F07;//[Offset: 0x3284, Size: 1]
	TimelineComponent* LerpAlpha;//[Offset: 0x3288, Size: 4]
	float TurnLerpAlpha_Alpha_E6EF8561406981075B2088A2D4185EA5;//[Offset: 0x328c, Size: 4]
	byte TurnLerpAlpha__Direction_E6EF8561406981075B2088A2D4185EA5;//[Offset: 0x3290, Size: 1]
	TimelineComponent* TurnLerpAlpha;//[Offset: 0x3294, Size: 4]
	MaterialInstanceDynamic* DamageSphereDMI;//[Offset: 0x3298, Size: 4]
	bool bCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329c, Size: 1]
	bool IsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329d, Size: 1]
	float ReloadingCDMax;//[Offset: 0x32a0, Size: 4]
	Vector LastInAirVelocityVector;//[Offset: 0x32a4, Size: 12]
	Vector VelocityVector;//[Offset: 0x32b0, Size: 12]
	float Speed;//[Offset: 0x32bc, Size: 4]
	bool Moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c0, Size: 1]
	Rotator LastVelocityRotation;//[Offset: 0x32c4, Size: 12]
	Rotator TurnInPlaceRotation;//[Offset: 0x32d0, Size: 12]
	Rotator TurnInPlaceStart;//[Offset: 0x32dc, Size: 12]
	Rotator TurnInPlaceTarget;//[Offset: 0x32e8, Size: 12]
	bool TurningInPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32f4, Size: 1]
	byte LocomotionState;//[Offset: 0x32f5, Size: 1]
	bool Jumped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32f6, Size: 1]
	float ProneCameraHeight;//[Offset: 0x32f8, Size: 4]
	float CameraMoveSpeed;//[Offset: 0x32fc, Size: 4]
	bool UseFirstPersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3300, Size: 1]
	float MeleeAttackRange;//[Offset: 0x3304, Size: 4]
	Vector Melee Attack Location;//[Offset: 0x3308, Size: 12]
	float MeleeAttackDamage;//[Offset: 0x3314, Size: 4]
	byte CurCameraMode;//[Offset: 0x3318, Size: 1]
	STR_CameraSetting StandCameraSetting;//[Offset: 0x331c, Size: 20]
	Rotator TerreneNormal;//[Offset: 0x3330, Size: 12]
	Vector Normal;//[Offset: 0x333c, Size: 12]
	PickUpWrapperActor* PickUpTarget;//[Offset: 0x3348, Size: 4]
	bool bIsPicking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334c, Size: 1]
	delegate EquipWeaponComplete;//[Offset: 0x3350, Size: 12]
	delegate UnequipWeaponComplete;//[Offset: 0x335c, Size: 12]
	float CrouchCameraHeight;//[Offset: 0x3368, Size: 4]
	float PickupDelayTime;//[Offset: 0x336c, Size: 4]
	float DefaultCapsuleRadius;//[Offset: 0x3370, Size: 4]
	SkeletalMeshComponent* ParachuteComponent;//[Offset: 0x3374, Size: 4]
	float SwimCameraHeight;//[Offset: 0x3378, Size: 4]
	float SwimTargetRoll;//[Offset: 0x337c, Size: 4]
	float SwimUpRateFix;//[Offset: 0x3380, Size: 4]
	float SwimRotateSpeed;//[Offset: 0x3384, Size: 4]
	<int,FString> GrenadeToSlotIndexDict;//[Offset: 0x3388, Size: 60]
	bool VaultEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c4, Size: 1]
	ItemDefineID putoffItem;//[Offset: 0x33c8, Size: 24]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x33e0, Size: 12]
	bool autoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33ec, Size: 1]
	SpringArmComponent*[] SpringArms;//[Offset: 0x33f0, Size: 12]
	CameraComponent*[] Cameras;//[Offset: 0x33fc, Size: 12]
	SpringArmComponent* CurActiveSpringArm;//[Offset: 0x3408, Size: 4]
	bool UseTurniinPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340c, Size: 1]
	<int,FName> GrenadeIDToNameDict;//[Offset: 0x3410, Size: 60]
	int[] GrenadeIDsOrder;//[Offset: 0x344c, Size: 12]
	float ElapseTime;//[Offset: 0x3458, Size: 4]
	float SwimRotateX;//[Offset: 0x345c, Size: 4]
	SpringArmComponent* NewVar;//[Offset: 0x3460, Size: 4]
	byte CurPoseState;//[Offset: 0x3464, Size: 1]
	<int,BackpackEmoteHandle*> EmoteBPIDToAnimHandleMap;//[Offset: 0x3468, Size: 60]
	ParticleSystem* DecentBloodSpot;//[Offset: 0x34a4, Size: 4]
	ParticleSystem* BloodSpot_Red;//[Offset: 0x34a8, Size: 4]
	ParticleSystem* BloodSpot_Green;//[Offset: 0x34ac, Size: 4]
	BP_WateringArea_C* MiniTreeRef;//[Offset: 0x34b0, Size: 4]
	enum[] DisallowedWateringStates;//[Offset: 0x34b4, Size: 12]
	delegate OnCakePlacement;//[Offset: 0x34c0, Size: 12]
	Actor* PaintDecalDetector;//[Offset: 0x34cc, Size: 4]
	ChildActorComponent* PaintDecalDetectComp;//[Offset: 0x34d0, Size: 4]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d4, Size: 1]
	Actor* CurEmoteActor;//[Offset: 0x34d8, Size: 4]
	STExtraWeapon* CurUseingEmoteWeapon;//[Offset: 0x34dc, Size: 4]
	MaterialBillboardComponent* FrameUIBillboard;//[Offset: 0x34e0, Size: 4]
	bool bIsAngledSightOnlyTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34e4, Size: 1]
	MeshComponent* OriginAttachComponent;//[Offset: 0x34e8, Size: 4]
	MeshComponent* TargetAttachComponent;//[Offset: 0x34ec, Size: 4]
	Rotator OriginRotOffset;//[Offset: 0x34f0, Size: 12]
	DollyZoomParam OriginDollyZoomParam;//[Offset: 0x34fc, Size: 12]
	DollyZoomParam TargetDollyZoomParam;//[Offset: 0x3508, Size: 12]
	<FName,class STExtraWeapon> GrenadeWeaponMaps;//[Offset: 0x3514, Size: 60]
	bool Cache(ForceStill);//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3550, Size: 1]
	delegate OnTriggerVault;//[Offset: 0x3554, Size: 12]
	FName HurtSoundSwitchState;//[Offset: 0x3560, Size: 8]

--------------------------------
Class: DecalBakingActorMgr.DecalBakingActor.Actor.Object
	DecalBakingRTCache[] DecalBakingRTCacheList;//[Offset: 0x340, Size: 12]
	DecalBakingRTCache[] DecalBakingRTCacheListII;//[Offset: 0x34c, Size: 12]
	float RTCacheLifeTime;//[Offset: 0x358, Size: 4]
	int MaxRTCacheCount;//[Offset: 0x35c, Size: 4]
	float RTCacheLifeTimeII;//[Offset: 0x360, Size: 4]
	int MaxRTCacheCountII;//[Offset: 0x364, Size: 4]
	float TickUpdateCacheInterval;//[Offset: 0x368, Size: 4]
	void ResetDecalBakingRTCacheParam();// 0x1f97ae8
	static DecalBakingActorMgr* GetWorldInstance(Object* WorldContextObject);// 0x1f97a70
	Vector GetSpawanDBPActorLocationByDiyData(out const DIYData InDIYData, SceneComponent* InSceneComponent);// 0x1f97930
	DecalParameter[] GetRelativeDecalParameterFromWorld(SceneComponent* InSceneComponent);// 0x1f97820
	static DecalBakingActorMgr* GetInstance();// 0x1f977f8
	DecalParameter[] GetDecalParameterFromWorld(Actor* InActor);// 0x1f976f0
	DecalParameter GetDecalParameter(SceneComponent* InSceneComponent, DecalBakingParameterComponent* InComponent);// 0x1f97614
	TextureRenderTarget2D* CreateNewTextureRenderTarget2D(int X, int Y);// 0x1f97550
	DecalParameter ConvertDIYDataToDecalParam(out const DIYData InDIYData);// 0x1f97450
	DIYData ConvertDecalParamToDIYData(SceneComponent* InSceneComponent, DecalBakingParameterActor* InDBPActor, bool ZProjection);// 0x1f97320
	void ClearDecalBackingRTCacheII(enum InType, FString PlayerUID);// 0x1f97180
	void ClearDecalBackingRTCache(enum InType, FString PlayerUID, bool bCacheII);// 0x1f96f90

--------------------------------
Class: DecalBakingActor.Actor.Object
	uint32 MaxDecalProcessPerFame;//[Offset: 0x2fc, Size: 4]
	DecalBakingRequest[] DecalBakeRequests;//[Offset: 0x300, Size: 12]
	void SetMaxDecalProcessPerFame(int InValue);// 0x212a0dc
	void OnBakingFinished(TextureRenderTarget2D* InRenderTarget);// 0x1edac74
	int GetMaxDecalProcessPerFame();// 0x1f3b9ac
	int FindDecalBakingRequestID(TextureRenderTarget2D* RenderTarget);// 0x441f5b0
	void EndDecalBakingCache(TextureRenderTarget2D* RenderTarget);// 0x441f538
	void DoCompression(TextureRenderTarget2D* InRenderTarget);// 0x441f4c0
	Texture* CompressTexture(TextureRenderTarget2D* InRenderTarget, bool bInRGBA, bool bUsePunchthroughAlpha, bool bUseOptimizeOpaque);// 0x441f350
	void CancelDecalBakingRequest(int RequestID);// 0x441f2d8
	void BeginDecalBakingCache(TextureRenderTarget2D* RenderTarget);// 0x441f260
	int BakeDecalForStaticMesh(TextureRenderTarget2D* RenderTarget, StaticMesh* StaticMesh, int UVIndex, out const DecalParameter[] InDecalParams, bool bIntermidiate, int CachedDecalIndex);// 0x441f024
	int BakeDecalForSkeletalMesh(TextureRenderTarget2D* RenderTarget, SkeletalMesh* SkeletalMesh, int UVIndex, out const DecalParameter[] InDecalParams, bool bIntermidiate, int CachedDecalIndex);// 0x441ede8

--------------------------------
Class: DecalBakingRTCache
	enum DecalBakingType;//[Offset: 0x0, Size: 1]
	FString PlayerUID;//[Offset: 0x4, Size: 12]
	int WeaponAvatarID;//[Offset: 0x10, Size: 4]
	TextureRenderTarget2D* TextureRenderTarget;//[Offset: 0x14, Size: 4]
	float LastActiveTime;//[Offset: 0x18, Size: 4]
	bool bMainRoleRT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: DIYData
	Texture2D* Texture;//[Offset: 0x0, Size: 4]
	LinearColor Color;//[Offset: 0x4, Size: 16]
	Vector2D Scale;//[Offset: 0x14, Size: 8]
	Vector2D Offset;//[Offset: 0x1c, Size: 8]
	float Rotation;//[Offset: 0x24, Size: 4]
	enum Direction;//[Offset: 0x28, Size: 1]
	LinearColor UVClip;//[Offset: 0x2c, Size: 16]
	LinearColor UVInfo;//[Offset: 0x3c, Size: 16]

--------------------------------
Class: DecalBakingParameterComponent.SceneComponent.ActorComponent.Object
	Texture2D* DecalTexture;//[Offset: 0x260, Size: 4]
	Vector DecalSize;//[Offset: 0x264, Size: 12]
	Vector4 UVScaleBias;//[Offset: 0x270, Size: 16]
	LinearColor TintColor;//[Offset: 0x280, Size: 16]
	Vector4 CropUVScaleBias;//[Offset: 0x290, Size: 16]
	float CropRotation;//[Offset: 0x2a0, Size: 4]
	bool bEnableDepthCompare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	LinearColor GetUVScaleBias();// 0x441fe24
	BoxSphereBounds GetDecalBounds();// 0x441fdd0
	LinearColor GetCropUVScaleBias();// 0x441fdb0

--------------------------------
Class: DecalBakingParameterActor.Actor.Object
	DecalBakingParameterComponent* DecalBakingParam;//[Offset: 0x2fc, Size: 4]

--------------------------------
Class: BattleInteractiveDataStruct
	int SkillIndex_2_1D6468514D718E7627333080FB209A4A;//[Offset: 0x0, Size: 4]
	FText IconName_6_22CFFB1A44CD620353D81E87883E0DA7;//[Offset: 0x4, Size: 12]
	SlateBrush Image_9_01E299E646738D7FC060038B27EF9890;//[Offset: 0x10, Size: 152]
	float CDTime_12_BC8E32844653869F92AF27AFA2C8A0B2;//[Offset: 0xa8, Size: 4]
	enum[] DisallowedPawnState_16_ACA978204905C4EF34088B9F68648767;//[Offset: 0xac, Size: 12]
	bool TriggerActivityFromSkillAction_18_BFD8BC9C41BC0FA191B542862807C9F0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]

--------------------------------
Class: BP_STRUCT_WeaponScopeFOV_type
	FString ScopeGroupID_6_49CF3E400C41B18D667A9238018BF244;//[Offset: 0x0, Size: 12]
	float ScopeFov_f_7_6553D3C0033D7BFF701FD78D06949766;//[Offset: 0xc, Size: 4]
	int AimedAngle_8_3E02AB0072EDDA440E9C5E950B8A5745;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialSpriteElement[] Elements;//[Offset: 0x5b4, Size: 12]
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0x44b6f70
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0x44b6d8c

--------------------------------
Class: MaterialSpriteElement
	MaterialInterface* Material;//[Offset: 0x0, Size: 4]
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x4, Size: 4]
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float BaseSizeX;//[Offset: 0xc, Size: 4]
	float BaseSizeY;//[Offset: 0x10, Size: 4]
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x14, Size: 4]

--------------------------------
Class: STR_CameraSetting
	float TargetArmLength_30_2007ABB34694949F7A9AC4BB2C7AE57D;//[Offset: 0x0, Size: 4]
	float LagSpeed_34_CBFA29604D40F5BC431D969F9216FCF7;//[Offset: 0x4, Size: 4]
	Vector SocketOffset_26_FD34F6424351327A3F447882FEBC198D;//[Offset: 0x8, Size: 12]

--------------------------------
Class: BP_CharacterCarryBackComp_C.STCharacterCarryBackComp.LuaActorComponent.ActorComponent.Object
	void FindFreedomLocationAndRotation(Character* Character, out bool bValid, out Vector Location, out Rotator Rotation, Actor*[] ___object_Variable, Vector CallFunc_GetActorForwardVector_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue2, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_GetActorRightVector_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_GetActorRightVector_ReturnValue2, Rotator CallFunc_Conv_VectorToRotator_ReturnValue3, Rotator CallFunc_Conv_VectorToRotator_ReturnValue4, Vector CallFunc_GetActorForwardVector_ReturnValue3, Vector CallFunc_K2_GetActorLocation_ReturnValue, int ___int_Array_Index_Variable, int ___int_Variable, Rotator K2Node_Select_Default, int ___int_Loop_Counter_Variable, Vector CallFunc_Array_Get_Item, Vector CallFunc_Multiply_VectorVector_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_BoxTraceSingle_OutHit, bool CallFunc_BoxTraceSingle_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2bb69b8
	Vector[] PutDownLocationOffset;//[Offset: 0x1e0, Size: 12]

--------------------------------
Class: InteractManagerComponent.ActorComponent.Object
	float CheckInteractInterval;//[Offset: 0xbc, Size: 4]
	InteractItemComponent*[] ActivityComponentList;//[Offset: 0xc0, Size: 12]
	InteractItemComponent* CurActivityComponent;//[Offset: 0xcc, Size: 8]
	void RPC_Server_OnStopInteract(InteractItemComponent* InInteractItem);// 0x202952c
	void RPC_Server_OnHandleInteract(InteractItemComponent* InInteractItem);// 0x2029478
	void OnFinishCurInteract();// 0x2029464
	bool HasActivityComponent(InteractItemComponent* InComponent);// 0x2025570
	InteractItemComponent* GetCurActivityComponent();// 0x2029434
	void DeleteActivityComponent(InteractItemComponent* InComponent);// 0x1f62900
	void ClientUpdateNewActivityCompOverlap();// 0x2029418
	void ClientNotifyActivityCompOverlap(InteractItemComponent* ActiveComp, bool isBeginOverlap);// 0x202934c
	bool ClientClickButton();// 0x2029324
	void AddActivityComponent(InteractItemComponent* InComponent);// 0x1f619e0

--------------------------------
Class: InteractItemComponent.LuaActorComponent.ActorComponent.Object
	bool bActivityEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 1]
	InteractData CurInteractData;//[Offset: 0x14c, Size: 12]
	bool bCanIteractInFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	int SkillIndex;//[Offset: 0x15c, Size: 4]
	int MaxTryCountConfig;//[Offset: 0x160, Size: 4]
	bool bShowButtonWhenActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	bool bShowButtonWhenOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x165, Size: 1]
	enum[] SpecialInteractivePawnState;//[Offset: 0x168, Size: 12]
	float CoolDownTime;//[Offset: 0x174, Size: 4]
	bool bShouldOccupy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	float OccupiedStateTimeout;//[Offset: 0x17c, Size: 4]
	bool bButtonShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	bool bIsInFightingUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 1]
	bool bUseCodeKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x182, Size: 1]
	int CodeKey;//[Offset: 0x184, Size: 4]
	ShapeComponent* ShapeCollision;//[Offset: 0x188, Size: 4]
	delegate OnCoolDownDelegate;//[Offset: 0x18c, Size: 12]
	delegate OnUpdateButton;//[Offset: 0x198, Size: 12]
	Character* ClientMainCharacter;//[Offset: 0x1b8, Size: 8]
	void UpdateInteractUIInfo(Character* Character, bool bForce);// 0x2025d88
	void TriggerSkillEvent(Character* Character);// 0x2025d08
	void StartOccupied();// 0x2025cf4
	void StartCoolDown();// 0x2025ce0
	void SetCurActiveCharacter(Character* InCharacter);// 0x2025c68
	void SetActivityEnable(bool bEnable);// 0x2025be8
	void ServerStopInteract();// 0x2025bcc
	void OnServerHandleInteract(Character* Character);// 0x2025b54
	void OnRep_CurInteractData();// 0x2025b40
	void OnOccupyFinished();// 0x2025b2c
	void OnHandleSkillEndEvent(Character* Character, enum StopReason, int SkillID);// 0x2025a24
	void OnFinishInteract(Character* Character, bool bIsOccupied);// 0x2025960
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x2025810
	void OnCoolDownFinished();// 0x20257fc
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x20255f8
	bool LocalStartActive(Character* Character);// 0x2025570
	void LocalReset(Character* Character);// 0x1f76444
	bool LocalInterruptActive(Character* Character);// 0x20254e8
	bool LocalActiveFinished(Character* Character);// 0x2025460
	bool IsOccupied();// 0x2025438
	bool IsNoneInteract();// 0x2025410
	bool IsInteracting();// 0x20253e8
	bool IsCoolingDown();// 0x20253c0
	bool IsAllowInteractive(Character* Character, out int Reason, bool bEanbleSimulated);// 0x202529c
	Character* GetMainCharacter();// 0x2025274
	enum GetCurInteractState();// 0x2025234
	Character* GetActivedCharacter();// 0x2025208
	bool CheckInteracterIsMe(Character* Character);// 0x2025188
	bool BPStartActive(Character* Character, bool bSuccess, bool bClient);// 0x2025064
	void BPServerHandleInteract(Character* Character);// 0x2024fe4
	void BPReset(Character* Character);// 0x2024f64
	bool BPInterruptActive(Character* Character, bool bSuccess, bool bClient);// 0x2024e40
	void BPInteractStateChange();// 0x2bb69b8
	bool BPClientClickButtonFailed(Character* Character, int Reason);// 0x2bb69b8
	bool BPAllowShowButton(Character* Character, out int Reason);// 0x2024d64
	bool BPAllowInteractive(Character* Character);// 0x2024cdc
	bool BPAllowClickButton(Character* Character);// 0x2024c54
	bool BPActiveFinished(Character* Character, bool bSuccess, bool bClient);// 0x2024b30
	bool AllowShowButton(Character* Character, out int Reason);// 0x2024a54
	bool AllowInteractive(Character* Character, out int Reason);// 0x2024978
	bool AllowClickButton(Character* Character, out int Reason);// 0x202489c

--------------------------------
Class: InteractData
	enum InteractState;//[Offset: 0x0, Size: 1]
	bool bIsCoolingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	Character* CurActiveCharacter;//[Offset: 0x4, Size: 8]

--------------------------------
Class: BuildSystemComp_BP_C.STBuildSystemComponent.BuildSystemComponent.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 4]
	Rotator GetNewDestRotation(Rotator DestRotation, Actor* CacheActor, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base, bool K2Node_DynamicCast_bSuccess, float CallFunc_BreakRotator_Roll2, float CallFunc_BreakRotator_Pitch2, float CallFunc_BreakRotator_Yaw2, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, Rotator CallFunc_MakeRotator_ReturnValue);// 0x2bb69b8
	bool IsLocationValid(Vector Location, float MaxBuildDist, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, Actor* CallFunc_GetOwner_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSizeSquared_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x2bb69b8
	Vector GetNewDestLocation(Vector DestLocation, Actor* CacheActor, Vector ViewLocation, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base, bool K2Node_DynamicCast_bSuccess, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FMax_ReturnValue, Vector CallFunc_MakeVector_ReturnValue);// 0x2bb69b8
	bool BPProcessNothingHitTrace(Vector DestLocation, Rotator DestRotation, float MaxBuildDist, int buildIndex, out Vector OutLocation, Vector TempOutLocation, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Actor* CallFunc_GetCDOByIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base, bool K2Node_DynamicCast_bSuccess, float CallFunc_Multiply_FloatFloat_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_IsLocationValid_ReturnValue, Actor*[] ___object_Variable, FString CallFunc_Conv_VectorToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, byte[] K2Node_MakeArray_Array, HitResult[] CallFunc_LineTraceMultiForObjects_OutHits, bool CallFunc_LineTraceMultiForObjects_ReturnValue, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BuildingGridComponent* K2Node_DynamicCast_AsBuilding_Grid_Component, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_CheckShouldSkipByVisibility_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue, bool CallFunc_DoesImplementInterface_ReturnValue, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x2bb69b8
	bool BPCheckPlacement(out HitResult[] HitArray, Vector BoxExtent, BuildingData CurBuildData, Rotator ControlRot, Vector ViewLocation, out Vector OutLocation, out bool bHasForbiddenObject, bool TempHasForbiddenObject, Vector TempDestLcation, Vector TempOutLocation, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Actor* CallFunc_GetCDOByIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, Actor* CallFunc_GetOwner_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue3, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, int ___int_Array_Index_Variable, float CallFunc_VSizeSquared_ReturnValue, HitResult CallFunc_Array_Get_Item, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_CheckShouldSkipByVisibility_ReturnValue, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue, float CallFunc_Dot_VectorVector_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue2, Actor*[] ___object_Variable, byte[] K2Node_MakeArray_Array, FString CallFunc_Conv_VectorToString_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, HitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit2, bool CallFunc_BreakHitResult_bInitialOverlap2, float CallFunc_BreakHitResult_Time2, float CallFunc_BreakHitResult_Distance2, Vector CallFunc_BreakHitResult_Location2, Vector CallFunc_BreakHitResult_ImpactPoint2, Vector CallFunc_BreakHitResult_Normal2, Vector CallFunc_BreakHitResult_ImpactNormal2, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat2, Actor* CallFunc_BreakHitResult_HitActor2, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent2, FName CallFunc_BreakHitResult_HitBoneName2, int CallFunc_BreakHitResult_HitItem2, int CallFunc_BreakHitResult_FaceIndex2, Vector CallFunc_BreakHitResult_TraceStart2, Vector CallFunc_BreakHitResult_TraceEnd2, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Conv_VectorToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x2bb69b8
	bool ProccessNothingHitTraceOverlap(out Vector DestLocation, out Rotator DestRotation, float MaxBuildDist, out Vector OutLocation, int buildIndex, out Vector ViewLocation, Vector TempOutLocation, int ___int_Array_Index_Variable, Actor* CallFunc_GetCDOByIndex_ReturnValue, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_GetNewDestRotation_ReturnValue, bool CallFunc_IsLocationValid_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Actor* CallFunc_GetCDOByIndex_ReturnValue2, bool CallFunc_IsValid_ReturnValue, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base2, bool K2Node_DynamicCast_bSuccess2, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Actor*[] ___object_Variable, byte[] K2Node_MakeArray_Array, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_GetNewDestLocation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, HitResult[] CallFunc_BoxTraceMultiForObjects_OutHits, bool CallFunc_BoxTraceMultiForObjects_ReturnValue, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_CheckShouldSkipByVisibility_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue, bool CallFunc_DoesImplementInterface_ReturnValue, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2);// 0x2bb69b8
	bool CheckPlacementOverlap(out HitResult[] HitArray, out Vector OutLocation, out Vector BoxExtent, out BuildingData CurBuildData, out Rotator BuildRotation, out Rotator ControlRot, out Vector ViewLocation, out bool HasForbiddenObject, bool TempHasForbiddenObject, Vector TempDestLcation, Vector TempOutLocation, Vector CallFunc_BPCheckPlacement_OutLocation, bool CallFunc_BPCheckPlacement_bHasForbiddenObject, bool CallFunc_BPCheckPlacement_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, int CallFunc_Array_Length_ReturnValue, int ___int_Array_Index_Variable, HitResult CallFunc_Array_Get_Item, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_CheckShouldSkipByVisibility_ReturnValue, float CallFunc_Dot_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, Actor* CallFunc_GetCDOByIndex_ReturnValue, Rotator CallFunc_GetNewDestRotation_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue3, Actor* CallFunc_GetCDOByIndex_ReturnValue2, bool CallFunc_IsValid_ReturnValue, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, Actor* CallFunc_GetOwner_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue2, float CallFunc_VSizeSquared_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue3, int CallFunc_Subtract_IntInt_ReturnValue4, float CallFunc_Add_FloatFloat_ReturnValue, Actor* CallFunc_GetCDOByIndex_ReturnValue3, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base2, bool K2Node_DynamicCast_bSuccess2, byte[] K2Node_MakeArray_Array, Vector CallFunc_GetNewDestLocation_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Actor*[] ___object_Variable, FString CallFunc_Conv_VectorToString_ReturnValue2, HitResult CallFunc_BoxTraceSingleForObjects_OutHit, bool CallFunc_BoxTraceSingleForObjects_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_BreakHitResult_bBlockingHit2, bool CallFunc_BreakHitResult_bInitialOverlap2, float CallFunc_BreakHitResult_Time2, float CallFunc_BreakHitResult_Distance2, Vector CallFunc_BreakHitResult_Location2, Vector CallFunc_BreakHitResult_ImpactPoint2, Vector CallFunc_BreakHitResult_Normal2, Vector CallFunc_BreakHitResult_ImpactNormal2, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat2, Actor* CallFunc_BreakHitResult_HitActor2, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent2, FName CallFunc_BreakHitResult_HitBoneName2, int CallFunc_BreakHitResult_HitItem2, int CallFunc_BreakHitResult_FaceIndex2, Vector CallFunc_BreakHitResult_TraceStart2, Vector CallFunc_BreakHitResult_TraceEnd2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue3, Vector CallFunc_MakeVector_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x2bb69b8
	bool ShouldEnableDoubleTouchMode(bool CallFunc_NotEqual_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x2bb69b8
	bool IsCanPlaceBuildingBP(int InBuildID, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_BuildingActorTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, byte CallFunc_GetRole_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, BackpackComponent* CallFunc_GetBackpackComponentFromCharacter_ReturnValue, int CallFunc_GetItemCountByItemSpecialID_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void InitBuildDataFromDataTable();// 0x2bb69b8
	void OnConstructionComplete_Event(bool bWasSuccessful, byte ConstructionType, bool bIsFromServer);// 0x2bb69b8
	void OnInsufficientMaterial_Event(byte BuildType);// 0x2bb69b8
	void RegisterUIEvents();// 0x2bb69b8
	void CustomEvent(float FloatValue);// 0x2bb69b8
	void CustomEvent(float FloatValue);// 0x2bb69b8
	void UpdateParameters();// 0x2bb69b8
	void CustomEvent(int IntValue);// 0x2bb69b8
	void CustomEvent(int IntValue);// 0x2bb69b8
	void CustomEvent(float FloatValue);// 0x2bb69b8
	void LuaReceiveBeginPlay();// 0x2bb69b8
	void TryAttachToMoveablePlatform(Actor* SpawnedBuilding, Vector BuildLocation);// 0x2bb69b8
	void ExecuteUbergraph_BuildSystemComp_BP(int EntryPoint, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool ___bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate2, FString ___string_Variable, FString ___string_Variable2, Actor*[] ___object_Variable, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool ___bool_Variable2, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, bool CallFunc_GetIsHasInitData_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, UAELoadedClassManager* CallFunc_Get_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue2, int ___int_Loop_Counter_Variable3, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue3, byte[] K2Node_MakeArray_Array, byte[] K2Node_MakeArray_Array2, bool K2Node_CustomEvent_bWasSuccessful, byte K2Node_CustomEvent_ConstructionType, bool K2Node_CustomEvent_bIsFromServer, byte K2Node_CustomEvent_BuildType, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_IntToFloat_ReturnValue, float K2Node_CustomEvent_FloatValue3, float K2Node_CustomEvent_FloatValue2, int ___int_Array_Index_Variable3, FName CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate3, BP_STRUCT_BuildingActorTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue3, BuildingConsumeData K2Node_MakeStruct_BuildingConsumeData, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, byte[] K2Node_Select2_Default, FString CallFunc_GetTableData_String_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, int K2Node_CustomEvent_IntValue2, BuildingData K2Node_MakeStruct_BuildingData, float CallFunc_Conv_IntToFloat_ReturnValue4, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, int K2Node_CustomEvent_IntValue, Controller* CallFunc_GetControllerSafety_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, float K2Node_CustomEvent_FloatValue, bool CallFunc_IsEditor_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate4, Actor* CallFunc_GetOwner_ReturnValue2, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess4, UTSkillManagerComponent* CallFunc_GetSkillManager_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate5, UAESkillManagerComponent* K2Node_DynamicCast_AsUAESkill_Manager_Component, bool K2Node_DynamicCast_bSuccess5, int[] CallFunc_GetCurSkillIDs_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue3, int CallFunc_Array_Get_Item2, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess6, UTSkillManagerComponent* CallFunc_GetSkillManager_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, UAESkillManagerComponent* K2Node_DynamicCast_AsUAESkill_Manager_Component2, bool K2Node_DynamicCast_bSuccess7, bool CallFunc_Less_IntInt_ReturnValue2, int[] CallFunc_GetCurSkillIDs_ReturnValue2, int CallFunc_Array_Get_Item3, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue3, Actor* K2Node_Event_SpawnedBuilding, Vector K2Node_Event_BuildLocation, byte[] K2Node_MakeArray_Array3, bool CallFunc_IsValid_ReturnValue3, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, HitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate6, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_ComponentHasTag_ReturnValue);// 0x2bb69b8
	UAEDataTable* DataTable;//[Offset: 0x344, Size: 4]
	bool bPNHDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	bool bCPODebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 1]
	bool bOverlapPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a, Size: 1]

--------------------------------
Class: STBuildSystemComponent.BuildSystemComponent.LuaActorComponent.ActorComponent.Object
	delegate OnInsufficientMaterial;//[Offset: 0x310, Size: 12]
	int CurrentUIBuildingID;//[Offset: 0x31c, Size: 4]
	class ConstructBot* ConstructBotTemplate;//[Offset: 0x320, Size: 4]
	bool hasConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	int MaxmumBuildingAllowed;//[Offset: 0x328, Size: 4]
	ConstructBot* ConstructBot;//[Offset: 0x32c, Size: 4]
	STExtraPlayerController* CachedOwnerPlayerController;//[Offset: 0x330, Size: 4]
	STExtraBaseCharacter* OwnerPlayer;//[Offset: 0x338, Size: 4]
	void SpawnConstructBot();// 0x2133a78
	void SetCheatBuilding(bool IsCheat);// 0x21339f8
	void SetBuildingConfig(const int Config);// 0x2133980
	void ServerSpawnConstructBot();// 0x2133924
	void ServerDestroyConstructBot();// 0x21338c8
	void RestartConstructBot();// 0x2bb69b8
	void PlayerControllerReconnectedHandler();// 0x21338b4
	void OnUIInterfaceCreated();// 0x21338a0
	void OnLostConnectionHandler(UAEPlayerController* Controller);// 0x2133820
	void OnControllerBeginTouch(out const Vector2D ScreenPosition);// 0x213379c
	void OnConnectionRestoredHandler(UAEPlayerController* Controller);// 0x213371c
	void JoystickTouchBeginHandler(out const Vector2D ScreenPosition, int PointerIndex, bool IsBegin);// 0x2133604
	bool IsCanPlaceBuilding(int InBuildID, byte _TYPE);// 0x2133538
	void InitializeComponent();// 0x1ef1918
	void InitBuildDataFromDataTable();// 0x2bb69b8
	void HandleStopPlaceBuilding();// 0x1f87580
	void HandleStartPlaceBuilding();// 0x20f9e68
	void HandleServerPlaceBuildingSuccess(Actor* BuiltActor);// 0x21334b8
	PlayerController* GetOwnerPlayerController();// 0x2133488
	STExtraPlayerController* GetExtraPlayerController();// 0x2133460
	int GetCurrentBuildIDFromUI();// 0x2133430
	static bool GetBuildingConsumeDataByID(int InBuildingID, out BuildingConsumeData OutBuildData);// 0x2133340
	void DoSpawnConstructBot();// 0x213332c
	void DoShutdownConstructBot();// 0x2133318
	void DestroyConstructBot();// 0x2133304
	bool CustomizedCheck(out const BuildingData CurBuildData, out const Rotator DestRotation, out const Vector DestLocation);// 0x2133154
	void BindTouchEvents();// 0x2133140
	void BeginPlay();// 0x1ef18fc
	void AddBuildingConsumeData(BuildingConsumeData InData);// 0x2133090

--------------------------------
Class: BuildSystemComponent.LuaActorComponent.ActorComponent.Object
	bool UseFixedDistanceBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 1]
	delegate OnConstructionComplete;//[Offset: 0x14c, Size: 12]
	delegate OnDoubleClickMode2Event;//[Offset: 0x158, Size: 12]
	delegate OnDoubleClickMode2PercentEvent;//[Offset: 0x164, Size: 12]
	float MaxmumConstructingDistance;//[Offset: 0x170, Size: 4]
	class SelectBuildActor* BuildingSelectorClass;//[Offset: 0x178, Size: 4]
	class SelectBuildActor* SelectBuildMeshClass;//[Offset: 0x17c, Size: 4]
	float UpdateBuildEnableTimer;//[Offset: 0x180, Size: 4]
	float MinBuildDist;//[Offset: 0x184, Size: 4]
	float GridGroundThreshold;//[Offset: 0x188, Size: 4]
	bool AIIsOpenAdsorb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	bool AIIsOpenLeftAndRightTry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d, Size: 1]
	float GridGroundCheckDepth;//[Offset: 0x190, Size: 4]
	WorldGridData WorldGridData;//[Offset: 0x194, Size: 12]
	bool bCanPlaceOnConstructableActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	int bIsFastPlacementMode;//[Offset: 0x1a4, Size: 4]
	int Mode2PressTouchBuildIndex;//[Offset: 0x1a8, Size: 4]
	bool bIsStartPreBuildMode2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 1]
	Vector2D Mode2PreBuildPos;//[Offset: 0x1b0, Size: 8]
	float CurrentDoubleClickDuration;//[Offset: 0x1b8, Size: 4]
	float ValidDoubleClickDuration;//[Offset: 0x1bc, Size: 4]
	float ValidDoubleClickInterval;//[Offset: 0x1c0, Size: 4]
	float ValidDoubleClickDistance;//[Offset: 0x1c4, Size: 4]
	bool bSouldSkipOwningPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	bool bNativeTouchActorBuildEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 1]
	bool bNativeDoubleCkickBuildEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 1]
	<int,class SelectBuildActor> ActorSelectorMap;//[Offset: 0x1cc, Size: 60]
	class Object[] SkippingObjects;//[Offset: 0x208, Size: 12]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]
	bool bPickLocationDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x215, Size: 1]
	class Object[] FilterTemplates;//[Offset: 0x218, Size: 12]
	class Object[] ActorsShouldSkipVisiblityCheck;//[Offset: 0x224, Size: 12]
	byte BuildingGridChannel;//[Offset: 0x230, Size: 1]
	float MaxCanAdsorbAngle;//[Offset: 0x234, Size: 4]
	float SnappingDistance;//[Offset: 0x238, Size: 4]
	float SnappingDetectRadius;//[Offset: 0x23c, Size: 4]
	float AIMaxCanRotateAngle;//[Offset: 0x240, Size: 4]
	FName[] BlackBuildTags;//[Offset: 0x244, Size: 12]
	float BlackTracelineTopDist;//[Offset: 0x250, Size: 4]
	float BlackTracelineDownDist;//[Offset: 0x254, Size: 4]
	bool bBPOverrideLineTraceSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	bool bCheckPlaceActorPosSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 1]
	SelectBuildActor* SelectBuildActor;//[Offset: 0x25c, Size: 4]
	int CachedCDOIndex;//[Offset: 0x280, Size: 4]
	Actor* CachedCDOActor;//[Offset: 0x284, Size: 4]
	void TryAttachToMoveablePlatform(Actor* SpawnedBuilding, Vector BuildLocation);// 0x2bb69b8
	void StopPlaceBuilding();// 0x1eef81c
	void StartPrePlaceBuilding(int InBuildID, byte viewType);// 0x5199728
	void SkipCDTimeByBuildID(int InBuildID, float IncreaseRate);// 0x519966c
	bool ShouldEnableDoubleTouchMode();// 0x519963c
	void SetPrebuildEnabled(bool CanBePlaced, bool IsVisible);// 0x519956c
	void ServerStopPlaceBuilding();// 0x5199510
	void ServerStartPrePlaceBuilding();// 0x51994b4
	void ServerPlaceBuildActor(int BuildingIndex, Vector BuildLocation, Rotator BuildRotation, uint32 InResult);// 0x5199304
	void S2C_SkipCDTimeByBuildID(int InBuildID, float IncreaseRate);// 0x5199240
	void S2C_ResetBuildngCDByBuildID(int InBuildID, float InNewCDTime);// 0x22eb4f4
	void ResetBuildngCDByBuildID(int InBuildID, float InNewCDTime);// 0x5199184
	void ResetBuildList();// 0x5199170
	bool ProccessNothingHitTraceOverlap(out const Vector DestLocation, out const Rotator DestRotation, const float MaxBuildDist, out Vector OutLocation, int buildIndex, out const Vector ViewLocation);// 0x2bb69b8
	void PlaceBuildingWithIndex(int buildIndex);// 0x1eef6a0
	void PlaceBuildingAtLocation(int buildIndex, out const Vector Loc, out const Rotator Rot);// 0x519904c
	void PlaceBuilding();// 0x1f70088
	void OverriveDeploymentTransform(out const Rotator rotIn, out const Vector locIn, out Rotator rotOut, out Vector locOut);// 0x5198ec0
	void OverrideBuildingMaxBuildDistance(float BuildingMaxDistance, bool SetAll, int BuildingID);// 0x5198db4
	void OnTouchedConstructableBoxEnded(byte FingerIndex, PrimitiveComponent* TouchedComponent);// 0x21354b0
	void OnTouchedConstructableBox(byte FingerIndex, PrimitiveComponent* TouchedComponent);// 0x5198cf0
	void OnTouchActorBuild(out const Vector2D ScreenPosition, PlayerController* Controller);// 0x5198c1c
	void OnAsyncLoadingEffectFinished(ParticleSystem* EffectPtr, int buildIndex);// 0x5198a58
	void OnAsyncLoadingBuildingFinished(class Actor AcotrPtr, int buildIndex);// 0x5198894
	bool LineTraceToBlackTag(Vector BuildLocation);// 0x519881c
	bool IsInPreBuildingMode();// 0x51987f4
	bool IsCanPlaceBuildingBP(int InBuildID);// 0x27b82d0
	bool IsCanPlaceBuilding(int InBuildID, byte _TYPE);// 0x2133538
	SoftObjectPath GetPreBuildingEffectPath(int InBuildID);// 0x2bb69b8
	PlayerController* GetOwnerPlayerController();// 0x2133488
	float GetMaxDistance();// 0x51987c4
	bool GetIsHasInitData();// 0x279b014
	int GetIndexByBuildingID(int BuildID);// 0x5198744
	byte GetCurrentBuildType();// 0x519871c
	Actor* GetCDOByIndex(int Index);// 0x519869c
	BuildingData[] GetBuildingList();// 0x5198630
	void EnableBuildingByID(int BuildID, bool bEnable);// 0x519856c
	void DoSceenTouchBuild(int buildIndex, out const Vector2D ScreenPostion, int PointerIndex, byte _TYPE, bool IsBegin, byte CustomBuildEvent);// 0x5198378
	bool DensityCheck(out const BuildingActorDensityCheck DensityCheckParmas);// 0x519828c
	bool CheckShouldSkipByVisibility(PrimitiveComponent* _comp, int buildIndex);// 0x51981c8
	bool CheckPlacementOverlap(out const HitResult[] HitArray, out Vector OutLocation, out const Vector BoxExtent, out const BuildingData CurBuildData, out const Rotator BuildRotation, out const Rotator ControlRot, out const Vector ViewLocation, out bool HasForbiddenObject);// 0x2bb69b8
	bool CheckObjectIsOneOfTheTemplate(Object* Obj, class Object[] _ActorFilterTemplates);// 0x5198020
	bool BuildAtWorldLoc(int buildIndex, out const Transform tranx, Vector EndLocation, bool bUseTrace, byte BuildType);// 0x5197e10
	bool BP_LineTraceToBlackTag(Vector BuildLocation);// 0x2bb69b8
	void AddBuildingData(BuildingData InData);// 0x5197cb0

--------------------------------
Class: ConstructBot.Actor.Object
	AnimationAsset* StartupAnimation;//[Offset: 0x2fc, Size: 4]
	AnimationAsset* LoopAnimation;//[Offset: 0x300, Size: 4]
	AnimationAsset* ShutdownAnimation;//[Offset: 0x304, Size: 4]
	SkeletalMeshComponent* Mesh;//[Offset: 0x308, Size: 4]
	ParticleSystemComponent* GFX;//[Offset: 0x30c, Size: 4]
	void ShutdownConstructBot();// 0x1ed11c0
	void RestartConstructBot();// 0x1f3cb34
	void OnLoopAnimation();// 0x1f7ddb0
	void OnEndingAnimation();// 0x1f7dd9c

--------------------------------
Class: SelectBuildActor.Actor.Object
	ParticleSystemComponent* SelectBuildEffect;//[Offset: 0x2fc, Size: 4]
	void SetSelectActorTemplate(ParticleSystem* Template);// 0x519a988
	void SetSelectActorPlacementEnable(bool PlacementEnable, bool IsVisible);// 0x519a8b8
	void SetIsPlacementEnable(bool Val);// 0x519a83c
	void OnParticleLoaded();// 0x1ed11c0
	bool IsCurrentPlacementEnable();// 0x519a820
	bool GetIsPlacementEnable();// 0x519a820

--------------------------------
Class: BuildingConsumeData
	int BuildingID;//[Offset: 0x0, Size: 4]
	int ConsumeItemID;//[Offset: 0x4, Size: 4]
	int ConsumeItemCount;//[Offset: 0x8, Size: 4]
	int ReturnItemCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BuildingActorBase.LuaActor.Actor.Object
	bool bCustomBlockingChannels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	byte[] CustomBlockingChannels;//[Offset: 0x3a4, Size: 12]
	bool bCheckVisibilitySkipTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	class Object[] VisibilitySkipTypes;//[Offset: 0x3b4, Size: 12]
	BuildingActorWorldSnapSetup WorldSnapSetup;//[Offset: 0x3c0, Size: 36]
	float DebugHealthDistance;//[Offset: 0x3e4, Size: 4]
	Vector DebugHealthOffset;//[Offset: 0x3e8, Size: 12]
	class Object[] ProhibitedActorTemplateList;//[Offset: 0x3f4, Size: 12]
	class Object[] EnableBuildingList;//[Offset: 0x400, Size: 12]
	SoftObjectPath PreBuildingEffectPath;//[Offset: 0x410, Size: 24]
	bool CanBuildUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	bool bShouldSnapToWorldGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	float UnderWaterMaxBuildDepth;//[Offset: 0x42c, Size: 4]
	Transform DestroyedParticleTransformOffset;//[Offset: 0x430, Size: 48]
	SoftObjectPath DestroyBuildingEffectPath;//[Offset: 0x460, Size: 24]
	bool bUseExtraCenterOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	bool bUseExtraCenterRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 1]
	Vector ActorCollisionBoxExtern;//[Offset: 0x47c, Size: 12]
	Vector ActorCollisionBoxCenter;//[Offset: 0x488, Size: 12]
	Rotator ActorCollisionBoxRotator;//[Offset: 0x494, Size: 12]
	float Health;//[Offset: 0x4a0, Size: 4]
	float MaxDeviation;//[Offset: 0x4a4, Size: 4]
	float MaxTraceDepth;//[Offset: 0x4a8, Size: 4]
	bool bDoQuadTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	byte ConstructingMode;//[Offset: 0x4ad, Size: 1]
	bool bEnableOverlayPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ae, Size: 1]
	bool bAutoPickValidPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4af, Size: 1]
	float OverlayPlaceHeight;//[Offset: 0x4b0, Size: 4]
	float DetectDeath;//[Offset: 0x4b4, Size: 4]
	int MaxCountLimit;//[Offset: 0x4bc, Size: 4]
	bool bDoDensityCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	FString LuaModPath;//[Offset: 0x4c4, Size: 12]
	static void SpawnDestroyParticle(bool bSpawnParticle, out const Transform Loc, out const SoftObjectPath DestroyBuildingEffectPath, World* World);// 0x51911a0
	void PlayDestroyAnimation(bool bUseParticle);// 0x2111228
	void OnTakeDamageFromVehicle(Actor* DamagedActor, float ForwardSpeed, Actor* DamageCauser);// 0x2bb69b8
	void OnPlayDestroyAnimation(bool bUseParticle);// 0x2bb69b8
	void OnBuildingActorDamaged(float Health);// 0x1ecc424
	void OnBornAnimationPlayEndInClient();// 0x2bb69b8
	int GetBuildID();// 0x5191180
	void BPOnOwnerChanged();// 0x2bb69b8

--------------------------------
Class: BuildingActorWorldSnapSetup
	Vector GridSizeScale;//[Offset: 0x0, Size: 12]
	Vector Pivot;//[Offset: 0xc, Size: 12]
	Rotator SnapRotation;//[Offset: 0x18, Size: 12]

--------------------------------
Class: BuildingGridComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FName CollisionProfileName;//[Offset: 0x5d0, Size: 8]
	Vector BuildCenterOffset;//[Offset: 0x5d8, Size: 12]

--------------------------------
Class: BuildingData
	int BuildingID;//[Offset: 0x0, Size: 4]
	byte BuildingType;//[Offset: 0x4, Size: 1]
	SoftObjectPath BuildingActorClassPath;//[Offset: 0x8, Size: 24]
	byte[] BlockingChannels;//[Offset: 0x20, Size: 12]
	float MaxBuildDist;//[Offset: 0x2c, Size: 4]
	float CDInterval;//[Offset: 0x30, Size: 4]
	int MaxBuildCount;//[Offset: 0x34, Size: 4]
	bool bConstructable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bAutoRefreshCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]

--------------------------------
Class: BP_STRUCT_BuildingActorTable_type
	int BTID_0_3793920014AA44EA3F8AC81C094E2BF4;//[Offset: 0x0, Size: 4]
	int resourcenumber_1_6E94858029572FE007491E400595BD82;//[Offset: 0x4, Size: 4]
	FString Icon_2_4A928B8000C0CF663ABCCB64094EAB7E;//[Offset: 0x8, Size: 12]
	int ID_3_13C46C806EB23C1217AC50B203294E84;//[Offset: 0x14, Size: 4]
	int restoreresourcenumber_4_695E468011AD406E67743BD300C0A132;//[Offset: 0x18, Size: 4]
	int resourceID_5_703EA68056B5EB047B5EC0B70F854614;//[Offset: 0x1c, Size: 4]
	FString BuildingName_6_226D9500201382A22B469D4F0284ADD5;//[Offset: 0x20, Size: 12]
	int SortID_7_719B368018040ECC2FDAF80F0FD5B194;//[Offset: 0x2c, Size: 4]
	FString Tips_8_4BCBD14041A035173A8EC8CC09500353;//[Offset: 0x30, Size: 12]
	FString SupportedGameMode_9_52EDDA8005B096F03B4DDD31065D8B75;//[Offset: 0x3c, Size: 12]
	int MaxBuildDist_10_6EE473C0608F72AF353F108E01435054;//[Offset: 0x48, Size: 4]
	int ColdDownTime_11_6BB0738075B1199C5ED781B10814AFC5;//[Offset: 0x4c, Size: 4]
	int MaxCount_12_6ED335003D1A56A802F234F10BE12534;//[Offset: 0x50, Size: 4]
	int AutoRefreshCD_13_4E0365006E419CBA2E98B29700754024;//[Offset: 0x54, Size: 4]
	int CheckItemID_14_7DCB47C038E5146B6D7D77080CE678D4;//[Offset: 0x58, Size: 4]

--------------------------------
Class: UAELoadedClassManager.Object
	<FString,BPTable*> BPTableMap;//[Offset: 0x1c, Size: 60]
	<FString,BPTable*> BPTableMap_Mod;//[Offset: 0x58, Size: 60]
	<int,FString> BPTableNameMap;//[Offset: 0x94, Size: 60]
	FString LoadedClassManagerClassName;//[Offset: 0xd0, Size: 12]
	<Object*,SoftClassPath> AsyncLoadClassDict;//[Offset: 0x228, Size: 60]
	void InitTableData();// 0x208734c
	void InitialModTableItemMap();// 0x1f1ee34
	void InitBPTableMap_Mod();// 0x2bb69b8
	void InitBPTableMap();// 0x2bb69b8
	void HandleTableModNameChanged(FString InModName);// 0x23d79b4
	FString GetWrapperPath(FString BPTableName, int ID);// 0x23d782c
	class Object GetWrapperClass(FString BPTableName, int ID);// 0x23d7724
	FString GetPath(FString BPTableName, int ID, bool IsLobby, bool bForceLobby);// 0x23d74fc
	Object* GetObject(FString BPTableName, int ID, Object* Outer, bool IsLobby);// 0x23d7360
	class Object GetCustom1Class(FString BPTableName, int ID);// 0x23d7258
	class Object GetClass(FString BPTableName, int ID, bool IsLobby);// 0x23d7104
	FString GetBPTableName(int Type);// 0x23d6ffc
	void GetAssetByAssetReferenceAsync(SoftObjectPath AssetReference, delegate AssetLoadSuccessDelegate);// 0x23d6e1c
	static UAELoadedClassManager* Get();// 0x23d6df4
	BPTable* CreateAndAddBPTable_Mod(FString BPTableName);// 0x23d6d30
	BPTable* CreateAndAddBPTable(FString BPTableName);// 0x23d6c6c
	void ClearModTableItemMap();// 0x2047094
	void ClearBPTable_Mod();// 0x23d6c58
	void ClearBPTable();// 0x23d6c44
	void ClearAssetByAssetReferenceAsync(delegate AssetLoadSuccessDelegate);// 0x23d6ba0
	void ClearAllData();// 0x23d6b8c

--------------------------------
Class: BPTable.Object
	FString BPTableName;//[Offset: 0x1c, Size: 12]
	<int,BPTableItem> BPTableItemMap;//[Offset: 0x28, Size: 60]
	<int,BPTableItem> BPTableItemMap_Mod;//[Offset: 0x64, Size: 60]
	FString GetWrapperPath(int ID);// 0x23d64d8
	class Object GetWrapperClass(int ID);// 0x23d6458
	FString GetPath(int ID, bool IsLobby, bool bForceLobby);// 0x23d62b0
	Object* GetObject(int ID, Object* Outer, bool IsLobby);// 0x23d61a0
	Object* GetModObject(int ID, Object* Outer, bool IsLobby);// 0x23d6090
	class Object GetModClass(int ID, bool IsLobby);// 0x23d5fc4
	class Object GetCustom1Class(int ID);// 0x23d5f44
	class Object GetClass(int ID, bool IsLobby);// 0x23d5e78
	void ConvertPath(int ID);// 0x23d5e00

--------------------------------
Class: BPTableItem
	int ID;//[Offset: 0x0, Size: 4]
	FString Name;//[Offset: 0x4, Size: 12]
	FString Path;//[Offset: 0x10, Size: 12]
	FString LobbyPath;//[Offset: 0x1c, Size: 12]
	FString WrapperPath;//[Offset: 0x28, Size: 12]
	FString Custom1;//[Offset: 0x34, Size: 12]

--------------------------------
Class: UAESkillManagerComponent.UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	<int,int> IndexOfMapID;//[Offset: 0x5dc, Size: 60]
	UTSkillEntryConfig[] SkillEntryConfigs;//[Offset: 0x654, Size: 12]
	FString SkillTableName;//[Offset: 0x660, Size: 12]
	FString SkillBuffTableName;//[Offset: 0x66c, Size: 12]
	FString PropSkillMapTableName;//[Offset: 0x678, Size: 12]
	byte TriggerSkillEventFromRole;//[Offset: 0x698, Size: 1]
	GSListenerBase* CurrentGSListener;//[Offset: 0x69c, Size: 8]
	UAESkillStringEventEffectMapForEditor*[] TriggerSkillListenerByString;//[Offset: 0x6a4, Size: 12]
	UAESkillEventEffectMapForEditor*[] TriggerSkillListenerByUAEEume;//[Offset: 0x6b0, Size: 12]
	UTSkillEventEffectMapForEditor*[] TriggerSkillListenerByUTEume;//[Offset: 0x6bc, Size: 12]
	UAEGSLisenterEffectMapForEditor*[] TriggerSkillListenerByGS;//[Offset: 0x6c8, Size: 12]
	void TriggerStringEvent(int SkillID, FString EventTypeStr);// 0x229b2d8
	void TriggerSkillEvent_RPC_UTSkillEventType(byte InEventEume, int SkillID, byte InFromRole);// 0x229b1d0
	void TriggerSkillEvent_RPC_String(FString InEventName, int SkillID, byte InFromRole);// 0x229b084
	void TriggerSkillEvent_RPC_EUAESkillEvent(byte InEventEume, int SkillID, byte InFromRole);// 0x229af7c
	void TriggerEvent(int SkillID, byte EventType);// 0x2278848
	void TriggerCurSkillEvent_Mutil(byte UAEEvent, int SkillID);// 0x229aeb8
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x2278784
	void SetSkillAnimListAttach(bool bAttach, bool bNotReplaceTurnAnimWithReplaceMoveAnim);// 0x229ade0
	void SetIsAutoAddSkill(bool InAutoAdd);// 0x229ad60
	void ServerTriggerStringEvent(int SkillID, FString EventTypeStr);// 0x229ac24
	void ServerTriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x229ab28
	void RPC_Server_SkillBlackBoardKey(int InSkillID, const UAEBlackboardKeySelector[] KeySelectors, const byte[] Content, FString EventName, bool bNetMulticast);// 0x229a87c
	void RPC_NetMulticast_SkillBlackBoardKey(int InSkillID, const UAEBlackboardKeySelector[] KeySelectors, const byte[] Content, FString EventName);// 0x229a668
	void RPC_Client_SkillBlackBoardKey(int InSkillID, const UAEBlackboardKeySelector[] KeySelectors, const byte[] Content, FString EventName);// 0x229a454
	void ReplaceSkillJumpAnimList(SkillReplaceJumpAnimData[] AnimDataList);// 0x229a26c
	void ReplaceSkillAnimList(SkillReplaceCharAnimData[] AnimDataList);// 0x229a084
	void OnSkillManagerInitFinish();// 0x229a070
	void OnRep_SkillSynSinglePhaseData();// 0x1f67e9c
	void OnRep_SkillSynData();// 0x229a054
	void OnGsListenerTrigger(GSListenerBase* Listener);// 0x2299fdc
	void LocalTriggerStringEvent(int SkillID, FString EventTypeStr);// 0x2299e3c
	void HandleSkillStop(int SkillID, enum StopReason);// 0x2299d78
	void HandleSkillStart(int SkillID);// 0x2299cf8
	UTSkillWidget* GetSkillWidget(int SkillID);// 0x2299c70
	FString GetSkillIconBySkillID(int SkillID);// 0x2299b68
	UTSkill* GetSkillByEntry(enum Entry);// 0x2299ae0
	byte GetRealOwnerRoleSafety();// 0x2299ab0
	int GetPropMappedSkillID(int PropID, int PropSkillLevel);// 0x22999ec
	PropSkillMapTableRow GetPropMappedRow(int PropSkillID, int PropSkillLevel);// 0x2299814
	int GetPropMappedAuxSkillID(int PropID, int PropSkillLevel);// 0x2299750
	void DynamicRemoveSkill(int InSkillID);// 0x1f76444
	void DynamicAddSkill(int InSkillID);// 0x20237b4
	bool CheckPropSkillFilterGun(int PropSkillID, int PropSkillLevel, int GunID);// 0x2299648

--------------------------------
Class: UTSkillEntryConfig
	enum Entry;//[Offset: 0x0, Size: 1]
	int SkillIndex;//[Offset: 0x4, Size: 4]
	int SkillID;//[Offset: 0x8, Size: 4]
	FString Interrupts;//[Offset: 0xc, Size: 12]

--------------------------------
Class: UAESkillStringEventEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
	FString EventString;//[Offset: 0x74, Size: 12]

--------------------------------
Class: UAESkillEventEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
	byte UAESkillEventType;//[Offset: 0x74, Size: 1]

--------------------------------
Class: UAEGSLisenterEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
	SkillGSLisenterWarpper GSLisenter;//[Offset: 0x74, Size: 4]
	bool bIsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]

--------------------------------
Class: SkillGSLisenterWarpper
	GSListenerBase* ListenerBase;//[Offset: 0x0, Size: 4]

--------------------------------
Class: SkillReplaceJumpAnimData
	byte JumpAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset*[] JumpAnimList;//[Offset: 0x4, Size: 12]
	AnimationAsset*[] FPPJumpAnimList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: PropSkillMapTableRow
	int SkillMapID;//[Offset: 0x0, Size: 4]
	int PropID;//[Offset: 0x4, Size: 4]
	int PropSkillLevel;//[Offset: 0x8, Size: 4]
	int PropSkillID;//[Offset: 0xc, Size: 4]
	int AuxPropSkillID;//[Offset: 0x10, Size: 4]
	int[] FilterGunIDs;//[Offset: 0x14, Size: 12]
	FString PropSkillIconPath;//[Offset: 0x20, Size: 12]
	FString PropSkillUseIconPath;//[Offset: 0x2c, Size: 12]
	FString PropSkillDesc;//[Offset: 0x38, Size: 12]

--------------------------------
Class: WorldGridData
	Vector GridSize;//[Offset: 0x0, Size: 12]

--------------------------------
Class: BuildingActorDensityCheck
	bool bDoCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Vector Location;//[Offset: 0x4, Size: 12]
	FString LuaModPath;//[Offset: 0x10, Size: 12]

--------------------------------
Class: HoldComponent_C.ActorComponent.Object
	void HoldTime(out float Time, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2bb69b8
	void Release(byte FingerIndex, int CallFunc_Conv_ByteToInt_ReturnValue, float CallFunc_HoldTime_Time, PlayerController* CallFunc_GetPlayerController_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x2bb69b8
	void Push(int FingerIndex, float CallFunc_GetTimeSeconds_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void HoldAndRelease__DelegateSignature(int FingeerIndex);// 0x2bb69b8
	delegate HoldAndRelease;//[Offset: 0xc0, Size: 12]
	float HoldTimeThreshold;//[Offset: 0xcc, Size: 4]
	int HoldFingerIndex;//[Offset: 0xd0, Size: 4]
	byte HoldMode;//[Offset: 0xd4, Size: 1]
	float PushTime;//[Offset: 0xd8, Size: 4]
	bool IsPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]

--------------------------------
Class: BP_SkillManagerComponent_C.UAECharacterSkillManagerComponent.UAESkillManagerComponent.UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: UAECharacterSkillManagerComponent.UAESkillManagerComponent.UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	void TriggerEvent(int SkillID, byte EventType);// 0x2278848
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x2278784
	void SetSkillOwner(Actor* Pawn);// 0x2278704

--------------------------------
Class: CustomCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	void InterpToTargetFov(float FOV, float InterpSpeed, bool DeltaValue);// 0x1f83474

--------------------------------
Class: CharacterAnimList_Skill_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: CharacterAnimList_Parachute_C.UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x270, Size: 1328]
	float Priority;//[Offset: 0x7a0, Size: 4]
	float BlendRadius;//[Offset: 0x7a4, Size: 4]
	float BlendWeight;//[Offset: 0x7a8, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ac, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ac, Size: 1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x45072e0

--------------------------------
Class: CharacterAnimList_Base_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: PetComponent_BP_C.STExtraFightPetComponent.STExtraPetComponent.SceneComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x270, Size: 4]
	void IsFppMode(out bool Out, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void GetPetOwnerPlayerPawn(out BP_PlayerPawn_C* Out, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void GetPetPawn(out BasePetCharacter_BP_C* Out, BasePetCharacter_BP_C* K2Node_DynamicCast_AsBase_Pet_Character_BP, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void SetPetPawn(STExtraPetCharacter* InPetPawn, out STExtraPetCharacter* Out, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x2bb69b8
	void SetPetOwnerPlayerPawn(STExtraBaseCharacter* InPlayerPawn, out STExtraBaseCharacter* Out, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x2bb69b8
	void ResetAttachTrans(BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out2, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out3, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult);// 0x2bb69b8
	void SpawnPetWithInfo(GameModePlayerPetInfo Info, bool ___bool_Variable, bool CallFunc_IsFppMode_Out, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_PetLevelTable_type CallFunc_GetPetLevelCfg_Out_Row, Actor* CallFunc_GetOwner_ReturnValue, FString K2Node_Select_Default, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue2, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, class Object CallFunc_GetClassByAssetReference_ReturnValue, class BasePetCharacter_BP_C K2Node_ClassDynamicCast_AsBase_Pet_Character_BP, bool K2Node_ClassDynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x2bb69b8
	void SpawnPet(class BasePetCharacter_BP_C PetClass);// 0x2bb69b8
	void RemovePet();// 0x2bb69b8
	void PlayerStateChange(enum State, byte changeType);// 0x2bb69b8
	void OnOwnerPlayerPossessed(GameModePlayerPetInfo PetInfo);// 0x2bb69b8
	void OnOwnerDetachedVehicle();// 0x2bb69b8
	void OnRep_PetPawn();// 0x2bb69b8
	void OnRep_PetOwnerPlayerPawn();// 0x2bb69b8
	void ExecuteUbergraph_PetComponent_BP(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsServer_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, Actor*[] K2Node_MakeArray_Array, STExtraBaseCharacter* CallFunc_SetPetOwnerPlayerPawn_out, class BasePetCharacter_BP_C K2Node_CustomEvent_PetClass, Transform CallFunc_GetTransform_ReturnValue, bool CallFunc_IsValidClass_ReturnValue, enum K2Node_Event_State, byte K2Node_Event_changeType, FString CallFunc_Concat_StrStr_ReturnValue, GameModePlayerPetInfo K2Node_CustomEvent_PetInfo, FString CallFunc_Concat_StrStr_ReturnValue2, STExtraPetCharacter* CallFunc_SetPetPawn_Out, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out2, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsPlayer_Event_for_Pet, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue2, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out3, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out4, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out5, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out6, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, BP_PlayerPawn_C* CallFunc_GetPetOwnerPlayerPawn_out, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_IsValid_ReturnValue7, FString CallFunc_Conv_BoolToString_ReturnValue2, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out7, FString CallFunc_Concat_StrStr_ReturnValue5, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out8, bool CallFunc_IsValid_ReturnValue8, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out9, FString CallFunc_Conv_BoolToString_ReturnValue3, bool CallFunc_IsValid_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, BP_PlayerPawn_C* CallFunc_GetPetOwnerPlayerPawn_out2, BP_PlayerPawn_C* CallFunc_GetPetOwnerPlayerPawn_out3, bool CallFunc_IsValid_ReturnValue10, FString CallFunc_Conv_BoolToString_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue8, PetLevelInfo K2Node_MakeStruct_PetLevelInfo, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, BasePetCharacter_BP_C* CallFunc_FinishSpawningActor_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, STExtraPetCharacter* CallFunc_SetPetPawn_Out2, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11, Vector CallFunc_BreakTransform_Location2, Rotator CallFunc_BreakTransform_Rotation2, Vector CallFunc_BreakTransform_Scale2, FString CallFunc_Concat_StrStr_ReturnValue12, Vector CallFunc_Add_VectorVector_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue13, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_BreakTransform_Location3, Rotator CallFunc_BreakTransform_Rotation3, Vector CallFunc_BreakTransform_Scale3, Transform CallFunc_MakeTransform_ReturnValue);// 0x2bb69b8
	void OnRepPetPawnCalled__DelegateSignature();// 0x2bb69b8
	class BasePetCharacter_BP_C* SpawnPetClass;//[Offset: 0x274, Size: 4]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x278, Size: 24]
	Transform SpawnTrans;//[Offset: 0x290, Size: 48]
	Actor*[] NewVar;//[Offset: 0x2c0, Size: 12]
	delegate OnRepPetPawnCalled;//[Offset: 0x2cc, Size: 12]

--------------------------------
Class: STExtraFightPetComponent.STExtraPetComponent.SceneComponent.ActorComponent.Object
	STExtraBaseCharacter* PetOwnerPlayerPawn;//[Offset: 0x260, Size: 4]
	STExtraPetCharacter* PetPawn;//[Offset: 0x264, Size: 4]
	void OnRep_PetPawn();// 0x2bb69b8
	void OnRep_PetOwnerPlayerPawn();// 0x2bb69b8

--------------------------------
Class: STExtraPetComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool[] PetStateList;//[Offset: 0xc18, Size: 12]
	bool[] ClientDiffPetStateList;//[Offset: 0xc24, Size: 12]
	float MovementTickInterval;//[Offset: 0xc30, Size: 4]
	int PetStateNum;//[Offset: 0xc34, Size: 4]
	int RelevantCloseTime;//[Offset: 0xc38, Size: 4]
	PetVisibilityInfo PetVisibilityInfo;//[Offset: 0xc3c, Size: 8]
	PetLevelInfo PetLevelInfo;//[Offset: 0xc44, Size: 8]
	bool OwnerPlayerIsOnMoveBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4c, Size: 1]
	float OwnerPlayerMoveBaseCheckTime;//[Offset: 0xc50, Size: 4]
	float OwnerPlayerCurMoveBaseCheckTime;//[Offset: 0xc54, Size: 4]
	bool PetDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 1]
	STExtraBaseCharacter* PetOwnerPlayerCharacter;//[Offset: 0xc5c, Size: 4]
	byte PetRelevantType;//[Offset: 0xc60, Size: 1]
	byte CurPetState;//[Offset: 0xc61, Size: 1]
	delegate OnPetStateChangeDelegate;//[Offset: 0xc64, Size: 12]
	delegate OnPetCurExecuteEventDelegate;//[Offset: 0xc70, Size: 12]
	delegate OnPetMontageDelegate;//[Offset: 0xc7c, Size: 12]
	PetEventItem* CurExecuteEvent;//[Offset: 0xc88, Size: 4]
	PetMontageData PetCurMontage;//[Offset: 0xc8c, Size: 8]
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x2bb69b8
	void SetRenderInTwoPass(bool InValue);// 0x21c5e18
	void SetPetVisibility(bool Visible);// 0x2bb69b8
	void SetPetMontage(out const PetMontageData Data);// 0x21c5d8c
	void SetCurExecuteEvent(PetEventItem* Event);// 0x21c5d14
	bool PetOwnerIsAutonomous();// 0x21c5cec
	void PetOwnerCharacterBecomeValid();// 0x2bb69b8
	void PetLeaveState(byte State);// 0x21c5c74
	bool PetHasState(byte State);// 0x21c5bf4
	bool PetEnterState(byte ToState);// 0x21c5b74
	void OwnerPlayerMoveBaseCheck();// 0x21c5b60
	void OnRep_PetVisibilityInfo();// 0x21c5b4c
	void OnRep_PetStateList();// 0x21c5b38
	void OnRep_PetStateChange();// 0x1ee1bb4
	void OnRep_PetOwnerCharacter();// 0x21c5b24
	void OnRep_PetCurMontageChange();// 0x21c5b10
	void OnRep_CurExecuteEvent();// 0x21c5afc
	void OnRep_AttachmentReplication();// 0x1ff4a28
	void OnOwnerAvatarEquipped(enum SlotType, bool IsEquipped, int InItemID);// 0x21c59e8
	void NotifyBpDrawDebugLineChange(bool Draw);// 0x2bb69b8
	bool IsPetCanAppear();// 0x1f36420
	bool IsAnimLimited(int AnimId);// 0x21c5960
	int[] GetPetUnlockAnimIds();// 0x2bb69b8
	STExtraBaseCharacter* GetPetOwnerCharacter();// 0x2bb69b8
	FString GetPetAnimLimitePlayerState(int AnimId);// 0x2bb69b8
	bool ClientPredictEnterState(byte ToState);// 0x21c58e0
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x21c5858
	void BroadcastPetLeaveDisappear();// 0x2163470
	void BindDelegateInCpp();// 0x21c583c

--------------------------------
Class: PetVisibilityInfo
	bool Visible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PetLevelInfo
	int PetId;//[Offset: 0x0, Size: 4]
	int PetLevel;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PetEventItem.Object
	byte EventType;//[Offset: 0x1c, Size: 1]
	int EventPriority;//[Offset: 0x20, Size: 4]
	float EventExecTime;//[Offset: 0x24, Size: 4]
	float EventMaxWaitTime;//[Offset: 0x28, Size: 4]
	bool NotEnterWaitList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	byte EnterPetState;//[Offset: 0x2d, Size: 1]
	byte LeavePetState;//[Offset: 0x2e, Size: 1]
	BehaviorTree* BehaviorTree;//[Offset: 0x30, Size: 4]
	int AnimationAssetId;//[Offset: 0x34, Size: 4]
	PetMontageConfig[] MontageList;//[Offset: 0x38, Size: 12]
	PetMontageConfig[] UnlockMontageList;//[Offset: 0x44, Size: 12]
	PetMontageConfig[] RealPlayMontageList;//[Offset: 0x50, Size: 12]
	bool bIgnoreUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bCanInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	delegate OnPetEventStartDelegate;//[Offset: 0x60, Size: 12]
	delegate OnPetEventEndDelegate;//[Offset: 0x6c, Size: 12]
	STExtraPetCharacter* PetCharacter;//[Offset: 0x78, Size: 4]
	void UpdateCanPlayMontageList();// 0x2087384
	void SelectRandomMontage();// 0x2087368
	void OnEventStart(STExtraPetCharacter* Pet);// 0x1fd97c0
	void OnEventEnd();// 0x208734c
	bool IsSameEvent(const PetWaitEventInfo* WaitEvent);// 0x1ecd880

--------------------------------
Class: PetMontageConfig
	int AnimationAssetId;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PetWaitEventInfo.Object
	byte EventType;//[Offset: 0x1c, Size: 1]
	float EventMaxWaitTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PetMontageData
	int AnimationAssetId;//[Offset: 0x0, Size: 4]
	float MontageStartTime;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BasePetCharacter_BP_C.STExtraFightPetCharacter.STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xcc0, Size: 4]
	void HandleAirAttack(Vector Area, bool IsAirAttacking, bool CallFunc_IsServer_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue2, Controller* CallFunc_GetController_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x2bb69b8
	void SetPetHidden(bool bHidden, bool CallFunc_Not_PreBool_ReturnValue);// 0x2bb69b8
	void OnPetSwimmingStateChange(bool bEnter);// 0x2bb69b8
	void GetGameModeType(out enum GameModeType, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void HandleOnOwnerWin(int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue);// 0x2bb69b8
	void OnPetOwnerFallingModeChange(bool IsFalling, Vector PlayerLoc, FName CallFunc_MakeLiteralName_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x2bb69b8
	void StopCurMontage(AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void ChangeToDefaultAttachInfo(PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity2, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult);// 0x2bb69b8
	void OnDelayLeaveDisappear();// 0x2bb69b8
	void OnPetLeaveState(byte LeaveState, delegate K2Node_CreateDelegate_OutputDelegate, byte CallFunc_GetPetDefaultFollowType_FollowType, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x2bb69b8
	void OnPetEnterState(byte EnterState, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_PetEnterState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);// 0x2bb69b8
	void OnPetAppearAnimEnd();// 0x2bb69b8
	void OnPetDisappearStateChange(bool IsEnter, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void GetPetParachuteEquipments(out int[] Out);// 0x2bb69b8
	void HandlePetStopParachute(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, int[] CallFunc_GetPetParachuteEquipments_out, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2bb69b8
	void HandlePetStartParachute(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, int[] CallFunc_GetPetParachuteEquipments_out, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2bb69b8
	void DetachFromOwnerPlayer();// 0x2bb69b8
	void InitPetAvatar(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, GameModePlayerPetInfo CallFunc_GetPetInfo_PetInfo, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_HandleEquipItem_ReturnValue);// 0x2bb69b8
	void SetPetFollowType(byte Type, FName CallFunc_MakeLiteralName_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsServer_ReturnValue);// 0x2bb69b8
	void PetHasDisappearState(out bool Out, bool CallFunc_PetHasState_ReturnValue, bool CallFunc_PetHasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x2bb69b8
	void OnPetFlyAroundStateChange(bool IsEnter, bool CallFunc_IsServer_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2bb69b8
	void OnPetFollowStateChange(bool IsEnter, AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2bb69b8
	void UpdateAttachInfoByOwnerDefaultAvatar(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, AvatarSlotDesc[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, AvatarSlotDesc CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue);// 0x2bb69b8
	void ResetAttachInfo(BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo2, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult);// 0x2bb69b8
	void GetPetInfo(out GameModePlayerPetInfo PetInfo);// 0x2bb69b8
	void GetPetEntity(out PetEntityComponent_BP_C* PetEntity);// 0x2bb69b8
	void DisableUnuseComponent();// 0x2bb69b8
	void CalcInAirAttackArea(BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, Vector CallFunc_K2_GetActorLocation_ReturnValue, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x2bb69b8
	void SelfPetVisibleSettingChanged(bool In, bool CallFunc_PetHasDisappearState_out, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_PetOwnerIsAutonomous_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2bb69b8
	void OtherPetVisibleSettingChanged(bool In, bool CallFunc_PetHasDisappearState_out, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_PetOwnerIsAutonomous_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2bb69b8
	void PetOtherVisibleSetting(out bool Out, SettingConfig_C* SettingConfig, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void PetSelfVisibleSetting(out bool Out, SettingConfig_C* SettingConfig, bool ___bool_Variable, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, bool CallFunc_IsValid_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool K2Node_Select_Default, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void GetPetDefaultFollowType(out byte FollowType);// 0x2bb69b8
	void DrawPetDebugInfo(bool CallFunc_HasAuthority_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue);// 0x2bb69b8
	void OnRep_AttachToOwner(Transform TempTrans, bool CallFunc_PetEnterState_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, bool CallFunc_K2_SetActorRotation_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, Transform CallFunc_GetFollowPos_out);// 0x2bb69b8
	void AttachToOwnerPlayer(BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, bool CallFunc_IsServer_ReturnValue, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter2, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo2, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo3, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult);// 0x2bb69b8
	void PetOwnerStopEmote(int EmoteId, int StopReason, bool CallFunc_IsServer_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_PetPlayerEmoteTable_type CallFunc_GetPetRspInfoWithPlayerEmoteId_Out_Row, bool CallFunc_GetPetRspInfoWithPlayerEmoteId_Found, bool CallFunc_Greater_IntInt_ReturnValue, Controller* CallFunc_GetController_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void PetOwnerPlayEmote(int EmoteId, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, PetEmotionEventInfo* CallFunc_SpawnObject_ReturnValue, bool CallFunc_PetEnterState_ReturnValue, DateTime CallFunc_Now_ReturnValue, int CallFunc_GetSecond_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, PetVisibilityInfo K2Node_MakeStruct_PetVisibilityInfo, BP_STRUCT_PetPlayerEmoteTable_type CallFunc_GetPetRspInfoWithPlayerEmoteId_Out_Row, bool CallFunc_GetPetRspInfoWithPlayerEmoteId_Found, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AnimIdIsValid_IsValid);// 0x2bb69b8
	void AnimIdIsValid(int AnimId, out bool IsValid, int[] CallFunc_GetPetUnlockAnimIds_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_IsAnimLimited_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2bb69b8
	void GetPetRspInfoWithPlayerEmoteId(int PlayerEmoteId, out BP_STRUCT_PetPlayerEmoteTable_type Out Row, out bool Found, GameModePlayerPetInfo CallFunc_GetPetInfo_PetInfo, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, BP_STRUCT_PetPlayerEmoteTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x2bb69b8
	FString GetPetAnimLimitePlayerState(int AnimId, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_PetActPlayerStateTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x2bb69b8
	int[] GetPetUnlockAnimIds(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, GameModePlayerPetInfo CallFunc_GetPetInfo_PetInfo, BP_STRUCT_PetLevelTable_type CallFunc_GetPetLevelCfg_Out_Row, FString[] CallFunc_ParseIntoArray_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2bb69b8
	STExtraBaseCharacter* GetPetOwnerCharacter();// 0x2bb69b8
	void GetPetAttachInfo(out PetAttachInfo AttachInfo, PetAttachInfo CallFunc_GetCurrentAttachInfo_ReturnValue);// 0x2bb69b8
	void GetPetEventManager(out PetEventManagerComponent* PetEventManager);// 0x2bb69b8
	void SetOwnerCharacterPC(STExtraPlayerController* CallFunc_GetController_ReturnValue);// 0x2bb69b8
	void GetOwnerCharacter(out BP_PlayerPawn_C* OwnerCharacter, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void SetOwnerCharacter(BP_PlayerPawn_C* Owner, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool ___bool_Variable, byte ___byte_Variable, byte ___byte_Variable2, bool CallFunc_PetEnterState_ReturnValue, bool CallFunc_HasState_ReturnValue3, bool CallFunc_HasState_ReturnValue4, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, bool CallFunc_BooleanOR_ReturnValue2, Controller* CallFunc_GetController_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess, FName CallFunc_MakeLiteralName_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue3, byte K2Node_Select_Default);// 0x2bb69b8
	void GetFollowPos(float MinRadius, float MaxRadius, out Transform Out, WaterSwimActor* NewLocalVar, Vector ActorLoc, Rotator ActorRot, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue2, Rotator CallFunc_MakeRotFromZY_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_IsValid_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Vector K2Node_MathExpression_ReturnValue, Actor*[] ___object_Variable, Vector K2Node_MathExpression_ReturnValue2, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, WaterSwimActor* K2Node_DynamicCast_AsWater_Swim_Actor, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_Subtract_VectorVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue2, Transform CallFunc_MakeTransform_ReturnValue3);// 0x2bb69b8
	void UserConstructionScript();// 0x2bb69b8
	void Timeline_0__FinishedFunc();// 0x2bb69b8
	void Timeline_0__UpdateFunc();// 0x2bb69b8
	void PlayerStateChange(enum State, byte changeType);// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void PetOwnerCharacterBecomeValid();// 0x2bb69b8
	void UpdateSplineInfo();// 0x2bb69b8
	void PetStopParchute();// 0x2bb69b8
	void PetStartParachute();// 0x2bb69b8
	void BndEvt__PetEventManager_K2Node_ComponentBoundEvent_0_PetEventDelegate__DelegateSignature(PetWaitEventInfo* EventInfo);// 0x2bb69b8
	void OnPetStateChangeEvent(byte State, bool IsEnter);// 0x2bb69b8
	void BindEvent();// 0x2bb69b8
	void OnPetMontageEvent(PetMontageData MontageData);// 0x2bb69b8
	void OnAsyncLoadPetAnimRes(Object* LoadObject);// 0x2bb69b8
	void SetPetVisibility(bool Visible);// 0x2bb69b8
	void OnOwnerWinEvent();// 0x2bb69b8
	void OnOwnerKillSomeone();// 0x2bb69b8
	void OnOwnerAssistKill();// 0x2bb69b8
	void OnMoveVoiceAround(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x2bb69b8
	void OnShotVoiceAround(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x2bb69b8
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x2bb69b8
	void NotifyBpDrawDebugLineChange(bool Draw);// 0x2bb69b8
	void DebugLineTimerEvent();// 0x2bb69b8
	void OnPetOwnerStateInterruptEvent(enum State, enum InterruptedBy);// 0x2bb69b8
	void OnOwnerAvatarEquipped(enum SlotType, bool IsEquipped, int InItemID);// 0x2bb69b8
	void PetEnterPlane();// 0x2bb69b8
	void OnPetOwnerFallingModeChangeEvent(bool IsFalling);// 0x2bb69b8
	void OnOwnerPerspectiveChanged(bool IsFPP);// 0x2bb69b8
	void OnOwnerHoldGrenadeStateChange();// 0x2bb69b8
	void OnPetOwnerShoot(enum State);// 0x2bb69b8
	void OnPetVisibility_EnterHide();// 0x2bb69b8
	void OnPetVisibility_EnterVisible();// 0x2bb69b8
	void OnPlayerEnterParachute();// 0x2bb69b8
	void OnPlayerExitParachute();// 0x2bb69b8
	void OnPlayerEnterJumping_Event();// 0x2bb69b8
	void MyPetVisibleSettingTPP(bool BoolValue);// 0x2bb69b8
	void MyPetVisibleSettingFPP(bool BoolValue);// 0x2bb69b8
	void On(STExtraBaseCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x2bb69b8
	void ExecuteUbergraph_BasePetCharacter_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, delegate K2Node_CreateDelegate_OutputDelegate6, delegate K2Node_CreateDelegate_OutputDelegate7, delegate K2Node_CreateDelegate_OutputDelegate8, enum K2Node_Event_State, byte K2Node_Event_changeType, delegate K2Node_CreateDelegate_OutputDelegate9, delegate K2Node_CreateDelegate_OutputDelegate10, delegate K2Node_CreateDelegate_OutputDelegate11, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate12, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate13, delegate K2Node_CreateDelegate_OutputDelegate14, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, SplineComponent*[] CallFunc_GetComponentsByTag_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate15, SplineComponent* CallFunc_Array_Get_Item, PetPawnStateEventInfo* CallFunc_SpawnObject_ReturnValue, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager2, PetWaitEventInfo* K2Node_ComponentBoundEvent_EventInfo, byte K2Node_CustomEvent_State3, bool K2Node_CustomEvent_IsEnter, delegate K2Node_CreateDelegate_OutputDelegate16, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter2, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, PetMontageData K2Node_CustomEvent_MontageData, Object* K2Node_CustomEvent_LoadObject, AnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_PetActionTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_PlayAnimMontage_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, bool K2Node_Event_Visible, bool CallFunc_IsServer_ReturnValue, bool CallFunc_PetOwnerIsAutonomous_ReturnValue, bool CallFunc_PetSelfVisibleSetting_out, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsServer_ReturnValue2, bool CallFunc_PetOtherVisibleSetting_out, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate17, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager3, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue2, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager4, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue3, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue4, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager5, STExtraBaseCharacter* K2Node_CustomEvent_nowCharacter, Vector K2Node_CustomEvent_posVector2, float K2Node_CustomEvent_showTime2, Vector CallFunc_GetLocationAtTime_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, STExtraShootWeapon* K2Node_CustomEvent_nowWeapon, Vector K2Node_CustomEvent_posVector, float K2Node_CustomEvent_showTime, bool K2Node_CustomEvent_isslience, bool K2Node_CustomEvent_isExplosion, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager6, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue5, PetWaitEventInfo* K2Node_Event_Event, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager7, bool K2Node_Event_Draw, bool CallFunc_IsServer_ReturnValue3, enum K2Node_CustomEvent_State2, enum K2Node_CustomEvent_InterruptedBy, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager8, PetPawnStateEventInfo* CallFunc_SpawnObject_ReturnValue6, enum K2Node_Event_slotType, bool K2Node_Event_isEquipped, int K2Node_Event_InItemID, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity, delegate K2Node_CreateDelegate_OutputDelegate18, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter3, bool CallFunc_PetHasDisappearState_out, bool CallFunc_IsHiddenByOtherSlot_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue3, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter4, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_HasState_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, byte CallFunc_GetPetDefaultFollowType_FollowType3, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate19, GameBackendHUD* CallFunc_GetInstance_ReturnValue3, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue3, byte CallFunc_GetPetDefaultFollowType_FollowType4, FName CallFunc_Conv_StringToName_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue5, BP_STRUCT_PetPlayerOffsetTable_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, FixPetAttachInfo K2Node_MakeStruct_FixPetAttachInfo, delegate K2Node_CreateDelegate_OutputDelegate20, bool CallFunc_IsServer_ReturnValue4, bool CallFunc_PetOwnerIsAutonomous_ReturnValue2, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity2, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager9, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue6, bool CallFunc_EqualEqual_ByteByte_ReturnValue7, bool CallFunc_EqualEqual_ByteByte_ReturnValue8, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_EqualEqual_ByteByte_ReturnValue9, bool CallFunc_BooleanAND_ReturnValue5, PetEventPlayerStateTypeSt K2Node_MakeStruct_PetEventPlayerStateTypeSt, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager10, bool CallFunc_EqualEqual_ByteByte_ReturnValue10, byte CallFunc_GetPredictPetOwnerState_Enter, byte CallFunc_GetPredictPetOwnerState_Leave, bool CallFunc_GetPredictPetOwnerState_ReturnValue, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_ClientPredictEnterState_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_BooleanAND_ReturnValue6, bool K2Node_CustomEvent_IsFalling, bool CallFunc_PetEnterState_ReturnValue, bool CallFunc_PetEnterState_ReturnValue2, bool K2Node_CustomEvent_IsFPP, delegate K2Node_CreateDelegate_OutputDelegate21, bool CallFunc_EqualEqual_ByteByte_ReturnValue11, bool CallFunc_EqualEqual_ByteByte_ReturnValue12, bool CallFunc_BooleanAND_ReturnValue7, bool CallFunc_PetSelfVisibleSetting_out2, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter5, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue8, delegate K2Node_CreateDelegate_OutputDelegate22, enum K2Node_CustomEvent_state, bool CallFunc_EqualEqual_ByteByte_ReturnValue13, PetPawnStateEventInfo* CallFunc_SpawnObject_ReturnValue7, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager11, bool CallFunc_PetEnterState_ReturnValue3, bool CallFunc_PetEnterState_ReturnValue4, TimerHandle CallFunc_K2_SetTimer_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType5, bool K2Node_CustomEvent_BoolValue2, bool K2Node_CustomEvent_BoolValue, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter6, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter7, STExtraBaseCharacter* K2Node_CustomEvent_DeadCharacter, Controller* K2Node_CustomEvent_Killer, Actor* K2Node_CustomEvent_DamageCauser, const HitResult K2Node_CustomEvent_KillingHitInfo, Vector K2Node_CustomEvent_KillingHitImpulseDir, class DamageType K2Node_CustomEvent_KillingHitDamageType);// 0x2bb69b8
	void PetOwnerStateChangeDispatcher__DelegateSignature(enum State, byte changeType);// 0x2bb69b8
	PetAvatarComponent_BP_C* PetAvatarComponent_BP;//[Offset: 0xcc4, Size: 4]
	STBuffSystemComponent* STBuffSystem;//[Offset: 0xcc8, Size: 4]
	PetEntityComponent_BP_C* PetEntity;//[Offset: 0xccc, Size: 4]
	PetEventManagerComponent* PetEventManager;//[Offset: 0xcd0, Size: 4]
	float Timeline_0_Track_CE2094E94B1D206C7858FC99724BAEFA;//[Offset: 0xcd4, Size: 4]
	byte Timeline_0__Direction_CE2094E94B1D206C7858FC99724BAEFA;//[Offset: 0xcd8, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0xcdc, Size: 4]
	STExtraPlayerController* OwnerCharacterController;//[Offset: 0xce0, Size: 4]
	delegate PetOwnerStateChangeDispatcher;//[Offset: 0xce4, Size: 12]
	int[] UnlockAnimIds;//[Offset: 0xcf0, Size: 12]
	bool AttachToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcfc, Size: 1]
	SplineComponent* PetParachuteSpline;//[Offset: 0xd00, Size: 4]
	SplineMeshComponent* ParachuteSpline;//[Offset: 0xd04, Size: 4]
	bool VisibilityToSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd08, Size: 1]
	TimerHandle CheckAirAttackTimer;//[Offset: 0xd10, Size: 8]
	Vector CurAttackArea;//[Offset: 0xd18, Size: 12]
	bool IsInAttackArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd24, Size: 1]
	TimerHandle DebugLineTimer;//[Offset: 0xd28, Size: 8]
	bool IsPlayingAppearAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd30, Size: 1]
	float PetAppearTime;//[Offset: 0xd34, Size: 4]
	float PetDelayLeaveDisappearTime;//[Offset: 0xd38, Size: 4]
	TimerHandle PetDelayLeaveDisappearTimer;//[Offset: 0xd40, Size: 8]
	bool HasResetAttachByAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd48, Size: 1]
	enum TPlayerState;//[Offset: 0xd49, Size: 1]
	byte TChangeType;//[Offset: 0xd4a, Size: 1]
	float TeleportMinAngle;//[Offset: 0xd4c, Size: 4]
	float TeleportMaxAngle;//[Offset: 0xd50, Size: 4]
	bool ShouldHideOnFirstPersonView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd54, Size: 1]
	Vector SwimOffset;//[Offset: 0xd58, Size: 12]
	int CountToPlayWinAnim;//[Offset: 0xd64, Size: 4]
	int MaxCountToPlayWinAnim;//[Offset: 0xd68, Size: 4]
	float IntervalToPlayWinAnim;//[Offset: 0xd6c, Size: 4]
	bool bPetHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd70, Size: 1]

--------------------------------
Class: STExtraFightPetCharacter.STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool bEnablePetReplicatedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc94, Size: 1]
	bool bEnableTraceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc95, Size: 1]
	float DefaultTraceDeltaTime;//[Offset: 0xc98, Size: 4]
	float TraceLength;//[Offset: 0xc9c, Size: 4]
	float CurrentTraceDeltaTime;//[Offset: 0xca0, Size: 4]
	byte[] TraceTypeConfig;//[Offset: 0xca4, Size: 12]
	SimulateSyncSmoothComponent* PetSimulateSyncSmooth;//[Offset: 0xcb0, Size: 4]
	void TraceForward();// 0x219d2e0
	SimulateSyncSmoothComponent* GetSyncSmoothComponent();// 0x219d2b8

--------------------------------
Class: BasePetController_BP_C.STExtraFightPetController.STExtraPetController.AIController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3b8, Size: 4]
	void CalcInAirAttackArea();// 0x2bb69b8
	void OnPlayerStopEmote(int EmoteId, int Reason, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x2bb69b8
	void OnPlayerPlayEmote(int Emote, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x2bb69b8
	void UserConstructionScript();// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void ExecuteUbergraph_BasePetController_BP(int EntryPoint, BehaviorTreeComponent* CallFunc_GetComponentByClass_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_RunBehaviorTree_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	BehaviorTree* CurBT;//[Offset: 0x3bc, Size: 4]
	FName PetOwnerEmoteId;//[Offset: 0x3c0, Size: 8]
	FName IsAirAttacking;//[Offset: 0x3c8, Size: 8]
	FName AirAttackArea;//[Offset: 0x3d0, Size: 8]
	TimerHandle CheckAirAttackTimer;//[Offset: 0x3d8, Size: 8]
	Vector CurAttackArea;//[Offset: 0x3e0, Size: 12]

--------------------------------
Class: STExtraFightPetController.STExtraPetController.AIController.Controller.Actor.Object
	bool bEnableUpdateControlPetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	float PetBlockDetectionDistance;//[Offset: 0x3a8, Size: 4]
	float PetBlockDetectionInterval;//[Offset: 0x3ac, Size: 4]
	int PetBlockDetectionSampleCount;//[Offset: 0x3b0, Size: 4]

--------------------------------
Class: STExtraPetController.AIController.Controller.Actor.Object
	void ChangeBehaviorTree(BehaviorTree* BTAsset);// 0x21c69b0

--------------------------------
Class: PetEventManagerComponent.ActorComponent.Object
	PetWaitEventInfo*[] WaitEventList;//[Offset: 0xbc, Size: 12]
	PetEventItemIns[] EventConfigs;//[Offset: 0xc8, Size: 12]
	BehaviorTree* DefaultBT;//[Offset: 0xd4, Size: 4]
	BehaviorTree* CurrentBT;//[Offset: 0xd8, Size: 4]
	STExtraPetController* PetController;//[Offset: 0xdc, Size: 4]
	STExtraPetCharacter* PetCharacter;//[Offset: 0xe0, Size: 4]
	PetEventItem* CurExecuteEvent;//[Offset: 0xe4, Size: 4]
	int MaxWaitEventNum;//[Offset: 0xe8, Size: 4]
	delegate OnPetEventDelegate;//[Offset: 0xec, Size: 12]
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x2088b48
	void StartEventExecTimer(float ExecTime);// 0x2088ad0
	void ProcessWaitEvent(float Delta);// 0x2088a58
	bool GetPredictPetOwnerState(PetEventPlayerStateTypeSt StateSt, out byte Enter, out byte Leave);// 0x2088924
	PetEventItem* GetEventItem(PetWaitEventInfo* EventInfo);// 0x20888a4
	void EnqueueWaitEvent(PetWaitEventInfo* Info);// 0x208882c
	void DequeueWaitEvent(bool bNeedExec);// 0x20887ac
	bool CheckCanInterruptCurEvent(PetEventItem* NextEventItem);// 0x208872c
	bool CanResponseEvent();// 0x2088704
	bool AddPetMontageConfig(PetMontageConfig MontageConfig, byte eEventType, bool bRemove);// 0x20885f4

--------------------------------
Class: PetEventItemIns
	FString Tips;//[Offset: 0x0, Size: 12]
	PetEventItem* EventItem;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PetEventPlayerStateTypeSt
	enum PawnState;//[Offset: 0x0, Size: 1]
	byte StateChangeType;//[Offset: 0x1, Size: 1]

--------------------------------
Class: PetEntityComponent_BP_C.PetEntityComponent.ActorComponent.Object
	PetAttachInfo GetAttachInfoFromTable(FixPetAttachInfo Info, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, BP_STRUCT_PetPlayerOffsetTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue2, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item2, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, FString CallFunc_Array_Get_Item3, FString CallFunc_Array_Get_Item4, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, FString CallFunc_Array_Get_Item5, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue5, FString CallFunc_Array_Get_Item6, float CallFunc_Conv_StringToFloat_ReturnValue6, Rotator CallFunc_MakeRotator_ReturnValue, PetAttachInfo K2Node_MakeStruct_PetAttachInfo);// 0x2bb69b8

--------------------------------
Class: PetEntityComponent.ActorComponent.Object
	STExtraPetCharacter* PetCharacter;//[Offset: 0xbc, Size: 4]
	PetAttachInfo AttachInfo;//[Offset: 0xc0, Size: 32]
	PetAttachInfo FollowAttachInfo;//[Offset: 0xe0, Size: 32]
	PetAttachInfo FlyAroundAttachInfo;//[Offset: 0x100, Size: 32]
	PetAttachInfo CurAttachInfo;//[Offset: 0x120, Size: 32]
	FixPetAttachInfo[] FixAttachInfoList;//[Offset: 0x140, Size: 12]
	byte FollowType;//[Offset: 0x14c, Size: 1]
	int[] ParachuteEquipItems;//[Offset: 0x150, Size: 12]
	enum[] PredictOwnerStates;//[Offset: 0x15c, Size: 12]
	void UpdateAttachInfoList(bool bAdd, FixPetAttachInfo Info);// 0x2086d84
	void OnPetStateChanged(byte State, bool IsEnter);// 0x200fe18
	STExtraPetCharacter* GetPetCharacter();// 0x2086d5c
	PetAttachInfo GetCurrentAttachInfo();// 0x2086d10
	PetAttachInfo GetAttachInfoFromTable(FixPetAttachInfo Info);// 0x2bb69b8

--------------------------------
Class: PetAttachInfo
	FName AttachSocketName;//[Offset: 0x0, Size: 8]
	Vector AttachOffset;//[Offset: 0x8, Size: 12]
	Rotator AttachRotation;//[Offset: 0x14, Size: 12]

--------------------------------
Class: FixPetAttachInfo
	int ItemId;//[Offset: 0x0, Size: 4]
	int PetId;//[Offset: 0x4, Size: 4]
	int Priority;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BP_STRUCT_PetPlayerOffsetTable_type
	int Priority_0_4534D740055E57BF79E04F1E0692B319;//[Offset: 0x0, Size: 4]
	FString ItemPetId_1_71823800373EB13632B5E93E0D64F5B4;//[Offset: 0x4, Size: 12]
	FString RelativeRotation_2_622D21C02715F60B1B6C03BB0A3B34BE;//[Offset: 0x10, Size: 12]
	FString RelativeLocation_3_7CA9FC003FA2AAD634B0A8A1090B10DE;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: BP_STRUCT_PetPlayerEmoteTable_type
	int PetAnimID_0_0B8EF24060CA81E759CB86EB0B9DC804;//[Offset: 0x0, Size: 4]
	int PetResponse_1_315B018079F8B5826BBD3D2B05F09FE5;//[Offset: 0x4, Size: 4]
	FString PlayerEmotePetId_2_6616D2C02A115EB56446D9F30AF4E924;//[Offset: 0x8, Size: 12]

--------------------------------
Class: PetEmotionEventInfo.PetWaitEventInfo.Object
	int EmotionId;//[Offset: 0x24, Size: 4]

--------------------------------
Class: BP_STRUCT_PetActPlayerStateTable_type
	int PetID_0_7B9998C012D880D53C70B12C0D2280B4;//[Offset: 0x0, Size: 4]
	int PetActionID_1_26FA70406D0CF0E967A9660B078EE2C4;//[Offset: 0x4, Size: 4]
	FString PetLimiteState_3_107B0EC027578F8F39A3C9B002BE9A85;//[Offset: 0x8, Size: 12]

--------------------------------
Class: BP_STRUCT_PetLevelTable_type
	int ActionID1_0_54564EC00C46D1792A24097D014062A1;//[Offset: 0x0, Size: 4]
	int KeyID_1_38C8754040A625D32E969D6F0A59B604;//[Offset: 0x4, Size: 4]
	int ActionID2_2_54574F000C46D17A2A24097C014062A2;//[Offset: 0x8, Size: 4]
	int PetLevel_3_0EFEB00033E6898053D6CAD40B4F695C;//[Offset: 0xc, Size: 4]
	int ActionCnt_4_6ED1A8806F6E05482A2429B001406784;//[Offset: 0x10, Size: 4]
	int PetID_5_0C7F3540138C63E52ED3D2E20A5EB304;//[Offset: 0x14, Size: 4]
	int ActionID5_6_545A4FC00C46D17D2A240979014062A5;//[Offset: 0x18, Size: 4]
	int ActionID4_7_54594F800C46D17C2A24097A014062A4;//[Offset: 0x1c, Size: 4]
	int ActionID3_8_54584F400C46D17B2A24097B014062A3;//[Offset: 0x20, Size: 4]
	int PetNeedExp_9_5C9DFC4020A68805594D9EAF091E67B0;//[Offset: 0x24, Size: 4]
	FString PetCharacter_10_0EB0D54006ABD083521623E20D6C9E82;//[Offset: 0x28, Size: 12]
	FString AllAction_11_64FEE580365AA5C6529430360BA1003E;//[Offset: 0x34, Size: 12]
	FString LobbyPetBP_12_6856D48026D8CEBA5718878204437A40;//[Offset: 0x40, Size: 12]
	FString PetFPPCharacter_13_2475CEC05F8CAFC156D174270BE8BD92;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: PetPawnStateEventInfo.PetWaitEventInfo.Object
	enum PawnState;//[Offset: 0x24, Size: 1]
	byte StateChangeType;//[Offset: 0x25, Size: 1]

--------------------------------
Class: BP_STRUCT_PetActionTable_type
	int PetID_7_6745CEC017101D417C9B58B90A755B44;//[Offset: 0x0, Size: 4]
	FString PetAnimRes_8_1054B74062846F873F7F61870FE97D73;//[Offset: 0x4, Size: 12]
	FString PetActionName_9_59EBE3401D89CA4B649608870B1AA8E5;//[Offset: 0x10, Size: 12]
	int PetActionID_10_44C4A640765EB8DD578572F800DB1934;//[Offset: 0x1c, Size: 4]
	FString PetActionIcon_11_0E01054077EEE9A96496CC090B191A8E;//[Offset: 0x20, Size: 12]
	int PetActionScale_13_14B83D0078112AE64FD26A6101879B95;//[Offset: 0x2c, Size: 4]
	FString PetActionOffset_14_563A3CC0122E069573D974410ABC02D4;//[Offset: 0x30, Size: 12]
	int SortKey_15_4284558068BCA7003662F2D30BFA2BB9;//[Offset: 0x3c, Size: 4]
	int ShowInLobby_17_19FCF54003CF4A8B499026D50669DDB9;//[Offset: 0x40, Size: 4]
	int PetLevelSequence_18_620F97C0416DE81971E437D407E050C5;//[Offset: 0x44, Size: 4]
	int MasterLevelSequence_19_7E9F6880389AC7D05D27B6F50E5E3325;//[Offset: 0x48, Size: 4]
	int MasterActionID_20_41F257005172E64A6B5508ED0B3D43A4;//[Offset: 0x4c, Size: 4]
	FString PetActionDes_21_4DEDCA007AFFDB12510AFD0F0DB194C3;//[Offset: 0x50, Size: 12]
	int PetActionQuality_22_0B0B3D40109F72EB3D20AE6206BBA139;//[Offset: 0x5c, Size: 4]
	FString LobbyPetAnimRes_23_14DFB5407421995D3FD421710D4C3683;//[Offset: 0x60, Size: 12]
	int NeedResetTransform_24_2D3D5000702BED64355585DF0DB7ED2D;//[Offset: 0x6c, Size: 4]
	int IsShowInWorkshop_25_6C8D7D80144A232A340D11C70E5E4DE0;//[Offset: 0x70, Size: 4]

--------------------------------
Class: PetAvatarComponent_BP_C.PetAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	void PetHasEquippedItem(int ID, out bool Out, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HasLogicEquipped_ReturnValue);// 0x2bb69b8
	void PetUnequipItemById(int ID, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleUnEquipItem_ReturnValue);// 0x2bb69b8
	void PetEquipItemById(int ID, AvatarCustom K2Node_MakeStruct_AvatarCustom, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue);// 0x2bb69b8
	AvatarTableData MakeAvatarTableData(out ItemDefineID InItemID, FString CallFunc_Conv_IntToString_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_PetDressBlueprintTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, AvatarTableData K2Node_MakeStruct_AvatarTableData);// 0x2bb69b8

--------------------------------
Class: PetAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	SkeletalMesh* MasterBoneDefualtSkeletalMesh;//[Offset: 0x63c, Size: 4]
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x1f66ca8
	void InitMasterComponent();// 0x2084c08
	void Initialize();// 0x1f66a10
	void InitialAvatarParam();// 0x1ee1bb4

--------------------------------
Class: BP_STRUCT_PetDressBlueprintTable_type
	int Slot_0_31125FC006688BBB2E6646B20FAFCD34;//[Offset: 0x0, Size: 4]
	int ID_1_688F3A8033A7814C565560B30E5FAEF4;//[Offset: 0x4, Size: 4]
	FString Path_2_51589A804E9002622E9485530FAF46F8;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xc0, Size: 136]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 1]
	void Stop();// 0x4544960
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x45448a4
	void SetTimelineLengthMode(byte NewLengthMode);// 0x454482c
	void SetTimelineLength(float NewLength);// 0x45447b4
	void SetPlayRate(float NewRate);// 0x454473c
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x4544628
	void SetNewTime(float NewTime);// 0x45445b0
	void SetLooping(bool bNewLooping);// 0x4544530
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x4544474
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x45443f4
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x4544338
	void ReverseFromEnd();// 0x4544324
	void Reverse();// 0x4544310
	void PlayFromStart();// 0x45442fc
	void Play();// 0x45442e8
	void OnRep_Timeline();// 0x45442d4
	bool IsReversing();// 0x45442ac
	bool IsPlaying();// 0x4544284
	bool IsLooping();// 0x454425c
	float GetTimelineLength();// 0x4544234
	float GetPlayRate();// 0x1ef13c8
	float GetPlaybackPosition();// 0x389db44
	bool GetIgnoreTimeDilation();// 0x454420c

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 1]
	float Length;//[Offset: 0x4, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	float PlayRate;//[Offset: 0xc, Size: 4]
	float Position;//[Offset: 0x10, Size: 4]
	TimelineEventEntry[] Events;//[Offset: 0x14, Size: 12]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 12]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x2c, Size: 12]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x38, Size: 12]
	delegate TimelinePostUpdateFunc;//[Offset: 0x48, Size: 16]
	delegate TimelineFinishedFunc;//[Offset: 0x58, Size: 16]
	Object* PropertySetObject;//[Offset: 0x70, Size: 8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 8]
	Property* DirectionProperty;//[Offset: 0x80, Size: 4]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 4]
	delegate EventFunc;//[Offset: 0x8, Size: 16]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 4]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 8]
	StructProperty* VectorProperty;//[Offset: 0x28, Size: 4]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 4]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 8]
	FloatProperty* FloatProperty;//[Offset: 0x28, Size: 4]

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 4]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 8]
	StructProperty* LinearColorProperty;//[Offset: 0x28, Size: 4]

--------------------------------
Class: CharacterAvatarComp2_BP_C.CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb70, Size: 4]
	void EnableAvatarAnimation(bool IsEnable, MeshComponent* CallFunc_GetMeshCompBySlot_ReturnValue, MeshComponent* CallFunc_GetMeshCompBySlot_ReturnValue2, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, STClothAnimInstance* K2Node_DynamicCast_AsSTCloth_Anim_Instance, bool K2Node_DynamicCast_bSuccess2, SkirtAnimInstanceBase* K2Node_DynamicCast_AsSkirt_Anim_Instance_Base, bool K2Node_DynamicCast_bSuccess3, SkirtAnimInstanceBase* K2Node_DynamicCast_AsSkirt_Anim_Instance_Base2, bool K2Node_DynamicCast_bSuccess4, STClothAnimInstance* K2Node_DynamicCast_AsSTCloth_Anim_Instance2, bool K2Node_DynamicCast_bSuccess5);// 0x2bb69b8
	int GetRepalceIDOnVehicle(int OriginID);// 0x2bb69b8
	enum GetForceHideState(int InSlotID, Actor* CallFunc_GetOwner_ReturnValue, enum CallFunc_GetForceHideState_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue2, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bb69b8
	enum GetBPSlotNameConfigType(BackpackAvatarHandle* InAvatarHandle, BattleItemHandle_AvatarBP_C* K2Node_DynamicCast_AsBattle_Item_Handle_Avatar_BP, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x2bb69b8
	bool IsEnableItemDownload(int ItemId);// 0x2bb69b8
	SoftObjectPath GetBatchDefaultBodyPath(int ___int_Variable, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue2, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue2, SoftObjectPath K2Node_Select_Default);// 0x2bb69b8
	bool HideHeadMesh(MeshComponent* MasterBoneComp, SkeletalMesh* SkeletalMesh, SkeletalMaterial[] MatArray);// 0x2bb69b8
	bool PutOffEquimentByResID(int resID, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_GetBPIDByResID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, ItemDefineID K2Node_MakeStruct_ItemDefineID, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_HandleUnEquipItem_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_HasLogicEquipped_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6);// 0x2bb69b8
	bool PutOnEquipmentByResID(int resID, int CallFunc_GetBPIDByResID_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue);// 0x2bb69b8
	void IsNeedConsiderHairCut(int InSlotID, out ItemDefineID ItemDefineID, BackpackAvatarHandle* Handle, out bool Result, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, enum CallFunc_IntToType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2bb69b8
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID, int CallFunc_GetFakeAvatarHandleItem_ReturnValue);// 0x2bb69b8
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle, int ___int_Variable, int ___int_Variable2, ItemDefineID K2Node_MakeStruct_ItemDefineID, ItemDefineID K2Node_MakeStruct_ItemDefineID2, ItemDefineID K2Node_MakeStruct_ItemDefineID3, int ___int_Variable3);// 0x2bb69b8
	bool BPClientPostProcessViewDataMiddle();// 0x2bb69b8
	void ProcessGodzillaSuit(int CallFunc_TypeToInt_ReturnValue, int CallFunc_TypeToInt_ReturnValue2, int CallFunc_TypeToInt_ReturnValue3, bool CallFunc_ModifySyncDataByReplace_ReturnValue, int CallFunc_TypeToInt_ReturnValue4, int CallFunc_TypeToInt_ReturnValue5, int CallFunc_TypeToInt_ReturnValue6, bool CallFunc_ModifySyncDataByReplace_ReturnValue2, int CallFunc_TypeToInt_ReturnValue7, int CallFunc_TypeToInt_ReturnValue8, bool CallFunc_ModifySyncDataByReplace_ReturnValue3, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc, bool CallFunc_GetSyncDataBySlot_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, int CallFunc_TypeToInt_ReturnValue9, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc2, bool CallFunc_GetSyncDataBySlot_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, int CallFunc_TypeToInt_ReturnValue10, int CallFunc_TypeToInt_ReturnValue11, int CallFunc_TypeToInt_ReturnValue12, bool CallFunc_ModifySyncDataByHide_ReturnValue, bool CallFunc_ModifySyncDataByReplace_ReturnValue4, int CallFunc_TypeToInt_ReturnValue13, int CallFunc_TypeToInt_ReturnValue14, int CallFunc_TypeToInt_ReturnValue15, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc3, bool CallFunc_GetSyncDataBySlot_ReturnValue3, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_Contains_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_Array_Contains_ReturnValue3, bool CallFunc_IsLobbyAvatar_ReturnValue2, bool CallFunc_IsBattleItemHandleExist_ReturnValue2);// 0x2bb69b8
	bool IsItemHasMutilReplaceMesh(int InSlotID, out ItemDefineID InItemID, bool CallFunc_IsLobbyAvatar_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, BackpackAvatarHandle* CallFunc_GetLoadedHandle_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsNeedConsiderHairCut_result);// 0x2bb69b8
	bool IsUseDefaultReplaceModel(int InSlotID, out ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle, int CallFunc_TypeToInt_ReturnValue, bool CallFunc_IsNeedConsiderHairCut_result, int CallFunc_TypeToInt_ReturnValue2, AvatarSlotDesc CallFunc_GetViewDataBySlot_OutSlotDesc, bool CallFunc_GetViewDataBySlot_ReturnValue, int CallFunc_TypeToInt_ReturnValue3, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_Contains_ReturnValue2);// 0x2bb69b8
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID, enum CallFunc_IntToType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2);// 0x2bb69b8
	void CheckAvatarWhoHideWho(enum SlotType, ItemDefineID resID, out int[] HideSomeAvatar, out int[] HideBySomeAvatar, int[] OutHideSomeAvatar, int[] OutHideBySomeAvatar, int ___int_Array_Index_Variable, int CallFunc_TypeToInt_ReturnValue, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, int[] CallFunc_GetSyncDataStateFor_OutHideSlotID, int[] CallFunc_GetSyncDataStateFor_OutReplaceSlotID, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue2, enum CallFunc_IntToType_ReturnValue, ItemDefineID CallFunc_GetSyncDataItemID_OutItemDefineID, bool CallFunc_GetSyncDataItemID_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Conv_IntToBool_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable2, int ___int_Loop_Counter_Variable2, int CallFunc_Array_Get_Item2, ItemDefineID CallFunc_GetSyncDataItemID_OutItemDefineID2, bool CallFunc_GetSyncDataItemID_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2);// 0x2bb69b8
	void PutOnCustomEquipmentByID(int resID, int ColorID, int PatternID, out bool Result, int CallFunc_GetBPIDByResID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, AvatarCustom K2Node_MakeStruct_AvatarCustom, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue);// 0x2bb69b8
	void SetEquipmentPattern(enum SlotType, Texture* MaskGrayTexture, SlotToMatPattern K2Node_MakeStruct_SlotToMatPattern, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, FName CallFunc_GetClothMaterialColorName_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMaterialBySlotName_ReturnValue, bool CallFunc_IsValid_ReturnValue2, class BackpackAvatarItemPattern K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Pattern, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemPattern* CallFunc_SpawnObject_ReturnValue);// 0x2bb69b8
	void SetEquipmentColor(enum SlotType, LinearColor MaskColor1, LinearColor MaskColor2, LinearColor MaskColor3, Texture* MaskGrayTextrue, LinearColor[] K2Node_MakeArray_Array, SlotToMatColor K2Node_MakeStruct_SlotToMatColor, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, class BackpackAvatarItemColor K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Color, bool K2Node_ClassDynamicCast_bSuccess, FName CallFunc_GetClothMaterialColorName_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMaterialBySlotName_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BackpackAvatarItemColor* CallFunc_SpawnObject_ReturnValue);// 0x2bb69b8
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BackpackAvatarItemPattern K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Pattern, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemPattern* CallFunc_SpawnObject_ReturnValue);// 0x2bb69b8
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BackpackAvatarItemColor K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Color, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemColor* CallFunc_SpawnObject_ReturnValue);// 0x2bb69b8
	int GetEquipmentSkinItemID(int InItemID, BackpackBlueprintUtils* CallFunc_GetBPUtils_ReturnValue, BackpackBlueprintUtils_BP_C* K2Node_DynamicCast_AsBackpack_Blueprint_Utils_BP, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetEquipmentSkinIDByAvatar_SkinItemID);// 0x2bb69b8
	void Bp_ProcessAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue);// 0x2bb69b8
	void Bp_ProcessAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID, bool CallFunc_IsDedicatedServer_ReturnValue, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BackpackComponent* CallFunc_GetBackpackComponentFromCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_DisuseItem_ReturnValue);// 0x2bb69b8
	bool PutOnDefaultEquipment(BackpackAvatarHandle* ItemHandle, ItemDefineID CallFunc_GetDefineID_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue, bool CallFunc_CheckShouldEquipDefaultItem_ReturnValue);// 0x2bb69b8
	bool InitBodyMeshByHead(out ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle, int[] TempBodyResIDList, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_CheckShouldEquipDefaultItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_AvatarDefaultConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, FString CallFunc_Split_LeftS2, FString CallFunc_Split_RightS2, bool CallFunc_Split_ReturnValue2, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, ItemDefineID K2Node_MakeStruct_ItemDefineID2, int CallFunc_Conv_StringToInt_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue4, FString CallFunc_Split_LeftS3, FString CallFunc_Split_RightS3, bool CallFunc_Split_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue5, int CallFunc_Conv_StringToInt_ReturnValue6, ItemDefineID K2Node_MakeStruct_ItemDefineID3);// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void Bp_EventAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x2bb69b8
	void Bp_EventAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID);// 0x2bb69b8
	void PreHanleEquipCloth(const BattleItemUseTarget Target, BackpackAvatarHandle* InAvatarHandle, enum Reason);// 0x2bb69b8
	void ClearEventFromOnAvatarEquippedEvent();// 0x2bb69b8
	void ExecuteUbergraph_CharacterAvatarComp2_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, int K2Node_CustomEvent_SlotID2, ItemDefineID K2Node_CustomEvent_NewItemID, ItemDefineID K2Node_CustomEvent_OldItemID2, int K2Node_CustomEvent_SlotID, ItemDefineID K2Node_CustomEvent_OldItemID, BattleItemUseTarget K2Node_Event_Target, BackpackAvatarHandle* K2Node_Event_InAvatarHandle, enum K2Node_Event_Reason);// 0x2bb69b8
	BackpackAvatarItemColor* BasedAvatarColorHandle;//[Offset: 0xb74, Size: 4]
	BackpackAvatarItemPattern* BasedAvatarPatternHandle;//[Offset: 0xb78, Size: 4]
	int[] HoodClothSubTypeMap;//[Offset: 0xb7c, Size: 12]
	enum PreEquipClothReason;//[Offset: 0xb88, Size: 1]
	SkeletalMesh* MaleBatchBodySoftPath;//[Offset: 0xb90, Size: 40]
	SkeletalMesh* FemaleBatchBodySoftPath;//[Offset: 0xbb8, Size: 40]
	bool bForbidBindAvatarEquippedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe0, Size: 1]
	int[] NeedModifyVehicleID;//[Offset: 0xbe4, Size: 12]
	<enum,int> SlotToFakeHandleMap;//[Offset: 0xbf0, Size: 60]

--------------------------------
Class: STClothAnimInstance.AnimInstance.Object
	enum AnimInstanceType;//[Offset: 0x2ec, Size: 1]
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x2f0, Size: 4]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	bool C_IsSimulatCloth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 1]
	float C_BlendFactorInLobby;//[Offset: 0x2f8, Size: 4]
	float C_BlendFactorInBattle;//[Offset: 0x2fc, Size: 4]
	float C_MoveThreshold;//[Offset: 0x300, Size: 4]
	float C_BlendScaleThreshold;//[Offset: 0x304, Size: 4]
	float C_BlendScale;//[Offset: 0x308, Size: 4]
	SkeletalMeshComponent* ParentMesh;//[Offset: 0x310, Size: 4]
	Vector LastLocation;//[Offset: 0x314, Size: 12]
	SkeletalMeshComponent* TryGetParentMeshComponent();// 0x1f23a40
	bool isCothAnimEnable();// 0x213d3e0
	void EnableClothAnim();// 0x213d3cc
	void DisableClothAnim();// 0x213d3b8

--------------------------------
Class: SkirtAnimInstanceBase.AvatarDynamicAnimInstance.AnimInstance.Object
	byte CurrentPoseType;//[Offset: 0x2fc, Size: 1]
	bool IsOnMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 1]
	bool IsInParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fe, Size: 1]
	Vector PawnCurVelocity;//[Offset: 0x300, Size: 12]
	CharacterAvatarComponent2* AvatarComp;//[Offset: 0x30c, Size: 4]
	int gender;//[Offset: 0x310, Size: 4]
	bool IsBackpackEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	bool IsLobbyPawnRotating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 1]
	bool IsWindEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x316, Size: 1]
	bool IsLobbyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x317, Size: 1]
	bool IsUsingSpecialIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	bool AllowSKMeshCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 1]
	bool bParachuteWindFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31a, Size: 1]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x31c, Size: 4]
	STExtraLobbyCharacter* OwnerLobbyCharacter;//[Offset: 0x320, Size: 4]
	void OnStateInterrupted(int stateID, int InterruptedBy);// 0x20f8d40
	bool isCothAnimEnable();// 0x20f8d18
	void HandleStateChanged(enum EnteredState);// 0x20f8ca0
	void HandleCorectSkMeshAnim(bool bOpenCorrect);// 0x20f8c20
	void EnableClothAnim();// 0x20f8c0c
	void DisableClothAnim();// 0x20f8bf8

--------------------------------
Class: AvatarDynamicAnimInstance.AnimInstance.Object
	enum InGameSimulationSpace;//[Offset: 0x2ec, Size: 1]
	enum LobbySimulationSpace;//[Offset: 0x2ed, Size: 1]
	float AnimDynAlpha;//[Offset: 0x2f0, Size: 4]
	enum CurrentSimulateSpace;//[Offset: 0x2f4, Size: 1]
	SkeletalMeshComponent* OwnerCharacterMesh;//[Offset: 0x2f8, Size: 4]

--------------------------------
Class: STExtraLobbyCharacter.Character.Pawn.Actor.Object
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	FString LobbyPlayerKey;//[Offset: 0x65c, Size: 12]
	bool bWeaponAnimOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 1]
	delegate lobbyCharacterSceneTypeChangeEvent;//[Offset: 0x66c, Size: 12]
	byte charSceneType;//[Offset: 0x678, Size: 1]
	byte lobbyPosIdx;//[Offset: 0x679, Size: 1]
	int LocalLobbyPos;//[Offset: 0x67c, Size: 4]
	delegate lobbyCharGenderChangeDelegate;//[Offset: 0x680, Size: 12]
	byte lobbyGender;//[Offset: 0x68c, Size: 1]
	class AnimInstance* LobbyMaleAnimClass;//[Offset: 0x690, Size: 40]
	class AnimInstance* LobbyFemaleAnimClass;//[Offset: 0x6b8, Size: 40]
	STExtraWeapon* curEquipWeapon;//[Offset: 0x6e0, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x6e4, Size: 4]
	int resultAvatarPoseIndex;//[Offset: 0x6e8, Size: 4]
	LobbyCharacterWeaponAnimData[] AddCharacterWeaponAnimList;//[Offset: 0x6ec, Size: 12]
	delegate lobbyCharPosChangeDelegate;//[Offset: 0x6f8, Size: 12]
	BackpackEmoteHandle* curHandle;//[Offset: 0x704, Size: 4]
	delegate EmoteMontageStartEvent;//[Offset: 0x708, Size: 12]
	delegate EmoteStartWithMainCharacterConfigEvent;//[Offset: 0x714, Size: 12]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x720, Size: 12]
	AkComponent* emoteSound_Comp;//[Offset: 0x72c, Size: 4]
	LobbyGodEffectComponent* GodEffectComponent;//[Offset: 0x730, Size: 4]
	class LobbyGodEffectComponent* GodEffectComponentPath;//[Offset: 0x738, Size: 40]
	bool IsMale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x764, Size: 1]
	delegate LobbyPoseWithFriend;//[Offset: 0x768, Size: 12]
	delegate LobbyCancelPoseWithFriend;//[Offset: 0x774, Size: 12]
	FString LuaFilePath;//[Offset: 0x780, Size: 12]
	void UnequipWeapon(STExtraWeapon* Weapon);// 0x21b9d24
	void StopGodEffect();// 0x21b9d10
	void SetStatueInfo(out const CharacterStatueInfo Info);// 0x21b9c2c
	void SetResultAvatarPosIndex(int PosIndex);// 0x21b9bb4
	void SetMaleAnimClass();// 0x21b9b98
	void SetLobbyPosIndexInAvatarScene(int pos);// 0x21b9b20
	void SetLobbyPosIndex(byte pos);// 0x21b9aa0
	void SetLobbyCharacterProperty(byte sceneType, byte pos, byte gender);// 0x21b9988
	void SetLobbyAnimGender(byte gender);// 0x21b9908
	void SetFemaleAnimClass();// 0x21b98ec
	void SetCharSceneType(byte sceneType);// 0x21b986c
	bool SetAddCharacterWeaponAnimList(out const LobbyCharacterWeaponAnimData[] addAnimData);// 0x21b97b0
	void PlayGodEffect(int Level);// 0x21b9738
	void PlayEmoteInterruptSound();// 0x21b9724
	bool OnStopEmote();// 0x21b96fc
	bool OnPlayEmote(int EmoteId, FString ExtraInfo);// 0x21b9554
	void HandleOnCharAnimLoadingFinished(STExtraWeapon* Weapon);// 0x21b94dc
	AELobbyCharAnimListComp* GetWeaponAnimComponent();// 0x21b94b4
	AnimationAsset* GetWeaponAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int WeaponAnimType);// 0x21b93ac
	int GetPosIndex();// 0x21b9384
	byte GetLobbyPosIndex();// 0x21b935c
	byte GetLobbyAnimGender();// 0x21b9334
	BackpackEmoteHandle* GetEmoteHandle(int ItemId);// 0x2bb69b8
	STExtraWeapon* GetCurrentWeapon();// 0x21b930c
	byte GetCharSceneType();// 0x21b92e4
	AnimationAsset* GetCharacterPlayWeaponAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int AnimIndex);// 0x21b91dc
	AnimationAsset* GetCharacterAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int WeaponAnimType);// 0x21b90d4
	void ForceRefreshCharacterAnimation();// 0x21b90c0
	void EquipWeapon(STExtraWeapon* Weapon);// 0x21b9048
	void CallGlobalLuaFunction(FString FunctionName);// 0x21b8f8c

--------------------------------
Class: LobbyCharacterWeaponAnimData
	byte PosIndex;//[Offset: 0x0, Size: 1]
	FString CharPosName;//[Offset: 0x4, Size: 12]
	LobbyCharacterGenderWeaponAnimData[] GenderWeaponAnimList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: LobbyCharacterGenderWeaponAnimData
	byte GenderType;//[Offset: 0x0, Size: 1]
	FString GenderTypeName;//[Offset: 0x4, Size: 12]
	AnimationAsset* WeaponAnimSoftPtr;//[Offset: 0x10, Size: 40]
	AnimationAsset* WeaponAddAnimSoftPtr;//[Offset: 0x38, Size: 40]
	AnimationAsset*[] WeaponPlayAnimSoftPtrArray;//[Offset: 0x60, Size: 12]

--------------------------------
Class: LobbyGodEffectComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* ParticleEffect1;//[Offset: 0x260, Size: 40]
	ParticleSystem* ParticleEffect2;//[Offset: 0x288, Size: 40]
	ParticleSystem* ParticleEffect3;//[Offset: 0x2b0, Size: 40]
	ParticleSystem* ParticleEffect100;//[Offset: 0x2d8, Size: 40]
	ParticleSystem* ParticleEffect101;//[Offset: 0x300, Size: 40]
	ParticleSystem* ParticleEffect102;//[Offset: 0x328, Size: 40]
	ParticleSystem* ParticleEffect103;//[Offset: 0x350, Size: 40]
	ParticleSystem* ParticleEffect104;//[Offset: 0x378, Size: 40]
	class UserWidget* GodEffectWidget;//[Offset: 0x3a0, Size: 4]
	WidgetComponent* WidgetComponent;//[Offset: 0x3a4, Size: 4]
	ParticleSystemComponent*[] effects;//[Offset: 0x3ac, Size: 12]
	void StopEffect();// 0x203a790
	void SetNameText(int TextId);// 0x20272b4
	void PlayGodEffect(int Level, Vector Location);// 0x203a6d0
	void OnAsyncLoadEffectFinish(int Level, Vector Location);// 0x203a610

--------------------------------
Class: CharacterStatueInfo
	int AGender;//[Offset: 0x0, Size: 4]
	int Head;//[Offset: 0x4, Size: 4]
	int Hair;//[Offset: 0x8, Size: 4]
	int WeaponId;//[Offset: 0xc, Size: 4]
	FString Name;//[Offset: 0x10, Size: 12]
	FString Nation;//[Offset: 0x1c, Size: 12]
	int[] AvatarList;//[Offset: 0x28, Size: 12]
	GameModePlayerItem[] AvatarInfoList;//[Offset: 0x34, Size: 12]
	int Index;//[Offset: 0x40, Size: 4]

--------------------------------
Class: AELobbyCharAnimListComp.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	LobbyCharacterWeaponAnimData[] CharacterWeaponAnimEditList;//[Offset: 0x180, Size: 12]
	LobbyCharacterWeaponAnimData[] AvatarSceneCharacterWeaponAnimEditList;//[Offset: 0x18c, Size: 12]
	LobbyCharacterWeaponAnimData[] LobbyWithCarCharacterWeaponAnimEditList;//[Offset: 0x198, Size: 12]
	LobbyCharacterWeaponAnimData[] LobbySystemCharacterWeaponAnimEditList;//[Offset: 0x1a4, Size: 12]
	int resultAvatarPoseIndex;//[Offset: 0x1b0, Size: 4]
	void OnAsyncLoadingFinished(LobbyAsyncLoadCharAnimParams LoadingParam);// 0x27dbcec
	void InitPendingList(out LobbyCharacterWeaponAnimData[] animEditList, out SoftObjectPath[] PendingList);// 0x27dbb40
	AnimationAsset* GetCharacterAnim(byte PosIdx, byte GenderType, int WeaponAnimType, byte sceneType);// 0x27db9f0
	void BuildAnimMap(out LobbyCharacterWeaponAnimData[] AnimList, byte sceneType);// 0x27db8fc

--------------------------------
Class: LobbyAsyncLoadCharAnimParams

--------------------------------
Class: BattleItemHandle_AvatarBP_C.BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	bool BPNeedCheckCapacityInHandleDisuse(enum Reason, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x2bb69b8
	void GetWrapperClass(out class PickUpWrapperActor WrapperClass, ItemDefineID CallFunc_GetDefineID_ReturnValue, class Object CallFunc_GetWrapperActorClass_ReturnValue, class PickUpWrapperActor K2Node_ClassDynamicCast_AsPick_Up_Wrapper_Actor, bool K2Node_ClassDynamicCast_bSuccess);// 0x2bb69b8
	BattleItemData ExtractItemData(<FName,ItemAssociation> CallFunc_GetAssociationMap_ReturnValue, ItemAssociation[] CallFunc_Map_Values_Values, ItemDefineID CallFunc_GetDefineID_ReturnValue, BattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, BattleItemData K2Node_SetFieldsInStruct_StructOut);// 0x2bb69b8
	void LocalHandleDisuse(FName CallFunc_GetEnumeratorName_ReturnValue);// 0x2bb69b8
	World* GetWorldInternal(World* CallFunc_GetWorld_BP_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void SpawnWrapperOnGround(class PickUpWrapperActor WrapperClass, bool bUseRandomLoc, ItemDefineID CallFunc_GetDefineID_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue2, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, PickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue, PickupManagerComponent* CallFunc_GetComponentByClass_ReturnValue, Vector CallFunc_GetRandomPutDownLocation_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue2, PickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue2);// 0x2bb69b8
	bool HandleDisuse(enum Reason, bool CallFunc_HandleDisuse_ReturnValue);// 0x2bb69b8
	bool HandleDrop(int InCount, enum Reason, class PickUpWrapperActor CallFunc_GetWrapperClass_WrapperClass, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HandleDrop_ReturnValue);// 0x2bb69b8
	bool HandlePickup(out interface classNone ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason, bool CallFunc_HandlePickup_ReturnValue, BattleItemHandleBase* CallFunc_GetCharacterVirtualItemHandleInBackpack_ReturnValue, BackpackComponent* K2Node_DynamicCast_AsBackpack_Component, bool K2Node_DynamicCast_bSuccess, Actor* K2Node_DynamicCast_AsActor, bool K2Node_DynamicCast_bSuccess2, Transform CallFunc_GetTransform_ReturnValue, Object* CallFunc_GetOwningObject_ReturnValue, Controller* K2Node_DynamicCast_AsController, bool K2Node_DynamicCast_bSuccess3, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess4);// 0x2bb69b8
	bool HandleUse(BattleItemUseTarget Target, enum Reason, bool CallFunc_HandleUse_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, FName CallFunc_GetEnumeratorName_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, ItemAssociation K2Node_MakeStruct_ItemAssociation, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_NotEqual_IntInt_ReturnValue2, ItemDefineID CallFunc_GetDefineID_ReturnValue3, bool CallFunc_IsValid_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue4, ItemAssociation K2Node_MakeStruct_ItemAssociation2);// 0x2bb69b8
	STExtraPlayerController* OwningPlayerController;//[Offset: 0xa50, Size: 4]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0xa54, Size: 4]
	BackpackComponent* OwningBackpackComponent;//[Offset: 0xa58, Size: 4]
	Transform SourceWrapperTrans;//[Offset: 0xa60, Size: 48]
	Transform WrapperPutdownTrans;//[Offset: 0xa90, Size: 48]
	class PickUpWrapperActor* WrapperClass;//[Offset: 0xac0, Size: 4]
	BattleItemHandleBase* CharacterItemHandle;//[Offset: 0xac4, Size: 4]
	byte SlotNameConfig;//[Offset: 0xac8, Size: 1]
	byte ForceGender;//[Offset: 0xac9, Size: 1]

--------------------------------
Class: BackpackBlueprintUtils.Object
	CustomAccessoriesData[] CustomAccessoriesData;//[Offset: 0xb4, Size: 12]
	CreateBattleItemHandleAsyncRequest[] PendingAsyncRequests;//[Offset: 0xc0, Size: 12]
	<int,CreateBattleItemHandleListAsyncRequest> PendingAsyncRequestList;//[Offset: 0xcc, Size: 60]
	<int,enum> TClipTypeMap;//[Offset: 0x108, Size: 60]
	<int,ItemRecordData> mapItemRecord;//[Offset: 0x144, Size: 60]
	<int,ItemRecordData> mapItemRecord_Mod;//[Offset: 0x180, Size: 60]
	<FString,ItemBeOverrideRecordData> BeOverrideMapItemMap;//[Offset: 0x1bc, Size: 60]
	<int,int> mapPickupBullet;//[Offset: 0x1f8, Size: 60]
	<int,enum> mapAttachPos;//[Offset: 0x234, Size: 60]
	<int,int> CustomPickupItemIDMap;//[Offset: 0x270, Size: 60]
	PickupSetting PickupSetting;//[Offset: 0x2ac, Size: 376]
	PickupSettingForTPlan PickupSettingForMod;//[Offset: 0x424, Size: 364]
	PickupProposeData proposeData;//[Offset: 0x590, Size: 340]
	int[] NeedToShowTypeList;//[Offset: 0x6e4, Size: 12]
	int[] ConsumeableMissionItemID;//[Offset: 0x6f0, Size: 12]
	int[] CanNotAutoSwitchGrenadeList;//[Offset: 0x6fc, Size: 12]
	<int,FName> ItemSubTypeNameMap;//[Offset: 0x708, Size: 60]
	<FName,TagItemList> ItemTag;//[Offset: 0x744, Size: 60]
	<int,ItemTagList> ItemTagMap;//[Offset: 0x780, Size: 60]
	enum CurrentGameModeType;//[Offset: 0x7c8, Size: 1]
	FString ItemTableName;//[Offset: 0x7cc, Size: 12]
	FString ItemTagTableName;//[Offset: 0x7d8, Size: 12]
	FString AttachTableName;//[Offset: 0x7e4, Size: 12]
	FString ItemAttrsTableName;//[Offset: 0x7f0, Size: 12]
	FString SuitEmoteTableName;//[Offset: 0x7fc, Size: 12]
	FString OccupationTableName;//[Offset: 0x808, Size: 12]
	enum[] AvatarDownloadGameModeTypes;//[Offset: 0x814, Size: 12]
	<enum,int> AvatarDownloadPriority;//[Offset: 0x820, Size: 60]
	ActivityItemData ActivityData;//[Offset: 0x860, Size: 48]
	ActivityConfigData ActivityConfig;//[Offset: 0x890, Size: 60]
	SpecialItemData SpecialData;//[Offset: 0x8cc, Size: 1]
	bool bShowWeaponPendant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cd, Size: 1]
	<int,int> itemGuid2Useful;//[Offset: 0x8d0, Size: 60]
	<int,int> gunMainTypeUseful;//[Offset: 0x90c, Size: 60]
	<int,int> attachMainTypeUseful;//[Offset: 0x948, Size: 60]
	<int,int> bulletMainTypeUseful;//[Offset: 0x984, Size: 60]
	<int,int> medicineAndGrenadeMainTypeUseful;//[Offset: 0x9c0, Size: 60]
	<int,int> constructTypeUseful;//[Offset: 0x9fc, Size: 60]
	<int,int> skillpropsTypeUseful;//[Offset: 0xa38, Size: 60]
	<int,bool> itemPathExist;//[Offset: 0xa74, Size: 60]
	int[] ItemToDownload;//[Offset: 0xab0, Size: 12]
	int AvatarDownloadMaxLimitTimes;//[Offset: 0xabc, Size: 4]
	bool bAvatarDownloadClientSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac0, Size: 1]
	<int,EquipmentBrief> EquipmentBriefMap;//[Offset: 0xac4, Size: 60]
	bool bEnableTableOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb00, Size: 1]
	bool bEnableDSAvatarOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb01, Size: 1]
	int[] TombBoxItemBlackList;//[Offset: 0xb04, Size: 12]
	int CharacterVirtualItem_Type;//[Offset: 0xb10, Size: 4]
	int CharacterVirtualItem_TypeSpecificID;//[Offset: 0xb14, Size: 4]
	<int,class BattleItemHandleBase> VirtualItemClassMap;//[Offset: 0xb18, Size: 60]
	<int> NoUseVirtualItemIDs;//[Offset: 0xb54, Size: 60]
	bool bAutoPickIngoreBackpackCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb90, Size: 1]
	void ResetItemToDownload();// 0x1f1ef9c
	void ResetBattleItemHandleExist(out const ItemDefineID DefineID);// 0x1f1ef0c
	void OnPostSwitchGameStatut(FString InGameStatus);// 0x1f1ee50
	void OnGameModeTypeChanged();// 0x1f1ee34
	void ItemTableAdditiveOverride(FString OverrideItemTableName, bool bOverride);// 0x1f1ed2c
	bool IsVirtualItemData(out const BattleItemData ItemData);// 0x1f1ec70
	bool IsRollItem(out const PickUpItemData SearchItemResult);// 0x1f1eb14
	bool IsParachuteItemType(int ItemId);// 0x1ef4b34
	bool IsInPveMode();// 0x2bb69b8
	bool IsIceDrinkEmoteIDInBackpack(int InItemID, int InEmoteID);// 0x1f1ea48
	bool IsGrenadeCanAutoSwitch(int ItemId);// 0x1ecd880
	bool IsGlideItemType(int ItemId);// 0x1f1e9c0
	bool IsGhillieSuitItemType(int ItemId);// 0x1f1e938
	bool IsEquipmentItem(int ItemId);// 0x1ef19d0
	bool IsConsumableMissionItemType(int ItemId);// 0x1f1e8b0
	bool IsBattleItemHandlePathExist(FString HandlePath);// 0x1f1e7ec
	bool IsBattleItemHandleExist(out const ItemDefineID DefineID, bool bUseCache, bool bLobby, bool bForceLobby);// 0x1f1e664
	bool Is3BackpackID(int ID);// 0x2bb69b8
	void Initialize();// 0x1f1e650
	void InitialItemTable();// 0x1ef531c
	bool HasTagSub(int ItemId, out const FName TagName);// 0x1f1e578
	bool HasTag(int ItemId, out const FName TagName);// 0x1f1e4a0
	int GetWeaponSkinMappingID(int InWeaponSkinID);// 0x2bb69b8
	FString GetRawBattleTextByType(enum Type, int InSubType);// 0x1f1e34c
	FString GetRawBattleTextByRawTextID(int ID);// 0x1f1e23c
	int GetPendantIDByWeaponID(int WeaponId);// 0x1f1e1b4
	int GetItemSubTypeID(int SpecificID);// 0x2bb69b8
	ItemRecordData GetItemRecord(int ItemId);// 0x1f1e108
	bool GetItemOperationSoundAndBank(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName);// 0x2bb69b8
	int GetGrenadePriorityByType(int InGrenadeType);// 0x1eff5ec
	int GetEquipmentLevel(int ItemId);// 0x1f1e080
	int GetEquipmentBagLevel(int ItemId);// 0x1efffd4
	int GetCustomPickupItemCountByDefineID(BackpackComponent* BackpackComp, out const ItemDefineID DefineID, out const JudgePickupUsefulItem JudgePickUseful);// 0x1f1de74
	BattleItemData GetCharacterVirtualItemInBackpack(BackpackComponent* BackpackComp);// 0x1f1ddc0
	BattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(BackpackComponent* BackpackComp);// 0x1f1dd38
	FString GetBPTableNameByItemID(out const ItemDefineID DefineID);// 0x1f1dc10
	int GetBPIDByResID(int resID);// 0x1f1db88
	BattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(out const ItemDefineID DefineID);// 0x1f1da00
	FString GetBattleItemHandlePathInner(out const ItemDefineID DefineID);// 0x1f1d8e0
	FString GetBattleItemHandlePath(out const ItemDefineID DefineID, bool bLobby, bool bForceLobby);// 0x1f1d718
	class Object GetBattleItemHandleClass(out const ItemDefineID DefineID);// 0x1f1d678
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(out const ItemDefineID DefineID);// 0x1f1d5b4
	int[] GetAttachOfWeapon(int WeaponId);// 0x1f1d4ac
	void GenerateItemDefineIDByItemTableID(int ItemTableID, out int Type, out int TypeSpecificID);// 0x1f1d380
	TagItemList FindItemTag(out const FName TagName);// 0x1f1d2a8
	ItemRecordData FindItemRecord(int ItemId);// 0x1f1d1fc
	BattleItemHandleBase* CreateVirtualItemHandle(out const ItemDefineID DefineID, Object* Outer);// 0x1f1d118
	BattleItemHandleBase* CreateBattleItemHandleInner(out const ItemDefineID DefineID, Object* Outer);// 0x1f1d03c
	BattleItemHandleBase* CreateBattleItemHandle(out const ItemDefineID DefineID, Object* Outer, bool bLobby);// 0x1f1cf0c
	BattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID);// 0x1f1ce58
	BattleItemData ConstructBattleItemDataByDefineID(out const ItemDefineID DefineID);// 0x1f1cd8c
	void ClearItemRecord();// 0x1f1cd78
	bool CheckItem(int ItemTableID);// 0x1ef14a8
	bool CheckHasItemRecord(int ItemId);// 0x1f1ccf8
	bool CanNotAutoSwitchToGrenade(int InGrenadeID);// 0x1f1cc70
	void AddCharacterVirtualItemToBackpack(BackpackComponent* BackpackComp, STExtraBaseCharacter* Character);// 0x1f1cbac

--------------------------------
Class: CreateBattleItemHandleAsyncRequest
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	Object* Outer;//[Offset: 0x18, Size: 4]
	FString Path;//[Offset: 0x1c, Size: 12]
	delegate Callback;//[Offset: 0x28, Size: 16]

--------------------------------
Class: CreateBattleItemHandleListAsyncRequest
	ItemDefineID[] DefineIDList;//[Offset: 0x0, Size: 12]
	FString[] PathList;//[Offset: 0xc, Size: 12]
	Object* Outer;//[Offset: 0x18, Size: 4]
	delegate Callback;//[Offset: 0x20, Size: 16]

--------------------------------
Class: ItemBeOverrideRecordData
	<int,ItemRecordData> BeOverrideMapItemRecord;//[Offset: 0x0, Size: 60]

--------------------------------
Class: PickupSetting
	int LimitBandage;//[Offset: 0x0, Size: 4]
	int LimitMedical;//[Offset: 0x4, Size: 4]
	int LimitFirstAidKit;//[Offset: 0x8, Size: 4]
	int LimitAnodyne;//[Offset: 0xc, Size: 4]
	int LimitEnergyDrinks;//[Offset: 0x10, Size: 4]
	int LimitAdrenaline;//[Offset: 0x14, Size: 4]
	int LimitShouliudan;//[Offset: 0x18, Size: 4]
	int LimitYanwudan;//[Offset: 0x1c, Size: 4]
	int LimitZhenbaodan;//[Offset: 0x20, Size: 4]
	int LimitRanshaodan;//[Offset: 0x24, Size: 4]
	int LimitViscidityBomb;//[Offset: 0x28, Size: 4]
	int LimitGrenadeZombie;//[Offset: 0x2c, Size: 4]
	int LimitGrenadeYedan;//[Offset: 0x30, Size: 4]
	int LimitAntidote;//[Offset: 0x34, Size: 4]
	int LimitBatteryChip;//[Offset: 0x38, Size: 4]
	int LimitGameCoin;//[Offset: 0x3c, Size: 4]
	int LimitBullet9mm;//[Offset: 0x40, Size: 4]
	int LimitBullet7_62mm;//[Offset: 0x44, Size: 4]
	int Limit12koujing;//[Offset: 0x48, Size: 4]
	int Limit45koujing;//[Offset: 0x4c, Size: 4]
	int Limit300magenandanyao;//[Offset: 0x50, Size: 4]
	int Limitbolt;//[Offset: 0x54, Size: 4]
	int LimitBullet5;//[Offset: 0x58, Size: 4]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	bool AutoPickupSideMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	int LimitSniper2X;//[Offset: 0x60, Size: 4]
	int LimitSniper3X;//[Offset: 0x64, Size: 4]
	int LimitSniper4X;//[Offset: 0x68, Size: 4]
	int LimitSniper6X;//[Offset: 0x6c, Size: 4]
	int LimitSniper8X;//[Offset: 0x70, Size: 4]
	bool AutoPickupSkillProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	int LimitSkillProps;//[Offset: 0x78, Size: 4]
	int LimitSnowMan;//[Offset: 0x7c, Size: 4]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	int AutoPickClipType;//[Offset: 0x84, Size: 4]
	<int,int> LimitDrugMap;//[Offset: 0x88, Size: 60]
	<int,int> LimitThrowObjMap;//[Offset: 0xc4, Size: 60]
	<int,int> LimitMultipleMirrorMap;//[Offset: 0x100, Size: 60]
	<int,int> LimitFixConsumeItemMap;//[Offset: 0x13c, Size: 60]

--------------------------------
Class: PickupSettingForTPlan
	int LimitSkillProps;//[Offset: 0x0, Size: 4]
	<int,int> LimitBulletMap_XT;//[Offset: 0x4, Size: 60]
	<int,int> LimitDrugMap_XT;//[Offset: 0x40, Size: 60]
	<int,int> LimitThrowObjMap_XT;//[Offset: 0x7c, Size: 60]
	<int,int> LimitMultipleMirrorMap_XT;//[Offset: 0xb8, Size: 60]
	<int,int> LimitNormalInfillingMap_XT;//[Offset: 0xf4, Size: 60]
	<int,int> LimitHalloweenInfillingMap_XT;//[Offset: 0x130, Size: 60]

--------------------------------
Class: PickupProposeData
	PickupFirstCount[] pickFirst;//[Offset: 0x0, Size: 12]
	int closeSubType;//[Offset: 0xc, Size: 4]
	int crossbowSubType;//[Offset: 0x10, Size: 4]
	int panID;//[Offset: 0x14, Size: 4]
	int pistolSubType;//[Offset: 0x18, Size: 4]
	int gunType;//[Offset: 0x1c, Size: 4]
	int specialType;//[Offset: 0x20, Size: 4]
	int specialType2;//[Offset: 0x24, Size: 4]
	int lens2ID;//[Offset: 0x28, Size: 4]
	int lens3ID;//[Offset: 0x2c, Size: 4]
	int lens4ID;//[Offset: 0x30, Size: 4]
	int lens6ID;//[Offset: 0x34, Size: 4]
	int lens8ID;//[Offset: 0x38, Size: 4]
	int ID2Type;//[Offset: 0x3c, Size: 4]
	int pistolClipSubType;//[Offset: 0x40, Size: 4]
	int SubMachineGunClipSubType;//[Offset: 0x44, Size: 4]
	int SniperClipSubType;//[Offset: 0x48, Size: 4]
	int RifleClipSubType;//[Offset: 0x4c, Size: 4]
	int gasSubID;//[Offset: 0x50, Size: 4]
	int backSubType;//[Offset: 0x54, Size: 4]
	int back3ID;//[Offset: 0x58, Size: 4]
	int BandageID;//[Offset: 0x5c, Size: 4]
	int QuickBandageID;//[Offset: 0x60, Size: 4]
	int EnergyDrinksID;//[Offset: 0x64, Size: 4]
	int AdrenalineID;//[Offset: 0x68, Size: 4]
	int AnodyneID;//[Offset: 0x6c, Size: 4]
	int Medical1ID;//[Offset: 0x70, Size: 4]
	int QuickMedical1ID;//[Offset: 0x74, Size: 4]
	int Medical2ID;//[Offset: 0x78, Size: 4]
	int AntidoteID;//[Offset: 0x7c, Size: 4]
	int BatteryChipID;//[Offset: 0x80, Size: 4]
	int GameCoinID;//[Offset: 0x84, Size: 4]
	int ZhenBaoDan;//[Offset: 0x88, Size: 4]
	int YanWuDan;//[Offset: 0x8c, Size: 4]
	int RanShaoPing;//[Offset: 0x90, Size: 4]
	int ShouLei;//[Offset: 0x94, Size: 4]
	int FlarePistolID;//[Offset: 0x98, Size: 4]
	int[] SideMirrorList;//[Offset: 0x9c, Size: 12]
	int[] MirrorList;//[Offset: 0xa8, Size: 12]
	int ViscidityBomb;//[Offset: 0xb4, Size: 4]
	int GrenadeZombie;//[Offset: 0xb8, Size: 4]
	int GrenadeYedan;//[Offset: 0xbc, Size: 4]
	int DefaultMedicineNum;//[Offset: 0xc0, Size: 4]
	int helmetSubType;//[Offset: 0xc4, Size: 4]
	int armorSubType;//[Offset: 0xc8, Size: 4]
	int ScoreItemSubType;//[Offset: 0xcc, Size: 4]
	int SpecialNoDropItemSubType;//[Offset: 0xd0, Size: 4]
	int IceDrinkItemSubType;//[Offset: 0xd4, Size: 4]
	int IsAutoPickUpTaskSubType;//[Offset: 0xd8, Size: 4]
	int[] carryOnPlane;//[Offset: 0xdc, Size: 12]
	int CapacityThreshold;//[Offset: 0xe8, Size: 4]
	int GlideSubType;//[Offset: 0xec, Size: 4]
	int ParachuteItemSubType;//[Offset: 0xf0, Size: 4]
	int revivalCardID;//[Offset: 0xf4, Size: 4]
	int SnowManID;//[Offset: 0xf8, Size: 4]
	float revivalCardValidTime;//[Offset: 0xfc, Size: 4]
	int[] firewoodPriority;//[Offset: 0x100, Size: 12]
	int[] meatPriority;//[Offset: 0x10c, Size: 12]
	int[] UAVList;//[Offset: 0x118, Size: 12]
	int[] ElectricityList;//[Offset: 0x124, Size: 12]
	int[] ToUseInBackpackSubList;//[Offset: 0x130, Size: 12]
	int[] ToUseInBackpackIDList;//[Offset: 0x13c, Size: 12]
	int[] notExtractItemIDList;//[Offset: 0x148, Size: 12]

--------------------------------
Class: PickupFirstCount
	int pickID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TagItemList
	int[] tagList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ItemTagList
	<FName,int> TagValueMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ActivityItemData
	ItemDefineID PumpkinLanternItem;//[Offset: 0x0, Size: 24]
	ItemDefineID PumpkinEnergyItem;//[Offset: 0x18, Size: 24]

--------------------------------
Class: ActivityConfigData
	<int,int> Lv2EnergyCount;//[Offset: 0x0, Size: 60]

--------------------------------
Class: SpecialItemData

--------------------------------
Class: EquipmentBrief
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemSubType;//[Offset: 0x4, Size: 4]
	int BPID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: JudgePickupUsefulItem
	PickUpItemData MainItemData;//[Offset: 0x0, Size: 48]
	int NetGUIDOffsetValue;//[Offset: 0x30, Size: 4]
	bool DropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: BattleWeaponItemDisplayData
	FString ItemName;//[Offset: 0x0, Size: 12]
	FString WhiteIconPath;//[Offset: 0xc, Size: 12]

--------------------------------
Class: BackpackBlueprintUtils_BP_C.BackpackBlueprintUtils.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb98, Size: 4]
	void IsSinkMode(out bool Out, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2bb69b8
	int GetCustomPickupItemCountByDefineID(BackpackComponent* BackpackComp, out ItemDefineID DefineID, out JudgePickupUsefulItem JudgePickUseful, int CallFunc_GetItemCountByDefineID_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Max_ReturnValue);// 0x2bb69b8
	class Object GetBattleItemHandleClass(out ItemDefineID DefineID, UAELoadedClassManager* CallFunc_Get_ReturnValue, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_GetBPTableName_ReturnValue, class Object CallFunc_GetClass_ReturnValue);// 0x2bb69b8
	bool CanNotAutoSwitchToGrenade(int InGrenadeID, bool CallFunc_Array_Contains_ReturnValue);// 0x2bb69b8
	void PreModifyPickupSettingData(SettingConfig_C* SettingConfig, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int ___int_Variable4, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2);// 0x2bb69b8
	bool IsConsumableMissionItemType(int ItemId, bool CallFunc_Array_Contains_ReturnValue);// 0x2bb69b8
	int GetGrenadePriorityByType(int InGrenadeType, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bb69b8
	bool IsIceDrinkEmoteIDInBackpack(int InItemID, int InEmoteID, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_STRUCT_DrinkCompoundConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x2bb69b8
	bool IsEquipmentItem(int ItemId, bool CallFunc_Map_Contains_ReturnValue);// 0x2bb69b8
	BattleItemHandleBase* CreateVirtualItemHandle(out ItemDefineID DefineID, Object* Outer, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, class BattleItemHandleBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	int GetPendantIDByWeaponID(int WeaponId, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponAttrBPTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x2bb69b8
	int GetWeaponSkinMappingID(int InWeaponSkinID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponSkinMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x2bb69b8
	bool GetItemOperationSoundAndBank(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_ItemSoundTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x2bb69b8
	bool IsGlideItemType(int ItemId, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x2bb69b8
	bool IsGhillieSuitItemType(int ItemId, bool CallFunc_Array_Contains_ReturnValue);// 0x2bb69b8
	int GetEquipmentBagLevel(int ItemId, int ResultBagLevel, FString CallFunc_Conv_IntToString_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, BP_STRUCT_Item_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue5, bool CallFunc_EqualEqual_IntInt_ReturnValue6, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, FString CallFunc_GetGameStatus_ReturnValue, FString CallFunc_ToLower_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x2bb69b8
	int GetEquipmentLevel(int ItemId, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3);// 0x2bb69b8
	bool Is3BackpackID(int ID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2bb69b8
	bool IsInPveMode(bool CallFunc_IsPveMode_out);// 0x2bb69b8
	void IsPVEMode(out bool Out, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2bb69b8
	void GetEquipmentSkinIDByAvatar(int InItemID, GameModePlayerEquipmentAvatar EquipmentAvatar, out int SkinItemID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, bool CallFunc_Conv_IntToBool_ReturnValue3, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, int CallFunc_GetEquipmentLevel_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int ___int_Variable4, int ___int_Variable5, int ___int_Variable6, int K2Node_Select_Default, int K2Node_Select2_Default, int K2Node_Select3_Default, FString CallFunc_Concat_StrStr_ReturnValue3, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2bb69b8
	void ModifySetting();// 0x2bb69b8
	void ModifyPickupSetting(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, PickupSettingForTPlan K2Node_MakeStruct_PickupSettingForTPlan, PickupSetting K2Node_MakeStruct_PickupSetting);// 0x2bb69b8
	void ModifyBulletAndMedician(int ___int_Array_Index_Variable, bool CallFunc_IsSinkMode_out, UAEDataTable* CallFunc_GetDataTable_ReturnValue, int ___int_Loop_Counter_Variable, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_STRUCT_ArmoryConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Array_Get_Item2, int CallFunc_Add_IntInt_ReturnValue2);// 0x2bb69b8
	int GetBPIDByResID(int resID, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow);// 0x2bb69b8
	void AddToWeaponAttachPos(int attachID, enum socket, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2bb69b8
	void InitItemTable(delegate K2Node_CreateDelegate_OutputDelegate, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue);// 0x2bb69b8
	FString GetBattleItemHandlePath(out ItemDefineID DefineID, bool bLobby, bool bForceLobby, FString CallFunc_GetBattleItemHandlePathInner_ReturnValue, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_GetBPTableName_ReturnValue, FString CallFunc_GetPath_ReturnValue);// 0x2bb69b8
	FString GetRawBattleTextByRawTextID(int ID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_LocalizeRes_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x2bb69b8
	FString GetRawBattleTextByType(enum Type, int InSubType, FName RowName, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, BP_STRUCT_LocalizeRes_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x2bb69b8
	int GetItemSubTypeID(int SpecificID, ItemRecordData CallFunc_GetItemRecord_ReturnValue);// 0x2bb69b8
	BattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(out ItemDefineID DefineID, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, BattleWeaponItemDisplayData K2Node_MakeStruct_BattleWeaponItemDisplayData);// 0x2bb69b8
	void GenerateItemDefineIDByItemTableID(int ItemTableID, out int Type, out int TypeSpecificID, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow);// 0x2bb69b8
	bool IsVirtualItemData(out BattleItemData ItemData, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2bb69b8
	BattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(BackpackComponent* BackpackComp, ItemDefineID K2Node_MakeStruct_ItemDefineID, interface classNone CallFunc_GetItemHandleListByDefineID_self_CastInput, ItemHandleBase*[] CallFunc_GetItemHandleListByDefineID_ReturnValue, int CallFunc_Array_Length_ReturnValue, ItemHandleBase* CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, BattleItemHandleBase* K2Node_DynamicCast_AsBattle_Item_Handle_Base, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void CreateBattleItemHandle_Character(Object* Outer, out BattleItemHandleBase* BattleItemHandle, BattleItemHandle_VirtualCharacter_C* CallFunc_SpawnObject_ReturnValue);// 0x2bb69b8
	void CreateBattleItemHandle_Default(int Type, int ID, Object* Outer, bool bLobby, out BattleItemHandleBase* BattleItemHandle, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_GetBPTableName_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class Object CallFunc_GetClass_ReturnValue2, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base2, bool K2Node_ClassDynamicCast_bSuccess2, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue2);// 0x2bb69b8
	void GetBattleItemFeatureData(ItemDefineID DefineID, out BattleItemFeatureData FeatureData, int CountLimit, BattleItemFeatureData BattleItemFeatureData, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, BattleItemFeatureData K2Node_MakeStruct_BattleItemFeatureData);// 0x2bb69b8
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(out ItemDefineID DefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData);// 0x2bb69b8
	BattleItemHandleBase* CreateBattleItemHandle(out ItemDefineID DefineID, Object* Outer, bool bLobby, bool UseLobby, BattleItemHandleBase* Handle, BattleItemHandleBase* CallFunc_CreateBattleItemHandleInner_ReturnValue, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_Character_BattleItemHandle, bool CallFunc_IsBattleItemHandleExist_ReturnValue, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_Default_BattleItemHandle, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	BattleItemData GetCharacterVirtualItemInBackpack(BackpackComponent* BackpackComp, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemData[] CallFunc_GetItemListByDefineID_ReturnValue, BattleItemData CallFunc_Array_Get_Item);// 0x2bb69b8
	BattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, BattleItemData K2Node_MakeStruct_BattleItemData);// 0x2bb69b8
	BattleItemData ConstructBattleItemDataByDefineID(out ItemDefineID DefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, BattleItemData K2Node_MakeStruct_BattleItemData);// 0x2bb69b8
	void GetItemTableRowByItemTableID(int ID, out ItemRecordData ItemTableRow, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x2bb69b8
	void AddCharacterVirtualItemToBackpack(BackpackComponent* BackpackComp, STExtraBaseCharacter* Character);// 0x2bb69b8
	void InitialItemTable();// 0x2bb69b8
	void ExecuteUbergraph_BackpackBlueprintUtils_BP(int EntryPoint, UAEDataTable* CallFunc_GetDataTable_ReturnValue, BackpackComponent* K2Node_Event_BackpackComp, STExtraBaseCharacter* K2Node_Event_Character, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget, BattleItemPickupInfo K2Node_MakeStruct_BattleItemPickupInfo, UAEDataTable* CallFunc_GetDataTable_ReturnValue2, ItemDefineID CallFunc_GenerateItemDefineIDWithRandomInstanceID_ReturnValue, bool CallFunc_PickupItem_ReturnValue);// 0x2bb69b8
	BattleItemAdditionalData[] EmptyAdditionalData;//[Offset: 0xb9c, Size: 12]
	<FName,ItemAssociation> EmptyAssociationMap;//[Offset: 0xba8, Size: 60]
	ItemAssociation[] EmptyAssociationArray;//[Offset: 0xbe4, Size: 12]
	<int,enum> EquipmentID2SlotID_Map;//[Offset: 0xbf0, Size: 60]
	<int,int> EquipmentBagID2Level_Map;//[Offset: 0xc2c, Size: 60]
	<int,int> EquipmentHelmetID2Level_Map;//[Offset: 0xc68, Size: 60]
	<int,int> EquipmentArmorID2Level_Map;//[Offset: 0xca4, Size: 60]
	int[] GhillieSuitItem;//[Offset: 0xce0, Size: 12]
	<int,int> GrenadeTypeToPriority;//[Offset: 0xcec, Size: 60]
	<int,int> CacheItemId2BagLevelMap;//[Offset: 0xd28, Size: 60]

--------------------------------
Class: BP_STRUCT_DrinkCompoundConfig_type
	int awardID_0_2BBEB1403F5A9B0B0EB1D00709609964;//[Offset: 0x0, Size: 4]
	int awardNum_1_37D1DA0026A0923C7757AA8B0609AE2D;//[Offset: 0x4, Size: 4]
	int descID_2_1FD235403A90703F024A7AEA0BB716C4;//[Offset: 0x8, Size: 4]
	int ID_3_2F902D8037E77FA46237D6880B8119C4;//[Offset: 0xc, Size: 4]
	int isMayCarry_4_2AB2AB40581603397B72EE3809C59429;//[Offset: 0x10, Size: 4]
	int JpKrAwardID_5_49A847000D2541FE5295535A097982A4;//[Offset: 0x14, Size: 4]
	int JpKrAwardNum_6_2ECC8FC045A856D735DAF8570798322D;//[Offset: 0x18, Size: 4]
	FString Name_7_3AE82A806F13962C42B917EB011A5DB5;//[Offset: 0x1c, Size: 12]
	FString solt_8_7F0FFAC007CB390F4285A58D011A9FB4;//[Offset: 0x28, Size: 12]
	int EmoteID_9_4C84EC007C583218352536360B9EB844;//[Offset: 0x34, Size: 4]
	FString PhizExplain_10_2575C54064E510CF536AC4300D724F0E;//[Offset: 0x38, Size: 12]
	FString EmoteVoiceName_11_60ECC6803A15389C4AA097EC0673F2D5;//[Offset: 0x44, Size: 12]

--------------------------------
Class: BP_STRUCT_WeaponAttrBPTable_type
	FString AttachmentSkinIDList_1_68C117003440A0EE1A2DDA300D678804;//[Offset: 0x0, Size: 12]
	int BPID_2_5A4F6D006A4E746E1527F1660046AA94;//[Offset: 0xc, Size: 4]
	int[] AttachmentIDList_a_5_6E7001C028E30A41653FBE36025F1751;//[Offset: 0x10, Size: 12]
	int[] ParentIDList_a_6_3486FA0030D9987A663B62F90FFCB731;//[Offset: 0x1c, Size: 12]
	FString DeadInventoryBoxPath_7_1883E1C0339C8C7958767FF2080EC2C8;//[Offset: 0x28, Size: 12]
	int PendantID_8_32B77B0039C6C1D620F9E77400A423B4;//[Offset: 0x34, Size: 4]
	FString DeadInventoryBoxIDs_10_7CB7FE8050FC74B432EE0A820680F713;//[Offset: 0x38, Size: 12]

--------------------------------
Class: BP_STRUCT_WeaponSkinMapping_type
	FString OutputDesc_0_4C755C4055DE81011AC086EE07D9D3D3;//[Offset: 0x0, Size: 12]
	int SkinID_1_6AF5A0C03E8D665F2B8E33D5019212C4;//[Offset: 0xc, Size: 4]
	int WeaponID_2_1D11360041F2AB4A2B54AC9608775314;//[Offset: 0x10, Size: 4]
	FString URL_3_276895001829BC3265405AC70F011B5C;//[Offset: 0x14, Size: 12]
	FString iconURL_4_1C201F405280621B7F9C0B550EBB3B4C;//[Offset: 0x20, Size: 12]

--------------------------------
Class: BP_STRUCT_ItemSoundTable_type
	FString EquipSound_0_068B68C066212493052EBF3305D63E14;//[Offset: 0x0, Size: 12]
	FString DropSound_1_4DD7CD003E11476C25039DA50902AA34;//[Offset: 0xc, Size: 12]
	int ID_2_42F748C040D81BA3690F7C020EF58C44;//[Offset: 0x18, Size: 4]
	FString PickUpSound_3_0B99FAC07345086D4963B6D504877D14;//[Offset: 0x1c, Size: 12]
	FString DropBank_4_1D8769C022E35E311709B3FF07910C6B;//[Offset: 0x28, Size: 12]
	FString EquipBank_5_30BCE58001E2251E07D41C7C055C432B;//[Offset: 0x34, Size: 12]
	FString UnEquipBank_6_4FF4964008C1F90F14F8C45904D7459B;//[Offset: 0x40, Size: 12]
	FString UnEquipSound_7_0376B980772F43423C77A2D80D665704;//[Offset: 0x4c, Size: 12]
	FString PickUpBank_8_3C7477801367726A5EFE3B0D0549773B;//[Offset: 0x58, Size: 12]

--------------------------------
Class: BP_STRUCT_Item_type
	FString ItemBigIcon_0_733663734EEB8DD5D7FF41A6E96480D4;//[Offset: 0x0, Size: 12]
	int MaxCount_1_D5BF33434E37E75739D213989C4FA372;//[Offset: 0xc, Size: 4]
	int BPID_2_F73A5EF243D620CE49BBCAA8832C6AF9;//[Offset: 0x10, Size: 4]
	int ItemType_3_4CBCE77A4D2A20BEBD861AADEF3B616B;//[Offset: 0x14, Size: 4]
	bool AutoEquipAndDrop_4_144B885646B92B9836CE33923842AB1E;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int ItemID_5_29F7B64741688A0A853FD281FAE4E28D;//[Offset: 0x1c, Size: 4]
	bool Consumable_7_B08070BD407AD029B7CDA7BDB341A342;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	FString ItemDesc_8_8ED919494479E8A62F11DBB9C7AD0F9A;//[Offset: 0x24, Size: 12]
	FString ItemSmallIcon_9_B13D206C4A153C963FCE478A1B39C15F;//[Offset: 0x30, Size: 12]
	FString ItemName_10_B257B36A422BB69651454E90EBC1323B;//[Offset: 0x3c, Size: 12]
	FString WardrobeTab_11_6562B47746AECB0B5C84BC9C96EACD9D;//[Offset: 0x48, Size: 12]
	int ItemSubType_12_087F026E41DAB82F567758A4F56D72CF;//[Offset: 0x54, Size: 4]
	bool Equippable_13_BB222DC04DCB195FCB3F29B89EA210CA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	float UnitWeight_f_14_725EBB604F31443B93AF3597580ECAE4;//[Offset: 0x5c, Size: 4]
	FString ItemWhiteIcon_15_AA35FD8045790AA9F73F58829F202B94;//[Offset: 0x60, Size: 12]
	int ItemQuality_16_3EF7461D45D14FC186EB3DBB70D01484;//[Offset: 0x6c, Size: 4]
	FString KillWhiteIcon_27_16289384496FF361F9005580DEF9CAD1;//[Offset: 0x70, Size: 12]
	int NeedShare_73_D9C0818D40A3C6AB07231BABA5477060;//[Offset: 0x7c, Size: 4]
	int WeightforOrder_29_4373EFCD4D78E7DF4067FF9D3E213664;//[Offset: 0x80, Size: 4]
	FString Preview_32_1997D4634D3D3F8CC7360283D2AF4E6C;//[Offset: 0x84, Size: 12]
	FString ExTime_33_8299B7454C71BC6A899937AF00BFF0C5;//[Offset: 0x90, Size: 12]
	FString PickupDesc_36_D5D621864C55ED8C6ABE728B6F002D4E;//[Offset: 0x9c, Size: 12]
	int WardrobeMainTab_38_D234FCBE4A19AAF3066394AD7C7D98DF;//[Offset: 0xa8, Size: 4]
	int Durability_39_7B54DEB94CD411488438539500D225E1;//[Offset: 0xac, Size: 4]
	bool IsBatchUse_40_88AB90DA48C707B0FE6DB18185C6253A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	int AIFullVaule_43_6A3A6FC023E58D4B4FDDDF270E81E075;//[Offset: 0xb4, Size: 4]
	int LongDescID_44_4E8350406652C05F7794F90804562904;//[Offset: 0xb8, Size: 4]
	FString ItemSmallIcon2_46_6ED99A00141F4C900B45252101330012;//[Offset: 0xbc, Size: 12]
	FString ItemBigIcon2_47_2C0E40404ED554873AD82D3A053DBC62;//[Offset: 0xc8, Size: 12]
	FString BackpackSimple_48_26F807C06BB149650FE17C280F83D985;//[Offset: 0xd4, Size: 12]
	FString ItemRegion_49_3899A60047215AA47D8652720D715E6E;//[Offset: 0xe0, Size: 12]
	int ShowSexInMall_56_0C9F0CC01B8DDF89290B2B7F0D9E026C;//[Offset: 0xec, Size: 4]
	int AvatarID_68_319E644077E02FFF04B5C19B04157FD4;//[Offset: 0xf0, Size: 4]
	FString SpecialIcon_72_55E01BC05ADCEE1500E06C0F01021C3E;//[Offset: 0xf4, Size: 12]
	FString ValidRegionCodes_74_2EA4F9C02DC66B4573D87CB8064AB793;//[Offset: 0x100, Size: 12]
	int ValidTimes_75_5BC6A5C03028B6616FF746180062B373;//[Offset: 0x10c, Size: 4]
	int RateType_77_176334C00292E359401D0B6600355865;//[Offset: 0x110, Size: 4]
	FString QualityRate_78_5F4A46807D1C4B2C0A08E8F50F3EB745;//[Offset: 0x114, Size: 12]
	int character_param_81_2F2A70804AD88C7E6E8F5B83071E93DD;//[Offset: 0x120, Size: 4]
	int JKBPID_82_1FF3B64037160BBF09A6FDF60967EB24;//[Offset: 0x124, Size: 4]
	int ItemSoundID_83_7010328028DE3D6841FCD9F407C46B04;//[Offset: 0x128, Size: 4]
	int ResSeprateType_84_5349D1400501D3B166D23C1D0CBC9FE5;//[Offset: 0x12c, Size: 4]
	int CanIntoBag_85_416CF6C01FD7CDED0F5E477601A418C7;//[Offset: 0x130, Size: 4]
	int Electricity_86_19A7E9806DE4A79A2FAD5505041B42E9;//[Offset: 0x134, Size: 4]
	int ItemPickupRule_87_49300E005A58193E16239C7A00F80F05;//[Offset: 0x138, Size: 4]
	FString SpecialIconSize_89_4BBF62802BA083E043328BD00C42A315;//[Offset: 0x13c, Size: 12]

--------------------------------
Class: BP_STRUCT_BackpackMapping_type
	int ItemIDLv1_0_21A3A0400039E85B0FB4B5AE02FC6161;//[Offset: 0x0, Size: 4]
	int ItemIDLv3_4_21A5A0C00039E85D0FB4B5A802FC6163;//[Offset: 0x4, Size: 4]
	int SkinID_5_0CC9E5002CE60FA0348CD8800DC46CC4;//[Offset: 0x8, Size: 4]
	int ItemIDLv2_6_21A4A0800039E85C0FB4B5AF02FC6162;//[Offset: 0xc, Size: 4]
	int SkinItemIDLv1_8_54E5658067900F920ABA96CA085B62E1;//[Offset: 0x10, Size: 4]
	int SkinItemIDLv3_9_54E7660067900F940ABA96CC085B62E3;//[Offset: 0x14, Size: 4]
	int LobbyShowItemID_10_2F22E9C00E7C61770577495A0A75F1B4;//[Offset: 0x18, Size: 4]
	int SkinItemIDLv2_11_54E665C067900F930ABA96CD085B62E2;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BP_STRUCT_ArmoryConfig_type
	FString Power_0_66023CC06166E049160058F001EA47E2;//[Offset: 0x0, Size: 12]
	FString ShotRange_1_59BA1C40037657B76427F9810CB9A205;//[Offset: 0xc, Size: 12]
	int WeaponID_2_04A777401625BC6D3B1E56BA09255CF4;//[Offset: 0x18, Size: 4]
	int BulletID_3_7D8136C0262C958112A0BCFE0A90D7B4;//[Offset: 0x1c, Size: 4]
	int IsShow_4_4C2F70C02E814ECD68323BF600FA3D47;//[Offset: 0x20, Size: 4]
	FString VerticalRecoil_5_34839F80315AFB6669A7FB050FB382AC;//[Offset: 0x24, Size: 12]
	FString Shake_6_7E9B148046BA7452166E7E6601E6CE35;//[Offset: 0x30, Size: 12]
	int WeaponType_7_482A1C8059A944560A6FD461055DA945;//[Offset: 0x3c, Size: 4]
	FString ShootInterval_8_49712E00653738B65705EBAE034CD55C;//[Offset: 0x40, Size: 12]
	FString HorizontalRecoil_9_1EB63B80354249506510039F02A0FBAC;//[Offset: 0x4c, Size: 12]
	FString ReloadSpeed_10_13836B803042987230C406AD067DC2C4;//[Offset: 0x58, Size: 12]
	FString ClipCapacity_11_3EA5A7000BBA4130106249B307164639;//[Offset: 0x64, Size: 12]
	FString WeaponName_12_715DB4407742DAAB0A7C764D055D6F15;//[Offset: 0x70, Size: 12]
	FString ExtCapcity_13_128419002CEBB022532CC2890B99BD99;//[Offset: 0x7c, Size: 12]

--------------------------------
Class: BP_STRUCT_LocalizeRes_type
	FString TextValue_0_4D37165A410D67320AF278A1C1028E4F;//[Offset: 0x0, Size: 12]
	int TextId_1_20B947934F165858A322E599888F816E;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BattleItemHandle_VirtualCharacter_C.BattleItemHandle_VirtualItem_C.BattleItemHandleBase.ItemHandleBase.Object
	BattleItemData ExtractItemData(<FName,ItemAssociation> CallFunc_GetAssociationMap_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, ItemAssociation[] CallFunc_Map_Values_Values, BattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, BattleItemData K2Node_SetFieldsInStruct_StructOut);// 0x2bb69b8

--------------------------------
Class: BattleItemHandle_VirtualItem_C.BattleItemHandleBase.ItemHandleBase.Object

--------------------------------
Class: BP_STRUCT_AvatarDefaultConfig_type
	int id_0_582DD74020EEE8C12D00E1A40C84B664;//[Offset: 0x0, Size: 4]
	FString pant_1_00F930C0654EFFCD6B08CAF404B7FCD4;//[Offset: 0x4, Size: 12]
	FString shirt_2_53D54E8062374FD817805CCA0B7038D4;//[Offset: 0x10, Size: 12]
	FString shoe_3_12522FC065073BE56B0E507104B703D5;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: ObserverCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x800, Size: 4]
	float FreeCameraOffsetRadius;//[Offset: 0x820, Size: 4]
	<byte,float> FreeCameraOffsetRadiusMap;//[Offset: 0x824, Size: 60]
	bool DrawDebugGraphics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	Vector DrawDebugGraphicsOffset;//[Offset: 0x864, Size: 12]
	float ProbeRadius;//[Offset: 0x870, Size: 4]
	float SpecialStatePitchLimitMin;//[Offset: 0x874, Size: 4]
	float SpecialStatePitchLimitMax;//[Offset: 0x878, Size: 4]
	float DefaultFieldOfView;//[Offset: 0x87c, Size: 4]
	float WeaponOffsetDistance;//[Offset: 0x880, Size: 4]
	bool EnableUsePawnRotationCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x884, Size: 1]
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x2079370

--------------------------------
Class: FPPSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	CameraOffsetData InVehicleCameraData;//[Offset: 0x3ac, Size: 28]
	Transform InVehicleCameraTrans;//[Offset: 0x3d0, Size: 48]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x400, Size: 28]
	void SetFPPCameraDataEnable(byte CameraDataType, bool IsEnable);// 0x1fdec4c

--------------------------------
Class: FPPComponent_C.BaseFPPComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x258, Size: 4]
	MaterialInstance* GetScopeMaterialOverride(STExtraShootWeapon* Weapon, ItemDefineID CallFunc_GetItemDefineID_ReturnValue, byte CallFunc_GetCurSightType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Array_Find_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Find_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2, MaterialInstance* CallFunc_Array_Get_Item, MaterialInstance* CallFunc_Array_Get_Item2, MaterialInstance* CallFunc_Array_Get_Item3, MaterialInstance* CallFunc_Array_Get_Item4, MaterialInstance* CallFunc_Array_Get_Item5, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue3);// 0x2bb69b8
	void ResetScreenPercentage(byte CallFunc_GetSightType_ReturnValue, byte CallFunc_GetRole_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetExactDeviceLevel_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x2bb69b8
	void DownScreenPercentage(byte CallFunc_GetSightType_ReturnValue, byte CallFunc_GetRole_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetExactDeviceLevel_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x2bb69b8
	void ChangeScopeTPPGlassMat(MeshComponent* ScopeMeshComp, int ScopeID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STRUCT_WeaponScopeGlassMat_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue);// 0x2bb69b8
	void GetScopeMatTableKey(STExtraPlayerController* PlayerController, STExtraShootWeapon* Weapon, enum ScopeType, out FString Key, int MatTableKey, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsScopeSpecialMatExist_exist, int CallFunc_IsScopeSpecialMatExist_MatTableKey, int CallFunc_GetScopeID_ReturnValue, SightMaterialConfig CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6);// 0x2bb69b8
	void IsScopeSpecialMatExist(STExtraWeapon* Weapon, enum ScopeType, out bool exist, out int MatTableKey, int ___int_Loop_Counter_Variable, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, AvatarDIYEntity* CallFunc_GetAvatarEntity_ReturnValue, int ___int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, BattleItemHandleBase* CallFunc_GetLoadedHandle_ReturnValue, BackpackWeaponAttachHandle* K2Node_DynamicCast_AsBackpack_Weapon_Attach_Handle, bool K2Node_DynamicCast_bSuccess, int ___int_Array_Index_Variable2, WeaponAttachmentConfig CallFunc_GetAttachmentConfig_ReturnValue, ItemDefineID CallFunc_GetItemDefineID_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2);// 0x2bb69b8
	float SwitchAngledSightConfigMaterial(bool forceSwitch, MeshComponent* ScopeMeshComp, int AngledSightID, bool CallFunc_IsServer_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, MeshComponent* CallFunc_GetScopeAimCameraTransform_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, FString CallFunc_GetScopeMatTableKey_Key, bool CallFunc_IsValid_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_WeaponScopeMaterial_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue3, LinearColor CallFunc_Conv_StringToColor_OutConvertedColor, bool CallFunc_Conv_StringToColor_OutIsValid, FName CallFunc_Conv_StringToName_ReturnValue2, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue, int CallFunc_GetMaterialIndex_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x2bb69b8
	float ShowAngledSightTPPMaterial(bool forceADSState, float CallFunc_SwitchAngledSightConfigMaterial_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue2, MeshComponent* CallFunc_GetScopeAimCameraTransform_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue3, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	float SwitchSightConfigMaterial(int SpecialMatFlag, STExtraShootWeapon* CurShootWeapon, MeshComponent* ScopeMeshComp, MeshComponent* CallFunc_GetScopeAimCameraSecondScopeByType_ReturnValue, bool CallFunc_IsServer_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, FString CallFunc_GetScopeMatTableKey_Key, bool CallFunc_IsValid_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_WeaponScopeMaterial_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue, LinearColor CallFunc_Conv_StringToColor_OutConvertedColor, bool CallFunc_Conv_StringToColor_OutIsValid, FName CallFunc_Conv_StringToName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, int CallFunc_GetMaterialIndex_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x2bb69b8
	float ShowReflectorSightTPPMaterial(bool forceADSState, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, float CallFunc_SwitchSightConfigMaterial_ReturnValue, MeshComponent* CallFunc_GetScopeAimCameraSecondScopeByType_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsServer_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, byte CallFunc_GetCurSightType_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_GetScopeID_ReturnValue);// 0x2bb69b8
	float GetScopeFov(STExtraWeapon* Weapon, bool bIsAngled, float CallFunc_GetCurrentScopeZoomFov_MinFov, float CallFunc_GetCurrentScopeZoomFov_CurFov, int CallFunc_GetScopeID_ReturnValue, float CallFunc_GetSpecialScopeFov_ReturnValue, int CallFunc_GetWeaponID_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_GetAdjustWeaponID_ReturnValue, FName CallFunc_GetFNameFromTwoID_ReturnValue, BP_STRUCT_WeaponScopeFOV_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsUseZoomScope_ReturnValue);// 0x2bb69b8
	void SetTagCullingBP(bool IsUse, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void requestResourceGuarantee(int InOrOut, byte loadMode, byte applyStatus, int CallFunc_GetPlatformInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue2, byte CallFunc_GetSightType_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue3, int K2Node_MathExpression_ReturnValue);// 0x2bb69b8
	void ReloadEvent();// 0x2bb69b8
	void SetTagCulling(bool IsUse);// 0x2bb69b8
	void PlayScopeInTimeline();// 0x2bb69b8
	void ScopeInEnd();// 0x2bb69b8
	void ScopeOutEnd();// 0x2bb69b8
	void StopScopeIn();// 0x2bb69b8
	void AttachToSight();// 0x2bb69b8
	void AttachTo(SceneComponent* NewParam);// 0x2bb69b8
	void Detach(SceneComponent* NewParam);// 0x2bb69b8
	void ReceiveTick(float DeltaSeconds);// 0x2bb69b8
	void AutoReloadEvent(STExtraShootWeapon* ShootWeapon);// 0x2bb69b8
	void AttachToSightKeepTransform();// 0x2bb69b8
	void ExecuteUbergraph_FPPComponent(int EntryPoint, STExtraWeapon* CallFunc_GetCurScopeWeapon_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess, ShootWeaponEntity* CallFunc_GetShootWeaponEntityComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_Event_IsUse, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue3, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, bool CallFunc_IsValid_ReturnValue4, SceneComponent* K2Node_CustomEvent_NewParam2, SceneComponent* K2Node_CustomEvent_NewParam, float K2Node_Event_DeltaSeconds, STExtraShootWeapon* K2Node_CustomEvent_ShootWeapon, bool CallFunc_Greater_FloatFloat_ReturnValue, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_K2_AttachToComponent_ReturnValue, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue2, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_K2_AttachToComponent_ReturnValue2, bool CallFunc_IsUseZoomScope_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);// 0x2bb69b8
	BP_PlayerPawn_C* PawnBP;//[Offset: 0x25c, Size: 4]
	float DeltaTime;//[Offset: 0x260, Size: 4]
	SkeletalMeshComponent* NewVar;//[Offset: 0x264, Size: 4]
	StaticMesh* SightLens;//[Offset: 0x268, Size: 4]
	MaterialInstance*[] ScopeMaterialOverride;//[Offset: 0x26c, Size: 12]
	int[] Scope4XType1;//[Offset: 0x278, Size: 12]
	int[] Scope4XType2;//[Offset: 0x284, Size: 12]

--------------------------------
Class: BP_STRUCT_WeaponScopeGlassMat_type
	FString MaterialPath_0_5C2E3480396102E244C9A5850B9B5408;//[Offset: 0x0, Size: 12]
	FString ScopeID_1_0872E740109AD1491DFC990E05CF6BF4;//[Offset: 0xc, Size: 12]

--------------------------------
Class: BackpackWeaponAttachHandle.BattleItemHandleBase.ItemHandleBase.Object
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0x100, Size: 496]
	class AnimInstance* animBP;//[Offset: 0x2f0, Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x2f8, Size: 40]
	WeaponPendantSocket[] PendantConfigList;//[Offset: 0x320, Size: 12]
	WeaponPendantMap[] WeaponPendantMap;//[Offset: 0x32c, Size: 12]
	BackpackComponent* BackpackComp;//[Offset: 0x338, Size: 4]
	void ReturnWeaponAdditionalBulletsToBackpack(STExtraShootWeapon* Weapon, int BulletNum);// 0x1f1cbac
	void ResetNeedReturnBulletsWhenDisuseExtendMaxBulletDJ();// 0x1f23c1c
	bool IsVirtualAvatarHandle();// 0x1f23bec
	void HandleDisuseReplaceByNew(BackpackWeaponAttachHandle* NewHandle);// 0x1f23b74
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x1f23aa0
	int GetSubSlotID();// 0x1f23a70
	int GetSlotID();// 0x1f23a40
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x1f239d4
	void GetMeshPackCfg(out WeaponMeshCfg MeshCfg);// 0x1f2380c
	WeaponAttachmentConfig GetAttachmentConfig();// 0x1f237a0
	class Object GetAnimationBP();// 0x1f23770
	bool EquipOrUnEuipAttachment(STExtraShootWeapon* InWeapon, bool IsEquip, enum Reason);// 0x1f2365c

--------------------------------
Class: WeaponAttachmentConfig
	FText AttachmentName;//[Offset: 0x0, Size: 12]
	enum AttachmentSocketType;//[Offset: 0xc, Size: 1]
	enum SubSlot;//[Offset: 0xd, Size: 1]
	enum SightType;//[Offset: 0xe, Size: 1]
	bool IsExtendMaxBulletNumInOneClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	bool IsSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool IsFireSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool IsCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x14, Size: 12]
	WeaponAttachmentDesc[] WeaponAttachmentDescs;//[Offset: 0x20, Size: 12]
	<int,FName> socketTypeToName;//[Offset: 0x2c, Size: 60]
	WeaponMeshCfg MeshPackage;//[Offset: 0x68, Size: 328]
	WeaponMeshCfg[] ExtMeshList;//[Offset: 0x1b0, Size: 12]
	ReplacedAttament[] replacementWeapon;//[Offset: 0x1bc, Size: 12]
	AnimationAsset*[] AttachmentAnimList;//[Offset: 0x1c8, Size: 12]
	ItemDefineID ParentID;//[Offset: 0x1d8, Size: 24]

--------------------------------
Class: WeaponAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	bool bModifyResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]
	Object* ModifyResValue;//[Offset: 0x18, Size: 40]

--------------------------------
Class: WeaponAttachmentDesc
	FText Desc;//[Offset: 0x0, Size: 12]
	FText DescValue;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ReplacedAttament
	ItemDefineID[] targetWeaponIDList;//[Offset: 0x0, Size: 12]
	WeaponMeshCfg replacedAttachmentCfg;//[Offset: 0x10, Size: 328]
	WeaponMeshCfg[] ExtReplacedAttachmentCfgList;//[Offset: 0x158, Size: 12]
	int replacedAttachmentMatIndex;//[Offset: 0x164, Size: 4]

--------------------------------
Class: WeaponPendantSocket
	enum PendantSocketType;//[Offset: 0x0, Size: 1]
	int PendantIndex;//[Offset: 0x4, Size: 4]
	bool IsOpenConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	AvatarPendantConfig AnimConstraint;//[Offset: 0x10, Size: 96]

--------------------------------
Class: WeaponPendantMap
	int WeaponId;//[Offset: 0x0, Size: 4]
	WeaponPendantSocket[] PendantInfoList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BP_STRUCT_WeaponScopeMaterial_type
	FString ScopeGroupID_0_289E4F406E35B6A1337959050F04DD14;//[Offset: 0x0, Size: 12]
	FString ScopeMaterial_1_4BEFD48030177D8A6925FD700F8D124C;//[Offset: 0xc, Size: 12]
	FString ScopeMaterialSocket_2_63700EC07064DCC960E067A00E289394;//[Offset: 0x18, Size: 12]
	FString ScopeMaterialColor_3_1DC014403E6A0BAB129284A605F29442;//[Offset: 0x24, Size: 12]

--------------------------------
Class: Vault_Controller_C.PlayerMantleComponent.BaseVaultComponent.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4b8, Size: 4]
	void JumpVault();// 0x2bb69b8
	void VaultFail(FString Reason);// 0x2bb69b8
	void VaultServer(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x2bb69b8
	void VaultAll(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* checkActor, float crossmaxFalling, float crossmaxDis, Vector HitPoint, Rotator movedir);// 0x2bb69b8
	void StopVault();// 0x2bb69b8
	void DSCheckStopVault();// 0x2bb69b8
	void ExecuteUbergraph_Vault_Controller(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FString K2Node_Event_Reason, float K2Node_CustomEvent_dis2, float K2Node_CustomEvent_height2, float K2Node_CustomEvent_length2, FString K2Node_CustomEvent_vaultKey2, Vector K2Node_CustomEvent_StartPos2, Actor* K2Node_CustomEvent_CheckActor2, float K2Node_CustomEvent_crossblockMaxFall, float K2Node_CustomEvent_crossblockMaxDis, Vector K2Node_CustomEvent_hitpoint2, Actor* K2Node_CustomEvent_WindowActor, Rotator K2Node_CustomEvent_movedir2, float K2Node_CustomEvent_Dis, float K2Node_CustomEvent_Height, float K2Node_CustomEvent_length, FString K2Node_CustomEvent_VaultKey, Vector K2Node_CustomEvent_StartPos, Actor* K2Node_CustomEvent_CheckActor, float K2Node_CustomEvent_crossmaxFalling, float K2Node_CustomEvent_crossmaxDis, Vector K2Node_CustomEvent_hitpoint, Rotator K2Node_CustomEvent_movedir, bool CallFunc_IsLocallyControlled_ReturnValue);// 0x2bb69b8

--------------------------------
Class: PlayerMantleComponent.BaseVaultComponent.LuaActorComponent.ActorComponent.Object
	float NowBlockDis;//[Offset: 0x1cc, Size: 4]
	float NowBlockHeight;//[Offset: 0x1d0, Size: 4]
	float NowAfterBlockMaxFallingHeight;//[Offset: 0x1d4, Size: 4]
	float NowCrossBlockMaxDis;//[Offset: 0x1d8, Size: 4]
	float NowBlockLength;//[Offset: 0x1dc, Size: 4]
	float maxCheckDis;//[Offset: 0x1e0, Size: 4]
	float MaxCheckOppSiteDis;//[Offset: 0x1e4, Size: 4]
	float UnActiveMaxAngle;//[Offset: 0x1e8, Size: 4]
	float MaxCheckHeight;//[Offset: 0x1ec, Size: 4]
	Actor* checkActor;//[Offset: 0x1f0, Size: 4]
	Vector HitPoint;//[Offset: 0x1f4, Size: 12]
	PrimitiveComponent* HitComponent;//[Offset: 0x200, Size: 4]
	float CapsuleRadius;//[Offset: 0x204, Size: 4]
	float CapsuleHalfHeight;//[Offset: 0x208, Size: 4]
	Vector BlockDir;//[Offset: 0x20c, Size: 12]
	float MaxJumpLength;//[Offset: 0x218, Size: 4]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	bool IsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d, Size: 1]
	float nowMaxX;//[Offset: 0x220, Size: 4]
	float nowMinFallingY;//[Offset: 0x224, Size: 4]
	float realStartZ;//[Offset: 0x228, Size: 4]
	Vector oppositeHitPoint;//[Offset: 0x22c, Size: 12]
	Vector upHitPoint;//[Offset: 0x238, Size: 12]
	float heightoffsetcheck;//[Offset: 0x244, Size: 4]
	float HeightForwardCheck;//[Offset: 0x248, Size: 4]
	float minVaultHeight;//[Offset: 0x24c, Size: 4]
	float minCheckHeight;//[Offset: 0x250, Size: 4]
	float AfterBlockMaxFallingHeightoffset;//[Offset: 0x254, Size: 4]
	float JumpValueMinDisToland;//[Offset: 0x258, Size: 4]
	float blockledgeZ;//[Offset: 0x25c, Size: 4]
	float SpeedDisRatio;//[Offset: 0x260, Size: 4]
	float CurHeightToLand;//[Offset: 0x264, Size: 4]
	Vector PlayerStartPosition;//[Offset: 0x268, Size: 12]
	Rotator PlayerRotation;//[Offset: 0x274, Size: 12]
	Vector PlayerStartDir;//[Offset: 0x280, Size: 12]
	float LastStandDis;//[Offset: 0x28c, Size: 4]
	float lastwalkDis;//[Offset: 0x290, Size: 4]
	float lastsprintDis;//[Offset: 0x294, Size: 4]
	float DeltaTime;//[Offset: 0x298, Size: 4]
	float CountTime;//[Offset: 0x29c, Size: 4]
	bool IsVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	float realStartTime;//[Offset: 0x2a4, Size: 4]
	bool IsEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	float offsetSpeed;//[Offset: 0x2ac, Size: 4]
	float nowAnimSpeed;//[Offset: 0x2b0, Size: 4]
	float animSpeedChangeTime;//[Offset: 0x2b4, Size: 4]
	float animChangeSpeedRate;//[Offset: 0x2b8, Size: 4]
	bool IsInStopVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 1]
	bool waitStopVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 1]
	float stopVaultOppDis;//[Offset: 0x2c0, Size: 4]
	float FpsVaultSpeed;//[Offset: 0x2c4, Size: 4]
	Vector FpsVaultStartPosition;//[Offset: 0x2c8, Size: 12]
	Vector FpsVaultTopoffsetPosition;//[Offset: 0x2d4, Size: 12]
	Vector FpsVaultTopPosition;//[Offset: 0x2e0, Size: 12]
	Vector FpsVaultEndPosition;//[Offset: 0x2ec, Size: 12]
	bool FpsVaultIsJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	float FpsVaultMontageTotalTime;//[Offset: 0x2fc, Size: 4]
	FString FpsVaultMontageName;//[Offset: 0x300, Size: 12]
	float FpsVaultMontageTopTime;//[Offset: 0x30c, Size: 4]
	float FpsVaultCheckDis;//[Offset: 0x310, Size: 4]
	float FpsVaultCheckHeight;//[Offset: 0x314, Size: 4]
	float FpsVaultCheckThick;//[Offset: 0x318, Size: 4]
	bool NowIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	float FpsCheatingVaule;//[Offset: 0x320, Size: 4]
	float FpsMinHtight;//[Offset: 0x324, Size: 4]
	bool fpsisplayedcamerashake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	float fpsvaultshakeoffsetheight;//[Offset: 0x32c, Size: 4]
	Vector DataStartPos;//[Offset: 0x330, Size: 12]
	FString NowVaultKey;//[Offset: 0x33c, Size: 12]
	STExtraPlayerCharacter* PlayerPawn;//[Offset: 0x348, Size: 4]
	byte NowDrawDebugType;//[Offset: 0x34c, Size: 1]
	byte gunSlot;//[Offset: 0x34d, Size: 1]
	bool IsPreUseMedicine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34e, Size: 1]
	bool IsChangeMontageSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34f, Size: 1]
	bool iswondowbroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	float windowsbrokenoffsetdis;//[Offset: 0x354, Size: 4]
	float ShouldAdjustHeight;//[Offset: 0x358, Size: 4]
	float MoveSeconds;//[Offset: 0x35c, Size: 4]
	Vector StartOffsetToBase;//[Offset: 0x360, Size: 12]
	float StartZToBase;//[Offset: 0x36c, Size: 4]
	<FString,VaultDataParam> VaultDataMap;//[Offset: 0x370, Size: 60]
	VaultDataParam NowVaultData;//[Offset: 0x3ac, Size: 80]
	VaultCheckRule[] CheckRuleListCPP;//[Offset: 0x3fc, Size: 12]
	FpsVaultDataParam[] FpsVaultAnimationListCPP;//[Offset: 0x408, Size: 12]
	UAEWindowComponent*[] VaultWindows;//[Offset: 0x414, Size: 12]
	bool bControlCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	float CameraUpperThanBlock;//[Offset: 0x424, Size: 4]
	bool bEnableAutoVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	bool bAutoVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 1]
	float AutoVaultMaxHeightToLand;//[Offset: 0x434, Size: 4]
	bool isInVaultingCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	bool hasSendStopVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 1]
	TimerHandle AutoVaultTimerHandle;//[Offset: 0x460, Size: 8]
	<byte,VaultAnimDataPath> VaultAnimPathMap;//[Offset: 0x468, Size: 60]
	AnimMontage* VaultMontage;//[Offset: 0x4a4, Size: 4]
	AnimMontage* TeamVaultMontage;//[Offset: 0x4a8, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x4b0, Size: 4]
	void VaultLeave(enum State);// 0x209e4a4
	bool VaultFromCPP();// 0x209e474
	void VaultFail(FString Reason);// 0x2bb69b8
	void UpdateVault_BluePrint();// 0x209e458
	void UpdatePosition();// 0x1eef838
	void UpdateMontageSpeed();// 0x209e444
	void TpsVaultUpdate();// 0x209e430
	void StopVaultAndReverse();// 0x209e41c
	void StartVault();// 0x209e408
	void StartAsyncLoadVaultAnimRes(bool IsTDM);// 0x209e388
	void StartAsyncLoadTeamVaultAnimRes();// 0x1eefba8
	void SetVaultData(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossmaxFalling, float crossmaxDis, Vector InHitPoint, Rotator movedir);// 0x209df78
	void SetPlayerStartPositionInternal(Vector InStartPosition, bool UseInputStart);// 0x209deb4
	void SetNowUseFpsVault();// 0x209dea0
	void SetLimitPostion(float XValue, float ZValue);// 0x209dde4
	void SetEnd();// 0x209ddd0
	void ServerRPC_VaultServer(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Actor* WindowActor, Rotator movedir);// 0x209d948
	void ServerRPC_StopVault();// 0x209d8ec
	void ServerRPC_FpsVaultServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x209d620
	void ServerFpsVaultBlockDisCheck(Vector StartPos, Vector topPos, out bool Result);// 0x209d510
	void ServerCrossingBlockCheck(Vector StartPos, float blockdis, float blockheight, Rotator movedir, out bool Result);// 0x209d370
	void ServerBlockDisCheck(Vector InHitPoint, FString Key, Vector StartPos, float blockdis, float blockheight, float BlockLength, Actor* InCheckActor, out bool Result);// 0x209d0a8
	void PredictAutoVault(float blockdis, Vector BlockNormalDir);// 0x209cfe8
	void OnRespawned_BlueprintImpl();// 0x2bb69b8
	void MulticastRPC_VaultFail(FString Reason);// 0x1f31b0c
	void MulticastRPC_VaultAll(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Rotator movedir);// 0x1f31798
	void MulticastRPC_StopVault();// 0x1f3177c
	void MulticastRPC_FpsVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x1f31538
	void LeaveAvoidSimulateCharacterShake();// 0x209cfd4
	void JumpVaultCheck(out bool Result);// 0x209cf4c
	void jumpFromUI();// 0x209cf38
	void IsVaultOnBase(out bool ShouldVault);// 0x209ceb0
	void IsValidVault(out bool IsValid);// 0x209ce28
	FString GetVaultKeyByBlockHeight(float Height);// 0x209cd18
	Rotator GetRelicateRotator();// 0x209ccd0
	void GetRealStartZHeight(out float ResStartZ);// 0x209cc48
	void GetPlayerStartPositionInternal(bool bRelationLoc, out Vector StartPos);// 0x209cb74
	void GetNowOppSideDis(out float Result);// 0x209caec
	void GetNowData(bool IsInFalling, out bool IsGet);// 0x209ca14
	void GetDataStartPosition(out Vector StartPos);// 0x209c990
	float GetCurHeightToLand();// 0x209c968
	void GetCrossMaxBlockDisOffset(out bool Result);// 0x209c8e0
	void GetCrossMaxBlockDisForward(out bool Result);// 0x209c858
	void GetCrossBlockMaxFallingHeight(out bool Result);// 0x209c7d0
	void FpsVaultUpdate();// 0x209c7bc
	void FpsVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool bIsjump, Rotator movedir, float blobkthick);// 0x209c578
	void FpsVaultStart(Vector StartPos, Vector topPos, float OffsetMaxX, float OffsetMaxY, bool bIsjump, Rotator InPlayerRotation, float BlockLength);// 0x209c340
	void FpsVaultServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool bIsjump, Rotator movedir, float blobkthick);// 0x209c0fc
	void ForwardTestObjectType(Actor* Actor, out bool Result);// 0x209c030
	void EnterAvoidSimulateCharacterShake();// 0x209c01c
	void EnableCulling(bool bEnable);// 0x209bf9c
	void DealBrokenWindows();// 0x209bf88
	void CheckVaultWindows(Vector CheckStart, Vector CheckEnd);// 0x209bec8
	void CheckUpLengthBlock(out bool Result);// 0x209be40
	void CheckNowisJumpAnimation(float Height, float thcikLength, out bool Result, out bool ishasAnimation);// 0x209bcd4
	void CheckIsValidByHeightCheckDis(float nowheight, float checkDis, out bool IsValid);// 0x209bbc4
	void CheckHeight(float Height, out bool IsActive, out Vector Point);// 0x209baa4
	void CheckForward(out bool IsActive);// 0x209ba1c
	void CheckCanVault(out bool IsActive);// 0x209b98c
	bool CheckCanStandOn();// 0x209b964
	void CacultLimitData();// 0x209b950
	void AutoVaultInternal();// 0x209b93c
	void AutoVault(STExtraBaseCharacter* Char, out const HitResult Impact);// 0x209b85c
	void AsyncLoadVaultAnimResFinish(byte PawnSubType);// 0x209b7e4

--------------------------------
Class: VaultDataParam
	FString montageSectionName;//[Offset: 0x0, Size: 12]
	CurveFloat* upCurve;//[Offset: 0xc, Size: 4]
	CurveFloat* forwardCurve;//[Offset: 0x10, Size: 4]
	float blockdis;//[Offset: 0x14, Size: 4]
	float blockheight;//[Offset: 0x18, Size: 4]
	float blokcThicklength;//[Offset: 0x1c, Size: 4]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool forceStartSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	float CountTime;//[Offset: 0x24, Size: 4]
	float playSpeed;//[Offset: 0x28, Size: 4]
	float speedChangeTime;//[Offset: 0x2c, Size: 4]
	float changeSpeedRate;//[Offset: 0x30, Size: 4]
	bool standState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool walkState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool SprintState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool isPutUpGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	float BreakWindowDelayTime;//[Offset: 0x38, Size: 4]
	bool isCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float MinCancelVTimer;//[Offset: 0x40, Size: 4]
	float MaxCancelVTimer;//[Offset: 0x44, Size: 4]
	bool fallingVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	float fallingvaultMinHeight;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: VaultCheckRule
	float CheckHeight;//[Offset: 0x0, Size: 4]
	float standCheckDis;//[Offset: 0x4, Size: 4]
	float walkCheckDis;//[Offset: 0x8, Size: 4]
	float sprintCheckDis;//[Offset: 0xc, Size: 4]

--------------------------------
Class: FpsVaultDataParam
	float Height;//[Offset: 0x0, Size: 4]
	FString montageName;//[Offset: 0x4, Size: 12]
	float TimeLength;//[Offset: 0x10, Size: 4]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float movespeed;//[Offset: 0x18, Size: 4]
	float SpeedRate;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: VaultAnimDataPath
	FString VaultAnimPath;//[Offset: 0x0, Size: 12]
	FString TeamVaultAnimPath;//[Offset: 0xc, Size: 12]

--------------------------------
Class: BP_SwimController_C.PlayerSwimComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x188, Size: 4]
	void EnterWater_BluePrint();// 0x2bb69b8
	void BP_UnderWaterStateChanged(bool bEnterWater);// 0x2bb69b8
	void ExecuteUbergraph_BP_SwimController(int EntryPoint, Pawn* CallFunc_GetPlayerPawn_ReturnValue, bool ___bool_Variable, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, AkAudioEvent* ___object_Variable, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, AkAudioEvent* ___object_Variable2, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetWaterObject_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, WaterSwimObject_C* K2Node_DynamicCast_AsWater_Swim_Object, bool K2Node_DynamicCast_bSuccess2, Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, CameraAnimInst* CallFunc_PlayCameraAnim_ReturnValue, Pawn* CallFunc_GetPlayerPawn_ReturnValue2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Rotator CallFunc_K2_GetComponentRotation_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, int CallFunc_PostEventAtLocation_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool K2Node_Event_bEnterWater, AkAudioEvent* K2Node_Select_Default, int CallFunc_PostEventAtLocation_ReturnValue2);// 0x2bb69b8

--------------------------------
Class: WaterSwimObject_C.WaterSwimActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x338, Size: 4]
	void SetWaterMaterial(int NewParam, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, MaterialInterface* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetObjectName_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetObjectName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x2bb69b8
	void RefreshWaterMaterial(PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInFight_ReturnValue);// 0x2bb69b8
	void DoTrySetWaterMaterial(int NewParam, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsSupportIndex_NewParam1, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, MaterialInterface* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void TrySetWaterMaterial(int NewParam);// 0x2bb69b8
	void IsSupportIndex(int NewParam, out bool NewParam1, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsSupportIndex_NewParam1, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetWeatherLevelName_ReturnValue, bool CallFunc_GetWaterReflectionSetting_ReturnValue, FString CallFunc_GetLoadWeatherName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_GetIsHighWeatherLevel_ReturnValue, RenderQualitySettings CallFunc_GetRenderQualityApplying_ReturnValue, bool CallFunc_IsOpenMSAA_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool CallFunc_GreaterEqual_ByteByte_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, GameInstance* CallFunc_GetGameInstance_ReturnValue2, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsSupportLDR_ReturnValue, bool CallFunc_IsOpenHDR_ReturnValue);// 0x2bb69b8
	void isNewIphone(out bool isNewIphone, FString CallFunc_GetActiveDeviceProfileName_ReturnValue, bool CallFunc_Set_Contains_ReturnValue);// 0x2bb69b8
	void SetWateMaterial(bool bHDR, bool CallFunc_IsHarmonyOS_ReturnValue, bool CallFunc_IsNewIphone_isNewIphone, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue2, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsOpenHDR_ReturnValue, bool CallFunc_IsSupportLDR_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue2, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue3);// 0x2bb69b8
	void HideUnderWaterEffect(StaticMeshComponent* WaterPlane, ExponentialHeightFogComponent* CamFog);// 0x2bb69b8
	void ShowUnderWaterEffect(StaticMeshComponent* WaterPlane, ExponentialHeightFogComponent* CamFog, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ExponentialHeightFog*[] CallFunc_GetAllActorsOfClass_OutActors, ExponentialHeightFog* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_PostAkEvent_ReturnValue);// 0x2bb69b8
	bool IsCapsult(Object* PlayerPawn, ActorComponent* Comp, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2bb69b8
	void UserConstructionScript();// 0x2bb69b8
	void BndEvt__PostSceneBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2bb69b8
	void BndEvt__PostSceneBox_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void CustomEvent(byte gamePawnEvent);// 0x2bb69b8
	void CustomEvent(int UserQualitySettingLevel);// 0x2bb69b8
	void ReceiveEndPlay(byte EndPlayReason);// 0x2bb69b8
	void CustomEvent(bool UserMsaaSetting);// 0x2bb69b8
	void CustomEvent(bool bOpenWaterReflection);// 0x2bb69b8
	void ExecuteUbergraph_WaterSwimObject(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool CallFunc_IsCapsult_returnvalue, bool CallFunc_IsCapsult_returnvalue2, STExtraPetCharacter* K2Node_DynamicCast_AsSTExtra_Pet_Character, bool K2Node_DynamicCast_bSuccess, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess2, interface classNone K2Node_DynamicCast_AsPet_Swim_Interface, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraPetCharacter* K2Node_DynamicCast_AsSTExtra_Pet_Character2, bool K2Node_DynamicCast_bSuccess4, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess5, interface classNone K2Node_DynamicCast_AsPet_Swim_Interface2, bool K2Node_DynamicCast_bSuccess6, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsDedicatedServer_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_IsDedicatedServer_ReturnValue2, bool CallFunc_IsDedicatedServer_ReturnValue3, byte K2Node_CustomEvent_gamePawnEvent, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess7, int K2Node_CustomEvent_UserQualitySettingLevel, byte K2Node_Event_EndPlayReason, bool CallFunc_IsDedicatedServer_ReturnValue4, GameInstance* CallFunc_GetGameInstance_ReturnValue2, bool K2Node_CustomEvent_UserMsaaSetting, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess8, bool K2Node_CustomEvent_bOpenWaterReflection, MaterialInterface*[] K2Node_MakeArray_Array, bool CallFunc_ActorHasTag_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_IsValid_ReturnValue7, int CallFunc_GetPlatformInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x2bb69b8
	GameEventListener* GameEventListener;//[Offset: 0x33c, Size: 4]
	ParticleSystemComponent* P_Water_down_01;//[Offset: 0x340, Size: 4]
	AkComponent* Ak;//[Offset: 0x344, Size: 4]
	PostProcessComponent* PostProcess;//[Offset: 0x348, Size: 4]
	BoxComponent* PostSceneBox;//[Offset: 0x34c, Size: 4]
	StaticMeshComponent* watermesh;//[Offset: 0x350, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x354, Size: 4]
	float Gamma;//[Offset: 0x358, Size: 4]
	PostProcessSettings NewVar;//[Offset: 0x360, Size: 1328]
	STExtraBaseCharacter*[] playerList;//[Offset: 0x890, Size: 12]
	byte NewVar;//[Offset: 0x89c, Size: 1]
	float FogDensity;//[Offset: 0x8a0, Size: 4]
	ExponentialHeightFog* HeightFog;//[Offset: 0x8a4, Size: 4]
	MaterialInstanceDynamic* NoHDRWater;//[Offset: 0x8a8, Size: 4]
	MaterialInstanceDynamic* HDROcean;//[Offset: 0x8ac, Size: 4]
	MaterialInstanceDynamic* HDRSwamp;//[Offset: 0x8b0, Size: 4]
	MaterialInterface* HDROceanMaterial;//[Offset: 0x8b4, Size: 4]
	MaterialInterface* SUPHDROceanMaterial;//[Offset: 0x8b8, Size: 4]
	MaterialInterface* HDRSwampMaterial;//[Offset: 0x8bc, Size: 4]
	MaterialInterface* SUPHDRSwampMaterial;//[Offset: 0x8c0, Size: 4]
	MaterialInterface* NoHDRWaterMaterial;//[Offset: 0x8c4, Size: 4]
	int CurrentMaterialIndex;//[Offset: 0x8c8, Size: 4]
	MaterialInterface*[] MaterialList;//[Offset: 0x8cc, Size: 12]
	bool IsSetSwamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d8, Size: 1]
	<FString> newIOSDevice;//[Offset: 0x8dc, Size: 60]
	MaterialInterface* WaterMaterial_SUP_HDR;//[Offset: 0x918, Size: 4]
	MaterialInterface* WaterMaterial_HDR;//[Offset: 0x91c, Size: 4]
	MaterialInterface* WaterMaterial_Normal;//[Offset: 0x920, Size: 4]
	bool IsIphoneNewWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x924, Size: 1]

--------------------------------
Class: GameEventListener.ActorComponent.Object
	delegate OnGameEventListener;//[Offset: 0xbc, Size: 12]
	float HeightCheck_High;//[Offset: 0xc8, Size: 4]
	float HeightCheck_Mid;//[Offset: 0xcc, Size: 4]
	float HeightCheck_Low;//[Offset: 0xd0, Size: 4]
	float FlyingScreenSizeCullingFactor;//[Offset: 0xd8, Size: 4]
	float FlyingDistanceCullingFactor;//[Offset: 0xdc, Size: 4]
	float HighMidFightingScreenSizeCullingFactor;//[Offset: 0xe0, Size: 4]
	float HighMidFightingDistanceCullingFactor;//[Offset: 0xe4, Size: 4]
	float LowFightingScreenSizeCullingFactor;//[Offset: 0xe8, Size: 4]
	float LowFightingDistanceCullingFactor;//[Offset: 0xec, Size: 4]
	float HighFastSpeedMoveScreenFactor;//[Offset: 0xf0, Size: 4]
	float HighFastSpeedMoveCullFactor;//[Offset: 0xf4, Size: 4]
	float MidLowFastSpeedScreenFactor;//[Offset: 0xf8, Size: 4]
	float MidLowFastSpeedMoveCullFactor;//[Offset: 0xfc, Size: 4]
	float DelaySecondsForExitNgiht;//[Offset: 0x104, Size: 4]
	float[] LODDistanceScaleAtNight;//[Offset: 0x108, Size: 12]
	float[] ViewDistanceScaleAtNight;//[Offset: 0x118, Size: 12]
	float[] FoliageViewDistanceScaleAtNight;//[Offset: 0x128, Size: 12]
	float[] ScreenSizeCullingFactorAtNight;//[Offset: 0x138, Size: 12]
	bool bUsetoControlNearClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	bool bNearClipInPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 1]
	int NearClipLanded;//[Offset: 0x14c, Size: 4]
	int NearClipFlying;//[Offset: 0x150, Size: 4]
	void StarCalcJump();// 0x1fdfa54
	void SetClearPlaneFast(int Val);// 0x1fdf9dc
	void ScaleScreenSizeCulling(byte pawnevent);// 0x1fdf964
	void ScaleCullingFastMode(byte pawnevent);// 0x1fdf8ec
	bool ScaleCullingFast(float ScreenSize, float Distance);// 0x1fdf828
	void OnChangeViewTarget();// 0x1fdf814
	bool IsPlayerLandFromTheAir();// 0x1fdf7ec
	bool IsPlayerLanded();// 0x1fdf7c4
	bool IsPlayerFlying();// 0x1fdf79c
	void HeightCheck();// 0x1fdf788
	void GameEventReBirth();// 0x1fdf774
	void GameEventPlane_KeepNearClipNotChanged();// 0x1fdf760
	void GameEventPlane();// 0x1fdf74c
	void GameEventParachute();// 0x1fdf738
	void GameEventLanded();// 0x1fdf724
	void GameEventJump();// 0x1fdf710
	void GameEventFinished();// 0x1fdf6fc
	void GameEventFighting();// 0x1fdf6e8
	void GameEventExitNight();// 0x1fdf6d4
	void GameEventEnterNight();// 0x1fdf6c0
	void GameEventDie(float currentHP, float ratioHP);// 0x1fdf604
	void GameEventBirth();// 0x1fdf5f0
	void ChangeViewtargetToPlane();// 0x1fdf5dc

--------------------------------
Class: BP_AutoAimingComponent_C.WeaponAutoAimingComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3d8, Size: 4]
	bool CheckInAngle(STExtraBaseCharacter* EnemyPawn, float MaxAngle, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Normal_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue, float CallFunc_DegAcos_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2bb69b8
	bool CheckSmoke(out Vector StartPoint, out Vector EndPoint, STExtraPlayerCharacter* Pawn, out FName OutHitBoneName, Rotator CallFunc_FindLookAtRotation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_VSize_ReturnValue, Actor*[] ___object_Variable, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, STExtraCharacter* K2Node_DynamicCast_AsSTExtra_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2bb69b8
	bool CanEnemeyRaycastReach(out Vector StartPoint, out Vector EndPoint, STExtraPlayerCharacter* Pawn, out FName OutHitBoneName, Vector CallFunc_Subtract_VectorVector_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_VSize_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Actor*[] ___object_Variable, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_IsValid_ReturnValue, STExtraVehicleWarVehicle* K2Node_DynamicCast_AsSTExtra_Vehicle_War_Vehicle, bool K2Node_DynamicCast_bSuccess, STExtraCharacter* K2Node_DynamicCast_AsSTExtra_Character, bool K2Node_DynamicCast_bSuccess2, STExtraFloatingVehicle* K2Node_DynamicCast_AsSTExtra_Floating_Vehicle, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, STExtraWheeledVehicle* K2Node_DynamicCast_AsSTExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess4);// 0x2bb69b8
	void BPDrawDebugInfo(out const float[] AutoAimParams);// 0x2bb69b8
	void ExecuteUbergraph_BP_AutoAimingComponent(int EntryPoint, bool CallFunc_IsValid_ReturnValue, float[] K2Node_Event_AutoAimParams, PlayerController* CallFunc_GetPlayerController_ReturnValue, UserWidget* CallFunc_CreateWidgetByClass_ReturnValue, AutoAimDebug_C* K2Node_DynamicCast_AsAuto_Aim_Debug, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	byte DrawDebugType;//[Offset: 0x3dc, Size: 1]
	UserWidget* DebugUI;//[Offset: 0x3e0, Size: 4]

--------------------------------
Class: STExtraVehicleWarVehicle.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	VehicleWarLockData VehicleWarLockData;//[Offset: 0x1214, Size: 8]
	byte CurVehicleWarBeLockedState;//[Offset: 0x121c, Size: 1]
	delegate OnVehicleWarBeLockedStateChangedDelegate;//[Offset: 0x1220, Size: 12]
	delegate OnVehicleWarKillInfoDelegate;//[Offset: 0x122c, Size: 12]
	VehicleWarVehicleReceiveDamageRecord[] VehicleWarVehicleReceiveDamageRecordArray;//[Offset: 0x1238, Size: 12]
	delegate ForceShowVehicleHPBarDelegate;//[Offset: 0x1244, Size: 12]
	float DamageRecordExitTime;//[Offset: 0x1250, Size: 4]
	float TickVehicleTireFrictionInterval;//[Offset: 0x1254, Size: 4]
	float DefaultTurnOverBroadcastTime;//[Offset: 0x125c, Size: 4]
	float CurTurnOverBroadcastTime;//[Offset: 0x1260, Size: 4]
	delegate OnVehicleWarVehicleTurnOver;//[Offset: 0x1264, Size: 12]
	float MinTurnOverDegree;//[Offset: 0x1270, Size: 4]
	float CheckBlockInterval;//[Offset: 0x1274, Size: 4]
	float BlockResetInterval;//[Offset: 0x127c, Size: 4]
	float MaxBlockVelocity;//[Offset: 0x1280, Size: 4]
	float MaxBlockNotInAirWheelNums;//[Offset: 0x1284, Size: 4]
	int MaxCheckTurnOverCount;//[Offset: 0x128c, Size: 4]
	int MaxCheckBlockCount;//[Offset: 0x1294, Size: 4]
	delegate OnVehicleWarVehicleBlockedDelegate;//[Offset: 0x129c, Size: 12]
	bool bOpenShieldHitProtectEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a8, Size: 1]
	int ShieldSkillID;//[Offset: 0x12ac, Size: 4]
	SoftObjectPath ShieldHitProtectEffectPath;//[Offset: 0x12b0, Size: 24]
	bool bTeammateVehicleDamageFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c8, Size: 1]
	bool bEnableActivePhysicsWhenChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c9, Size: 1]
	PhysicsAsset* SimplePhysicsAsset;//[Offset: 0x12cc, Size: 4]
	bool bEnableCheckBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d0, Size: 1]
	void UpdateOwnerLockedState();// 0x22435f4
	void TickCheckBlockAndAutoTurn();// 0x22435e0
	void StartAllowAvatarOutline();// 0x22435cc
	void SetVehicleMass(float NewMass, bool bAddToCurrent);// 0x2243508
	void ServerChangeWeaponRotation(STExtraWeapon* Weapon, Rotator InRot);// 0x2243444
	void Server_ChangeLockState(byte InState, Actor* CurLockTarget);// 0x2243348
	void RPCServerChangeWeaponRotation(STExtraWeapon* Weapon, Rotator Rot);// 0x2243244
	void ReqResetBlockPosition();// 0x22431e8
	void RemoveOfflineBuffToPlayer(STExtraPlayerCharacter* InPlayer);// 0x2bb69b8
	void ProcessAvatarOutline();// 0x1f378b0
	void OnVehicleWarKillInfoDelegate__DelegateSignature(out const VehicleWarKillInfoData VehicleWarKillInfoData);// 0x2bb69b8
	void OnVehicleWarBeLockedStateChangedDelegate__DelegateSignature(byte VehicleWarBeLockedState);// 0x2bb69b8
	void OnRep_VehicleWarVehicleReceiveDamageRecordArray();// 0x22431d4
	void OnRep_VehicleWarLockData();// 0x22431c0
	bool IsVehicleTurnOver();// 0x2243198
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x2238e54
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x2238d4c
	void ForceShowVehicleHPBarDelegate__DelegateSignature(bool bNewShow);// 0x2bb69b8
	void DelayNotifyClientVehicleWarRespawnCallback();// 0x2243184
	void CheckOnePlayerInFighting();// 0x2243170
	void ChangeToSimplePhysicsAsset();// 0x224315c
	void BroadCastFatalDamage(const VehicleWarKillInfoData VehicleWarKillInfoData);// 0x224305c
	void BPTickCheckBlockAndAutoTurn();// 0x2bb69b8
	void AddOfflineBuffToPlayer(STExtraPlayerCharacter* InPlayer);// 0x2bb69b8

--------------------------------
Class: VehicleWarLockData
	byte LockState;//[Offset: 0x0, Size: 1]
	Actor* LockTarget;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleWarVehicleReceiveDamageRecord
	int DamageFromTeamID;//[Offset: 0x0, Size: 4]

--------------------------------
Class: VehicleWarKillInfoData
	int DamageType;//[Offset: 0x0, Size: 4]
	int AdditionalParam;//[Offset: 0x4, Size: 4]
	FString CauserName;//[Offset: 0x8, Size: 12]
	FString CauserNation;//[Offset: 0x14, Size: 12]
	FString VictimName;//[Offset: 0x20, Size: 12]
	FString VictimNation;//[Offset: 0x2c, Size: 12]
	FString KillerIconURL;//[Offset: 0x38, Size: 12]
	int KillerPlayerLevel;//[Offset: 0x44, Size: 4]
	int KillerAvatarBoxId;//[Offset: 0x48, Size: 4]
	float TotalDamage;//[Offset: 0x4c, Size: 4]
	bool IsCooperationKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int KillerTeamId;//[Offset: 0x54, Size: 4]
	int VictimTeamID;//[Offset: 0x58, Size: 4]
	float ThisDamage;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: STExtraFloatingVehicle.STExtraVehicleBase.Pawn.Actor.Object
	float BoostModifier;//[Offset: 0xf70, Size: 4]
	STExtraFloatingVehicleMovementComponent* FloatingVehicleMovement;//[Offset: 0xf74, Size: 4]
	void HandleOnMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x219f1e8
	Vector GetRotationInputDir();// 0x2143b40

--------------------------------
Class: STExtraFloatingVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxAcceleration;//[Offset: 0x124, Size: 4]
	float StartAccelerationRate;//[Offset: 0x128, Size: 4]
	float StopAccelerationRate;//[Offset: 0x12c, Size: 4]
	float MaxRotationYawAngle;//[Offset: 0x130, Size: 4]
	float RotationYawRate;//[Offset: 0x134, Size: 4]
	float BackwardForceScale;//[Offset: 0x138, Size: 4]
	float Acceleration;//[Offset: 0x13c, Size: 4]
	float RotationYawAngle;//[Offset: 0x140, Size: 4]
	FName ApplyForceSocketName;//[Offset: 0x148, Size: 8]
	CurveFloat* SlideCompensationCurve;//[Offset: 0x150, Size: 4]
	bool bClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	float STThrottleInput;//[Offset: 0x160, Size: 4]
	float STSteeringInput;//[Offset: 0x164, Size: 4]
	BuoyancyForceComponent* buoyancyForce;//[Offset: 0x16c, Size: 4]
	bool DisableWhenTurnOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	float MinTurnOverDegree;//[Offset: 0x178, Size: 4]
	void ServerUpdateInput(float InSteeringInput, float InThrottleInput);// 0x219f6e0
	float GetThrottleInput();// 0x219f6c4
	float GetSteeringInput();// 0x219f6a8

--------------------------------
Class: AutoAimDebug_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1b8, Size: 4]
	FText Get_TextBlock_7_Text(FText CallFunc_Conv_IntToText_ReturnValue);// 0x2bb69b8
	FText Get_TextBlock_3_Text(FText CallFunc_Conv_FloatToText_ReturnValue);// 0x2bb69b8
	void HandleDamage(bool NewParam, bool NewParam1);// 0x2bb69b8
	FText Get_TextBlock_14_Text(FText CallFunc_Conv_IntToText_ReturnValue);// 0x2bb69b8
	FText Get_TextBlock_12_Text(FText CallFunc_Conv_IntToText_ReturnValue);// 0x2bb69b8
	void OnPaint(out PaintContext Context, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue2, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2bb69b8
	void DrawDebug(out float[] DebugInfo, float[] InDebugInfo, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item2, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Array_Add_ReturnValue, float CallFunc_Array_Get_Item3, TextBlock* CallFunc_Array_Get_Item4, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, float CallFunc_Array_Get_Item5, bool CallFunc_Less_IntInt_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue);// 0x2bb69b8
	void Construct();// 0x2bb69b8
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2bb69b8
	void OnEquip(STExtraWeapon* Weapon, byte Slot);// 0x2bb69b8
	void CustomEvent();// 0x2bb69b8
	void CustomEvent();// 0x2bb69b8
	void CustomEvent(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet);// 0x2bb69b8
	void CustomEvent(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet, out const HitResult HitRet);// 0x2bb69b8
	void CustomEvent(float Damage, out const DamageEvent DamageEvent, Actor* Casuer, Actor* Victim);// 0x2bb69b8
	void ExecuteUbergraph_AutoAimDebug(int EntryPoint, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Add_ReturnValue3, int CallFunc_Array_Add_ReturnValue4, int CallFunc_Array_Add_ReturnValue5, int CallFunc_Array_Add_ReturnValue6, int CallFunc_Array_Add_ReturnValue7, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraWeapon* K2Node_CustomEvent_weapon, byte K2Node_CustomEvent_Slot, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, STExtraShootWeapon* K2Node_CustomEvent_ShootWeapon2, STExtraShootWeaponBulletBase* K2Node_CustomEvent_Bullet2, STExtraShootWeapon* K2Node_CustomEvent_ShootWeapon, STExtraShootWeaponBulletBase* K2Node_CustomEvent_Bullet, const HitResult K2Node_CustomEvent_HitRet, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Pawn* CallFunc_GetOwnerPawn_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character2, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_StrStr_ReturnValue, enum CallFunc_GetHitBodyTypeByHitPos_ReturnValue, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess4, int CallFunc_Add_IntInt_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate6, PlayerController* CallFunc_GetPlayerController_ReturnValue2, Pawn* CallFunc_K2_GetPawn_ReturnValue2, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character3, bool K2Node_DynamicCast_bSuccess5, float K2Node_CustomEvent_Damage, const DamageEvent K2Node_CustomEvent_DamageEvent, Actor* K2Node_CustomEvent_Casuer, Actor* K2Node_CustomEvent_Victim, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, STExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon2, bool K2Node_DynamicCast_bSuccess6, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue3, int CallFunc_Subtract_IntInt_ReturnValue);// 0x2bb69b8
	TextBlock* t1;//[Offset: 0x1bc, Size: 4]
	TextBlock* t2;//[Offset: 0x1c0, Size: 4]
	TextBlock* t3;//[Offset: 0x1c4, Size: 4]
	TextBlock* t4;//[Offset: 0x1c8, Size: 4]
	TextBlock* t5;//[Offset: 0x1cc, Size: 4]
	TextBlock* t6;//[Offset: 0x1d0, Size: 4]
	TextBlock* t7;//[Offset: 0x1d4, Size: 4]
	TextBlock* TextBlock;//[Offset: 0x1d8, Size: 4]
	TextBlock* TextBlock;//[Offset: 0x1dc, Size: 4]
	TextBlock* TextBlock;//[Offset: 0x1e0, Size: 4]
	TextBlock* TextBlock;//[Offset: 0x1e4, Size: 4]
	TextBlock*[] TextWidgetArray;//[Offset: 0x1e8, Size: 12]
	float LastAimTime;//[Offset: 0x1f4, Size: 4]
	float[] AimDelta;//[Offset: 0x1f8, Size: 12]
	int Debug_Hit_Num;//[Offset: 0x204, Size: 4]
	int Debug_Miss_Num;//[Offset: 0x208, Size: 4]
	float Damage;//[Offset: 0x20c, Size: 4]
	int headShot;//[Offset: 0x210, Size: 4]

--------------------------------
Class: CameraSettingComponent_C.ActorComponent.Object
	void SaveCurCameraSetting(SpringArmComponent* SprintArm);// 0x2bb69b8
	void LerpCameraSettings(float LerpAlpha, STR_CameraSetting CameraSettings, SpringArmComponent* SpringArm, SpringArmComponent* TargetSpringArm, Vector TargetSocketOffset, float TargetLagSpeed, float TargetSpringArmLength, float Alpha, Vector CallFunc_VLerp_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue2);// 0x2bb69b8
	float Current Target Arm Length;//[Offset: 0xc0, Size: 4]
	float CurrentCameraLagSpeed;//[Offset: 0xc4, Size: 4]
	Vector CurrentSocketOffset;//[Offset: 0xc8, Size: 12]

--------------------------------
Class: BP_WateringArea_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x300, Size: 4]
	void OnAreaOverlapEnd(Object* Object, bool CallFunc_HasAuthority_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, STExtraPlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2);// 0x2bb69b8
	void OnAreaOverlapBegin(Object* Object, bool CallFunc_HasAuthority_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AllowWater_bCanEnter, STExtraPlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_Array_Contains_ReturnValue);// 0x2bb69b8
	void StartDrop(Vector CallFunc_K2_GetActorLocation_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, WaitDropData K2Node_MakeStruct_WaitDropData, bool CallFunc_IsValid_ReturnValue, ItemDropMgrComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x2bb69b8
	void UserConstructionScript();// 0x2bb69b8
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2bb69b8
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x2bb69b8
	void ShowAnimationButton(BP_PlayerPawn_C* PlayerPawn, bool IsShow);// 0x2bb69b8
	void ServerDoWaterLogic(out const PlayerController* PlayerController);// 0x2bb69b8
	void OnWateringUIChanged(bool Show);// 0x2bb69b8
	void DelayResetParticleCD();// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void SpawnTreeParticle();// 0x2bb69b8
	void CustomEvent();// 0x2bb69b8
	void ExecuteUbergraph_BP_WateringArea(int EntryPoint, BP_WateringArea_C* ___object_Variable, int ___int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FString ___string_Variable, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, BP_PlayerPawn_C* K2Node_CustomEvent_PlayerPawn, bool K2Node_CustomEvent_IsShow, const PlayerController* K2Node_CustomEvent_PlayerController, Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool K2Node_CustomEvent_Show, FString ___string_Variable2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, Vector CallFunc_K2_GetComponentLocation_ReturnValue, bool ___bool_Variable, bool CallFunc_IsValid_ReturnValue4, FString K2Node_Select_Default, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool ___bool_Variable2, BP_WateringArea_C* K2Node_Select2_Default, int CallFunc_PostAkEvent_ReturnValue, int CallFunc_PostAkEvent_ReturnValue2, int CallFunc_PostAkEvent_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2);// 0x2bb69b8
	StaticMeshComponent* ReplaceMesh;//[Offset: 0x304, Size: 4]
	StaticMeshComponent* FormerMesh;//[Offset: 0x308, Size: 4]
	SceneComponent* LoopParticlePoint;//[Offset: 0x30c, Size: 4]
	AkComponent* Ak;//[Offset: 0x310, Size: 4]
	SceneComponent* ParticleSpawnPoint;//[Offset: 0x314, Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x318, Size: 4]
	SphereComponent* Sphere;//[Offset: 0x31c, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x320, Size: 4]
	ParticleSystemComponent* ParticleSystemRef;//[Offset: 0x324, Size: 4]
	PlayerController*[] WaterDoneList;//[Offset: 0x328, Size: 12]
	TimerHandle TimerHandle;//[Offset: 0x338, Size: 8]
	int[] DropPlanIDList;//[Offset: 0x340, Size: 12]
	bool bShowLoopParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	FString ShowButtonTextID;//[Offset: 0x350, Size: 12]
	PaperSprite* ShowButtonPic;//[Offset: 0x35c, Size: 4]
	ParticleSystem* ParticleTrigger;//[Offset: 0x360, Size: 4]
	Vector ParticleTriggerPos;//[Offset: 0x364, Size: 12]
	ParticleSystem* ParticleLoop;//[Offset: 0x370, Size: 4]
	Vector ParticleLoopPos;//[Offset: 0x374, Size: 12]
	float ParticleLoopWait;//[Offset: 0x380, Size: 4]
	AkAudioEvent* AudioTrigger;//[Offset: 0x384, Size: 4]
	AkAudioEvent* AudioParticleLoop;//[Offset: 0x388, Size: 4]
	AkAudioEvent* AudioLoop;//[Offset: 0x38c, Size: 4]
	bool IsCandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	int ActivityButtonId;//[Offset: 0x394, Size: 4]

--------------------------------
Class: WaitDropData
	STExtraBaseCharacter* KillerPawn;//[Offset: 0x0, Size: 4]
	FString DeadPawnDesc;//[Offset: 0x4, Size: 12]
	Vector DropGroundPoint;//[Offset: 0x10, Size: 12]
	class PlayerTombBox* DropTomb;//[Offset: 0x1c, Size: 4]
	int[] DropPlanIDList;//[Offset: 0x20, Size: 12]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]

--------------------------------
Class: ItemDropMgrComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x100, Size: 12]
	bool GM_CloseItemDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	int GM_SpawnItemFrame;//[Offset: 0x110, Size: 4]
	bool bEnableAIBulletDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	class PlayerTombBox* DefaultTomb;//[Offset: 0x118, Size: 4]
	class PlayerRemainTombBox* LastGameRemainTomb;//[Offset: 0x11c, Size: 4]
	FString DropItemCfgTableName;//[Offset: 0x120, Size: 12]
	FString DropItemRuleTableName;//[Offset: 0x12c, Size: 12]
	int GridStep;//[Offset: 0x138, Size: 4]
	WaitDropData[] WaitDropList;//[Offset: 0x13c, Size: 12]
	int MaxRandomWeight;//[Offset: 0x148, Size: 4]
	bool bEnableDropItemAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 1]
	float RadiusStep;//[Offset: 0x150, Size: 4]
	float ZBias;//[Offset: 0x154, Size: 4]
	float LookUpDistance;//[Offset: 0x158, Size: 4]
	UAEDataTable* DropRuleTable;//[Offset: 0x15c, Size: 4]
	Property*[] DropRuleTablePropertys;//[Offset: 0x160, Size: 12]
	UAEDataTable* DropConfigTable;//[Offset: 0x16c, Size: 4]
	int CurSpawnItemFrame;//[Offset: 0x170, Size: 4]
	<int,DropIDData> DropIDMap;//[Offset: 0x174, Size: 60]
	FString RemainItemRuleTableName;//[Offset: 0x1b0, Size: 12]
	RemainItemRuleDataRow[] RemainItemRuleList;//[Offset: 0x1bc, Size: 12]
	Vector TraceGroundPoint(Vector StartPos, Actor* IgnoreActor);// 0x202f2d8
	int PickItemByUnionRandom(float WeightCount, out RandomDropData[] WeightMap);// 0x202f1e0
	int PickItemByIndependentRandom(float Weight);// 0x202f160
	void NavMeshDrop(out const DropToGroundData[] PropDatas, Transform PawnTrans, bool bDropedByPlayer);// 0x202efb0
	void InitRemainItemRuleTable();// 0x202ef90
	void InitDropIDMap();// 0x202ef7c
	void HandleActorDie(Actor* Actor, Actor* Killer);// 0x202eec0
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x202eda0
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x202ed08
	void GetWeaponBulletNum(STExtraBaseCharacter* Character, STExtraWeapon* TWeapon, out int BulletID, out int BulletClipNum, out int BulletPackageNum, out int BulletClipMaxNum);// 0x202eaec
	LastGameRemainItemData GetRemainItemData(out PickUpItemData[] ItemDataList, STExtraPlayerController* PC);// 0x202e93c
	void GetMonsterBulletDropIdList(out int[] DropIdList, out int[] DropParams, MonsterSingleBulletDropIds[] BulletDropIds);// 0x202e6e4
	FString GetDropItemCfgList(out DropItemConfig[] DropList, int DropConfigID);// 0x202e548
	void GetDropIdList(out int[] DropIdList, MonsterSingleDropIds[] DropIds);// 0x202e2a4
	int GetCountStrNum(FString CountStr);// 0x202e144
	void GetBulletDropListByPlanIDs(Actor* Killer, out int[] BulletDropPlanIDList, out int[] BulletDropParams, out int[] DropIdList);// 0x202df00
	PickUpItemData[] GeneratePickupListByDropID(int DropConfigID);// 0x202de54
	DropPropData[] GenerateItemAttachments(int ItemId, int MinNum, int MaxNum);// 0x202dcb8
	void DropToTombBox(out const PickUpItemData[] PropData, out WaitDropData DropData);// 0x202db30
	void DropToTarget(ItemDefineID DefineID, int Count, BackpackComponent* BackPack);// 0x202da20
	void DropToGround(out const DropToGroundData PropData, Transform WrapperTrans, bool bDropedByPlayer, Actor* InAttachActor);// 0x202d780
	void DropOutItems(out WaitDropData DropData, out DropPropData[] DropItems);// 0x202d5d8
	void DropLastGameRemainTombBox(LastGameRemainItemData LastGameRemainItemData);// 0x202d49c
	void CheckNeedDropItem();// 0x202d488
	void CheckMonsterAddBulletDrop(Actor* Actor, Actor* Killer, out int[] DropIdList);// 0x202d334
	void CheckCharacterAddBulletDrop(Actor* Actor, Actor* Killer, out int[] DropIdList);// 0x202d1e0
	bool CheckCanRemain(ItemRecordData ItemRecord);// 0x202d0e4
	void CalcDropItemListByDropRule(out DropPropData[] DropItemList, int DropPlanId);// 0x202cfd0
	void CalcDropItemListByDropCfg(out const DropItemConfig DropRuleCfg, out DropPropData[] ItemList);// 0x202cea0
	void BulletDropStrategy(out int[] BulletIdList, out int[] BulletIdNum, out int[] BulletDropPlanIDList, out int[] BulletDropParams, out int[] DropIdList, out int[] BulletClipMaxNum);// 0x202cadc
	void BulletDropById(int BulletID, out int[] BulletDropPlanIDList, out int[] DropIdList);// 0x202c934
	void AddToWaitDropList(out const WaitDropData AddWaitDropData);// 0x202c824

--------------------------------
Class: DropIDData
	FName[] DropRowList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: RemainItemRuleDataRow
	int KeyID;//[Offset: 0x0, Size: 4]
	int ItemId;//[Offset: 0x4, Size: 4]
	int itemType;//[Offset: 0x8, Size: 4]
	int ItemSubType;//[Offset: 0xc, Size: 4]
	int RemainPerc;//[Offset: 0x10, Size: 4]

--------------------------------
Class: RandomDropData
	int[] ItemIdList;//[Offset: 0x0, Size: 12]
	int RuleID;//[Offset: 0xc, Size: 4]
	int[] ItemCountList;//[Offset: 0x10, Size: 12]
	float Weight;//[Offset: 0x1c, Size: 4]
	int DropMode;//[Offset: 0x20, Size: 4]
	int MinAttachment;//[Offset: 0x24, Size: 4]
	int MaxAttachment;//[Offset: 0x28, Size: 4]
	int ItemIDStyle;//[Offset: 0x2c, Size: 4]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: DropToGroundData
	PickUpItemData PickUpItemData;//[Offset: 0x0, Size: 48]
	int ItemId;//[Offset: 0x30, Size: 4]

--------------------------------
Class: MonsterSingleBulletDropIds
	int[] BulletDropIds;//[Offset: 0x0, Size: 12]
	int[] BulletDropParams;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MonsterSingleDropIds

--------------------------------
Class: PaperSprite.Object
	Vector2D SourceUV;//[Offset: 0x24, Size: 8]
	Vector2D SourceDimension;//[Offset: 0x2c, Size: 8]
	Texture2D* SourceTexture;//[Offset: 0x34, Size: 4]
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 12]
	Vector2D BakedSourceUV;//[Offset: 0x44, Size: 8]
	Vector2D BakedSourceDimension;//[Offset: 0x4c, Size: 8]
	Texture2D* BakedSourceTexture;//[Offset: 0x54, Size: 4]
	MaterialInterface* DefaultMaterial;//[Offset: 0x58, Size: 4]
	MaterialInterface* AlternateMaterial;//[Offset: 0x5c, Size: 4]
	PaperSpriteSocket[] Sockets;//[Offset: 0x60, Size: 12]
	byte SpriteCollisionDomain;//[Offset: 0x6c, Size: 1]
	float PixelsPerUnrealUnit;//[Offset: 0x70, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x74, Size: 4]
	int AlternateMaterialSplitIndex;//[Offset: 0x78, Size: 4]
	Vector4[] BakedRenderData;//[Offset: 0x7c, Size: 12]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 48]
	FName SocketName;//[Offset: 0x30, Size: 8]

--------------------------------
Class: InGameUIManager.GameBusinessManager.LogicManagerBase.Object
	class Object[] InGameUIList;//[Offset: 0x108, Size: 12]
	<FString,UAEUserWidget*> WidgetsMap;//[Offset: 0x160, Size: 60]
	<int,DynamicWidgetAsyncLoadData> PendingAsyncLoadRequests;//[Offset: 0x19c, Size: 60]
	void SubUIWidgetListWithMountData(out const InGameWidgetData[] InGameWidgetDataList, out const FString[] GameStatusStrList, bool InPersistentUI, bool InUsedByControler, bool InOberverOnly, int inUIControlState);// 0x2641fec
	void SubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList, out const FString[] GameStatusStrList, bool InPersistentUI, bool InUsedByControler, bool InOberverOnly);// 0x2641d44
	void SubDynamicUIWidgetList(out const DynamicWidgetData[] DynamicWidgetMap);// 0x2641c00
	void OnAsyncLoadWidgetClassObj(Object* InClassObj, int RequestID);// 0x2641b44
	void HandleUIMessage(FString UIMessage);// 0x2641a88
	void HandleMountWidget(InGameUIManager* IngameManager);// 0x2641a10
	void HandleDynamicDestroy();// 0x26419fc
	void HandleDynamicCreation(bool isAsyncLoad);// 0x264197c
	void GetWidgetHandleAsyncWithCallBack(FString WidgetKey, delegate InCallback);// 0x2641850
	UAEUserWidget* GetWidgetHandle(FString WidgetKey);// 0x264178c
	CanvasPanel* GetMountCanvasPanel(FString MountOuterName, FString MountName);// 0x2641644
	void ChangeSubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList);// 0x2641598

--------------------------------
Class: GameBusinessManager.LogicManagerBase.Object
	GameWidgetConfig[] WidgetConfigList;//[Offset: 0xb0, Size: 12]
	UAEPlayerController* OwningController;//[Offset: 0xf8, Size: 4]
	LuaClassObj* LuaObject;//[Offset: 0x100, Size: 4]
	UAEUserWidget* GetWidget(int Index);// 0x262a760
	LuaClassObj* GetLuaObject();// 0x2309134
	GameFrontendHUD* GetGameFrontendHUD();// 0x262a738

--------------------------------
Class: GameWidgetConfig
	FString Path;//[Offset: 0x0, Size: 12]
	FString Container;//[Offset: 0xc, Size: 12]
	int ZOrder;//[Offset: 0x18, Size: 4]
	class Object* WidgetClass;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: LuaClassObj.LuaContext.Actor.Object
	GameBusinessManager* pManager;//[Offset: 0x308, Size: 4]
	bool bClearSourceCodeAfterInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e, Size: 1]
	void SubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList, out const FString[] GameStatusStrList, bool bPersistentUI, bool InStatusConcern, bool bDynamicWidget, bool bKeepDynamicWidget);// 0x26481ec
	void SubShowHideEvent(out const FString[] WidgetPathList);// 0x26480b8
	void SubDefaultSceneCamera(const int sceneCameraIndex);// 0x2648040
	void SubDefaultChildUI(out const FString[] childList);// 0x2647f0c
	void SubDefaultBaseUI(FString baseUI);// 0x2647e50
	void SubCollapseWidgetList(FString RootWidgetName, out FString[] ChildWidgetNames);// 0x2647c98
	void SetWidgetZorder(const int Index, const int ZOrder);// 0x2647bdc
	void RestoreWidgetZorder(const int Index);// 0x2647b64
	void RestoreAllWidgetZorder();// 0x2647b50
	bool IsTopStackPanel();// 0x2647b28
	bool IsPushedPanel();// 0x2647b00
	bool InCombatState();// 0x2647ad8
	void HandleUIMessageNoFetch(FString UIMessage);// 0x2647a1c
	void HandleUIMessage(FString UIMessage);// 0x2647960
	void HandleStopAsyncLoad();// 0x264794c
	void HandleDynamicDestroy();// 0x2647938
	void HandleDynamicCreationInternal(bool isAsyncLoad);// 0x26478b8
	void HandleDynamicCreation(bool isAsyncLoad);// 0x2647838
	void HandleCollapseWidgetList(FString RootWidgetName);// 0x264777c
	FString GetTopStackPanelSrcTag();// 0x26476bc
	FString GetTopStackPanelDstTag();// 0x26475fc
	FString GetGameStatus();// 0x264753c
	void ChangeSubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList);// 0x2647490
	void AddToTopStackPanel();// 0x264747c

--------------------------------
Class: LuaContext.Actor.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0x2fc, Size: 4]
	Object* OwningObject;//[Offset: 0x300, Size: 4]
	ScriptContextComponent* ScriptContextComponent;//[Offset: 0x304, Size: 4]

--------------------------------
Class: ScriptContextComponent.ActorComponent.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0xc0, Size: 4]
	void PushScriptArrayIndexData(FString ParamName, int Index);// 0x4eff468
	void PushOneScriptPropertyValues(FString ParamName);// 0x4eff308
	void PushAllScriptPropertyValues();// 0x2066168
	void FetchScriptArrayIndexData(FString ParamName, int Index);// 0x4eff16c
	void FetchOneScriptPropertyValues(FString ParamName);// 0x4eff00c
	void FetchAllScriptPropertyValues();// 0x2055758
	void CallScriptFunctionWithoutFetch(FString FunctionName);// 0x4efeeb4
	void CallScriptFunction(FString FunctionName);// 0x4efed5c

--------------------------------
Class: DynamicWidgetAsyncLoadData
	FString WidgetKey;//[Offset: 0x0, Size: 12]
	DynamicWidgetData DynamicWidgetData;//[Offset: 0xc, Size: 116]
	delegate Callback;//[Offset: 0x80, Size: 16]

--------------------------------
Class: DynamicWidgetData
	bool bAutoDestory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString MountModule;//[Offset: 0x4, Size: 12]
	InGameWidgetData InGameWidgetData;//[Offset: 0x10, Size: 100]

--------------------------------
Class: InGameWidgetData
	int bAutoShow;//[Offset: 0x0, Size: 4]
	GameWidgetConfig GameWidgetConfig;//[Offset: 0x4, Size: 32]
	WidgetMountData WidgetMountData;//[Offset: 0x24, Size: 64]

--------------------------------
Class: WidgetMountData
	Margin MarginData;//[Offset: 0x0, Size: 16]
	Anchors AnchorsData;//[Offset: 0x10, Size: 16]
	Vector2D Position;//[Offset: 0x20, Size: 8]
	FString MountName;//[Offset: 0x28, Size: 12]
	FString MountOuterName;//[Offset: 0x34, Size: 12]

--------------------------------
Class: QuickSignComponent_BP_C.QuickSignComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x458, Size: 4]
	void SetDistanceText(Vector HidPosition, enum MsgType, bool CallFunc_NotEqual_VectorVector_ReturnValue, FString CallFunc_GetLocalizeVoiceText_Text, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Contains_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraBaseCharacter* CallFunc_GetCurPlayerCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Dist2D_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Greater_FloatFloat_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x2bb69b8
	void GetAudioEventAndBank(int audioID, int ActorId, out FString OutBankName, out FString OutEventName, FString BankName, FString EventName, FText CallFunc_Conv_IntToText_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData[] K2Node_MakeArray_Array, PlayerController* CallFunc_GetPlayerController_ReturnValue, FText CallFunc_Format_ReturnValue, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetActorBankByID_BankName);// 0x2bb69b8
	void GetLocalizeActorID(int AudioKey, out int ActorId, int CallFunc_Divide_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsActorInGlobal_IsExist, bool CallFunc_IsBankExistByActorID_bExist, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x2bb69b8
	void PlayVoiceAndText(QuickSignMsg msgItem, bool IsSelf, int SignType, int TextId, int audioID, int ActorId, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_GetLocalizeActorID_ActorID, FString CallFunc_GetAudioEventAndBank_OutBankName, FString CallFunc_GetAudioEventAndBank_OutEventName, QuickSignMsg K2Node_MakeStruct_QuickSignMsg, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue, bool CallFunc_TeamSpeakerEnable_ReturnValue, int CallFunc_GetAudioIDSignType_AudioID, Actor* CallFunc_GetOwner_ReturnValue, int CallFunc_GetQuickSignText_TextID, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess2, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_GetStrArgument_StrArgument, FString CallFunc_OrganizeMsg_MsgString);// 0x2bb69b8
	int GetVoiceAudioID(enum MsgType, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_GetQuickSignAudio_AudioID);// 0x2bb69b8
	void GetStrArgument(FString QuickSignID, FString StringParam, out FString StrArgument, FString AttachSlotName, FString FinalString, FString CallFunc_GetLocalizeBattleText_Text, FString CallFunc_GetLocalizeBattleText_Text2, bool CallFunc_NotEqual_StrStr_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, ItemRecordData CallFunc_GetItemRecord_ReturnValue2, bool CallFunc_NotEqual_StrStr_ReturnValue3, bool CallFunc_NotEqual_IntInt_ReturnValue2, FString[] CallFunc_ParseIntoArray_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue4, bool K2Node_SwitchString_CmpSuccess, FString CallFunc_GetLocalizeBattleText_Text3, FString CallFunc_GetLocalizeBattleText_Text4, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue5, int ___int_Array_Index_Variable, bool CallFunc_EqualEqual_StrStr_ReturnValue2, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue3, bool CallFunc_IsNumeric_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetLocalizeBattleText_Text5, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x2bb69b8
	void OrganizeMsg(int TextId, FString PlayerName, bool IsSelf, FString StrParam, Vector HitPos, enum MsgType, out FString MsgString, FText DistanceText, FString msgContent, bool CallFunc_Contains_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetLocalizeVoiceText_Text, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_StartsWith_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_GetLocalizeText_Text, FString CallFunc_SelectString_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Concat_StrStr_ReturnValue3, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FText CallFunc_Conv_StringToText_ReturnValue2, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetLocalizeText_Text2, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_GetLocalizeText_Text3, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11);// 0x2bb69b8
	void PickupWrapperActorHandle(FString Param, out QuickSignMark MarkInfo, int CallFunc_Conv_StringToInt_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_IsNumeric_ReturnValue, QuickSignMark K2Node_MakeStruct_QuickSignMark, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x2bb69b8
	bool GenerateMarkInfo(out QuickSignMsg msgItem, out QuickSignMark MarkInfo, QuickSignMark QuickSignMarkInfo, bool K2Node_SwitchString_CmpSuccess, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, QuickSignMark K2Node_MakeStruct_QuickSignMark);// 0x2bb69b8
	void LoadConfig(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_QuickSignCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue);// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void ShowMsgTipsVoice(out const QuickSignMsg msgItem, bool IsSelf);// 0x2bb69b8
	void PlayVoiceCD(float Duration);// 0x2bb69b8
	void ReportQuickSign(out const QuickSignMsg msgItem);// 0x2bb69b8
	void ExecuteUbergraph_QuickSignComponent_BP(int EntryPoint, int ___int_Variable, QuickSignMsg K2Node_Event_MsgItem2, bool K2Node_Event_IsSelf, float K2Node_CustomEvent_Duration, QuickSignMsg K2Node_Event_MsgItem, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue);// 0x2bb69b8
	UAEDataTable* QuickSignDataTable;//[Offset: 0x45c, Size: 4]
	<FString,BP_STRUCT_QuickSignCfg_type> QuickTableConfigMap;//[Offset: 0x460, Size: 60]
	<FString,QuickSignMark> QuickMarkMap;//[Offset: 0x49c, Size: 60]
	FString TeammateColor;//[Offset: 0x4d8, Size: 12]
	FString SelfColor;//[Offset: 0x4e4, Size: 12]
	FString ColonChar;//[Offset: 0x4f0, Size: 12]
	FString EndChar;//[Offset: 0x4fc, Size: 12]
	FString SelfName;//[Offset: 0x508, Size: 12]
	QuickSignMsg CurrMsg;//[Offset: 0x514, Size: 80]
	bool IsPlayVoiceCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 1]
	<enum,int> WeaponAttachmentSocketTextIDMap;//[Offset: 0x568, Size: 60]
	<int,int> DefaultAudioMap;//[Offset: 0x5a4, Size: 60]
	FText distanceString;//[Offset: 0x5e0, Size: 12]
	bool isShowDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec, Size: 1]
	enum[] ShowDistanceTypes;//[Offset: 0x5f0, Size: 12]

--------------------------------
Class: ChatComponent_BP_C.ChatComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b0, Size: 4]
	FString GetLuaFilePath();// 0x2bb69b8
	void IsActorInGlobal(int ActorId, out bool IsExist);// 0x2bb69b8
	void CheckIsAddReplyBtn(int MsgID, <int> NeedReplyMsgID, <int> K2Node_MakeVariable_MakeVariableOutput, const TemBPDataAddr[] K2Node_MakeArray_Array, bool CallFunc_Set_Contains_ReturnValue);// 0x2bb69b8
	void GetSpecialDistanceString(FString SendPlayerName, out FText DistanceText, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_GetLocalizeVoiceText_Text, PlayerController* CallFunc_GetPlayerController_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Contains_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, STExtraBaseCharacter* CallFunc_GetCurPlayerCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Vector CallFunc_K2_GetActorLocation_ReturnValue, STExtraPlayerState*[] CallFunc_GetTeamMatePlayerStateList_OutList, int CallFunc_Array_Length_ReturnValue, STExtraPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue3, STExtraBaseCharacter* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_Dist2D_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Round_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x2bb69b8
	void DistanceToString(int Distance, int MsgID, FString PlayerName, out FText DistanceText, bool IsShowDistanceMsgContainsID, FText CallFunc_GetSpecialDistanceString_DistanceText, int CallFunc_Percent_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Greater_IntInt_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, bool ___bool_True_if_break_was_hit_Variable, int ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_GetLocalizeVoiceText_Text, QuickChatFlag CallFunc_Array_Get_Item, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Format_ReturnValue, bool CallFunc_Array_Contains_ReturnValue2, bool CallFunc_Contains_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2bb69b8
	void GetActorNameByID(int ActorId, out FString actorName, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VoiceActorCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x2bb69b8
	void GetLocalText(int MsgID, int ItemId, FString PlayerKeyString, int Distance, FString PlayerName, out FString ContentMsg, FString Msg2Split, int RealTextID, FText CallFunc_DistanceToString_DistanceText, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_GetLocalizeVoiceText_Text, FString CallFunc_Conv_TextToString_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_NotEqual_IntInt_ReturnValue2, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue3, int CallFunc_Divide_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, int ___int_Array_Index_Variable, BP_STRUCT_VoiceText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_SupplyText_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, PlayerController* CallFunc_GetPlayerController_ReturnValue, FString CallFunc_GetCurrentLanguage_ReturnValue, STExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_StrStr_ReturnValue3, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, STExtraPlayerState*[] CallFunc_GetTeamMatePlayerStateList_OutList, int ___int_Loop_Counter_Variable, STExtraPlayerState* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_GetLocalizeVoiceText_Text2, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_SelectString_ReturnValue, FString CallFunc_Split_LeftS2, FString CallFunc_Split_RightS2, bool CallFunc_Split_ReturnValue2, FString CallFunc_SelectString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11, FString CallFunc_Concat_StrStr_ReturnValue12);// 0x2bb69b8
	void LoadVehicleModeQuickMsg(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, int ___int_Array_Index_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int ___int_Array_Index_Variable3, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_VehicleWarModeMsgIDCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue2, FString CallFunc_Array_Get_Item2, FString CallFunc_Array_Get_Item3, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue3);// 0x2bb69b8
	void IsVehicleWarMode(out bool IsVehicleWarMode, GameStateBase* CallFunc_GetGameState_ReturnValue, VehicleWarGameState* K2Node_DynamicCast_AsVehicle_War_Game_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void InitActorIDList();// 0x2bb69b8
	void UpdateInfectModeMsgByPlayerType(enum PlayerType, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, int ___int_Array_Index_Variable3, int ___int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int ___int_Array_Index_Variable4, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, int ___int_Loop_Counter_Variable4, PVEInfectionPlayerState* K2Node_DynamicCast_AsPVEInfection_Player_State, bool K2Node_DynamicCast_bSuccess2, int CallFunc_Add_IntInt_ReturnValue4, bool CallFunc_IsValid_ReturnValue, enum CallFunc_ConvertSubTypeToMainType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_NotEqual_ByteByte_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio, int CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Percent_IntInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_Get_Item3, int CallFunc_Array_Length_ReturnValue3, int CallFunc_Percent_IntInt_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue3, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio3, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Get_Item4, int CallFunc_Array_Length_ReturnValue4, int CallFunc_Percent_IntInt_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue4, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio4, int CallFunc_Array_AddUnique_ReturnValue2);// 0x2bb69b8
	void LoadInfectModeQuickMsg(FString NewLocalVar, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, int ___int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int ___int_Loop_Counter_Variable4, int ___int_Loop_Counter_Variable5, int CallFunc_Add_IntInt_ReturnValue4, int CallFunc_Add_IntInt_ReturnValue5, int ___int_Array_Index_Variable3, delegate K2Node_CreateDelegate_OutputDelegate, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, PVEInfectionGameState* K2Node_DynamicCast_AsPVEInfection_Game_State, bool K2Node_DynamicCast_bSuccess, int ___int_Array_Index_Variable4, PlayerController* CallFunc_GetPlayerController_ReturnValue, int ___int_Array_Index_Variable5, PVEInfectionPlayerState* K2Node_DynamicCast_AsPVEInfection_Player_State, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue2, enum CallFunc_GetMainType_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue3, BP_STRUCT_InfectModeMsgIDCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue2, FString CallFunc_Array_Get_Item2, FString CallFunc_Array_Get_Item3, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue3, FString[] CallFunc_ParseIntoArray_ReturnValue3, FString[] CallFunc_ParseIntoArray_ReturnValue4, FString CallFunc_Array_Get_Item4, FString CallFunc_Array_Get_Item5, int CallFunc_Conv_StringToInt_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue4, int CallFunc_Array_Add_ReturnValue3, int CallFunc_Array_Add_ReturnValue4, int CallFunc_Array_Length_ReturnValue4, int CallFunc_Array_Length_ReturnValue5, bool CallFunc_Less_IntInt_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue5);// 0x2bb69b8
	void IsInfectMode(out bool IsInfectMode, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2bb69b8
	void InitChatFlagList(enum ___byte_Variable, enum ___byte_Variable2, enum ___byte_Variable3, int ___int_Variable, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable2, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue, int ___int_Loop_Counter_Variable2, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_FlagIDCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString CallFunc_Array_Get_Item2, enum K2Node_Select_Default, int CallFunc_Conv_StringToInt_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue, QuickChatFlag K2Node_MakeStruct_QuickChatFlag, int CallFunc_Array_AddUnique_ReturnValue2);// 0x2bb69b8
	void SetTurnplateQuickChatList(int AlternateTextID, int RealTextID, int chatTextID, int[] TextIDList, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio, QuickChatIDAndAudio K2Node_SetFieldsInStruct_StructOut, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_VoiceText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_SupplyText_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, int CallFunc_Array_Add_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2bb69b8
	void GetActorBankByID(int ActorId, out FString BankName, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VoiceActorCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x2bb69b8
	void SwitchActorAudio(int ActorId, int LocalActorID);// 0x2bb69b8
	void LoadSingleAudio(int chatTextID, FString CallFunc_Conv_IntToString_ReturnValue, QuickChatOption K2Node_MakeStruct_QuickChatOption, FText CallFunc_Conv_StringToText_ReturnValue, int CallFunc_Array_Add_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, delegate K2Node_CreateDelegate_OutputDelegate, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue);// 0x2bb69b8
	void LoadAllAudio(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, int ___int_Array_Index_Variable3, int ___int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int ___int_Array_Index_Variable4, int ___int_Loop_Counter_Variable4, int CallFunc_Add_IntInt_ReturnValue4, int ___int_Loop_Counter_Variable5, int ___int_Loop_Counter_Variable6, int CallFunc_Add_IntInt_ReturnValue5, int CallFunc_Add_IntInt_ReturnValue6, int ___int_Array_Index_Variable5, int ___int_Array_Index_Variable6, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Array_Get_Item3, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue3, int CallFunc_Array_Get_Item4, int CallFunc_Array_Length_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue4, int CallFunc_Array_Get_Item5, int CallFunc_Array_Length_ReturnValue5, bool CallFunc_Less_IntInt_ReturnValue5, int CallFunc_Array_Get_Item6, int CallFunc_Array_Length_ReturnValue6, bool CallFunc_Less_IntInt_ReturnValue6);// 0x2bb69b8
	void CreateAudio(Object* audio, int resID, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void SetQuickChatList(int AlternateTextID, int RealTextID, int chatTextID, int[] TextIDList, int chatQuickID, bool bFind, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const TemBPDataAddr[] K2Node_MakeArray_Array, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio, QuickChatIDAndAudio K2Node_SetFieldsInStruct_StructOut, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_AddUnique_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_VoiceText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_SupplyText_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, bool K2Node_SwitchEnum_CmpSuccess);// 0x2bb69b8
	void InitFromSetting(FString CallFunc_GetPublishRegion_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SaveGame* CallFunc_GetUserSettings_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2);// 0x2bb69b8
	void AddOneMsgToUIInner(bool isMe, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void PlaySound(int MsgID, int ActorId, int LocalActorID, bool CallFunc_IsActorInGlobal_IsExist, bool CallFunc_IsBankExistByActorID_bExist, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Set_Contains_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_EqualEqual_StrStr_ReturnValue2, FText CallFunc_Format_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, FString CallFunc_GetActorBankByID_BankName, bool CallFunc_BooleanAND_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue, bool CallFunc_TeamSpeakerEnable_ReturnValue);// 0x2bb69b8
	void AddToArray(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2);// 0x2bb69b8
	void AddOneMsgToUI1(FString Name, FString Content, int MsgID, int audioID, int ItemId, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat, float Distance);// 0x2bb69b8
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x2bb69b8
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x2bb69b8
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x2bb69b8
	void SendDirtyFilter(FString Name, FString Content, bool isMe);// 0x2bb69b8
	void OnFilterFinish(FString filterText);// 0x2bb69b8
	void CloseChatHistoryList();// 0x2bb69b8
	void UpdateQuickItemText(int MsgID, int resID, int alternateMsgID);// 0x2bb69b8
	void ReportBattleChat(int MsgID, FString Msg, int msgExtraParam);// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void ExecuteUbergraph_ChatComponent_BP(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, FString K2Node_Event_str_gid3, FString K2Node_Event_sender_name3, FString K2Node_Event_chat_content, bool K2Node_Event_self_msg, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue2, FString K2Node_Event_str_gid2, FString K2Node_Event_sender_name2, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller2, bool K2Node_DynamicCast_bSuccess2, Actor* CallFunc_GetOwner_ReturnValue3, FString K2Node_Event_str_gid, FString K2Node_Event_sender_name, bool K2Node_Event_bReply, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller3, bool K2Node_DynamicCast_bSuccess3, Actor* CallFunc_GetOwner_ReturnValue4, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller4, bool K2Node_DynamicCast_bSuccess4, FString K2Node_Event_name, FString K2Node_Event_content, bool K2Node_Event_isMe, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Event_name2, FString K2Node_Event_content2, int K2Node_Event_msgID3, int K2Node_Event_audioID, int K2Node_Event_itemID, FString K2Node_Event_PlayerKeyString, bool K2Node_Event_isMe2, bool K2Node_Event_playSound, bool K2Node_Event_ShowChat, float K2Node_Event_Distance, int CallFunc_FTrunc_ReturnValue, FString CallFunc_GetLocalText_ContentMsg, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString K2Node_Event_filterText, Actor* CallFunc_GetOwner_ReturnValue5, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller5, bool K2Node_DynamicCast_bSuccess5, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess6, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue6, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess7, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller6, bool K2Node_DynamicCast_bSuccess8, int K2Node_Event_msgID2, int K2Node_Event_resID, int K2Node_Event_alternateMsgID, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue3, FString CallFunc_GetLocalizeText_Text, FString CallFunc_GetLocalizeText_Text2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_GetLocalizeText_Text3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_GetLocalizeText_Text4, FString CallFunc_GetLocalizeText_Text5, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_GetLocalizeText_Text6, FString CallFunc_Concat_StrStr_ReturnValue11, FString CallFunc_Concat_StrStr_ReturnValue12, FString CallFunc_Concat_StrStr_ReturnValue13, FString CallFunc_Concat_StrStr_ReturnValue14, FString CallFunc_Concat_StrStr_ReturnValue15, FString CallFunc_Concat_StrStr_ReturnValue16, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue17, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess9, BP_STRUCT_LocalizeRes_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_GetLocalizeText_Text7, FString CallFunc_Concat_StrStr_ReturnValue18, FString CallFunc_GetLocalizeText_Text8, FString CallFunc_GetLocalizeText_Text9, FString CallFunc_Concat_StrStr_ReturnValue19, FString CallFunc_Concat_StrStr_ReturnValue20, FString CallFunc_Concat_StrStr_ReturnValue21, FString CallFunc_Concat_StrStr_ReturnValue22, bool CallFunc_IsInfectMode_IsInfectMode, bool CallFunc_IsVehicleWarMode_IsVehicleWarMode, int K2Node_Event_MsgID, FString K2Node_Event_msg, int K2Node_Event_msgExtraParam, GameInstance* CallFunc_GetGameInstance_ReturnValue2, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess10, bool CallFunc_IsDedicatedServer_ReturnValue, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue2, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD2, bool K2Node_DynamicCast_bSuccess11, bool CallFunc_Set_Contains_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);// 0x2bb69b8
	FString addToUIText;//[Offset: 0x2b4, Size: 12]
	FString[] UITextArray;//[Offset: 0x2c0, Size: 12]
	int FirstIndex;//[Offset: 0x2cc, Size: 4]
	FString currContentMsg;//[Offset: 0x2d0, Size: 12]
	bool bInitSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	FString FriendChatStrGid;//[Offset: 0x2e0, Size: 12]
	FString FriendChatSenderName;//[Offset: 0x2ec, Size: 12]
	FString FriendChatContent;//[Offset: 0x2f8, Size: 12]
	bool FriendChatSelfMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	FString FriendInviteStrGid;//[Offset: 0x308, Size: 12]
	FString FriendInviteSenderName;//[Offset: 0x314, Size: 12]
	FString FriendInviteBattleTextValue;//[Offset: 0x320, Size: 12]
	FString FriendReplyStrGid;//[Offset: 0x32c, Size: 12]
	FString FriendReplySenderName;//[Offset: 0x338, Size: 12]
	bool FriendReplyReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 1]
	int UI_MsgID;//[Offset: 0x348, Size: 4]
	FString UI_ItemName;//[Offset: 0x34c, Size: 12]
	int UI_AlternateMsgID;//[Offset: 0x358, Size: 4]
	SettingConfig_C* SettingConfig;//[Offset: 0x35c, Size: 4]
	int[] ChatFlagTypeList;//[Offset: 0x360, Size: 12]
	int[] TmpChatIDList;//[Offset: 0x36c, Size: 12]
	bool bIsInfectMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	int[] ChatQuikcTextIDList_HumanMenu;//[Offset: 0x37c, Size: 12]
	int[] ChatQuikcTextIDList_HumanTurnplate;//[Offset: 0x388, Size: 12]
	int[] ChatQuikcTextIDList_ZombieMenu;//[Offset: 0x394, Size: 12]
	int[] ChatQuikcTextIDList_ZombieTurnplate;//[Offset: 0x3a0, Size: 12]
	int[] InfectModePlayerType;//[Offset: 0x3ac, Size: 12]
	enum CurInfectModePlayerType;//[Offset: 0x3b8, Size: 1]
	QuickChatIDAndAudio QuickChat;//[Offset: 0x3bc, Size: 12]
	<int> GlobalActorIDList;//[Offset: 0x3c8, Size: 60]
	bool bIsVehicleWarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	int[] ChatQuikcTextIDList_VWMenu;//[Offset: 0x408, Size: 12]
	int[] ChatQuikcTextIDList_VWTurnplate;//[Offset: 0x414, Size: 12]
	int TraceItemID;//[Offset: 0x420, Size: 4]
	<int> MuteOnGlobal;//[Offset: 0x424, Size: 60]
	<int> MuteMsgOnBluehole;//[Offset: 0x460, Size: 60]
	int[] SpecialShowDistanceMsgID;//[Offset: 0x49c, Size: 12]

--------------------------------
Class: BP_STRUCT_VoiceActorCfg_type
	int ActorItemID_1_7EA64A805D4CF7C83F9ED7C20956DD34;//[Offset: 0x0, Size: 4]
	int ActorID_2_66EEA6C00EC097255E83F50D0C7CE884;//[Offset: 0x4, Size: 4]
	FString ActorName_5_084563C0289004B337AECB5D0CE91C45;//[Offset: 0x8, Size: 12]
	int SortKey_9_023E1980778A370A5BD689D703B81F89;//[Offset: 0x14, Size: 4]
	int IsUnLock_11_5BD327406959D86F0700649705BBD32B;//[Offset: 0x18, Size: 4]
	bool IsPlayInGlobal_12_14DF9BC04FFBCB15583BB67E0769332C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	FString OpenTime_15_14046D8013EB228646C4CC690BBB4AE5;//[Offset: 0x20, Size: 12]
	FString BankDepend_16_1453384006553C13591DBA5107495114;//[Offset: 0x2c, Size: 12]
	FString BankName_17_72DF248073CEC0563E7F45210B58A305;//[Offset: 0x38, Size: 12]
	bool IsLimitRegion_19_4FEB4D00214E87C4181FAD020238523E;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	bool IsShowUntilGet_20_24C807804D192C0A34758E20002987D4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	FString OpenPublish_21_4EEE3F807004AA067FA56CB009D6AB28;//[Offset: 0x48, Size: 12]
	FString OpenRegion_22_25FEC2C01D13489B7B49BCAA0B6D05EE;//[Offset: 0x54, Size: 12]

--------------------------------
Class: BP_STRUCT_VoiceText_type
	int VoiceTextId_0_6FC5DE403E05E86B27664BDF0A63A1A4;//[Offset: 0x0, Size: 4]
	FString VoiceTextValue_1_0BE5D24055E8B9FB76C1783D0A09E585;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BP_STRUCT_SupplyText_type
	int ChatID_0_55CE55406726E16144B6347C05241D24;//[Offset: 0x0, Size: 4]
	int AlternateTextID_1_1256E6805FE8A11C280F72C50934EDE4;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BP_STRUCT_VehicleWarModeMsgIDCfg_type
	FString MenuChatIDList_0_07E0C1C07AEC576705A4CE190E543504;//[Offset: 0x0, Size: 12]
	FString TurnplateChatIDList_1_2B152C4068877793720058A50A584EB4;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VehicleWarGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	int MatchCountDownTime;//[Offset: 0xe54, Size: 4]
	VehicleBattleResultData CurResultData;//[Offset: 0xe58, Size: 84]
	delegate OnShowGeneralTip;//[Offset: 0xeb8, Size: 12]
	delegate OnMatchCountDownTime;//[Offset: 0xec4, Size: 12]
	float FightStartTime;//[Offset: 0xed0, Size: 4]
	int RoundNum;//[Offset: 0xed4, Size: 4]
	int IconID;//[Offset: 0xed8, Size: 4]
	int InstanceID;//[Offset: 0xedc, Size: 4]
	Vector CircleCenter;//[Offset: 0xee0, Size: 12]
	float Radius;//[Offset: 0xeec, Size: 4]
	VehicleGemRoundData[] RoundData;//[Offset: 0xef0, Size: 12]
	Vector[] TreasureLocations;//[Offset: 0xefc, Size: 12]
	delegate OnGemStoneNumChangeDelegate;//[Offset: 0xf08, Size: 12]
	delegate OnDestoryVehicleCountDelegate;//[Offset: 0xf14, Size: 12]
	int GemStoneForMatchPoint;//[Offset: 0xf20, Size: 4]
	delegate OnGemStoneForMatchPointChangedDelegate;//[Offset: 0xf24, Size: 12]
	delegate OnVehicleEatSuperDelegate;//[Offset: 0xf30, Size: 12]
	VehicleWarRankData[] TeamRankData;//[Offset: 0xf3c, Size: 12]
	delegate OnVehicleWarRankDataDelegate;//[Offset: 0xf48, Size: 12]
	<int,VehicleWarRouteDetailData> RouteDetailMap;//[Offset: 0xf54, Size: 60]
	VehicleWarRouteDetailData[] TeamRankDetailData;//[Offset: 0xf90, Size: 12]
	XTPoint*[] RoutePoints;//[Offset: 0xf9c, Size: 12]
	float RouteLength;//[Offset: 0xfa8, Size: 4]
	VehicleWarTeamKillData[] VehicleWarTeamKillDataArray;//[Offset: 0xfac, Size: 12]
	delegate OnVehicleWarTeamKillDataDelegate;//[Offset: 0xfb8, Size: 12]
	VehicleWarCampGroup[] VehicleWarCampGroupArray;//[Offset: 0xfc4, Size: 12]
	delegate OnVehicleWarCampGroupArrayDelegate;//[Offset: 0xfd0, Size: 12]
	VehicleWarGemMatchState VehicleWarGemMatchState;//[Offset: 0xfdc, Size: 12]
	delegate VehicleWarGemMatchStateDelegate;//[Offset: 0xfe8, Size: 12]
	delegate VehicleWarKillInfoDelegate;//[Offset: 0xff4, Size: 12]
	delegate BoxRoundNumDelegate;//[Offset: 0x1000, Size: 12]
	delegate FightStartTimeDelegate;//[Offset: 0x100c, Size: 12]
	delegate OnTeamContinueKillNumChangedDelegate;//[Offset: 0x1018, Size: 12]
	int MatchPointContinueTime;//[Offset: 0x1024, Size: 4]
	int ShowContinueKillEffectNumV1;//[Offset: 0x1028, Size: 4]
	int ShowContinueKillEffectNumV2;//[Offset: 0x102c, Size: 4]
	bool IsCampMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1030, Size: 1]
	int RemainMatchTime;//[Offset: 0x1034, Size: 4]
	delegate OnRemainMatchTimeDelegate;//[Offset: 0x1038, Size: 12]
	delegate OnVehicleAddHPDelegate;//[Offset: 0x1044, Size: 12]
	BattleOpenSequencerInfo OpenSequencerInfo;//[Offset: 0x1060, Size: 80]
	delegate OpenSequencerStartVehicleDelegate;//[Offset: 0x10b0, Size: 12]
	FString SequenceName;//[Offset: 0x10c0, Size: 12]
	<int,uint32> TeamVehicleDriverMap;//[Offset: 0x10cc, Size: 60]
	<int,TeamMedalTotalKillData> TeamTotalKillMap;//[Offset: 0x1108, Size: 60]
	<int,int> TeamContinueKillMap;//[Offset: 0x1144, Size: 60]
	<int,TeamMedalBeAttackedData> TeamRecentBeAttackedMap;//[Offset: 0x1180, Size: 60]
	<int,VehicleBeAttackMapData> TeamBeAttackedMap;//[Offset: 0x11bc, Size: 60]
	float FarMedalRadius;//[Offset: 0x11f8, Size: 4]
	float AssistMedalTime;//[Offset: 0x11fc, Size: 4]
	float CooperationMedalTime;//[Offset: 0x1200, Size: 4]
	AutoChangeSeatData[] AutoChangeSeatDataArray;//[Offset: 0x1204, Size: 12]
	int WinCampID;//[Offset: 0x1210, Size: 4]
	float GamePlayTime;//[Offset: 0x1214, Size: 4]
	int MatchPointNum;//[Offset: 0x1218, Size: 4]
	int WinCampTreasureScore;//[Offset: 0x121c, Size: 4]
	int FailCampTreasureScore;//[Offset: 0x1220, Size: 4]
	<int,VehicleBattleVehicleStatiscs> VehicleStaticsMap;//[Offset: 0x1224, Size: 60]
	<int,VehicleBattleWeaponStatiscs> WeaponStatiscsMap;//[Offset: 0x1260, Size: 60]
	int VehicleStuckResetTimes;//[Offset: 0x129c, Size: 4]
	int HealthPropItemTimes;//[Offset: 0x12a0, Size: 4]
	int NormalPropItemTimes;//[Offset: 0x12a4, Size: 4]
	int SuperPropItemTimes;//[Offset: 0x12a8, Size: 4]
	<int,int> TeamLastChooseVehicleIDMap;//[Offset: 0x12ac, Size: 60]
	<int,int> TeamLastChooseVehicleShapeMap;//[Offset: 0x12e8, Size: 60]
	VehicleCampKills[] VehicleCampsKills;//[Offset: 0x1324, Size: 12]
	delegate OnVehicleCampsKillsChangedDelegate;//[Offset: 0x1330, Size: 12]
	TireConfig*[] TireConfigCahce;//[Offset: 0x133c, Size: 12]
	void VehicleTakeDamageForMedal(uint32 KillerPlayKey, int VictimTeamID, float Damage);// 0x22e68f0
	void UpdateRank();// 0x22e68dc
	void ShowOpenSequencer(float showTime);// 0x22e6864
	void ShowBoxWarning();// 0x22e6850
	void SetWinCamp(int InCampId);// 0x22e67d8
	void SetUseWeaponID(uint32 PlayerKey, int FirstWeaponID, int SecondWeaponID);// 0x22e66d8
	void SetGemMatchState(int GemMatchState, int CampID, float ServerEndTime);// 0x22e65d8
	void SetCanAutoChangeSeat(int TeamID, bool bCanAutoChangeSeat);// 0x22e6514
	void ServerUpdateVechicleResult();// 0x22e6500
	void RecordTeamChooseVehicle(int TeamID, int VehicleID, int VehicleShapeType);// 0x22e6400
	void OnRep_VehicleWarTeamRankData();// 0x22e63ec
	void OnRep_VehicleWarTeamKillDataArray();// 0x22e63d8
	void OnRep_VehicleWarRemainMatchTime();// 0x22e63c4
	void OnRep_VehicleWarGemMatchState();// 0x22e63b0
	void OnRep_VehicleWarCampGroupArray();// 0x22e639c
	void OnRep_VehicleCampsKills();// 0x22e6388
	void OnRep_RoundNum();// 0x22e6374
	void OnRep_MatchPointContinueTime();// 0x1ee1bb4
	void OnRep_MatchCountDownTime();// 0x22e6360
	void OnRep_GemStoneForMatchPoint();// 0x22e634c
	void OnRep_FightStartTime();// 0x22e6338
	void OnContinueKillNumChanged(int CampID, int TeamID);// 0x22e627c
	void InitRoutePoint();// 0x22e6268
	void HideBoxWarning();// 0x22e6254
	float GetVehicleTotalDamageByPlayerKey(int VictimTeamID, uint32 KillerPlayerKey);// 0x22e6190
	int GetTotalContinueKillNum(int CampID, int TeamID);// 0x22e60cc
	VehicleWarRankData GetTeamRankDataByTeamId(int TeamID);// 0x22e6038
	int GetTeamKillDataIndexByTeamID(int TeamID);// 0x22e5fb8
	bool GetTeamKillDataByTeamID(int TeamID, out VehicleWarTeamKillData TeamKillData);// 0x22e5ed8
	STExtraPlayerState*[] GetPlayerStateListByTeamId(int TeamID);// 0x22e5dd0
	bool GetPlayersByCampAndTeamID(int CampID, int TeamID, out VehicleWarTeamGroupInfo OutPlayers);// 0x22e5c74
	int GetPlayerChoose(uint32 PlayerKey);// 0x22e5bf4
	bool GetIsCooperationKill(int VicTeamId, int KillerTeamId, uint32 KillerPlayerKey);// 0x22e5aec
	FString GetFormatRemainTimeText();// 0x22e5a2c
	Vector GetFootOfPerpendicularXY(out Vector OutPoint, out Vector BeginPoint, out Vector EndPoint);// 0x22e58e4
	VehicleWarRankData[] GetCampSortedTeamRankData();// 0x22e5824
	int GetCampKillNum(int CampID);// 0x22e57a4
	bool GetCampGroupByCampID(int CampID, out VehicleWarCampGroup VehicleWarCampGroup);// 0x22e561c
	void GenerateVehicleRole(VehicleWarPlayerState* PS);// 0x22e55a4
	void GenerateCampInfo();// 0x22e5590
	void FinishTeamRoute(int TeamID);// 0x22e5518
	void DropWeapons(uint32 PlayerKey);// 0x22e54a0
	void CountAttackForMedal(int KillerTeamId, STExtraBaseCharacter* Killer, int VictimTeamID, int DamageType);// 0x22e5358
	void ClearAllPlayerStateChoose();// 0x22e5344
	void CheckPlayIsDriver(VehicleWarPlayerState* PS);// 0x1fa0fcc
	void ChangeMatchCountDownTime();// 0x22e5330
	bool CanAutoChangeSeat(int TeamID);// 0x22e52b0
	void BroadcastTemporaryMessage(FString Message);// 0x21adf7c
	void BroadcastGeneralTip(int TipType, FString AdditionParam);// 0x22e51a8
	void BroadCast_OnVehicleEatSuper(int CampID);// 0x20be8a8
	void BroadCast_OnVehicleAddHP(STExtraVehicleWarVehicle* Vehicle);// 0x1f34be0
	void BeginMatchCountDown(int TimeSeconds);// 0x22e5130
	void AddWeaponKillTimes(int WeaponId, int Num);// 0x22e5074
	void AddWeaponDamage(int WeaponId, float Damage);// 0x22e4fb8
	void AddWeaponChooseTimes(int WeaponId, int Num);// 0x22e4efc
	void AddVehicleWeaponDamage(int VehicleType, float Damage);// 0x22e4e40
	void AddVehicleKillTimes(int VehicleType, int Num);// 0x22e4d84
	void AddVehicleHitDamage(int VehicleType, float Damage);// 0x22e4cc8
	void AddVehicleDeadTimes(int VehicleType, int Num);// 0x22e4c0c
	void AddVehicleChooseTimes(int VehicleType, int Num);// 0x22e4b50
	void AddTeamBeDestoryedNum(int TeamID, int AddDestoryCount);// 0x22e4a94
	void AddMedalForPlayer(STExtraBaseCharacter* Killer, FString MedalMessage);// 0x22e4994
	void AddCooperationBuffToTeam(int TeamID);// 0x22e491c
	void AddCampKillNum(int CampID, int Num);// 0x22e4860

--------------------------------
Class: VehicleBattleResultData
	VehiclePlayerBattleResultData[] playerList;//[Offset: 0x0, Size: 12]
	VehicleCampKills[] VehicleCampKills;//[Offset: 0xc, Size: 12]
	int WinCampID;//[Offset: 0x18, Size: 4]
	float GamePlayTime;//[Offset: 0x1c, Size: 4]
	int MatchPointNum;//[Offset: 0x20, Size: 4]
	int WinCampTreasureScore;//[Offset: 0x24, Size: 4]
	int FailCampTreasureScore;//[Offset: 0x28, Size: 4]
	VehicleBattleVehicleStatiscs[] VehicleStaticsList;//[Offset: 0x2c, Size: 12]
	VehicleBattleWeaponStatiscs[] WeaponStatiscsList;//[Offset: 0x38, Size: 12]
	int VehicleStuckResetTimes;//[Offset: 0x44, Size: 4]
	int HealthPropItemTimes;//[Offset: 0x48, Size: 4]
	int NormalPropItemTimes;//[Offset: 0x4c, Size: 4]
	int SuperPropItemTimes;//[Offset: 0x50, Size: 4]

--------------------------------
Class: VehiclePlayerBattleResultData
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]
	FString PlayerName;//[Offset: 0xc, Size: 12]
	int TeamID;//[Offset: 0x18, Size: 4]
	int CampID;//[Offset: 0x1c, Size: 4]
	int Score;//[Offset: 0x20, Size: 4]
	int Distance;//[Offset: 0x24, Size: 4]
	int KillNum;//[Offset: 0x28, Size: 4]
	int AssistKillNum;//[Offset: 0x2c, Size: 4]
	int DriverKillNum;//[Offset: 0x30, Size: 4]
	int ShooterKillNum;//[Offset: 0x34, Size: 4]
	int BeKillNum;//[Offset: 0x38, Size: 4]
	int TeamKillNum;//[Offset: 0x3c, Size: 4]
	int GetItemNum;//[Offset: 0x40, Size: 4]
	int OpenTreasureNum;//[Offset: 0x44, Size: 4]
	int ShootTreasureNum;//[Offset: 0x48, Size: 4]
	UseItemFlow[] UseItemFlow;//[Offset: 0x4c, Size: 12]
	int StrikeKillVehicleNum;//[Offset: 0x58, Size: 4]
	int ItemKillVehicleNum;//[Offset: 0x5c, Size: 4]
	int GunKillVehicleNum;//[Offset: 0x60, Size: 4]
	float CauseDamage;//[Offset: 0x64, Size: 4]
	int GemStoneCount;//[Offset: 0x68, Size: 4]
	bool HasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	float FinishedTime;//[Offset: 0x70, Size: 4]
	bool IsEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	int VehicleID;//[Offset: 0x78, Size: 4]
	int VehicleShapeType;//[Offset: 0x7c, Size: 4]
	float ExitPlayerPlayTime;//[Offset: 0x80, Size: 4]

--------------------------------
Class: VehicleCampKills
	int CampID;//[Offset: 0x0, Size: 4]
	int Kills;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleBattleVehicleStatiscs
	int VehicleID;//[Offset: 0x0, Size: 4]
	int ChooseTimes;//[Offset: 0x4, Size: 4]
	int DeadTimes;//[Offset: 0x8, Size: 4]
	int Kills;//[Offset: 0xc, Size: 4]
	float VehicleWeaponDamage;//[Offset: 0x10, Size: 4]
	float HitDamage;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleBattleWeaponStatiscs
	int WeaponId;//[Offset: 0x0, Size: 4]
	int ChooseTimes;//[Offset: 0x4, Size: 4]
	int TotalDamage;//[Offset: 0x8, Size: 4]
	int Kills;//[Offset: 0xc, Size: 4]

--------------------------------
Class: VehicleGemRoundData
	float RoundTime;//[Offset: 0x0, Size: 4]
	int TreasureNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleWarRankData
	int RoundNo;//[Offset: 0x0, Size: 4]
	int TeamID;//[Offset: 0x4, Size: 4]
	int Distance;//[Offset: 0x8, Size: 4]
	int Score;//[Offset: 0xc, Size: 4]
	int GemStoneNum;//[Offset: 0x10, Size: 4]

--------------------------------
Class: VehicleWarRouteDetailData
	int TeamID;//[Offset: 0x0, Size: 4]
	int RoundNo;//[Offset: 0x4, Size: 4]
	float Distance;//[Offset: 0x8, Size: 4]
	bool IsFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float FinishTime;//[Offset: 0x10, Size: 4]
	Vector ProjectionPoint;//[Offset: 0x14, Size: 12]
	int CompleteLogicCircleNum;//[Offset: 0x20, Size: 4]
	int[] LastRoutePointRecord;//[Offset: 0x24, Size: 12]

--------------------------------
Class: VehicleWarTeamKillData
	int TeamID;//[Offset: 0x0, Size: 4]
	int ContinueKillNum;//[Offset: 0x4, Size: 4]
	int TotalKillNum;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleWarCampGroup
	int CampID;//[Offset: 0x0, Size: 4]
	VehicleWarTeamGroupInfo[] CampGroups;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VehicleWarTeamGroupInfo
	int TeamID;//[Offset: 0x0, Size: 4]
	VehicleWarPlayerState*[] TeamPlayers;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VehicleWarPlayerState.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	NetVehilceProps NetVehicleProps;//[Offset: 0x11e8, Size: 40]
	delegate OnVehilcePropsChangeDel;//[Offset: 0x1210, Size: 12]
	int GemStoneNum;//[Offset: 0x121c, Size: 4]
	delegate OnPlayerGemStoneNumChangeDelegate;//[Offset: 0x1220, Size: 12]
	int TeamGemStoneNum;//[Offset: 0x122c, Size: 4]
	delegate OnTeamGemStoneNumChangeDelegate;//[Offset: 0x1230, Size: 12]
	int DestoryVehicleCount;//[Offset: 0x123c, Size: 4]
	delegate OnDestoryVehicleCountChangeDelegate;//[Offset: 0x1240, Size: 12]
	int BeDestoryedCount;//[Offset: 0x124c, Size: 4]
	int DriverKillNum;//[Offset: 0x1250, Size: 4]
	int ShooterKillNum;//[Offset: 0x1254, Size: 4]
	int AssistKillNum;//[Offset: 0x1258, Size: 4]
	int ContinueDestoryVehicleCount;//[Offset: 0x125c, Size: 4]
	delegate OnContinueDestoryVehicleCountChangeDelegate;//[Offset: 0x1260, Size: 12]
	STExtraVehicleWarVehicle* CurAttackSignTarget;//[Offset: 0x126c, Size: 4]
	STExtraVehicleWarVehicle* CurAttackTarget;//[Offset: 0x1270, Size: 8]
	float CurCumulativeDamage;//[Offset: 0x1278, Size: 4]
	float CumulativeDamageForSign;//[Offset: 0x127c, Size: 4]
	float CurCumulativeDamageTime;//[Offset: 0x1280, Size: 4]
	float CumulativeDamageCalcuTime;//[Offset: 0x1284, Size: 4]
	float SignExistTime;//[Offset: 0x1288, Size: 4]
	float SignStartTime;//[Offset: 0x128c, Size: 4]
	delegate OnCurAttackSignTargetChangeDelegate;//[Offset: 0x1290, Size: 12]
	int OpenTreasureNum;//[Offset: 0x129c, Size: 4]
	int ShootTreasureNum;//[Offset: 0x12a0, Size: 4]
	int StrikeKillVehicleNum;//[Offset: 0x12a4, Size: 4]
	int ItemKillVehicleNum;//[Offset: 0x12a8, Size: 4]
	int GunKillVehicleNum;//[Offset: 0x12ac, Size: 4]
	float TotalCauseDamage;//[Offset: 0x12b0, Size: 4]
	int ClientTotalDamage;//[Offset: 0x12b4, Size: 4]
	delegate OnClientTotalDamageChangeDelegate;//[Offset: 0x12b8, Size: 12]
	delegate OnBeDestoryedCountChangeDelegate;//[Offset: 0x12c4, Size: 12]
	bool PlayerIsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d0, Size: 1]
	delegate OnPlayerDriverStateChanged;//[Offset: 0x12d4, Size: 12]
	float VehicleSpawnServerTime;//[Offset: 0x12e0, Size: 4]
	bool PlayerHasLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e4, Size: 1]
	float VehicleMoveRecordInstance;//[Offset: 0x12e8, Size: 4]
	int VehicleMoveFlowCount;//[Offset: 0x12f0, Size: 4]
	int VehicleN2oSkillId;//[Offset: 0x12f4, Size: 4]
	int VehicleCarPetSkillId;//[Offset: 0x12f8, Size: 4]
	bool CanShowMatchData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131c, Size: 1]
	bool FinishedShowMatchData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131d, Size: 1]
	bool CanShowUseItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131e, Size: 1]
	bool CanShowFireGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131f, Size: 1]
	bool FinishedShowFireGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1320, Size: 1]
	bool CanShowEyesGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1321, Size: 1]
	bool CanShowBuffGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1322, Size: 1]
	bool CanShowAnimFrameGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1323, Size: 1]
	float PlayerExitTime;//[Offset: 0x1324, Size: 4]
	bool PlayerHasExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1328, Size: 1]
	void SetVehicleSpawnServerTime(float STime);// 0x22e97bc
	void OnRep_VehicleProps();// 0x22e97a8
	void OnRep_TeamGemStoneNum();// 0x22e9794
	void OnRep_PlayerIsDriver();// 0x22e9780
	void OnRep_GemStoneNum();// 0x22e976c
	void OnRep_DestoryVehicleCount();// 0x22e9758
	void OnRep_CurAttackSignTarget();// 0x22e9744
	void OnRep_ContinueDestoryVehicleCount();// 0x22e9730
	void OnRep_ClientTotalDamage();// 0x22e971c
	void OnRep_BeDestoryedCount();// 0x22e9708
	int GetVehiclePropsItem(int Index);// 0x22e9688
	void DispatchPlayerExitEvent();// 0x220d4cc

--------------------------------
Class: NetVehilceProps
	int ItemNum;//[Offset: 0x0, Size: 4]
	ItemDefineID[] PropsItem;//[Offset: 0x4, Size: 12]
	VehicleWarEquipItem[] ChooseEquip;//[Offset: 0x10, Size: 12]
	int PlayerChoose;//[Offset: 0x1c, Size: 4]
	int FirstWeaponID;//[Offset: 0x20, Size: 4]
	int SecondWeaponID;//[Offset: 0x24, Size: 4]

--------------------------------
Class: VehicleWarEquipItem
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleWarGemMatchState
	enum GemMatchState;//[Offset: 0x0, Size: 1]
	int CampID;//[Offset: 0x4, Size: 4]
	float CampWinServerTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TeamMedalTotalKillData
	<int> TotalKillData;//[Offset: 0x0, Size: 60]

--------------------------------
Class: TeamMedalBeAttackedData
	<uint32,float> BeAttackedMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: VehicleBeAttackMapData
	<uint32,float> BeAttackedMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: AutoChangeSeatData
	int TeamID;//[Offset: 0x0, Size: 4]
	bool bCanAutoChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: PVEInfectionPlayerState.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	float CurExp;//[Offset: 0x1228, Size: 4]
	int CurLevel;//[Offset: 0x1230, Size: 4]
	int MainSkillId;//[Offset: 0x1234, Size: 4]
	bool IsUseMainSkillInvisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1238, Size: 1]
	int CurAssistLevel;//[Offset: 0x123c, Size: 4]
	delegate OnPlayerLevelChanged;//[Offset: 0x1240, Size: 12]
	delegate OnPlayerExpChanged;//[Offset: 0x124c, Size: 12]
	int SelectCombieCount;//[Offset: 0x1268, Size: 4]
	delegate InfectionClientOnRespawn;//[Offset: 0x126c, Size: 12]
	delegate InfectionClientOnBeKilled;//[Offset: 0x1278, Size: 12]
	bool bSwitchTeammateStateList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1284, Size: 1]
	enum PawnSubType;//[Offset: 0x1285, Size: 1]
	int ShowKillNum;//[Offset: 0x1288, Size: 4]
	delegate OnInfectionKillNumChanged;//[Offset: 0x128c, Size: 12]
	enum RespawnBeforeType;//[Offset: 0x1298, Size: 1]
	float PlayerRoundStartTime;//[Offset: 0x129c, Size: 4]
	float PlayerMoveDistance;//[Offset: 0x12a0, Size: 4]
	float PlayerMoveTime;//[Offset: 0x12a4, Size: 4]
	float[] PlayerMoveSpeedArray;//[Offset: 0x12a8, Size: 12]
	int PlayerJumpHeightMax;//[Offset: 0x12b4, Size: 4]
	int PlayerJumpSpeedMax;//[Offset: 0x12b8, Size: 4]
	uint32 RoundStartTime;//[Offset: 0x12bc, Size: 4]
	int8 RoleTypeStart;//[Offset: 0x12c0, Size: 1]
	int8 RoleTypeEnd;//[Offset: 0x12c1, Size: 1]
	int RoleTypeSwitchTime;//[Offset: 0x12c4, Size: 4]
	float AbsorbTime;//[Offset: 0x12c8, Size: 4]
	bool IsInAbsorb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12cc, Size: 1]
	bool IsInfectionDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12cd, Size: 1]
	bool IsClientChangeDeathPosi;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12ce, Size: 1]
	void StartMainSkill();// 0x20c3fc8
	void SetPawnSubType(enum SubType);// 0x20c3f50
	void ServerRPC_ClientStartRound(int64 ClientRoundStartTime);// 0x20c3e98
	void ServerRPC_ActorGuidTrigger_TLog(int GuidID);// 0x20c3de4
	void ServerRPC_ActorGuidClose_TLog(int GuidID, bool bArriveClose);// 0x20c3cd4
	void RespawnBufferReplay();// 0x20c3cc0
	void ResetOnRoundStart();// 0x20c3cac
	void OnRep_ShowKillNum();// 0x20c3c98
	void OnRep_PawnSubType();// 0x20c3c84
	void OnRep_CurLevel();// 0x20c3c70
	void OnRep_CurExp();// 0x20c3c5c
	void OnRep_CurAssistLevel();// 0x20c3c48
	void OnNewRound();// 0x20c3c2c
	void OnClientRemoveBuff(int BuffID, int SkillID);// 0x20c3b68
	void OnClientAddBuff(int BuffID, int SkillID);// 0x20c3aa4
	bool IsPlayer();// 0x20c3a7c
	bool IsCanUseMainSkill();// 0x20c3a54
	int GetShowKillNum();// 0x20c3a2c
	enum GetMainType();// 0x20c3a04
	float GetMainSkillInterval();// 0x20c39dc
	int GetMainSkillId();// 0x20c39b4
	float GetMainSkillCD();// 0x20c398c
	float GetExpPercent();// 0x20c3964
	enum ConvertSubTypeToMainType(enum SubType);// 0x20bc3d0
	void ClientRPC_OnRevengerSpawn();// 0x20c3948
	void ClientRPC_OnRespawnInfectionPawn(enum PrevType, enum NewType);// 0x20c3884
	void ClientRPC_OnKilled(Pawn* VictimPawn, const DamageType* DamageType, bool bIsRoundEnd);// 0x20c3774
	void ClientRPC_OnGeneraterMaternalZombies(enum CurSubType);// 0x20c36f4
	void ClientRPC_OnBeKilled(Pawn* KillerPawn, bool bIsRoundEnd);// 0x20c3628
	void ClientRPC_BroadcastInfectionLevelUp(int Level);// 0x20c35a8
	void ClientRoundStart();// 0x20c3594
	void AddShowKillNum(int AddNum);// 0x20c351c
	void AddExpOnNextFrame();// 0x20c3508
	void AddCurLevelUpBuffCallback();// 0x20c34f4

--------------------------------
Class: PVEInfectionGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	int RespawnInvincibleTime;//[Offset: 0xe54, Size: 4]
	delegate OnInfectionTeamMarkGlobalNotifyDelegate;//[Offset: 0xe58, Size: 12]
	delegate GameStart;//[Offset: 0xe64, Size: 12]
	delegate GameEnd;//[Offset: 0xe70, Size: 12]
	delegate RoundStart;//[Offset: 0xe7c, Size: 12]
	delegate RoundEnd;//[Offset: 0xe88, Size: 12]
	delegate RoundCountDownEnd;//[Offset: 0xe94, Size: 12]
	delegate OnPlayerPawnActive;//[Offset: 0xea0, Size: 12]
	delegate OnInfectionSelfChangeType;//[Offset: 0xeac, Size: 12]
	delegate OnPlayerUseSkill;//[Offset: 0xeb8, Size: 12]
	delegate OnInfectionPlayerAssistNumChanged;//[Offset: 0xec4, Size: 12]
	InfectionGainExpInfo PlayerGainExpConfig;//[Offset: 0xed0, Size: 28]
	InfectionGainExpInfo ZombieGainExpConfig;//[Offset: 0xeec, Size: 28]
	<int,InfectionRoleLevelMap> RoleLevelConfig;//[Offset: 0xf08, Size: 60]
	int CurRoundNum;//[Offset: 0xf44, Size: 4]
	enum CurRoundState;//[Offset: 0xf48, Size: 1]
	enum CurInfectionBGMStateType;//[Offset: 0xf49, Size: 1]
	int MaxRoundNum;//[Offset: 0xf4c, Size: 4]
	delegate OnCurRoundNumChanged;//[Offset: 0xf50, Size: 12]
	float BeforeRoundTime;//[Offset: 0xf5c, Size: 4]
	FString RoleInfoTablePath;//[Offset: 0xf60, Size: 12]
	FString ScoreInfoTablePath;//[Offset: 0xf6c, Size: 12]
	int MaxPersonScore;//[Offset: 0xf78, Size: 4]
	int MaxMonsterScore;//[Offset: 0xf7c, Size: 4]
	float RoundEndWorldTimeSeconds;//[Offset: 0xf80, Size: 4]
	int RoundPlayerNum;//[Offset: 0xf84, Size: 4]
	int RoundZombieNum;//[Offset: 0xf88, Size: 4]
	int RoundAllPlayerNum;//[Offset: 0xf8c, Size: 4]
	int RoundAllZombieNum;//[Offset: 0xf90, Size: 4]
	int PersonWinRoundNum;//[Offset: 0xf94, Size: 4]
	int ZombieWinRoundNum;//[Offset: 0xf98, Size: 4]
	int KillZombieNum;//[Offset: 0xf9c, Size: 4]
	int InfectedHumanNum;//[Offset: 0xfa0, Size: 4]
	int BecomeHeroNum;//[Offset: 0xfa4, Size: 4]
	int CurRoundWinRole;//[Offset: 0xfa8, Size: 4]
	float CurRoundStartTime;//[Offset: 0xfac, Size: 4]
	delegate ShowRoundResultDelegate;//[Offset: 0xfb0, Size: 12]
	InfectionRoundResultData CurRoundResultData;//[Offset: 0xfc0, Size: 248]
	int CurRoundResultShowTime;//[Offset: 0x10b8, Size: 4]
	delegate OnInfectionKillInfoChanged;//[Offset: 0x10bc, Size: 12]
	<uint32,InfectionPlayerScoreData> InfectionPlayerStateDataMap;//[Offset: 0x10c8, Size: 60]
	<int,InfectionRoundTlogCountData> InfectionRoundTlogCountDataMap;//[Offset: 0x1104, Size: 60]
	<int,InfectionRoleTableRow> RoleTableMap;//[Offset: 0x1140, Size: 60]
	delegate RoundPlayerNumChanged;//[Offset: 0x117c, Size: 12]
	delegate RoundZombieNumChanged;//[Offset: 0x1188, Size: 12]
	<FString,InfectionScoreTableRow> ScoreTableMap;//[Offset: 0x1194, Size: 60]
	delegate ShowInfectionKillTipsDelegate;//[Offset: 0x11d0, Size: 12]
	delegate InfectionRoundStateChanged;//[Offset: 0x11dc, Size: 12]
	delegate InfectionBGMStateChanged;//[Offset: 0x11e8, Size: 12]
	int HaveShowRoundResultNum;//[Offset: 0x11f4, Size: 4]
	void ShowRoundResult(InfectionRoundResultData RoundData, int showTime);// 0x20c0774
	void ShowInfectionKillTips__DelegateSignature(FString KillerName, FString VictimName, FString killerKey, FString victimKey, enum killerSubType, enum victimSubType);// 0x2bb69b8
	void SetRoundZombieNum(int Num);// 0x20c06fc
	void SetRoundPlayerNum(int Num);// 0x20c0684
	void ServerOnRoundStart(int RoundNum);// 0x20c060c
	void ServerOnRoundEnd(int RoundNum);// 0x20c0594
	void OnUseSpringJump(STExtraPlayerCharacter* Character, int SpringID);// 0x20c04d8
	void OnRoundZombieNumChange();// 0x20c04c4
	void OnRoundPlayerNumChange();// 0x20c04b0
	void OnRep_RoundZombieNumChange();// 0x20c049c
	void OnRep_RoundStateChanged();// 0x20c0488
	void OnRep_RoundPlayerNumChange();// 0x20c0474
	void OnRep_ReadyStateTime();// 0x1f3e96c
	void OnRep_InfectionBGMStateChanged();// 0x20c0460
	void OnRep_CurRoundNum();// 0x20c044c
	void OnPlayerSkillStart(STExtraBaseCharacter* SkillOwner, int SkillID);// 0x20c0388
	void OnKillInfoChanged(out const InfectionContinuousKillInfo Info);// 0x20c02b0
	void OnKilledTlog(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, const DamageType* DamageType);// 0x20c0160
	void OnKilled(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, const DamageType* DamageType);// 0x20c0010
	void OnFinishRestartPlayer(Controller* NewPlayer, out const Rotator StartRotation);// 0x20bff48
	void OnCharacterTakeHeadShot(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState);// 0x20bfe84
	void OnCharacterTakeDamage(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState, float Damage);// 0x20bfd7c
	void MulticastRPC_InfectionKillInfoChanged(const InfectionContinuousKillInfo Info);// 0x20bfcb0
	void MulticastRPC_InfectionCharacterList(const STExtraBaseCharacter*[] CharacterList);// 0x20bfbec
	void MulticastRPC_BroadcastTeamMarkNotify(const PVEInfectionPlayerState*[] PlayerStateArray);// 0x20bfb28
	bool IsVisibleType(enum OriginType, enum TargetType);// 0x20bfa64
	void InitScoreTable();// 0x20bfa50
	void InitRoleTable();// 0x20bfa3c
	FString GetSkillIcon(enum SubType);// 0x20bf934
	InfectionRoundResultPlayerShowData GetRoundResultByPlayerKey(FString PlayerKey);// 0x20bf688
	int GetRoundPlayerNum();// 0x20bf660
	InfectionPlayerScoreData GetPlayerScoreData(uint32 PlayerKey);// 0x20bf47c
	InfectionRoundScoreData GetPlayerRoundScoreData(uint32 PlayerKey, int RoundNum);// 0x20bf3ac
	float GetLeftRoundTime();// 0x20bf384
	InfectionRoleTableRow GetInfectionRoleInfo(enum FindPawnType);// 0x20bf2d8
	enum GetCurRoundWinCamp();// 0x20bf2b0
	InfectionRoundTlogCountData GetCurRoundTlogCountData();// 0x20bf280
	STExtraBaseCharacter* GetCharacterByPlayerKey(FString PlayerKey);// 0x20bf120
	<STExtraBaseCharacter*> GetAllCharacterSetWithoutSelf();// 0x20befa0
	<STExtraBaseCharacter*> GetAllCharacterSet();// 0x20bee20
	STExtraBaseCharacter*[] GetAllCharacter();// 0x20bed5c
	enum ConvertSubTypeToMainType(enum SubType);// 0x20bc3d0
	STExtraBaseCharacter* ClientGetCharacterByPlayerKey(FString PlayerKey);// 0x20bebfc
	void ClientBroadcast_InfectionShowKilledTip(FString KillerName, FString VictimName, uint32 killerKey, uint32 victimKey, enum killerSubType, enum victimSubType);// 0x20be9a0
	void CheckInitMatrixEffect(PlayerState* PState);// 0x20be928
	void BroadcastClientOnRoundStart(int RoundNum);// 0x1f423b4
	void BroadcastClientOnRoundEnd(int RoundNum);// 0x20be8a8
	void BeginShowRoundResult(int RoundNum, int showTime);// 0x20be7ec
	void AddUseSpringJumpTimes(uint32 PlayerKey, int Times);// 0x20be728
	void AddUseEnhancerTimes(uint32 PlayerKey, int Times);// 0x20be664
	void AddRoundWinScore();// 0x20be650
	void AddRevengerPlayerKillWinTimes(uint32 PlayerKey, int Times);// 0x20be594
	void AddPlayerScore(Controller* ScorePlayer, Controller* VictimPlayer, FString ScoreType, float DamagePoint);// 0x20be35c
	void AddDamageToRevengerPlayer(uint32 PlayerKey, int Damage);// 0x20be2a0
	void AddDamageToMonster(uint32 PlayerKey, int Damage);// 0x20be1e4
	void AddChooseZombieTimes(uint32 PlayerKey, enum SubType, int Times);// 0x20be0e4
	void AddBeRevengerPlayerTimes(uint32 PlayerKey, int Times);// 0x20be028
	void AddBePersonWinTimes(uint32 PlayerKey, int Times);// 0x20bdf6c
	void AddBeMonsterWinTimes(uint32 PlayerKey, int Times);// 0x20bdeb0
	void AddBeMatrixMonsterTimes(uint32 PlayerKey, int Times);// 0x20bddf4

--------------------------------
Class: InfectionGainExpInfo
	int KillExp;//[Offset: 0x0, Size: 4]
	int AssistExp;//[Offset: 0x4, Size: 4]
	float AssistExpAcceptRange;//[Offset: 0x8, Size: 4]
	float DamageExpRate;//[Offset: 0xc, Size: 4]
	float HealthExpRate;//[Offset: 0x10, Size: 4]
	float SecondExp;//[Offset: 0x14, Size: 4]
	float GainExpInterval;//[Offset: 0x18, Size: 4]

--------------------------------
Class: InfectionRoleLevelMap
	<int,InfectionRoleLevelInfo> LevelMap;//[Offset: 0x0, Size: 60]
	int MaxLevel;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: InfectionRoleLevelInfo
	int Exp;//[Offset: 0x0, Size: 4]
	int BuffID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: InfectionRoundResultData
	int RoundNum;//[Offset: 0x0, Size: 4]
	enum WinType;//[Offset: 0x4, Size: 1]
	InfectionRoundResultPlayerShowData BestPerson;//[Offset: 0x8, Size: 112]
	InfectionRoundResultPlayerShowData BestMonster;//[Offset: 0x78, Size: 112]
	InfectionRoundResultPlayerShowData[] AllDataArray;//[Offset: 0xe8, Size: 12]

--------------------------------
Class: InfectionRoundResultPlayerShowData
	uint32 PlayerKey;//[Offset: 0x0, Size: 4]
	FString PlayerName;//[Offset: 0x4, Size: 12]
	int TeamID;//[Offset: 0x10, Size: 4]
	InfectionPlayerInfo InfectionPlayerInfo;//[Offset: 0x18, Size: 64]
	InfectionShowRoundScoreData RoundScoreData;//[Offset: 0x58, Size: 20]

--------------------------------
Class: InfectionPlayerInfo
	uint64 UId;//[Offset: 0x0, Size: 8]
	FString UIDString;//[Offset: 0x8, Size: 12]
	FString PlayerName;//[Offset: 0x14, Size: 12]
	FString iconUrl;//[Offset: 0x20, Size: 12]
	byte gender;//[Offset: 0x2c, Size: 1]
	byte PlatformGender;//[Offset: 0x2d, Size: 1]
	int PlayerLevel;//[Offset: 0x30, Size: 4]
	int SegmentLevel;//[Offset: 0x34, Size: 4]
	int AvatarBoxId;//[Offset: 0x38, Size: 4]

--------------------------------
Class: InfectionShowRoundScoreData
	int RoundNo;//[Offset: 0x0, Size: 4]
	int MonsterScore;//[Offset: 0x4, Size: 4]
	int PersonScore;//[Offset: 0x8, Size: 4]
	int KillMonsters;//[Offset: 0xc, Size: 4]
	int KillPersons;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InfectionPlayerScoreData
	uint32 PlayerKey;//[Offset: 0x0, Size: 4]
	FString PlayerName;//[Offset: 0x4, Size: 12]
	int TeamID;//[Offset: 0x10, Size: 4]
	float PlayerEnterGameTime;//[Offset: 0x14, Size: 4]
	InfectionPlayerInfo InfectionPlayerInfo;//[Offset: 0x18, Size: 64]
	<int,InfectionRoundScoreData> RoundScoreData;//[Offset: 0x58, Size: 60]

--------------------------------
Class: InfectionRoundScoreData
	int RoundNo;//[Offset: 0x0, Size: 4]
	float MonsterScore;//[Offset: 0x4, Size: 4]
	float PersonScore;//[Offset: 0x8, Size: 4]
	int KillMonsters;//[Offset: 0xc, Size: 4]
	int KillPersons;//[Offset: 0x10, Size: 4]
	float RoundDamage;//[Offset: 0x14, Size: 4]
	int BeMatrixMonsterTimes;//[Offset: 0x18, Size: 4]
	int BeRevengerPlayerTimes;//[Offset: 0x1c, Size: 4]
	uint32 Headshot4Avenger;//[Offset: 0x20, Size: 4]
	int RevengerPlayerKillWinTimes;//[Offset: 0x24, Size: 4]
	int BeMonsterWinTimes;//[Offset: 0x28, Size: 4]
	int BePersonWinTimes;//[Offset: 0x2c, Size: 4]
	int UseSpringJumpTimes;//[Offset: 0x30, Size: 4]
	int UseEnhancerTimes;//[Offset: 0x34, Size: 4]
	int DamageToMonster;//[Offset: 0x38, Size: 4]
	int DamageToRevengerPlayer;//[Offset: 0x3c, Size: 4]
	int ChooseZombieFirstTimes;//[Offset: 0x40, Size: 4]
	int ChooseZombieSecondTimes;//[Offset: 0x44, Size: 4]
	int ChooseZombieThirdTimes;//[Offset: 0x48, Size: 4]
	uint32 PlayerKilled;//[Offset: 0x4c, Size: 4]
	uint32 PlayerHurtCount;//[Offset: 0x50, Size: 4]
	uint32 PlayerDamageCount;//[Offset: 0x54, Size: 4]
	uint32 HeadshotCounts;//[Offset: 0x58, Size: 4]
	uint32 GunKillingTimes;//[Offset: 0x5c, Size: 4]
	int8 RoleType;//[Offset: 0x60, Size: 1]
	int8 RoleTypeEnd;//[Offset: 0x61, Size: 1]
	uint32 RoleTypeSwitchTime;//[Offset: 0x64, Size: 4]
	int PlayerJumpHeightMax;//[Offset: 0x68, Size: 4]
	int PlayerJumpSpeedMax;//[Offset: 0x6c, Size: 4]
	uint32 PlayerMoveDistance;//[Offset: 0x70, Size: 4]
	uint32 PlayerMoveTime;//[Offset: 0x74, Size: 4]
	int PlayerMoveSpeedAvg;//[Offset: 0x78, Size: 4]

--------------------------------
Class: InfectionRoundTlogCountData
	float RoundStartTime;//[Offset: 0x0, Size: 4]
	float RoundEndTime;//[Offset: 0x4, Size: 4]
	int WinCamp;//[Offset: 0x8, Size: 4]
	bool bSpawnRevenger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float RevengerSpawmTime;//[Offset: 0x10, Size: 4]
	int RevengerDoSkillCount;//[Offset: 0x14, Size: 4]
	int ZombieReviveCount;//[Offset: 0x18, Size: 4]
	int NormalZombieDoSkillCount;//[Offset: 0x1c, Size: 4]
	int InvisibleZombieDoSkillCount;//[Offset: 0x20, Size: 4]
	int ThrowerZombieDoSkillCount;//[Offset: 0x24, Size: 4]
	int MotherZombieDoSkillCount;//[Offset: 0x28, Size: 4]
	<int,InfectionRoundTlogGuidData> GuidCount;//[Offset: 0x2c, Size: 60]
	InfectionPlayerDeadTlogData[] DeadList;//[Offset: 0x68, Size: 12]
	<int,int> ZombieLevelNumMap;//[Offset: 0x74, Size: 60]
	int[] EnhancerUserList;//[Offset: 0xb0, Size: 12]
	<int,InfectionSpringUseData> SpringUseMap;//[Offset: 0xbc, Size: 60]

--------------------------------
Class: InfectionRoundTlogGuidData
	int GuidTriggerCount;//[Offset: 0x0, Size: 4]
	int GuidHandCloseCount;//[Offset: 0x4, Size: 4]
	int GuidArriveCloseCount;//[Offset: 0x8, Size: 4]

--------------------------------
Class: InfectionPlayerDeadTlogData
	int DeadPawnSubType;//[Offset: 0x0, Size: 4]
	float DeadPosiX;//[Offset: 0x4, Size: 4]
	float DeadPosiY;//[Offset: 0x8, Size: 4]
	float DeadPosiZ;//[Offset: 0xc, Size: 4]
	int KillPawnSubType;//[Offset: 0x10, Size: 4]
	float KillPosiX;//[Offset: 0x14, Size: 4]
	float KillPosiY;//[Offset: 0x18, Size: 4]
	float KillPosiZ;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: InfectionSpringUseData
	int SpringTag;//[Offset: 0x0, Size: 4]
	int NormalPlayerUseTimes;//[Offset: 0x4, Size: 4]
	int AvengerPlayerUseTimes;//[Offset: 0x8, Size: 4]
	int MotherZombieUseTimes;//[Offset: 0xc, Size: 4]
	int NormalZombieUseTimes;//[Offset: 0x10, Size: 4]
	int InvisibleZombieUseTimes;//[Offset: 0x14, Size: 4]
	int ThrowerZombieUseTimes;//[Offset: 0x18, Size: 4]

--------------------------------
Class: InfectionRoleTableRow
	int ID;//[Offset: 0x0, Size: 4]
	FString RoleName;//[Offset: 0x4, Size: 12]
	int DieExchange;//[Offset: 0x10, Size: 4]
	int MatrixEffect;//[Offset: 0x14, Size: 4]
	int BornChoose;//[Offset: 0x18, Size: 4]
	FString WeIcon;//[Offset: 0x1c, Size: 12]
	FString EnemyIcon;//[Offset: 0x28, Size: 12]
	enum[] VisibleRange;//[Offset: 0x34, Size: 12]
	int MainSkillId;//[Offset: 0x40, Size: 4]
	int[] BornSkillList;//[Offset: 0x44, Size: 12]
	FString SkillIcon;//[Offset: 0x50, Size: 12]
	FString SkillCDIcon;//[Offset: 0x5c, Size: 12]
	FString SkillName;//[Offset: 0x68, Size: 12]
	FString SkillDetail;//[Offset: 0x74, Size: 12]
	float SkillCD;//[Offset: 0x80, Size: 4]
	FString HeroIcon;//[Offset: 0x84, Size: 12]

--------------------------------
Class: InfectionScoreTableRow
	int ID;//[Offset: 0x0, Size: 4]
	int Identity;//[Offset: 0x4, Size: 4]
	FString Action;//[Offset: 0x8, Size: 12]
	int param1;//[Offset: 0x14, Size: 4]
	int Score;//[Offset: 0x18, Size: 4]

--------------------------------
Class: InfectionContinuousKillInfo
	enum PawnType;//[Offset: 0x0, Size: 1]
	int KillNumber;//[Offset: 0x4, Size: 4]
	FString KillerName;//[Offset: 0x8, Size: 12]

--------------------------------
Class: BP_STRUCT_InfectModeMsgIDCfg_type
	int FlagType_0_72B3F500739E321A0A23CC9D077EF635;//[Offset: 0x0, Size: 4]
	FString TurnplateChatIDList_1_096F880020F397FC54CCF31403E9DA74;//[Offset: 0x4, Size: 12]
	FString MenuChatIDList_2_3D047D80224763B807E924800784F994;//[Offset: 0x10, Size: 12]

--------------------------------
Class: BP_STRUCT_FlagIDCfg_type
	FString MinDist_6_0B46994033686B57353ADBF500714494;//[Offset: 0x0, Size: 12]
	FString ChatIDList_1_4EF37580641F954251E0DAFB019B9714;//[Offset: 0xc, Size: 12]
	int FlagType_2_11577240100B60A917DCD1AD0B460365;//[Offset: 0x18, Size: 4]
	int FlagIndex_3_792107C04BF74D1D091F4261042C7A78;//[Offset: 0x1c, Size: 4]
	FString TraceDist_7_58300C000EE7C4781954B3CD040DA8B4;//[Offset: 0x20, Size: 12]
	int AlternateChatID_5_30B4D68067E6F79C260EA2C400C3E5D4;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: BP_STRUCT_QuickSignCfg_type
	FString AudioPath_15_542FCCC0273B734F1E867B74099F88F8;//[Offset: 0x0, Size: 12]
	FString IconBGPath_16_5BDF54C04BC63EDF39F3D4B505D210D8;//[Offset: 0xc, Size: 12]
	FString IconPath_17_79023280522DA7F41B3040310874D6D8;//[Offset: 0x18, Size: 12]
	FString ID_18_3F8DB04004E99B570550F27B0E37BE54;//[Offset: 0x24, Size: 12]
	int LifeSpan_19_0AFEB18006FB71A602526E5601FD19DE;//[Offset: 0x30, Size: 4]
	int MaxNum_20_73CA82807AF1FB3255FB24340FB7020D;//[Offset: 0x34, Size: 4]
	FString RespondID_21_0E2787006157EE48655D98DC092FB8F4;//[Offset: 0x38, Size: 12]
	FString ScriptParam_22_3C7BC68011D8B81C27E5F03F0C67C40D;//[Offset: 0x44, Size: 12]
	int TextID_23_7A2819807E81ADFC4845A72A0F22CF64;//[Offset: 0x50, Size: 4]
	int SignSubType_24_6FD8044017325E7F589E0E8C0146BF25;//[Offset: 0x54, Size: 4]
	FString IconOutScreenBGPath_25_365F3AC03DE161730C8814750C718E08;//[Offset: 0x58, Size: 12]
	FString IconOutScreenPath_26_3B2818806791463445FB230906AD7548;//[Offset: 0x64, Size: 12]
	FString OutScreenArrowPath_27_3B0A390024BFB9D000BD28FC0036EE38;//[Offset: 0x70, Size: 12]

--------------------------------
Class: BP_MapUIMarkManager_C.MapUIMarkManager.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: BP_ChangeWearingComp_C.ChangeWearingComponent.ActorComponent.Object

--------------------------------
Class: ChangeWearingComponent.ActorComponent.Object
	int WillChangeWearIndex;//[Offset: 0xbc, Size: 4]
	float CoolDownTime;//[Offset: 0xc0, Size: 4]
	float SocialIslandCoolDownTime;//[Offset: 0xc4, Size: 4]
	float LastChangeWearTime;//[Offset: 0xc8, Size: 4]
	void ServerRequestChangeWear(int Index);// 0x1f633e4
	bool RequestChangeWearInBattle(int Index);// 0x1f63364
	bool RequestChangeWear(int Index);// 0x1f632e4
	void RealChangeWearInBattle(int Index);// 0x1f6326c
	bool IsInCoolDownTime(bool bWithLog);// 0x1f631e4
	bool IsInBattleState(bool bWithLog);// 0x1f6315c
	bool IsChangeWearingOpend();// 0x1f63134
	bool IsAllowChangeWearingState(bool bWithLog);// 0x1f630ac
	float GetCoolDownTime();// 0x1f63084
	void ClientChangeWearDone(int Index, float ChangeWearTime, const GameModePlayerRolewearInfo[] AllWearData);// 0x1f62f58
	bool CheckCanChangeWearing(bool bWithLog);// 0x1f62ed0

--------------------------------
Class: BP_GameEventListener_C.GameEventListener.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x170, Size: 4]
	void SetDefaultNearClipPlane(bool CallFunc_IsIOSPlatform_IsIOS);// 0x2bb69b8
	void IsIOSPlatform(out bool IsIOS, int CallFunc_GetPlatformInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x2bb69b8
	void SetDefaultRendering();// 0x2bb69b8
	void EnableGrassLOD(int Enable, GameInstance* CallFunc_GetGameInstance_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void ChangeStreamingLevel(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLevel_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x2bb69b8
	void InitIncaseReconnect(GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsPlayerLandFromTheAir_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsIOSPlatform_IsIOS, bool CallFunc_IsIOSPlatform_IsIOS2, bool CallFunc_IsPlayerFlying_ReturnValue);// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void CustomEvent(byte gamePawnEvent);// 0x2bb69b8
	void ReceiveEndPlay(byte EndPlayReason);// 0x2bb69b8
	void UnloadTree();// 0x2bb69b8
	void LoadTree();// 0x2bb69b8
	void ExecuteUbergraph_BP_GameEventListener(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_gamePawnEvent, byte K2Node_Event_EndPlayReason, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsDedicatedServer_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLevel_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess2, int CallFunc_GetDeviceLevel_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue2, GameInstance* CallFunc_GetGameInstance_ReturnValue3, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance3, bool K2Node_DynamicCast_bSuccess3);// 0x2bb69b8

--------------------------------
Class: GuideComponent_BP_C.GuideComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe0, Size: 4]
	void ShowGuideByStep(int Data, Vector2D Offset, Vector2D focusAbsPos, Vector2D focusAbsSize, Widget* FocusWidget, Image* guideImage, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void AddUIGuide(Widget* widget1, int guildUI1, Vector2D offset1, Vector2D size1, int childData1, GuideInfo K2Node_MakeStruct_GuideInfo, int CallFunc_Array_Add_ReturnValue);// 0x2bb69b8
	void InitUIGuide(Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void CreateGuideUI();// 0x2bb69b8
	void ExecuteUbergraph_GuideComponent_BP(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	int guideStep;//[Offset: 0xe4, Size: 4]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]

--------------------------------
Class: BP_ServerSwitcher_C.ServerSwitchComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x118, Size: 4]
	void ReceiveBeginPlay();// 0x2bb69b8
	void CustomEvent(bool BoolValue);// 0x2bb69b8
	void ExecuteUbergraph_BP_ServerSwitcher(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, bool K2Node_CustomEvent_BoolValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8

--------------------------------
Class: ServerSwitchComponent.ActorComponent.Object
	delegate OnFPSMonitorConfigSwitchRecv;//[Offset: 0xbc, Size: 12]
	delegate OnFPSLowWarning;//[Offset: 0xc8, Size: 12]
	FPSMonitorConfigSwitch FPSMonitorConfigSwitch;//[Offset: 0xd4, Size: 20]
	float LowFPSWarningTipsLastTime;//[Offset: 0xe8, Size: 4]
	FString[] FPSLowWarningSDKMatch;//[Offset: 0xec, Size: 12]
	bool bLocalSwitcherFPSLowWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	void RequireConfigRPC();// 0x20e9048
	void OnUserQualitySettingChanged(int renderlevel);// 0x20e8fd0
	void MakeLowFPSWarningEx();// 0x20e8fbc
	void MakeLowFPSWarning(float targetFPS, float currentFPS);// 0x20e8f00
	void CountingDown();// 0x20e8eec
	void CloseFPSCheck();// 0x20e8ed8
	void AnswerconfigRPC(FPSMonitorConfigSwitch configswitch);// 0x20e8e24

--------------------------------
Class: FPSMonitorConfigSwitch
	bool bFPSMonitor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float FPSCollectInternal;//[Offset: 0x4, Size: 4]
	int FPSCollectCountForGroup;//[Offset: 0x8, Size: 4]
	float FPSThreshold;//[Offset: 0xc, Size: 4]
	int FPSLowActionType;//[Offset: 0x10, Size: 4]

--------------------------------
Class: BP_CommonBtn_C.CommonBtnComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd0, Size: 4]
	void OnChangeOpenDoorMode(int openmode);// 0x2bb69b8
	void UnRegistShowDoorButton();// 0x2bb69b8
	void OnShowDoorButton(byte Type);// 0x2bb69b8
	void RegistShowDoorButton();// 0x2bb69b8
	void ShowDoorButton(bool Show, bool Open, int openmode, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController);// 0x2bb69b8
	void GetPlayerController(out BP_STExtraPlayerController_C* PlayerController, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void CharacterStatusChanged(bool IsNearDeath, bool IsRescueingOther);// 0x2bb69b8
	void PlayerControllerReconnectedDelegate_Event();// 0x2bb69b8
	void UI_Click(bool bSimulateExtraDoor);// 0x2bb69b8
	void ToogleDoor();// 0x2bb69b8
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x2bb69b8
	void AutoOpenDoor(bool BoolValue);// 0x2bb69b8
	void BP_SimulateUIClick(bool bExtraDoor);// 0x2bb69b8
	void ExecuteUbergraph_BP_CommonBtn(int EntryPoint, PUBGDoor* CallFunc_GetPriorityDoor_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsAimingExtraDoor_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool ___bool_Whether_the_gate_is_currently_open_or_close_Variable, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_IsNearDeath, bool K2Node_CustomEvent_IsRescueingOther, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool K2Node_CustomEvent_bSimulateExtraDoor, bool ___bool_Has_Been_Initd_Variable, bool ___bool_Variable, bool ___bool_IsClosed_Variable, bool K2Node_Event_bShow, bool K2Node_Event_bOpen, int K2Node_Event_doorOpenMode, bool CallFunc_IsValid_ReturnValue3, BP_DoorMetallic_C* K2Node_DynamicCast_AsBP_Door_Metallic, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue4, BP_DoorNormal_C* K2Node_DynamicCast_AsBP_Door_Normal, bool K2Node_DynamicCast_bSuccess3, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue5, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess4, bool K2Node_CustomEvent_BoolValue, bool K2Node_Event_bExtraDoor, bool ___bool_Variable2, bool K2Node_Select_Default);// 0x2bb69b8
	int openmode;//[Offset: 0xd4, Size: 4]
	byte BtnType;//[Offset: 0xd8, Size: 1]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]

--------------------------------
Class: BP_DoorMetallic_C.PUBGDoor.UAENetActor.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4e0, Size: 4]
	void UserConstructionScript();// 0x2bb69b8
	void Timeline_0__FinishedFunc();// 0x2bb69b8
	void Timeline_0__UpdateFunc();// 0x2bb69b8
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x2bb69b8
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2bb69b8
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x2bb69b8
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void OnBPRespawned();// 0x2bb69b8
	void ExecuteUbergraph_BP_DoorMetallic(int EntryPoint, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue2, Rotator CallFunc_MakeRotator_ReturnValue3, bool ___bool_Variable, bool K2Node_SwitchInteger_CmpSuccess, int ___int_Variable, int ___int_Variable2, int K2Node_Event_doorStateDst2, bool K2Node_Event_bExtraDoor2, float CallFunc_Lerp_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, Vector CallFunc_MakeVector_ReturnValue3, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, Rotator CallFunc_GetSocketRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, int K2Node_Event_doorStateDst, bool K2Node_Event_bExtraDoor, bool K2Node_SwitchInteger2_CmpSuccess, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult2, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult3, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult4, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, int K2Node_Select_Default, int CallFunc_PostEventAtLocation_ReturnValue2, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue4, bool CallFunc_IsValid_ReturnValue3);// 0x2bb69b8
	BoxComponent* InterForce;//[Offset: 0x4e4, Size: 4]
	BoxComponent* Interaction;//[Offset: 0x4e8, Size: 4]
	SceneComponent* Scene;//[Offset: 0x4ec, Size: 4]
	BoxComponent* Box;//[Offset: 0x4f0, Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x4f4, Size: 4]
	float Timeline_0_DoorNormalCurve_3AD59F7245D2BF58B24C7D8879A0FBEE;//[Offset: 0x4f8, Size: 4]
	byte Timeline_0__Direction_3AD59F7245D2BF58B24C7D8879A0FBEE;//[Offset: 0x4fc, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0x500, Size: 4]
	float from;//[Offset: 0x504, Size: 4]
	float to;//[Offset: 0x508, Size: 4]
	int FromState;//[Offset: 0x50c, Size: 4]
	int ToState;//[Offset: 0x510, Size: 4]
	AkAudioEvent* OpenDoorAudio;//[Offset: 0x514, Size: 4]
	AkAudioEvent* CloseDoorAudio;//[Offset: 0x518, Size: 4]

--------------------------------
Class: BP_DoorNormal_C.PUBGDoor.UAENetActor.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4e0, Size: 4]
	void UserConstructionScript();// 0x2bb69b8
	void ZeroToOne__FinishedFunc();// 0x2bb69b8
	void ZeroToOne__UpdateFunc();// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x2bb69b8
	void EventTimer();// 0x2bb69b8
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2bb69b8
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x2bb69b8
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x2bb69b8
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x2bb69b8
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x2bb69b8
	void OnBPRespawned();// 0x2bb69b8
	void ExecuteUbergraph_BP_DoorNormal(int EntryPoint, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue2, Rotator CallFunc_MakeRotator_ReturnValue3, bool ___bool_Variable, bool K2Node_SwitchInteger_CmpSuccess, int ___int_Variable, int ___int_Variable2, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, const BP_GrenadeDamageType_C* K2Node_DynamicCast_AsBP_Grenade_Damage_Type, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, float CallFunc_Lerp_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue, int K2Node_Event_doorStateDst2, bool K2Node_Event_bExtraDoor3, FString CallFunc_Concat_StrStr_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Rotator CallFunc_GetSocketRotation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue3, Vector CallFunc_GetRightVector_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue, bool K2Node_Event_isBeginPlay, bool K2Node_Event_bExtraDoor2, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, int K2Node_Event_doorStateDst, bool K2Node_Event_bExtraDoor, bool K2Node_SwitchInteger2_CmpSuccess, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult2, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult3, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult4, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Add_FloatFloat_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue4, int CallFunc_PostEventAtLocation_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int K2Node_Select_Default, int CallFunc_PostEventAtLocation_ReturnValue2, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue3, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector CallFunc_MakeVector_ReturnValue5, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_K2_IsValidTimerHandle_ReturnValue2);// 0x2bb69b8
	BoxComponent* InterForce;//[Offset: 0x4e4, Size: 4]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x4e8, Size: 4]
	BoxComponent* Interaction;//[Offset: 0x4ec, Size: 4]
	SceneComponent* Scene;//[Offset: 0x4f0, Size: 4]
	BoxComponent* Box;//[Offset: 0x4f4, Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x4f8, Size: 4]
	float ZeroToOne_DoorNormalCurve_E90A1C0246A80C0D1E9E33BE7ED870B3;//[Offset: 0x4fc, Size: 4]
	byte ZeroToOne__Direction_E90A1C0246A80C0D1E9E33BE7ED870B3;//[Offset: 0x500, Size: 1]
	TimelineComponent* ZeroToOne;//[Offset: 0x504, Size: 4]
	StaticMesh* BrokenMesh;//[Offset: 0x508, Size: 4]
	float HP;//[Offset: 0x50c, Size: 4]
	float HPTimer;//[Offset: 0x510, Size: 4]
	float to;//[Offset: 0x514, Size: 4]
	float from;//[Offset: 0x518, Size: 4]
	float HPDummy;//[Offset: 0x51c, Size: 4]
	TimerHandle DummyTimerHandler;//[Offset: 0x520, Size: 8]
	float GrenadeDamageRatio;//[Offset: 0x528, Size: 4]
	int FromState;//[Offset: 0x52c, Size: 4]
	int ToState;//[Offset: 0x530, Size: 4]
	AkAudioEvent* CloseDoorAudio;//[Offset: 0x534, Size: 4]
	AkAudioEvent* OpenDoorAudio;//[Offset: 0x538, Size: 4]

--------------------------------
Class: BP_GrenadeDamageType_C.DamageType.Object

--------------------------------
Class: BP_VehicleUser_C.VehicleUserComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b0, Size: 4]
	void EditorAxisMoveFreezed();// 0x2bb69b8
	void SetUAVSpeedPercent(float SpeedPercent);// 0x2bb69b8
	void SetUAVCameraMode(bool FreeCamera);// 0x2bb69b8
	void OnUnmanedVehicleHPChanged(float HP, float MaxHp, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void OnUnmanedVehicleFuelChanged(float Fuel, float MacFuel, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, int CallFunc_PostEvent_ReturnValue, STExtraUAVVehicleBase* K2Node_DynamicCast_AsSTExtra_UAVVehicle_Base, bool K2Node_DynamicCast_bSuccess, float CallFunc_Divide_FloatFloat_ReturnValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue3);// 0x2bb69b8
	void SendUIMsgWhenChangeSeatCompleted(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void SendUIMsgWhenEnterVehicleCompleted(bool CallFunc_IsUAV_ReturnValue, SurfBoardComp* CallFunc_GetComponentByClass_ReturnValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x2bb69b8
	void SendUIMsgWhenExitVehicleCompleted(class STExtraVehicleBase CallFunc_GetObjectClass_ReturnValue, bool CallFunc_IsUAV_ReturnValue, FString CallFunc_GetClassDisplayName_ReturnValue, bool CallFunc_EqualEqual_StriStri_ReturnValue, SurfBoardComp* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue2);// 0x2bb69b8
	void GetVehicleGoStraight(out float VehicleGoStraight, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void SetHelicopterCameraMode(bool IsFreeCamera);// 0x2bb69b8
	void HandleCharacterUnequipWeapon(STExtraWeapon* NewParam);// 0x2bb69b8
	void HandleCharacterEquipWeapon(STExtraWeapon* NewWeapon, byte Slot);// 0x2bb69b8
	void SwitchToLastWeapon(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SwitchWeaponBySlot_ReturnValue);// 0x2bb69b8
	void CacheLastUseWeaponSlot(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, WeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, byte CallFunc_GetCurrentUsingPropSlot_ReturnValue);// 0x2bb69b8
	void SetPlayMusic(bool Enabled);// 0x2bb69b8
	void SetDrivingViewMode(int int mode, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsUCAV_ReturnValue, VehicleSpringArmComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x2bb69b8
	void ResetInputs(bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void OnMotorcycleContactChanged(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void FixGoStraight(float InMoveRightRate, float GoStraightThreshold, out float OutMoveRightRate, float absInputRight, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_FMax_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2);// 0x2bb69b8
	void OnUpdateSeatGUI(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void OnVehicleWheelsHPChanged(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void StopPlayerAutoSprint(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void OnVehicleFuelChanged(float Fuel, float FuelMax, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void OnVehicleHPChanged(float HP, float HPMax, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void GetPlayerController(out BP_STExtraPlayerController_C* PlayerController, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void ExitVehicle();// 0x2bb69b8
	void EnterVehicle(bool IsDriver, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	void OnEnterVehicleCompleted(enum SeatType);// 0x2bb69b8
	void OnExitVehicleCompleted();// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x2bb69b8
	void OnCurrrentClosestVehicleChanged();// 0x2bb69b8
	void EventSetDrivingViewMode(int IntValue);// 0x2bb69b8
	void OnInputAxisMoveForward(float Rate);// 0x2bb69b8
	void OnInputAxisMoveRight(float Rate);// 0x2bb69b8
	void EventSetCarMusicSwitch(bool BoolValue);// 0x2bb69b8
	void EventSetHelicopterFreeCamera(bool BoolValue);// 0x2bb69b8
	void OnShutDownUnmannedVehicleCompleted(float cdTime);// 0x2bb69b8
	void OnLaunchUnmannedVehicleCompleted();// 0x2bb69b8
	void OnPauseUnmannedVehicleCompleted();// 0x2bb69b8
	void EventSetUAVFreeCamera(bool BoolValue);// 0x2bb69b8
	void EventSetSpeedPercent(float FloatValue);// 0x2bb69b8
	void EventUAVSingleOperate(bool BoolValue);// 0x2bb69b8
	void ExecuteUbergraph_BP_VehicleUser(int EntryPoint, enum K2Node_Event_SeatType2, enum K2Node_Event_SeatType, VehicleSeatComponent* CallFunc_GetComponentByClass_ReturnValue, VehicleCommonComponent* CallFunc_GetComponentByClass_ReturnValue2, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetFuelMax_ReturnValue, float CallFunc_GetVehicleHPMax_ReturnValue, float CallFunc_GetFuel_ReturnValue, float CallFunc_GetVehicleHP_ReturnValue, bool CallFunc_IsValid_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, VehicleSeatComponent* CallFunc_GetComponentByClass_ReturnValue3, VehicleCommonComponent* CallFunc_GetComponentByClass_ReturnValue4, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate3, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, delegate K2Node_CreateDelegate_OutputDelegate4, BP_STExtraWheeledVehicle_C* K2Node_DynamicCast_AsBP_STExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate5, delegate K2Node_CreateDelegate_OutputDelegate6, delegate K2Node_CreateDelegate_OutputDelegate7, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController2, bool CallFunc_IsValid_ReturnValue7, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController3, bool CallFunc_IsValid_ReturnValue8, delegate K2Node_CreateDelegate_OutputDelegate8, GameBackendHUD* CallFunc_GetInstance_ReturnValue, int K2Node_CustomEvent_IntValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, SaveGame* CallFunc_GetUserSettings_ReturnValue2, float K2Node_Event_rate2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config2, bool K2Node_DynamicCast_bSuccess3, float K2Node_Event_rate, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController4, bool K2Node_CustomEvent_BoolValue4, bool CallFunc_IsValid_ReturnValue9, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController5, delegate K2Node_CreateDelegate_OutputDelegate9, bool CallFunc_IsValid_ReturnValue10, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess4, delegate K2Node_CreateDelegate_OutputDelegate10, bool K2Node_CustomEvent_BoolValue3, float CallFunc_GetVehicleGoStraight_VehicleGoStraight, float CallFunc_FixGoStraight_OutMoveRightRate, bool CallFunc_IsValid_ReturnValue11, delegate K2Node_CreateDelegate_OutputDelegate11, float K2Node_Event_cdTime, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController6, bool K2Node_CustomEvent_BoolValue2, float K2Node_CustomEvent_FloatValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController7, bool K2Node_CustomEvent_BoolValue, bool CallFunc_IsValid_ReturnValue12, delegate K2Node_CreateDelegate_OutputDelegate12, delegate K2Node_CreateDelegate_OutputDelegate13, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue13, bool CallFunc_IsValid_ReturnValue14, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue15, delegate K2Node_CreateDelegate_OutputDelegate14, STExtraWheeledVehicle* K2Node_DynamicCast_AsSTExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess5, bool CallFunc_GetActorEnableCollision_ReturnValue);// 0x2bb69b8
	bool AxisMoveForwardFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 1]
	bool AxisMoveRightFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 1]
	float Fuel;//[Offset: 0x2b8, Size: 4]
	float FuelMax;//[Offset: 0x2bc, Size: 4]
	float HP;//[Offset: 0x2c0, Size: 4]
	float HPMax;//[Offset: 0x2c4, Size: 4]
	float OutMoveRightRate;//[Offset: 0x2c8, Size: 4]
	float RawSpeed;//[Offset: 0x2cc, Size: 4]
	enum SeatType;//[Offset: 0x2d0, Size: 1]
	byte LastWeaponSlot;//[Offset: 0x2d1, Size: 1]
	float UnmanedFuel;//[Offset: 0x2d4, Size: 4]
	float UnmanedFuelMax;//[Offset: 0x2d8, Size: 4]
	float UnmanedHP;//[Offset: 0x2dc, Size: 4]
	float UnmanedHPMax;//[Offset: 0x2e0, Size: 4]
	float UnmanedCallBackTime;//[Offset: 0x2e4, Size: 4]
	bool bShowUnmanedLowPowerTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]

--------------------------------
Class: STExtraUAVVehicleBase.STExtraVehicleBase.Pawn.Actor.Object
	VehicleUserComponent* UAVVehicleUserComponent;//[Offset: 0xf74, Size: 4]
	CameraComponent* CameraComponent;//[Offset: 0xf78, Size: 4]
	SpringArmComponent* SpringArmComp;//[Offset: 0xf7c, Size: 4]
	FName CameraBoneName;//[Offset: 0xf80, Size: 8]
	delegate OnVehicleUAVStateChanged;//[Offset: 0xf90, Size: 12]
	float FPP_TargetArmLength;//[Offset: 0xf9c, Size: 4]
	float TPP_TargetArmLength;//[Offset: 0xfa0, Size: 4]
	float UAVFPPCameraFovPercent;//[Offset: 0xfa4, Size: 4]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa8, Size: 1]
	enum UAVVehicleState;//[Offset: 0xfb0, Size: 1]
	float CoolDownTimeSpeed;//[Offset: 0xfb4, Size: 4]
	float CoolDownTimeMin;//[Offset: 0xfb8, Size: 4]
	float MaxOperateDistanceToPlayer;//[Offset: 0xfbc, Size: 4]
	float MaxOperateFalloffDistance;//[Offset: 0xfc0, Size: 4]
	float LowFuelWarning;//[Offset: 0xfc4, Size: 4]
	float SkillRecallingTime;//[Offset: 0xfc8, Size: 4]
	float SkillDisappearingTime;//[Offset: 0xfcc, Size: 4]
	float SkillDestoryTime;//[Offset: 0xfd0, Size: 4]
	float MaxCameraFOV;//[Offset: 0xff0, Size: 4]
	float MinCameraFOV;//[Offset: 0xff4, Size: 4]
	DriverAttachmentData[] DriverAttachmentDataList;//[Offset: 0xff8, Size: 12]
	void SetViewTargetAgainForOB();// 0x222e5d8
	void SetUAVVehicleState(enum NewState);// 0x222e564
	void SetFPPCameraFov(float factor);// 0x222e4ec
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool IsInitSetting);// 0x222e414
	void SendToServerUAVFPPCameraFovPercent(float percent);// 0x222e360
	void SendToServerIsFPP(bool IsFirstPerson);// 0x222e298
	void SendToServerClientInitOK();// 0x222e23c
	void SendToServerChangeCameraMode(bool isFreeMode);// 0x222e174
	void SendToAllChangeCameraMode(bool isFreeMode);// 0x222e0ec
	void OnRep_UAVVehicleState();// 0x2144368
	void OnRep_IsFPPChanged();// 0x222e0d8
	void OnRep_FPPCameraFovChanged();// 0x222e0c4
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x222df9c
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x222dde0
	float GetDisToPlayer();// 0x222ddb8
	bool CheckCanSwitchFPP();// 0x222dd88

--------------------------------
Class: DriverAttachmentData
	FName AttachmentDataName;//[Offset: 0x0, Size: 8]
	StaticMesh* AttachmentMesh;//[Offset: 0x8, Size: 40]
	StaticMesh* AttachmentMeshLod;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	float AttachDelayTime;//[Offset: 0x60, Size: 4]
	float DettachDelayTime;//[Offset: 0x64, Size: 4]
	StaticMeshComponent* AttachmentComponentInstance;//[Offset: 0x70, Size: 4]
	STExtraPlayerCharacter* AttachDriverCache;//[Offset: 0x74, Size: 4]

--------------------------------
Class: SurfBoardComp.ActorComponent.Object
	float SpeedThresholds;//[Offset: 0xbc, Size: 4]
	float JumpImpulse;//[Offset: 0xc0, Size: 4]
	float JumpImpulseBig;//[Offset: 0xc4, Size: 4]
	float MaxStateTime_Jump;//[Offset: 0xc8, Size: 4]
	float RealStateTime_Jump;//[Offset: 0xcc, Size: 4]
	float FloorInWaterLow;//[Offset: 0xd0, Size: 4]
	float HalfInWaterLow;//[Offset: 0xd4, Size: 4]
	float RealInWaterLow;//[Offset: 0xd8, Size: 4]
	float MaxHalfInWaterLowTime;//[Offset: 0xdc, Size: 4]
	float JumpCeilingHeight;//[Offset: 0xe0, Size: 4]
	float HalfJumpHeight;//[Offset: 0xe4, Size: 4]
	float RealJumpHeight;//[Offset: 0xe8, Size: 4]
	float MaxInHalfJumpHeightTime;//[Offset: 0xec, Size: 4]
	float MaxSpeed;//[Offset: 0xf0, Size: 4]
	float RealMaxSpeed;//[Offset: 0xf4, Size: 4]
	float InWaterTolerance;//[Offset: 0xf8, Size: 4]
	int LeaveFlyPointNum;//[Offset: 0x108, Size: 4]
	int PersistanceFrameThreshold;//[Offset: 0x10c, Size: 4]
	float AutoExitHeightThreshold;//[Offset: 0x110, Size: 4]
	float HitTestToSeaLevelBias;//[Offset: 0x114, Size: 4]
	enum SurfBoardState;//[Offset: 0x118, Size: 1]
	void ServerSetSurfBoardState(enum InState);// 0x2253690
	void OnRep_SurfBoardState();// 0x225367c
	void ClientSetSurfBoardState(enum InState);// 0x22535c8

--------------------------------
Class: BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	void ClientResetToTransform();// 0x51d11a4
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x11b0, Size: 4]
	void HandleRepCandidateAvatar();// 0x2bb69b8
	void HandleSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIndex, enum NewSeatType, int NewSeatIndex);// 0x2bb69b8
	void HandleAvatarEquiped();// 0x2bb69b8
	void HandleSeatOccupiersChanged();// 0x2bb69b8
	void HandleDriverChanged(STExtraPlayerCharacter* LastDriver, STExtraPlayerCharacter* NewDriver);// 0x2bb69b8
	void OnClientVehicleHealthStateChangedToDestory();// 0x2bb69b8
	void CreateDMI();// 0x2bb69b8
	void SetDMIParam(MaterialInstanceDynamic* Dim, FName Name, float Value, bool CallFunc_IsValid_ReturnValue);// 0x2bb69b8
	void UpdateExhaustFx(FName ExhaustName, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, ParticleSoftWrapperArray CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, ParticleSoftWrapper CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, CustomParticleSystemComponent* CallFunc_SpawnCustomEmitterAttached_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2bb69b8
	void OnClientVehicleHealthStateChanged(enum VehicleHealthState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x2bb69b8
	void UserConstructionScript();// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void OnSetTailLightValue(float LightValue);// 0x2bb69b8
	void OnEngineStart();// 0x2bb69b8
	void OnEngineStop();// 0x2bb69b8
	void OnBoostingChanged();// 0x2bb69b8
	void VehicleMeshChanged();// 0x2bb69b8
	void BPPlayOverlapDamageCameraShake();// 0x2bb69b8
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x2bb69b8
	void AdvanceVehicleMeshChanged();// 0x2bb69b8
	void BndEvt__VehicleAvatarComponent_BP_K2Node_ComponentBoundEvent_0_VehicleAvatarEquiped__DelegateSignatu();// 0x2bb69b8
	void BndEvt__VehicleAvatarComponent_BP_K2Node_ComponentBoundEvent_0_VehicleLoadedFPPMesh__DelegateSignatu();// 0x2bb69b8
	void BndEvt__VehicleAvatarComponent_BP_K2Node_ComponentBoundEvent_0_OnServerAvatarEquipedDelegate__Delega();// 0x2bb69b8
	void ExecuteUbergraph_BP_STExtraWheeledVehicle(int EntryPoint, FName CallFunc_Conv_StringToName_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, float K2Node_Event_LightValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate3, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, CameraShake* CallFunc_PlayCameraShake_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Actor* K2Node_Event_OtherActor, VehicleAdvanceAvatarComponent* CallFunc_GetVehicleAdvanceAvatar_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_GetFrontLightDIM_ReturnValue, MaterialInstanceDynamic* CallFunc_GetTailLightDIM_ReturnValue, MaterialInstanceDynamic* CallFunc_GetFFPLightDIM_ReturnValue, MaterialInstanceDynamic* CallFunc_GetFrontLightDIM_ReturnValue2, MaterialInstanceDynamic* CallFunc_GetFrontLightDIM_ReturnValue3, MaterialInstanceDynamic* CallFunc_GetFFPLightDIM_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue2);// 0x2bb69b8
	BP_VehicleShowFrameComp_C* BP_VehicleShowFrameComp;//[Offset: 0x11b4, Size: 4]
	VehicleAvatarComponent_BP_C* VehicleAvatarComponent_BP;//[Offset: 0x11b8, Size: 4]
	CameraComponent* Camera;//[Offset: 0x11bc, Size: 4]
	VehicleSpringArmComponent* vehicleSpringArm;//[Offset: 0x11c0, Size: 4]
	bool IsPlayingEngineAk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c4, Size: 1]
	FName TailLightParamName;//[Offset: 0x11c8, Size: 8]
	FName FrontLightParamName;//[Offset: 0x11d0, Size: 8]
	FName FPPBoostLightParamName;//[Offset: 0x11d8, Size: 8]
	bool bEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e0, Size: 1]
	float LastOverlapShakeTime;//[Offset: 0x11e4, Size: 4]
	float OverlapShakeInterval;//[Offset: 0x11e8, Size: 4]
	bool bLobbyShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ec, Size: 1]
	bool bInvincibleProtect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ed, Size: 1]

--------------------------------
Class: BP_VehicleShowFrameComp_C.ShowActorFrameComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ShowActorFrameComponent.SceneComponent.ActorComponent.Object
	FrameUITransformData FrameUITransformData;//[Offset: 0x260, Size: 64]
	MaterialBillboardComponent* FrameUI;//[Offset: 0x2a0, Size: 8]
	int TranslucentSortPriority;//[Offset: 0x2a8, Size: 4]
	MaterialInterface* Material;//[Offset: 0x2ac, Size: 4]
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x2b0, Size: 4]
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 1]
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x2b8, Size: 4]
	FString FrameDetailsUIPath;//[Offset: 0x2bc, Size: 12]
	FString FrameDetailsParentWidgetName;//[Offset: 0x2c8, Size: 12]
	FString FrameDetailsParentOuterName;//[Offset: 0x2d4, Size: 12]
	FString BPFunction_WhenWidgetCreate;//[Offset: 0x2e0, Size: 12]
	FString BPFunction_WhenWidgetDestroy;//[Offset: 0x2ec, Size: 12]
	ActorPositionWidget* DetailsWidget;//[Offset: 0x2f8, Size: 4]
	ActorPositionWidget* GetDetailsWidget();// 0x20ed5d4
	void DestroyFrameUI();// 0x20ed5c0
	bool CreateFrameUI(int ParamIfNecessary);// 0x20ed540

--------------------------------
Class: FrameUITransformData
	Transform Offset;//[Offset: 0x0, Size: 48]
	float BaseSizeX;//[Offset: 0x30, Size: 4]
	float BaseSizeY;//[Offset: 0x34, Size: 4]

--------------------------------
Class: ActorPositionWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanelSlot* MyCanvasPanelSlot;//[Offset: 0x304, Size: 4]
	TextBlock* TextBlockDist;//[Offset: 0x308, Size: 4]
	Actor* AttachedActor;//[Offset: 0x30c, Size: 4]
	Vector4 Limit;//[Offset: 0x310, Size: 16]
	Vector2D UIOffset;//[Offset: 0x320, Size: 8]
	Vector LocOffset;//[Offset: 0x328, Size: 12]
	bool BNeedShowArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	float AlphaBegin;//[Offset: 0x338, Size: 4]
	float AlphaEnd;//[Offset: 0x33c, Size: 4]
	float AlphaStep;//[Offset: 0x340, Size: 4]
	float AlphaBeginDistance;//[Offset: 0x344, Size: 4]
	float AlphaEndDistance;//[Offset: 0x348, Size: 4]
	float ScaleBegin;//[Offset: 0x34c, Size: 4]
	float ScaleEnd;//[Offset: 0x350, Size: 4]
	float ScaleStep;//[Offset: 0x354, Size: 4]
	float ScaleBeginDistance;//[Offset: 0x358, Size: 4]
	float ScaleEndDistance;//[Offset: 0x35c, Size: 4]
	float MaxShowDistance;//[Offset: 0x360, Size: 4]
	int TargetDistance;//[Offset: 0x364, Size: 4]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x374, Size: 4]
	void ShowArrowAngle(bool Visible, float Angle);// 0x2bb69b8
	void SetCurrentWidgetVisible(bool Visible);// 0x2bb69b8
	void SetActorImage(Texture2D* Texture);// 0x2bb69b8
	void PostAttachmentChanged();// 0x2bb69b8
	void DetachFromActor(Actor* InActor);// 0x1ec094c
	void AttachToActor(Actor* InActor);// 0x1ec08d4

--------------------------------
Class: VehicleAvatarComponent_BP_C.VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x458, Size: 4]
	FName GetReflectionCubeName_Lobby();// 0x2bb69b8
	void TryAddLightEffect(BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue, BackpackVehicleAvatarHandle* K2Node_DynamicCast_AsBackpack_Vehicle_Avatar_Handle, bool K2Node_DynamicCast_bSuccess, class BackpackVehicleAvatarHandle CallFunc_GetObjectClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue);// 0x2bb69b8
	FString GetItemAvatarHandlePath(int ItemId, ItemRecordData CallFunc_GetItemRecord_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_GetPath_ReturnValue, FString CallFunc_GetPath_ReturnValue2, bool CallFunc_IsBattleItemHandlePathExist_ReturnValue);// 0x2bb69b8
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId, bool NewLocalVar, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue2, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class Object CallFunc_GetClass_ReturnValue2, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base2, bool K2Node_ClassDynamicCast_bSuccess2, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue2, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle, bool K2Node_DynamicCast_bSuccess, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle2, bool K2Node_DynamicCast_bSuccess2);// 0x2bb69b8
	void OnLoaded_F4972C3D46F3CFC0E0742D8E88D4527B(Object* Loaded);// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void VehicleAvatarEquiped();// 0x2bb69b8
	void OnAddLightEffect(ParticleSystem* LightEffect);// 0x2bb69b8
	void VehicleFPPMeshLoaded();// 0x2bb69b8
	void LoadedBrokenMat();// 0x2bb69b8
	void ClearVehicleLightEffect();// 0x2bb69b8
	void ExecuteUbergraph_VehicleAvatarComponent_BP(int EntryPoint, Object* K2Node_CustomEvent_Loaded, delegate K2Node_CreateDelegate_OutputDelegate, Object* ___object_Variable, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, ParticleSystem* K2Node_CustomEvent_LightEffect, delegate K2Node_CreateDelegate_OutputDelegate4, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, bool CallFunc_EqualEqual_SoftObjectReference_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x2bb69b8
	ParticleSystem* CurLightEffect;//[Offset: 0x460, Size: 40]
	ParticleSystemComponent* LightEffect;//[Offset: 0x488, Size: 4]
	bool VehicleBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 1]

--------------------------------
Class: BP_PlayerCameraManager_C.STPlayerCameraManager.PlayerCameraManager.Actor.Object

--------------------------------
Class: STPlayerCameraManager.PlayerCameraManager.Actor.Object
	bool InVehicleFPPViewPitchLimitMinPositiveDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa8, Size: 1]
	bool InVehicleFPPViewPitchLimitMaxDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa9, Size: 1]
	float InVehicleFPPViewPitchLimitMin;//[Offset: 0x1aac, Size: 4]
	float InVehicleFPPViewPitchLimitMax;//[Offset: 0x1ab0, Size: 4]
	float InVehicleFPPViewYawLimit;//[Offset: 0x1ab4, Size: 4]
	float InVehicleNarrowSeatGrenadesYawLimit;//[Offset: 0x1ab8, Size: 4]
	float FPPYawLimitInZipline;//[Offset: 0x1abc, Size: 4]

--------------------------------
Class: BP_BattleRoyaleHUD_Sink_C.BP_BattleRoyaleHUD_FM_C.BP_BattleRoyaleHUD_C.SurviveHUD.HUD.Actor.Object

--------------------------------
Class: BP_BattleRoyaleHUD_FM_C.BP_BattleRoyaleHUD_C.SurviveHUD.HUD.Actor.Object

--------------------------------
Class: BP_BattleRoyaleHUD_C.SurviveHUD.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x588, Size: 4]
	bool IsValidDamageNumber(Actor* DamageCauser, int DamageTypeId, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue2, byte CallFunc_GetWeaponTypeNew_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Array_Find_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue2);// 0x2bb69b8
	LinearColor GetPlayerNameColorByTeamID(int TeamID, Color CallFunc_GetPlayerNameColorByTeamID_PlayerNameColor, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue);// 0x2bb69b8
	LinearColor GetColorByTeamID(int TeamID, Color CallFunc_GetPlayerColorByTeamID_PlayerColor, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue);// 0x2bb69b8
	void UserConstructionScript();// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void HitFeedBackChanged(bool BoolValue);// 0x2bb69b8
	void OBSHitFeedbackChanged(bool BoolValue);// 0x2bb69b8
	void ExecuteUbergraph_BP_BattleRoyaleHUD(int EntryPoint, bool K2Node_CustomEvent_BoolValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool K2Node_CustomEvent_BoolValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x58c, Size: 4]
	int[] DamageNumberDamageTypes;//[Offset: 0x590, Size: 12]
	byte[] InvalidDamageNumberWeaponTypes;//[Offset: 0x59c, Size: 12]

--------------------------------
Class: BP_PlayerCharacter_Sink_Revival_C.BP_PlayerCharacter_Sink_C.BP_PlayerPawn_FM_C.BP_PlayerPawn_C.STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object

--------------------------------
Class: BP_PlayerCharacter_Sink_C.BP_PlayerPawn_FM_C.BP_PlayerPawn_C.STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	void ServerRPC_TriggerZiplineSkill(Actor* ObjectProperty);// 0x51d11a4
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3574, Size: 4]
	void OptimizeTickOnLowDevice(bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetExactDeviceLevel_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2bb69b8
	void UserConstructionScript();// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void LuaReceiveBeginPlay();// 0x2bb69b8
	void ExecuteUbergraph_BP_PlayerCharacter_Sink(int EntryPoint);// 0x2bb69b8
	float[] DistanceFactors;//[Offset: 0x3578, Size: 12]

--------------------------------
Class: BP_PlayerPawn_FM_C.BP_PlayerPawn_C.STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3568, Size: 4]
	void ShouldShowDersertEffect(out bool res, Actor*[] ___object_Variable, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Add_VectorVector_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2bb69b8
	void OnAnyscLoadEffect(Object* patticle, FString CallFunc_GetDisplayName_ReturnValue, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue);// 0x2bb69b8
	void CheckForDesertEffect(bool CallFunc_ShouldShowDersertEffect_res, bool CallFunc_IsActive_ReturnValue);// 0x2bb69b8
	void InitDesertEffect(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLevel_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_NotEqual_IntInt_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_HasAuthority_ReturnValue);// 0x2bb69b8
	void UserConstructionScript();// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void HandleOnAttachedVehicle(STExtraVehicleBase* InVehicle);// 0x2bb69b8
	void LuaReceiveBeginPlay();// 0x2bb69b8
	void ExecuteUbergraph_BP_PlayerPawn_FM(int EntryPoint, enum ___byte_Variable, enum ___byte_Variable2, enum ___byte_Variable3, int ___int_Variable, enum ___byte_Variable4, enum ___byte_Variable5, STExtraVehicleBase* K2Node_Event_InVehicle, UAEPlayerState* K2Node_DynamicCast_AsUAEPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, int CallFunc_FTrunc_ReturnValue, enum ___byte_Variable6, bool CallFunc_IsDedicatedServer_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2);// 0x2bb69b8
	STBuffSystemComponent* STBuffSystem;//[Offset: 0x356c, Size: 4]
	ParticleSystemComponent* DersertEffectCom;//[Offset: 0x3570, Size: 4]

--------------------------------
Class: BP_PaintDecalDetectLine1_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x300, Size: 4]
	void UpdateDetectLine(Actor* CallFunc_GetParentActor_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, enum CallFunc_IsValidPaintDecalTarget_OutvalidationType, Vector CallFunc_IsValidPaintDecalTarget_OutStart, Vector CallFunc_IsValidPaintDecalTarget_OutEnd, bool CallFunc_IsValidPaintDecalTarget_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool CallFunc_EqualEqual_VectorVector_ReturnValue);// 0x2bb69b8
	void UserConstructionScript();// 0x2bb69b8
	void ReceiveTick(float DeltaSeconds);// 0x2bb69b8
	void StopDetecting();// 0x2bb69b8
	void StartDetecting();// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void ExecuteUbergraph_BP_PaintDecalDetectLine1(int EntryPoint, float K2Node_Event_DeltaSeconds, Vector CallFunc_K2_GetComponentLocation_ReturnValue);// 0x2bb69b8
	StaticMeshComponent* StaticMesh;//[Offset: 0x304, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x308, Size: 4]
	Vector CachePos;//[Offset: 0x30c, Size: 12]

--------------------------------
Class: BP_PlayerState_Sink_C.BP_PlayerState_FourMaps_C.FourInOnePlayerState.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object

--------------------------------
Class: BP_PlayerState_FourMaps_C.FourInOnePlayerState.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	BP_PlayerStateStoreComponent_C* BP_PlayerStateStoreComponent;//[Offset: 0x11e8, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x11ec, Size: 4]

--------------------------------
Class: FourInOnePlayerState.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object

--------------------------------
Class: BP_PlayerStateStoreComponent_C.LuaActorComponent.ActorComponent.Object
	PlayerGoodsInfo[] GoodsList;//[Offset: 0x150, Size: 12]

--------------------------------
Class: PlayerGoodsInfo
	int ItemId;//[Offset: 0x0, Size: 4]
	int PlayerBuyLeftCount;//[Offset: 0x4, Size: 4]
	int PlayerBuyMaxCount;//[Offset: 0x8, Size: 4]
	int ConditionCount;//[Offset: 0xc, Size: 4]
	bool RandomHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: BP_SinkLevelDirector_C.UAELevelDirector.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x440, Size: 4]

--------------------------------
Class: BP_GameState_Sink_C.BP_GameState_FourMaps_C.FourInOneGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	ReviveBattleUIComponent* ReviveBattleUI;//[Offset: 0xef4, Size: 4]

--------------------------------
Class: BP_GameState_FourMaps_C.FourInOneGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	AirAttackComponent* AirAttack;//[Offset: 0xee0, Size: 4]
	BP_GameStateStoreComponent_C* BP_GameStateStoreComponent;//[Offset: 0xee4, Size: 4]
	GameLevelManagerComponent* GameLevelManager;//[Offset: 0xee8, Size: 4]
	AirAttackCS* AirAttackCS;//[Offset: 0xeec, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0xef0, Size: 4]

--------------------------------
Class: FourInOneGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	PolygonSoftBoundaryActor* PolygonSoftBoundary;//[Offset: 0xe54, Size: 4]
	BattleRoyaleGameMode* MyGamoMode;//[Offset: 0xe58, Size: 4]
	<int64> LastTimeReportEuipmentFlow;//[Offset: 0xe5c, Size: 60]
	<int64> FirstTimeReportEuipmentFlow;//[Offset: 0xe98, Size: 60]
	float ConfigTickReportTimer;//[Offset: 0xed4, Size: 4]
	float TickReportTimer;//[Offset: 0xed8, Size: 4]
	bool bIsOpenEnemyMarkAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xedc, Size: 1]
	void OnReportPlayerEquipmentFlow(STExtraPlayerController* Controller, int EventType);// 0x1fde208
	void OnReportEquipmentFlow();// 0x1fde1f4
	float ModifyDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x1fde030
	bool IsInsideSoftBound(out const Vector Loc);// 0x1fddfa4

--------------------------------
Class: AirAttackComponent.TimerRegistComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x14c, Size: 12]
	Vector MapOriginal;//[Offset: 0x158, Size: 12]
	float MapRadius;//[Offset: 0x164, Size: 4]
	float FlightHeight;//[Offset: 0x168, Size: 4]
	float SeaLevelHeight;//[Offset: 0x16c, Size: 4]
	float DelayTime;//[Offset: 0x170, Size: 4]
	int WaveCount;//[Offset: 0x174, Size: 4]
	enum DefaultAirAttackGenerateType;//[Offset: 0x178, Size: 1]
	enum[] AirAttackGenerateTypeList;//[Offset: 0x17c, Size: 12]
	bool bAirAttackUseModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	CurveFloat* AttackAreaSizeModifierCurve;//[Offset: 0x18c, Size: 4]
	CurveFloat* BombCountModifierCurve;//[Offset: 0x190, Size: 4]
	int WaveInternal;//[Offset: 0x194, Size: 4]
	AirAttackCfg AirAttackConfig;//[Offset: 0x198, Size: 24]
	float BombBaseDamage;//[Offset: 0x1b0, Size: 4]
	float BombMinDamage;//[Offset: 0x1b4, Size: 4]
	float BroadcastClientDistance;//[Offset: 0x1b8, Size: 4]
	AirAttackOrder AirAttackOrder;//[Offset: 0x1bc, Size: 52]
	Vector AirAttackArea;//[Offset: 0x1f0, Size: 12]
	byte AirAttackStatus;//[Offset: 0x1fc, Size: 1]
	float AirAttackDummyTime;//[Offset: 0x200, Size: 4]
	AirAttackCS* AirAttackCS;//[Offset: 0x204, Size: 4]
	void RPC_NetMulticast_BroadcastAirAttackOrder(byte AttackMsg, int waveIndex, AirAttackOrder airAttackOrderSrc, Vector AirAttackAreaSrc);// 0x1eca050
	bool ReviseAirAttackLocation(out const Vector AirAttackLocation);// 0x1ec9fbc
	void DisableAirAttack();// 0x1ec9fa8
	void BroadcastAirAttackOver();// 0x1ec9f94

--------------------------------
Class: AirAttackCfg
	float EscapeTime;//[Offset: 0x0, Size: 4]
	float AttackLastingTime;//[Offset: 0x4, Size: 4]
	float AttackAreaRadius;//[Offset: 0x8, Size: 4]
	float OuterRadius;//[Offset: 0xc, Size: 4]
	int TotalBombs;//[Offset: 0x10, Size: 4]
	int BombsRadius;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AirAttackCS.TimerRegistComponent.ActorComponent.Object
	class STExtraExplosionEffect* ExplosionEffectTemplate;//[Offset: 0x104, Size: 4]
	float VisibleDistance;//[Offset: 0x108, Size: 4]
	float DelayDamageAndBomb;//[Offset: 0x10c, Size: 4]
	bool bHaveFlyingAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	float AheadOfTime;//[Offset: 0x118, Size: 4]
	class Actor* FlyingMissileClass;//[Offset: 0x11c, Size: 4]
	int ActorPoolInitialSize;//[Offset: 0x120, Size: 4]
	Actor*[] MissileActorList;//[Offset: 0x124, Size: 12]
	AirAttackOrder AirAttackOrder;//[Offset: 0x130, Size: 52]
	Vector AirAttackArea;//[Offset: 0x164, Size: 12]
	void OnAirAttack(byte airattacktype, int waveIndex, out const AirAttackOrder InAirAttackOrder, out const Vector InAirAttackArea);// 0x1eca9d8
	void LaunchMissile(int Index);// 0x1eca960
	void DoBombHarmAtLocation(out Vector bombLocation, const float BombBaseDamage, const float BombMinDamage);// 0x1eca850
	void ClientFlyingMissile(int Index);// 0x1eca7d8
	void AirAttackThrowBomb(int Index);// 0x1eca760

--------------------------------
Class: BP_GameStateStoreComponent_C.LuaActorComponent.ActorComponent.Object
	BattleGoodsInfo[] BattleGoodsList;//[Offset: 0x150, Size: 12]

--------------------------------
Class: BattleGoodsInfo
	int ItemId;//[Offset: 0x0, Size: 4]
	int BattleMaxCount;//[Offset: 0x4, Size: 4]
	int BattleCount;//[Offset: 0x8, Size: 4]
	int PlayerBuyMaxCount;//[Offset: 0xc, Size: 4]
	int TimeLimit;//[Offset: 0x10, Size: 4]
	FString[] PlayerIDs;//[Offset: 0x14, Size: 12]
	int[] PlayerBuyNums;//[Offset: 0x20, Size: 12]
	int ReplenishTime;//[Offset: 0x2c, Size: 4]
	int ReplenishDuration;//[Offset: 0x30, Size: 4]
	int itemType;//[Offset: 0x34, Size: 4]
	int ItemOrder;//[Offset: 0x38, Size: 4]
	int ItemCountPerBuy;//[Offset: 0x3c, Size: 4]
	int[] CurrencyCost;//[Offset: 0x40, Size: 12]
	bool RandomHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]

--------------------------------
Class: GameLevelManagerComponent.ActorComponent.Object
	delegate OnAppendEliteGroup;//[Offset: 0xbc, Size: 12]
	delegate OnRemoveEliteGroup;//[Offset: 0xc8, Size: 12]
	int EliteWarningItemIconID;//[Offset: 0xd4, Size: 4]
	<int,int> EliteWarningItemInstanceIDMap;//[Offset: 0xd8, Size: 60]
	GameLevelDesc[] CurActiveGameLevelList;//[Offset: 0x114, Size: 12]
	LevelData[] CurActiveGameLevelDataList;//[Offset: 0x120, Size: 12]
	int TotalAliveMonsterNum;//[Offset: 0x12c, Size: 4]
	int BornLevelMonsterNum;//[Offset: 0x130, Size: 4]
	int BornShitMonsterNum;//[Offset: 0x134, Size: 4]
	<FString,SingleLevelObjArray> LevelObjs;//[Offset: 0x138, Size: 60]
	AliveMonsterNum[] AliveMonsterNumList;//[Offset: 0x174, Size: 12]
	GameLevelDesc CurCompletedGameLevel;//[Offset: 0x180, Size: 20]
	float LevelBeginTime;//[Offset: 0x194, Size: 4]
	float LevelEndTime;//[Offset: 0x198, Size: 4]
	int GM_Diffcult;//[Offset: 0x19c, Size: 4]
	bool GM_UnLoadLevelData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	bool GM_UnLoadDynamicLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
	float NavTickInterval;//[Offset: 0x1a4, Size: 4]
	LevelData[] LevelDataList;//[Offset: 0x1a8, Size: 12]
	LevelRelifePointInfo[] LevelRelifePointList;//[Offset: 0x1b8, Size: 12]
	FString MonsterTableName;//[Offset: 0x1c4, Size: 12]
	FString MonsterBPTableName;//[Offset: 0x1d0, Size: 12]
	FString MonsterSpecialStateTableName;//[Offset: 0x1dc, Size: 12]
	FString DecoratorTableName;//[Offset: 0x1e8, Size: 12]
	FString MonsterDropTableName;//[Offset: 0x1f4, Size: 12]
	int RelifePosOffsetZ;//[Offset: 0x200, Size: 4]
	Actor* SpawnPickup(int ID, out const Transform Transform, const int ContentNum);// 0x1fe2d10
	Actor* SpawnMonster(int ID, out const Transform Transform, out const MonsterParams Params);// 0x1fe2b00
	void RemoveRelifePoint(out GameLevelDesc LevelDesc);// 0x1fe2a24
	void RegisterGameEvent();// 0x1fe2a10
	void OnRep_CurGameLevelChanged();// 0x1ee1bb4
	void OnMonsterWaveEnd(out GameLevelDesc LevelDesc, int WaveID);// 0x1fe28f0
	void OnGameStart();// 0x1fe28dc
	void OnGameEnd();// 0x1fe28c8
	void OnBotDied(Actor* Actor, Actor* Killer);// 0x1fe280c
	void OnBotBorn(Actor* Actor);// 0x1fe2794
	void OnActorUniqueIdRemove(uint32 SId);// 0x1fe271c
	void OnActorUniqueIdAdd(Actor* Actor, uint32 SId);// 0x1fe2660
	void OnActorSpawn(Actor* Actor);// 0x1fe25e8
	void OnActorDespawn(Actor* Actor);// 0x1fe2570
	bool KillUnitBySingleId(int SingleId, bool ForbidenReborn);// 0x1fe24a4
	bool KillUnitBySelf(Actor* TActor);// 0x1fe2424
	bool KillUnit(byte BotCat, int BotType, bool ForbidenReborn);// 0x1fe2314
	bool KillCategoryUnit(byte BotCat, bool ForbidenReborn);// 0x1fe2248
	void InitUnit(Actor* TActor, byte Category);// 0x1fe218c
	void InitRelifePoint(out GameLevelDesc LevelDesc, RelifePoint[] PVERelifePoints);// 0x1fe1f4c
	void InitLuaLevelActors();// 0x1fe1f38
	void InitLevelAddObjs(out LevelData LevelData);// 0x1fe1e30
	void Init();// 0x1fe1e1c
	void HandleGameLevelEnd(out GameLevelDesc LevelDesc);// 0x1fe1d44
	void HandleEnterLevel(out GameLevelDesc InLevelDesc, Actor* OffsetActor);// 0x1fe1c24
	Actor* GetUnit(byte Category, int TypeId);// 0x1fe1b60
	bool GetRelifeTrans(out const Vector NearVector, out Transform RelifeTrans);// 0x1fe1a30
	LevelData[] GetNearPosLevelList(int GetNum, int RandomNum, int ChapterType, Vector NearPos);// 0x1fe17fc
	bool GetNearPosLevel(Vector NearPos, int ChapterType, LevelData[] AvoidLevelList, out LevelData OutLevelData);// 0x1fe1494
	LevelData GetLoadedLevelData(out GameLevelDesc LevelDesc);// 0x1fe1390
	int GetAliveMonsterNum(byte SourceType);// 0x1fe1310
	LevelData GetActiveLevelDataByLevelDesc(out GameLevelDesc LevelDesc);// 0x1fe120c
	void EndLevelAddObjs(out LevelData LevelData);// 0x1fe1104
	void ChangeAliveMonsterNumList(byte SourceType, int Addition);// 0x1fe1048
	void BroadRemoveEliteGroup(int LevelId, Vector pos);// 0x1fe0f84
	void BroadAppendEliteGroup(int LevelId, Vector pos);// 0x1fe0ec0
	void AdjustPosByOffsetActor(out LevelData LevelData, Transform OffsetTrans);// 0x1fe0d00
	void ActiveRelifePoint(out GameLevelDesc LevelDesc, int ID, bool ActivePoint);// 0x1fe0b90

--------------------------------
Class: GameLevelDesc
	int ChapterID;//[Offset: 0x0, Size: 4]
	int LevelId;//[Offset: 0x4, Size: 4]
	FString Desc;//[Offset: 0x8, Size: 12]

--------------------------------
Class: LevelData
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 20]
	FString[] TargetClassPaths;//[Offset: 0x14, Size: 12]
	FString LeveDirectorFilePath;//[Offset: 0x20, Size: 12]
	byte EndCondType;//[Offset: 0x2c, Size: 1]
	FString EndCondPar;//[Offset: 0x30, Size: 12]
	bool IsLastLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int DiffcultPerc;//[Offset: 0x40, Size: 4]
	Vector[] TaskPointLocations;//[Offset: 0x44, Size: 12]
	RelifePoint[] PVERelifePointsInfo;//[Offset: 0x50, Size: 12]
	PVECircle[] PVECircleInfo;//[Offset: 0x5c, Size: 12]
	MonsterWave[] MonsterWaveCfg;//[Offset: 0x68, Size: 12]
	Vector pos;//[Offset: 0x74, Size: 12]
	LevelObjets[] LevelAddObjs;//[Offset: 0x80, Size: 12]

--------------------------------
Class: RelifePoint
	int ID;//[Offset: 0x0, Size: 4]
	bool IsActivePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Transform Trans;//[Offset: 0x10, Size: 48]

--------------------------------
Class: PVECircle
	int CircleID;//[Offset: 0x0, Size: 4]
	Vector2D targetPos;//[Offset: 0x4, Size: 8]
	float Radius;//[Offset: 0xc, Size: 4]
	float MoveTime;//[Offset: 0x10, Size: 4]
	float Pain;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MonsterWave
	float WaveDelayTime;//[Offset: 0x0, Size: 4]
	MonsterGroup[] MonsterGroupList;//[Offset: 0x4, Size: 12]
	FString Desc;//[Offset: 0x10, Size: 12]
	byte EndCondType;//[Offset: 0x1c, Size: 1]
	int EndCondPar;//[Offset: 0x20, Size: 4]
	int ID;//[Offset: 0x24, Size: 4]

--------------------------------
Class: MonsterGroup
	FString Desc;//[Offset: 0x0, Size: 12]
	byte ChooseGroupSpotType;//[Offset: 0xc, Size: 1]
	int NearPlayTeamIdx;//[Offset: 0x10, Size: 4]
	ZMonsterSpotGroup*[] SpotGroupChooseList;//[Offset: 0x14, Size: 12]
	MonsterSpotGroup[] MonsterSpotGroupChooseList;//[Offset: 0x20, Size: 12]
	MonsterGeneratePlan[] PlanList;//[Offset: 0x2c, Size: 12]
	int ID;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ZMonsterSpotGroup.SceneComponent.ActorComponent.Object
	FString Desc;//[Offset: 0x260, Size: 12]
	ZMonsterSpot*[] SpotList;//[Offset: 0x26c, Size: 12]

--------------------------------
Class: ZMonsterSpot.ZSpotSceneComponent.SceneComponent.ActorComponent.Object
	FString Desc;//[Offset: 0x260, Size: 12]
	byte MonsterSpotType;//[Offset: 0x26c, Size: 1]
	ZMonsterRoadPoint*[] RoadPointList;//[Offset: 0x270, Size: 12]
	byte SpotRadius;//[Offset: 0x27c, Size: 1]

--------------------------------
Class: ZSpotSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ZMonsterRoadPoint.ZSpotSceneComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x260, Size: 4]
	int Radius;//[Offset: 0x264, Size: 4]

--------------------------------
Class: MonsterSpotGroup
	FString Desc;//[Offset: 0x0, Size: 12]
	Vector pos;//[Offset: 0xc, Size: 12]
	MonsterSpot[] SpotList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MonsterSpot
	FString Desc;//[Offset: 0x0, Size: 12]
	byte MonsterSpotType;//[Offset: 0xc, Size: 1]
	Vector pos;//[Offset: 0x10, Size: 12]
	RoadPointInfo[] RoadPointList;//[Offset: 0x1c, Size: 12]
	byte SpotRadius;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MonsterGeneratePlan
	FString Desc;//[Offset: 0x0, Size: 12]
	int PlanWeight;//[Offset: 0xc, Size: 4]
	MonsterGenerateCfg[] PlanDetail;//[Offset: 0x10, Size: 12]
	int ID;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: MonsterGenerateCfg
	int MonsterID;//[Offset: 0x0, Size: 4]
	FString Desc;//[Offset: 0x4, Size: 12]
	byte SpotType;//[Offset: 0x10, Size: 1]
	int MonsterNum;//[Offset: 0x14, Size: 4]
	float RandomGenerateDelayTime;//[Offset: 0x18, Size: 4]
	int ReBornTimes;//[Offset: 0x1c, Size: 4]
	int ReBornDelay;//[Offset: 0x20, Size: 4]
	float GenerateDelayTime;//[Offset: 0x24, Size: 4]
	int ID;//[Offset: 0x28, Size: 4]

--------------------------------
Class: LevelObjets
	class Object* Objects;//[Offset: 0x0, Size: 4]
	Transform Trans;//[Offset: 0x10, Size: 48]

--------------------------------
Class: SingleLevelObjArray
	Actor*[] LevelObjs;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AliveMonsterNum
	int Num;//[Offset: 0x0, Size: 4]
	byte SourceType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: LevelRelifePointInfo
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 20]
	RelifePointInfo[] RelifePointList;//[Offset: 0x14, Size: 12]

--------------------------------
Class: RelifePointInfo
	int ID;//[Offset: 0x0, Size: 4]
	Transform RelifeTrans;//[Offset: 0x10, Size: 48]
	bool IsActivePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: MonsterParams

--------------------------------
Class: BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate OnGameModeEnterFlying;//[Offset: 0x1650, Size: 12]
	delegate OnGameModeExitFlying;//[Offset: 0x165c, Size: 12]
	FString LogicAreaDataPath;//[Offset: 0x1668, Size: 12]
	bool bIsOpenEnemyMarkAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1680, Size: 1]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168c, Size: 1]
	bool bOpenVehicleAnti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168d, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168e, Size: 1]
	int StartReadyCountDownPlayerNum;//[Offset: 0x1690, Size: 4]
	bool bServerOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1694, Size: 1]
	float CharacterNetCullDistanceSquared;//[Offset: 0x1698, Size: 4]
	GamemodeAIDataAsset* GamemodeAIDataAsset;//[Offset: 0x169c, Size: 4]
	float DragOnGroundDownTraceDistance;//[Offset: 0x16a0, Size: 4]
	float DragOnGroundUpTraceDistance;//[Offset: 0x16a4, Size: 4]
	bool EnableAIWorldVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a8, Size: 1]
	CrowdManagerComponent* CrowdManager;//[Offset: 0x16c0, Size: 4]
	bool bReplacePistolWhenPickUpMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c4, Size: 1]
	delegate OnGameModeEnterPlane;//[Offset: 0x16c8, Size: 12]

--------------------------------
Class: BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	bool bUseSpawnSpotAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc8, Size: 1]
	bool bUseSpawnActorAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc9, Size: 1]
	bool bSpawnAdjustCollisionConsiderHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdca, Size: 1]
	int DefaultRevivalCount;//[Offset: 0xdcc, Size: 4]
	GameModeParms GameModeParms;//[Offset: 0xdd0, Size: 216]
	STExtraPlayerStart*[] STEPlayerStartsList;//[Offset: 0xea8, Size: 12]
	<int,BornPlayerStartData> BornIDToPlayerStartsMap;//[Offset: 0xeb4, Size: 60]
	enum GameModeType;//[Offset: 0xef0, Size: 1]
	enum GameModeSubType;//[Offset: 0xef1, Size: 1]
	AIActingComponent* AIActingComp;//[Offset: 0xef4, Size: 4]
	int bEnableAIPolicyDecisionLog;//[Offset: 0xef8, Size: 4]
	int bEnableAIPolicyDecisionLogShipping;//[Offset: 0xefc, Size: 4]
	bool IsDestroyNoActiveWorldActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf00, Size: 1]
	float AIPolicyDecisionRelevantUpdateInterval;//[Offset: 0xf04, Size: 4]
	float RelevantPlayerAIPolicyDecisionCheckDistanceSqurad;//[Offset: 0xf08, Size: 4]
	int AIPolicyDecisionTargetPlayerNum;//[Offset: 0xf0c, Size: 4]
	bool bVisibleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf10, Size: 1]
	FString SubAISuffix;//[Offset: 0xf14, Size: 12]
	ItemsBoxConfigDataAsset* PickupBoxConfigDataAsset;//[Offset: 0xf20, Size: 4]
	class AIController* AIControllerClass;//[Offset: 0xf24, Size: 4]
	class AIController* NewAIControllerClass;//[Offset: 0xf28, Size: 4]
	class UAELevelDirector* LevelDirectorClass;//[Offset: 0xf2c, Size: 4]
	UAELevelDirector* LevelDirector;//[Offset: 0xf30, Size: 4]
	byte WorldLoadedType;//[Offset: 0xf34, Size: 1]
	int MaxNoConsiderActorNum;//[Offset: 0xf38, Size: 4]
	int MaxDestoryActorNumPerFrame;//[Offset: 0xf3c, Size: 4]
	int PlayerNumPerTeam;//[Offset: 0xf40, Size: 4]
	bool IgnoreWorldLevelProbeUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf44, Size: 1]
	bool IsRefreshWorldActiveRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf45, Size: 1]
	FString GameModeDisplayName;//[Offset: 0xf48, Size: 12]
	float CircleSpeedMultiplicator;//[Offset: 0xf54, Size: 4]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf58, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf59, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5a, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5b, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5c, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5d, Size: 1]
	bool bForbitInvalidTeammateHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5e, Size: 1]
	bool bForbitFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5f, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf60, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf61, Size: 1]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf62, Size: 1]
	float ResetSignalHP_FatalDamage;//[Offset: 0xf64, Size: 4]
	float ResetSignalHP_Rescued;//[Offset: 0xf68, Size: 4]
	<float,float> SignalHPApplyExtraDamageConfigMap;//[Offset: 0xf6c, Size: 60]
	bool bDropDeadBoxWrappersToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa8, Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa9, Size: 1]
	int[] DropDeadBoxWrappersToGroundBlackList;//[Offset: 0xfac, Size: 12]
	float DropDeadBoxWrappersToGroundGridStep;//[Offset: 0xfb8, Size: 4]
	bool bEnableWeaponAttachmentBindDropToWeaponWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfbc, Size: 1]
	bool bEnableArmorEquipmentToBeAutoDroped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfbd, Size: 1]
	FString GameModeConfigPath;//[Offset: 0xfc0, Size: 12]
	bool bIsAutoReloadWeaponGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfcc, Size: 1]
	bool bIsPickUpFillBulletGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfcd, Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfce, Size: 1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfcf, Size: 1]
	bool IsSkipNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd0, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd1, Size: 1]
	GameModeParam CurPlaneRouteData;//[Offset: 0xfd4, Size: 76]
	Vector BornLocation;//[Offset: 0x1020, Size: 12]
	Vector AIBornLocation;//[Offset: 0x102c, Size: 12]
	float BornRadius;//[Offset: 0x1038, Size: 4]
	byte LastCircleCountToDestroyActorOnServer;//[Offset: 0x103c, Size: 1]
	byte LastCircleCountToDestroyActorOnServerConfig;//[Offset: 0x103d, Size: 1]
	int MaxDynamicLoadingWorldPlayer;//[Offset: 0x1040, Size: 4]
	int MaxDynamicLoadingWorldPlayerConfig;//[Offset: 0x1044, Size: 4]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x1048, Size: 4]
	bool bOpenWarModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104c, Size: 1]
	float MaxAIAllowJumpRadius;//[Offset: 0x1068, Size: 4]
	float HorizontalFlyDistanceAfterOpenParachute;//[Offset: 0x106c, Size: 4]
	bool EditorGuidMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1070, Size: 1]
	GameModeDataAsset* GameModeDataAsset;//[Offset: 0x1074, Size: 4]
	bool bImmediatelySpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1078, Size: 1]
	bool bRespawnAIPosWithTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1079, Size: 1]
	MonsterProbeComponent* RegisterMonsterProbe;//[Offset: 0x107c, Size: 4]
	AIWorldSoundManagerComponent* AIWorldSoundManagerComp;//[Offset: 0x1080, Size: 4]
	SeasonStatueBase* StatueBaseActor;//[Offset: 0x1084, Size: 4]
	float OverrideBackpackCapacity;//[Offset: 0x1088, Size: 4]
	bool bOverrideBackpackCapacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108c, Size: 1]
	FString LuaModPath;//[Offset: 0x10ac, Size: 12]
	FString LuaSubMod;//[Offset: 0x10b8, Size: 12]
	FString[] CustomWidgets;//[Offset: 0x10c4, Size: 12]
	FString CustomUIName;//[Offset: 0x10d0, Size: 12]
	GameModeState* CurrentState;//[Offset: 0x10dc, Size: 4]
	GameModeState*[] AllGameModeStates;//[Offset: 0x10e0, Size: 12]
	GameModeState* GameModeStateActive;//[Offset: 0x10ec, Size: 4]
	GameModeState* GameModeStateReady;//[Offset: 0x10f0, Size: 4]
	GameModeState* GameModeStateFighting;//[Offset: 0x10f4, Size: 4]
	GameModeState* GameModeStateFinished;//[Offset: 0x10f8, Size: 4]
	FName CurGameModeState;//[Offset: 0x1100, Size: 8]
	bool bInitGlobalConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1114, Size: 1]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x1118, Size: 4]
	EventReportComponent* EventReportComponent;//[Offset: 0x111c, Size: 4]
	Actor* PlanePawn;//[Offset: 0x1120, Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1124, Size: 1]
	GameModeProbeComponent*[] AllProbeComps;//[Offset: 0x1128, Size: 12]
	AIProbeComponent* RegisterAIProbe;//[Offset: 0x1134, Size: 4]
	WorldLevelProbeComponent* RegisterWorldLevelProbe;//[Offset: 0x1138, Size: 4]
	float OutBoundDamage;//[Offset: 0x113c, Size: 4]
	AIGroupManagerComponent* AIGroupManagerComp;//[Offset: 0x11c0, Size: 4]
	AnimalTeleportComponent* AnimalTeleportComp;//[Offset: 0x11c4, Size: 4]
	<uint32,byte> AISpawnTypeCache;//[Offset: 0x11c8, Size: 60]
	PlaneComponent* PlaneComp;//[Offset: 0x1204, Size: 4]
	PlayerRespawnComponent* PlayerRespawnComponent;//[Offset: 0x1208, Size: 4]
	RespawnItemConfig* DefaultGeneratePlayerItemConfig;//[Offset: 0x120c, Size: 4]
	ShowVehicleComponent* ShowVehicle;//[Offset: 0x1210, Size: 4]
	delegate OnSpawnAISuccessDelegate;//[Offset: 0x1234, Size: 12]
	PlaneTypes[] SeasonPlanes;//[Offset: 0x12a8, Size: 12]
	int MatchGoal;//[Offset: 0x12f8, Size: 4]
	bool bIsNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12fc, Size: 1]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x1314, Size: 56]
	ItemAttach[] ItemAttachListCfg;//[Offset: 0x134c, Size: 12]
	bool bShouldGenerateItemWhenStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1358, Size: 1]
	RespawnItemConfigInst[] RespawnItemConfigList;//[Offset: 0x135c, Size: 12]
	RespawnItemConfig* RespawnItemConfig;//[Offset: 0x1368, Size: 4]
	FakePlayerCustomComponent* FakePlayerCustomComponent;//[Offset: 0x136c, Size: 4]
	FName FeatureDefaultPawnName;//[Offset: 0x1370, Size: 8]
	FName FeaturePlayerControllerName;//[Offset: 0x1378, Size: 8]
	FName FeatureWeaponName;//[Offset: 0x1380, Size: 8]
	bool CallTeamMateStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1388, Size: 1]
	bool CircleDefaultActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1389, Size: 1]
	int VehicleExplosionLifeSpan;//[Offset: 0x138c, Size: 4]
	bool IsEnableReqEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1390, Size: 1]
	bool IsEnableReqExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1391, Size: 1]
	bool IsEnableReqChangeVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1392, Size: 1]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1393, Size: 1]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1394, Size: 1]
	bool bEnableDSAITickRateOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1395, Size: 1]
	DSTickRateOptimize DSTickRateOptimizeConfig;//[Offset: 0x1398, Size: 16]
	float DelaySpawnVehicleTime;//[Offset: 0x13a8, Size: 4]
	float DelayDestroyVehicleTime;//[Offset: 0x13ac, Size: 4]
	int MaxAllowSpawnVehicleCount;//[Offset: 0x13b0, Size: 4]
	bool bIgnorePlayerStartWithVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b4, Size: 1]
	<uint32,Actor*> PlayerVehicleInReady;//[Offset: 0x13b8, Size: 60]
	int MaxVehiclesInReady;//[Offset: 0x13f4, Size: 4]
	int MaxVehiclesPerGroupInReady;//[Offset: 0x13f8, Size: 4]
	bool EnableSuperCarPreTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13fc, Size: 1]
	int SuperCarNum;//[Offset: 0x1400, Size: 4]
	int MaxGroups;//[Offset: 0x1404, Size: 4]
	int MaxPlayersPerGroup;//[Offset: 0x1408, Size: 4]
	<int,GroupPlayers> PlayersInGroup;//[Offset: 0x140c, Size: 60]
	PVSNetRelevantHelper* PVSNetRelevantHelper;//[Offset: 0x1574, Size: 4]
	bool bOpenPVSNetRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1578, Size: 1]
	bool bDelayAddPawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1579, Size: 1]
	STExtraPlayerController*[] WaitAddWeaponPlayerList;//[Offset: 0x157c, Size: 12]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0x1588, Size: 12]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1594, Size: 1]
	<uint64,PlayerController*> PlayerMap;//[Offset: 0x1598, Size: 60]
	bool bNeedBroadcastFatalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d4, Size: 1]
	bool bNeedBroadcastLastBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d5, Size: 1]
	<int,AIControllerList> AIDeathResIDToControllerList;//[Offset: 0x15d8, Size: 60]
	AIPawnPoolItem[] AILivingPawnForPool;//[Offset: 0x1614, Size: 12]
	bool bEnablePacketSimulationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1620, Size: 1]
	int MinPacketSimulationLag;//[Offset: 0x1624, Size: 4]
	float CaculateConnectionsAvgLagTimer;//[Offset: 0x1628, Size: 4]
	int ConnectionsAvgLag;//[Offset: 0x162c, Size: 4]
	float CaculateConnectionsAvgLagTime;//[Offset: 0x1630, Size: 4]
	FString[] ReasonsToSend;//[Offset: 0x1634, Size: 12]
	bool bAIDropBulletInClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1640, Size: 1]
	bool bDropAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1641, Size: 1]
	bool bOnlyDropMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1642, Size: 1]
	float DistanceCullFactor;//[Offset: 0x1644, Size: 4]
	float CheckDestoryActorTime;//[Offset: 0x1648, Size: 4]
	bool bInvincibleIgnorePoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164c, Size: 1]
	void UseRoomCustomCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x1f37cc0
	void UseFixedCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x1f37b60
	void UnregisterFromGroup(STExtraPlayerController* InController);// 0x1f37ae0
	void StopAllFakePlayerAIBehaviorTree();// 0x1f37acc
	void StatisticsVehicleDamage(float Damage, int DamageTypeId, Actor* DamageCauser);// 0x1f379c4
	void SpawnAI(int Num);// 0x1f3794c
	void SetStateLeftTime(int leftTime);// 0x1f378cc
	void SetGameEndReportData();// 0x1f378b0
	void SetCharacterCustomEnd(UAECharacter* Character);// 0x1f37838
	void SetAITypeCache(uint32 PlayerKey, byte AIType);// 0x1f3777c
	void RevisePlayerTombBoxDropWrapperList(STExtraBaseCharacter* Character, out PickUpItemData[] OutItemDataList, STExtraBaseCharacter* DamageCauser, int InstanceIDCnt);// 0x1f375f4
	void RestartPlayer(Controller* NewPlayer);// 0x1eb9b50
	void ResetGameMode();// 0x1f375d8
	void RemoveUnuseComponent(SubSystemConfig InSubSystemConfig);// 0x1f37524
	bool RegisterSpawnedVehicle(int InGroupIndex);// 0x1f3749c
	int RegisterInGroupByPlayerKey(uint32 InPlayerKey);// 0x1f3741c
	int RegisterInGroup(STExtraPlayerController* InController);// 0x1f37394
	void RegisterComponentInternal(enum InSubSystemId, ActorComponent* NewComp, bool bAddToRoot);// 0x1f37284
	void RefreshNetworkObject(Actor* Actor, Vector Loction);// 0x1f371c0
	void OnVehicleKill(int DamageTypeId, Actor* DamageCauser);// 0x1f370fc
	void OnReportNetworkData();// 0x1f370e0
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x1f37060
	void OnGameModeStateChange();// 0x1f37044
	void OnGameEnterReady();// 0x1f37028
	void OnGameEnterFinish();// 0x1f3700c
	void OnGameEnterFight();// 0x1f36ff0
	void OnGameEnterActive();// 0x1f36fd4
	void NotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x1f36eb0
	bool IsVisualFieldFeatureSupported();// 0x1f36e88
	bool IsSubAIMode();// 0x1f36e60
	bool IsRevivalGameMode(STExtraPlayerState* PlayerState);// 0x1f36dd8
	bool IsPlayerCanSelfRevival(STExtraPlayerState* PlayerState);// 0x1f36d50
	bool IsFeatureSupported(enum SubSystemType);// 0x1f36cd0
	bool IsCanJump(PlayerController* PC);// 0x1f36c48
	void InitlializeRespawnItemConfig();// 0x1f36c34
	void InitialGameModeState();// 0x1f36c20
	void HandleGameEnd();// 0x1f36c04
	void GotoReadyState();// 0x1f36bf0
	void GotoFinishedState();// 0x1f36bd4
	void GotoFightingState();// 0x1f36bb8
	void GotoActiveState();// 0x1f36ba4
	int GetMonsterCount();// 0x1f36b7c
	class Object GetGlobalOverrideClass(class Object InComponentClass);// 0x1f36afc
	STExtraBaseCharacter* GetFirstAlivePlayerCharacter();// 0x1f36acc
	byte GetDefaultAIType(uint32 PlayerKey);// 0x1f36a4c
	int GetCurWeatherPhaseIndex();// 0x1f36a1c
	GameModeState* GetCurrentState();// 0x1f369f4
	GameModeParam GetCurPlaneRouteData();// 0x1f368bc
	FName GetCurGameModeState();// 0x1f36890
	AIWorldVolume* GetAIWorldVolume();// 0x1f36868
	AIWorldSoundManagerComponent* GetAIWorldSoundManagerComponent();// 0x1f36840
	byte GetAITypeCache(uint32 PlayerKey, bool bDeleteIfGet);// 0x1f36774
	void GenerateRespawnItemsForAllPlayers();// 0x1f36760
	PlayerController* FindPlayerControllerByUId(uint64 UId);// 0x1f366d4
	FakePlayerAIController* FindAIControllerWithPlayerKey(uint32 PlayerKey);// 0x1f36654
	void ExecuteCVarConfig();// 0x1f36640
	void CreateGameModeComponents();// 0x1f36624
	ActorComponent* CreateAndRegisterComponent(SubSystemConfig InSubSystemConfig);// 0x1f36568
	void ClearGroupsInReady(out const GameModeStateChangedParams InParams);// 0x1f364d8
	Actor* ChoosePlayerStartByTeamId(int TeamID);// 0x1f36450
	bool CheckNoHumanExist();// 0x1f36420
	bool CheckMatchGoalAchieved();// 0x1f363f0
	void CheckInitGameTriggerEnv();// 0x1f363dc
	bool CheckGameEnd();// 0x1f363ac
	void ChangeStateGM(FName TargetGameModeState);// 0x1f36334
	bool CanCharacterCircleTakePain(STExtraCharacter* Character);// 0x1f362ac
	void CalculateGameTerminatorInfo(Controller* Killer, Controller* VictimPlayer);// 0x1f361e8
	void CaculateConnectionsAvgLag(float DeltaTime);// 0x1f36170
	void BPSpawnAI(int Num);// 0x1f360f8

--------------------------------
Class: GamemodeAIDataAsset.DataAsset.Object
	AIEquipSpawnGroupDataBase[] SpawnEquipDataBase;//[Offset: 0x20, Size: 12]
	float RandomStartJumpTime;//[Offset: 0x2c, Size: 4]
	float RandomEndJumpTime;//[Offset: 0x30, Size: 4]
	float JumpRadius;//[Offset: 0x34, Size: 4]
	float JumpHeight;//[Offset: 0x38, Size: 4]
	float RandomAccelerateStart;//[Offset: 0x3c, Size: 4]
	float RandomAccelerateEnd;//[Offset: 0x40, Size: 4]
	float OpenParachuteHeight;//[Offset: 0x44, Size: 4]
	float CheckOpenParachuteFreq;//[Offset: 0x48, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x4c, Size: 4]
	float CheckCloseParachuteFreq;//[Offset: 0x50, Size: 4]
	float CheckNoPlayerRadiusSquare;//[Offset: 0x54, Size: 4]
	float WhiteCircleRaduisCanPrne;//[Offset: 0x58, Size: 4]
	float WhiteCircleRaduisMedicine;//[Offset: 0x5c, Size: 4]
	float StopdeliverTime;//[Offset: 0x60, Size: 4]
	float NoCirlceRadius;//[Offset: 0x64, Size: 4]
	float TraceHeight;//[Offset: 0x68, Size: 4]
	float RangeMin;//[Offset: 0x6c, Size: 4]
	float RangeMax;//[Offset: 0x70, Size: 4]
	float OriginCheckSquare;//[Offset: 0x74, Size: 4]
	float DestCheckSquare;//[Offset: 0x78, Size: 4]
	int HouseCheckTimes;//[Offset: 0x7c, Size: 4]
	Vector2D FlyToCenterOfCircle;//[Offset: 0x80, Size: 8]
	float FlyToCircleRadius;//[Offset: 0x88, Size: 4]
	float FlyToCircleOutRadius;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: AIEquipSpawnGroupDataBase
	float RightTime;//[Offset: 0x0, Size: 4]
	AIEquipSpawnGroup[] AIEquipSpawnGroupList;//[Offset: 0x4, Size: 12]
	AIEquipSpawnItem[] AIMustPickUpItemList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: AIEquipSpawnGroup
	AIEquipSpawnItem[] Item;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AIEquipSpawnItem
	enum itemType;//[Offset: 0x0, Size: 1]
	int ItemSpecificID;//[Offset: 0x4, Size: 4]
	int Count;//[Offset: 0x8, Size: 4]
	int MaxCount;//[Offset: 0xc, Size: 4]
	Vector2D ExtraConfigValue;//[Offset: 0x10, Size: 8]

--------------------------------
Class: CrowdManagerComponent.ActorComponent.Object
	float TimeHorizon;//[Offset: 0xbc, Size: 4]
	float AvoidanceWeight;//[Offset: 0xc0, Size: 4]
	float CohesionWeight;//[Offset: 0xc4, Size: 4]
	float AlignmentWeight;//[Offset: 0xc8, Size: 4]
	float ArriveWeight;//[Offset: 0xcc, Size: 4]
	float PushedWeight;//[Offset: 0xd0, Size: 4]
	float SeparationWeight;//[Offset: 0xd4, Size: 4]
	bool bPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bSingleTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool bFlipSegmentNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]
	bool bOpenAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 1]
	float DragDistanceWhenStuck;//[Offset: 0xdc, Size: 4]
	float DetermineAgentStuckTime;//[Offset: 0xe0, Size: 4]
	float DetermineAgentStuckDistSq;//[Offset: 0xe4, Size: 4]
	<Actor*,int> actor2AgentIndex;//[Offset: 0x4fc, Size: 60]
	void SetQueryInterfaceBlueprint(AIWorldVolume* query);// 0x1f80d54
	void RemoveCrowdAgentBlueprint(Actor* Owner);// 0x1f80cdc
	void MoveToPositionBlueprint(Actor* Agent, out const Vector Position, float stopRadius);// 0x1f80bcc
	void AddCrowdAgentBlueprint(Actor* Owner, float AgentRadius, float SegmentRadius, float Height, float MaxSpeed, float MaxForce, float queryNeighborRadius, float queryBoundaryRadius);// 0x1f80964

--------------------------------
Class: AIWorldVolume.AIWorldVolumeBase.Volume.Brush.Actor.Object
	FString AIOcclusionFilePath;//[Offset: 0x32c, Size: 12]
	FString HousePathFilePath;//[Offset: 0x338, Size: 12]
	bool bDebugOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	FString LogicAreaFilePath;//[Offset: 0x348, Size: 12]
	bool bTestOccupiedOcclusionPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	bool bDrawNavModifierProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x355, Size: 1]
	<int,AIWayPointActor*> AllAIWayPointActors;//[Offset: 0x390, Size: 60]
	ItemSpotSceneComponent* LastRegisteredItemSpot;//[Offset: 0x3cc, Size: 4]
	void RemoveDamageableActor(DamageableActor* DamageableActor);// 0x1ed6774
	void BreakWall(Vector LogicAreaLoc, bool bDefaultWalkable);// 0x1ed66b0
	void BreakHouse(Vector LogicAreaLoc);// 0x1ed6640
	void AddDamageableActor(DamageableActor* DamageableActor);// 0x1ed65c8

--------------------------------
Class: AIWorldVolumeBase.Volume.Brush.Actor.Object
	float CellSize;//[Offset: 0x324, Size: 4]

--------------------------------
Class: AIWayPointActor.Actor.Object
	int ID;//[Offset: 0x2fc, Size: 4]
	TeamWayPointLink[] TeamLinks;//[Offset: 0x300, Size: 12]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x30c, Size: 4]
	BillboardComponent* ShowSprite;//[Offset: 0x310, Size: 4]
	Vector GetNextWayPointLocation(int TeamID, int ExcludeID);// 0x1ed2fb4

--------------------------------
Class: TeamWayPointLink
	int TeamID;//[Offset: 0x0, Size: 4]
	WayPointLink[] Links;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WayPointLink
	int NextPointID;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DamageableActor.UAERegionActor.Actor.Object
	void SetTargetDamageRateMap(<enum,float> InTargetDamageRateMap);// 0x1f8c7d0
	int GetVehicleDamagedSpeed();// 0x2bb69b8
	int GetVehicleDamagedCoefficient();// 0x2bb69b8
	<enum,float> GetTargetDamageRateMap();// 0x1f8c650
	float CPP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x1f8c4d0
	bool CPP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x1f8c448
	bool CPP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x1f8c2b0
	float CPP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x1f8c204
	float CPP_GetDamageRateByTarget(Actor* Target);// 0x1f8c17c
	enum[] CPP_GetDamageableGameObjectType();// 0x1f8c0b4
	bool CPP_GetCanBePicked();// 0x1f8c084
	FName CPP_GetBulletBlockComponentTag();// 0x1f8c03c
	float CPP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x1f8bf90
	float CPP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x1f8bec4
	float CPP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x1f8bdd0
	void BroadcastDamageState(int DState);// 0x1f8bd1c
	float BP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x2bb69b8
	bool BP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x2bb69b8
	bool BP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x2bb69b8
	float BP_GetMaxHP();// 0x2bb69b8
	float BP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x2bb69b8
	float BP_GetDamageRateByTarget(Actor* Target);// 0x2bb69b8
	enum[] BP_GetDamageableGameObjectType();// 0x2bb69b8
	float BP_GetCurrentHP();// 0x2bb69b8
	bool BP_GetCanBePicked();// 0x2bb69b8
	FName BP_GetBulletBlockComponentTag();// 0x2bb69b8
	float BP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x2bb69b8
	void BP_DamageStateChange(int DState);// 0x2bb69b8
	float BP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x2bb69b8
	float BP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x2bb69b8

--------------------------------
Class: GameModeParms
	SubSystemConfig SSC_DeferredExitGame;//[Offset: 0x0, Size: 24]
	SubSystemConfig SSC_RecallTeammate;//[Offset: 0x18, Size: 24]
	SubSystemConfig SSC_RescueHelicopter;//[Offset: 0x30, Size: 24]
	SubSystemConfig SSC_HeavyWeapon;//[Offset: 0x48, Size: 24]
	SubSystemConfig SSC_TDMHardPoint;//[Offset: 0x60, Size: 24]
	SubSystemConfig SSC_VisualField;//[Offset: 0x78, Size: 24]
	SubSystemConfig SSC_WorldActorFlag;//[Offset: 0x90, Size: 24]
	SubSystemConfig SSC_SuperCold;//[Offset: 0xa8, Size: 24]
	SubSystemConfig SSC_ARWeaponManager;//[Offset: 0xc0, Size: 24]

--------------------------------
Class: SubSystemConfig
	enum SubSystemId;//[Offset: 0x0, Size: 1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	enum ConstructType;//[Offset: 0x2, Size: 1]
	class Object* SubSystemClass;//[Offset: 0x4, Size: 4]
	DynamicCompConfig DCC_PlayerController;//[Offset: 0x8, Size: 8]
	DynamicCompConfig DCC_PlayerPawn;//[Offset: 0x10, Size: 8]

--------------------------------
Class: DynamicCompConfig
	bool bIsServerOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	class Object* DynamicCompClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	bool bAutoResetOccupiedMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	float ResetOccupiedMarkTime;//[Offset: 0x31c, Size: 4]
	bool bUseAsStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	int PlayerBornPointID;//[Offset: 0x324, Size: 4]
	bool CheckEverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	bool bMarkOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	int CampID;//[Offset: 0x32c, Size: 4]
	int TeamID;//[Offset: 0x330, Size: 4]
	bool IsEverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	void SetMarkOccupied();// 0x220bc38
	bool IsMarkOccupied();// 0x220bc10

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x310, Size: 8]

--------------------------------
Class: BornPlayerStartData
	int BornPointID;//[Offset: 0x0, Size: 4]
	STExtraPlayerStart*[] PlayerStarts;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AIActingComponent.LuaInstancedActorComponent.ActorComponent.Object
	FString AIActingLuaConfig;//[Offset: 0x114, Size: 12]
	FString DefaultLuaFilePath;//[Offset: 0x120, Size: 12]
	int WillKilledBotNum;//[Offset: 0x12c, Size: 4]
	AIWayPointActor*[] WayPointActorList;//[Offset: 0x144, Size: 12]
	bool bUseCacheWayPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	AIActingCandidateData[] CandidateAIList;//[Offset: 0x154, Size: 12]
	bool bCheckTeleportLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 1]
	float AverageRating;//[Offset: 0x1f8, Size: 4]
	int MaxActiveAI;//[Offset: 0x1fc, Size: 4]
	int ActiveAI_n;//[Offset: 0x200, Size: 4]
	int ActiveAI_m;//[Offset: 0x204, Size: 4]
	float AISpawnCircleOriginOffset;//[Offset: 0x208, Size: 4]
	float NoWhiteCirclesRadius;//[Offset: 0x20c, Size: 4]
	float SelectActionPeriod;//[Offset: 0x210, Size: 4]
	float SpawnCheckHumanRadiusSquare;//[Offset: 0x214, Size: 4]
	int TryFindSpawnAILocNum;//[Offset: 0x218, Size: 4]
	AIActingItem[] AIActingItemList;//[Offset: 0x21c, Size: 12]
	int SimulateKillMinIntervalNum;//[Offset: 0x268, Size: 4]
	AIBeginAttackEachOther[] AIAttackEachOtherRatingTimeConfig;//[Offset: 0x26c, Size: 12]
	float MinKilledFreqScale;//[Offset: 0x278, Size: 4]
	float MaxKilledFreqScale;//[Offset: 0x27c, Size: 4]
	bool bEnableClassicDeliveryAct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	bool bEnableHotValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	int FullFeedLimit;//[Offset: 0x284, Size: 4]
	DeliveryRatingConfig[] DeliveryWaveInterval;//[Offset: 0x288, Size: 12]
	float DeliveryBeginTime;//[Offset: 0x294, Size: 4]
	float DeliveryFreq;//[Offset: 0x298, Size: 4]
	int DeliveryAINumEachPeriod;//[Offset: 0x29c, Size: 4]
	float MinimumWarmScore;//[Offset: 0x2a0, Size: 4]
	float SpecialAIHpCondition;//[Offset: 0x2a4, Size: 4]
	float SpecialAICircleDistanceScale;//[Offset: 0x2a8, Size: 4]
	AIDeliveryAreaLimit[] AIDeliveryAreaLimit;//[Offset: 0x2ac, Size: 12]
	DeliveryCondition[] DeliveryChecks;//[Offset: 0x2b8, Size: 12]
	float TeammateDistanceThresholdSqr;//[Offset: 0x2c4, Size: 4]
	float EnemyDistanceThresholdSqr;//[Offset: 0x2c8, Size: 4]
	float DeliveryCoolDown;//[Offset: 0x2cc, Size: 4]
	SpecialAIDeliveryNumContainer[] SpAINumWitmTeammateCfg;//[Offset: 0x2d0, Size: 12]
	FString HotValuePrefix;//[Offset: 0x2dc, Size: 12]
	HotValueAttenuation HotValueAttenuation;//[Offset: 0x2e8, Size: 12]
	HotValueScale HotValueScale;//[Offset: 0x2f4, Size: 12]
	float DeliveryHotValueThreshold;//[Offset: 0x300, Size: 4]
	float HotValueUpdateBeginTime;//[Offset: 0x304, Size: 4]
	float HotValueUpdateDeltaTime;//[Offset: 0x308, Size: 4]
	bool bDebugHotValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	Vector2D HotValueLocationOffset;//[Offset: 0x318, Size: 8]
	AIRatingDamage[] AIRatingDamageConfig;//[Offset: 0x338, Size: 12]
	AIAttackAIRatingDamage[] AIAttackAIRatingDamage;//[Offset: 0x344, Size: 12]
	DeliveryPlayerConfig[] AIDeliveryPlayerConfig;//[Offset: 0x350, Size: 12]
	AIAttackAnimalRatingDamage[] AIAttackAnimalRatingDamage;//[Offset: 0x35c, Size: 12]
	int MaxMoveRequestExecutePerFrame;//[Offset: 0x368, Size: 4]
	int MaxQueuingMoveRequests;//[Offset: 0x36c, Size: 4]
	int MaxClearTroubleRequestExecutePerFrame;//[Offset: 0x370, Size: 4]
	CirleAreaVolume* CircleAreaVolume;//[Offset: 0x374, Size: 4]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x378, Size: 4]
	STExtraPlayerCharacter*[] CachedCandidatePlayers;//[Offset: 0x37c, Size: 12]
	FakePlayerAIController*[] CachedCandidateAICs;//[Offset: 0x3dc, Size: 12]
	int CircleIndexFakeAIPoisonDamage;//[Offset: 0x420, Size: 4]
	int AIAttackAnimalRatingDamageIndex;//[Offset: 0x424, Size: 4]
	bool IsCheckVisibilityReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	bool bCheckTargetLocationDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 1]
	float TargetLocationDistanceThreshold;//[Offset: 0x444, Size: 4]
	float MaxAILocationTraceHeightZ;//[Offset: 0x448, Size: 4]
	AIActingBPAssit* m_BPAssit;//[Offset: 0x458, Size: 4]
	FString AIActingBPAssitClassPath;//[Offset: 0x45c, Size: 12]
	Actor*[] WaterSwimActors;//[Offset: 0x468, Size: 12]
	bool bEnableAIStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 1]
	delegate CustomDeliveryActDelegate;//[Offset: 0x478, Size: 12]
	uint16[] AIStrategyRatingConfig;//[Offset: 0x4b8, Size: 12]
	void UpdateCachedCandidates();// 0x1ec3c84
	void SimulateKilledFakeAI(out const AIActingCandidateData Killer, out const AIActingCandidateData Killed, int WeapID, out int InWillKilled, byte SpecialDamageType);// 0x1ec399c
	void SetAIControllerDeleverTarget(FakePlayerAIController* FeedPlayerAIC, STExtraPlayerCharacter* FeedPlayer);// 0x1ec38e0
	void OnNotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x1ec37c4
	void GMOnBehaviorTreeLoaded(AIController* InAIController);// 0x1ec374c
	void GMModidyAIEquipSpawnGroupData(out AIEquipSpawnGroupDataBase[] OutGroupData);// 0x1ec36a0
	float GetNoWhiteCirclesRadius();// 0x1ec3684
	float GetHotValueByRowCol(const int InRow, const int InCol);// 0x1ec35c0
	float GetHotValue(const Vector InLocation);// 0x1ec3548
	int GetCurrentActing();// 0x1ec3520
	void CollectAndReportAIStrategyInfo();// 0x1ec350c
	void BroadFinishLastBreathFunction(FString Killer, FString Killed, int WeaponId, FString KillerNation, FString KilledNation);// 0x1ec301c
	bool AdjustAIAttackAnimalRatingDamage(AnimalAIController* AIC);// 0x1ec2f9c

--------------------------------
Class: AIActingCandidateData
	FakePlayerAIController* FakePlayerAIController;//[Offset: 0x20, Size: 4]

--------------------------------
Class: FakePlayerAIController.BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	class STExtraBaseCharacter* CharacterClass;//[Offset: 0xa40, Size: 4]
	delegate OnEnterJumping;//[Offset: 0xa44, Size: 12]
	NewPathFollowingComponent* NewFollowingComponent;//[Offset: 0xa5c, Size: 4]
	int PlayerTeamId;//[Offset: 0xa60, Size: 4]
	uint32 PlayerKey;//[Offset: 0xa64, Size: 4]
	FString PlayerName;//[Offset: 0xa68, Size: 12]
	byte AIType;//[Offset: 0xa74, Size: 1]
	int resID;//[Offset: 0xa78, Size: 4]
	bool bForceRecordKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7c, Size: 1]
	float TeleportRandomAngle;//[Offset: 0xa80, Size: 4]
	bool bUseDynamicNAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa84, Size: 1]
	FString DropItemCfgTableName;//[Offset: 0xa88, Size: 12]
	STExtraBaseCharacter* ControlledCharacter;//[Offset: 0xa94, Size: 4]
	bool IsOpenPawnMoveOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa99, Size: 1]
	int GetResId();// 0x1fd6790
	STExtraPlayerCharacter* GetDeliverTarget();// 0x1fd6768
	void ForceDropItems(int itemType);// 0x1fd66f0

--------------------------------
Class: BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	delegate OnCustomSpawnItemDelegate;//[Offset: 0x520, Size: 16]
	float CheckPeriod;//[Offset: 0x530, Size: 4]
	float RandomDeviation;//[Offset: 0x534, Size: 4]
	float ProtectCountdownTime;//[Offset: 0x538, Size: 4]
	float SpawnEquipDelayTime;//[Offset: 0x53c, Size: 4]
	float SpawnEquipFreezeRadius;//[Offset: 0x540, Size: 4]
	Vector2D ProtectShootRadius;//[Offset: 0x544, Size: 8]
	float TurnVelocity;//[Offset: 0x54c, Size: 4]
	Vector2D DarkMaxAttackDistRange;//[Offset: 0x550, Size: 8]
	<enum,enum> WeatherToAttackDist;//[Offset: 0x558, Size: 60]
	bool bSyncViewRotationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 1]
	bool bAimOffsetView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x595, Size: 1]
	byte AIActionType;//[Offset: 0x888, Size: 1]
	byte FakePlayerBornType;//[Offset: 0x889, Size: 1]
	BackpackComponent* BackpackComponent;//[Offset: 0x88c, Size: 4]
	AIControllerCachedData AIControllerCachedData;//[Offset: 0x890, Size: 44]
	AIShootMissInfo AIShootMissInfo;//[Offset: 0x8bc, Size: 24]
	AIConditionHearingComponent* AIConditionHearingComponent;//[Offset: 0x8d4, Size: 4]
	AIHoleUpComponent* AIHoleUpComponent;//[Offset: 0x8d8, Size: 4]
	AIBuildingComponent* AIBuildingComponent;//[Offset: 0x8dc, Size: 4]
	FString BPClassOverrideTag;//[Offset: 0x8ec, Size: 12]
	Actor* Plane;//[Offset: 0x8f8, Size: 4]
	int FlightNo;//[Offset: 0x8fc, Size: 4]
	int DefaultAIFeatureConfigID;//[Offset: 0x900, Size: 4]
	AIFeatureInfo AIFeatureInfo;//[Offset: 0x904, Size: 256]
	void UpdateAIMissShootInfo(float CurrentTime, Vector2D MissRange, float MissOnPurposeCD);// 0x1f28cb0
	void SetGlobalAverageRating(float RatingValue);// 0x1f28c38
	void Respawn();// 0x1f28c1c
	void InitAIFeatureInfo(int InID);// 0x1f28b9c
	bool InitAI(int InFeatureID);// 0x1f28b14
	float GetRatingDamageScale(STExtraPlayerController* PlayerController);// 0x1f28a94
	float GetRatingDamageFiringAccuRadius(STExtraPlayerController* PlayerController);// 0x1f28a14
	float GetGlobalAverageRating();// 0x1f289ec
	Pawn* GetCurEnemy();// 0x1f289bc
	void CustomSpawnItemDelegate__DelegateSignature(BaseAIController* AIController);// 0x2bb69b8
	void ChangeAIActionType(byte InAIActionType);// 0x1f2893c
	void AddItemForAIWithFullCheck(AIEquipSpawnItem[] DataSet, AIEquipSpawnItem[] AIMustPickUpItemList);// 0x1f286bc
	void AddItemForAI(int ItemId, int Count, bool bDropOnDead, bool bRollOnDead);// 0x1f28558

--------------------------------
Class: BasicAIController.AIController.Controller.Actor.Object
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x3a8, Size: 4]
	BlackboardComponent* BlackboardComp;//[Offset: 0x3ac, Size: 4]
	SpawnerBase* TeamZoneSpawner;//[Offset: 0x3b0, Size: 4]
	SpawnerBase* CurSpawner;//[Offset: 0x3b4, Size: 4]
	bool bAsyncLoadBehaviorTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	enum AIAttackType;//[Offset: 0x3b9, Size: 1]
	BehaviorTree*[] BehaviorTreePath;//[Offset: 0x3bc, Size: 12]
	float ActorLocationTetherDistance;//[Offset: 0x3c8, Size: 4]
	OnlyActorCompManagerComponent* CompManagerComponent;//[Offset: 0x3cc, Size: 4]
	FString AIFeatureInfoTableName;//[Offset: 0x3d0, Size: 12]
	FString AIWeaponRangeTableName;//[Offset: 0x3dc, Size: 12]
	int HitRateConfigNum;//[Offset: 0x3e8, Size: 4]
	int AIFeatureID;//[Offset: 0x3ec, Size: 4]
	AITargetInViewOffset AITargetInViewOffset;//[Offset: 0x3f0, Size: 44]
	delegate OnBehaviorTreeLoaded;//[Offset: 0x468, Size: 12]
	AIShootingPoseOffsetInfo shootingPoseOffsetInfo;//[Offset: 0x474, Size: 84]
	bool InterpControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	enum AICharacterRotateInterpType;//[Offset: 0x4c9, Size: 1]
	float RotationSpeedOfInterpControlRotation;//[Offset: 0x4cc, Size: 4]
	bool UseAIFeatureInfo();// 0x1f3300c
	void OnAIEnterDarkArea(bool bInEnter, Actor* DarkArea, bool bAtLeastInOne);// 0x1f32ef0
	void InitAIFeatureInfo(int InID);// 0x1f28b9c
	bool InitAI(int InFeatureID);// 0x1f28b14
	Pawn*[] GetTeammates();// 0x1f32e30
	int GetTeammateCount();// 0x1f32e08
	int GetCurrentOrder();// 0x1f32de0
	Pawn* GetCurEnemy();// 0x1f289bc
	BlackboardComponent* GetBlackboardComponent();// 0x1f32dc4
	enum GetAIAttackType();// 0x1f32da8

--------------------------------
Class: NewPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	bool bPathDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool bUpdatePathOnMovePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	float maxCheckDis;//[Offset: 0x270, Size: 4]
	float maxCheckDisTime;//[Offset: 0x274, Size: 4]
	bool isUseFixedPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 1]
	float PlayerHalfHeight;//[Offset: 0x280, Size: 4]
	float PlayerNewHalfHeight;//[Offset: 0x284, Size: 4]
	float MaxTransferDis;//[Offset: 0x288, Size: 4]

--------------------------------
Class: SpawnerBase.Actor.Object
	UnitTransformGenerator* TransformGenerator;//[Offset: 0x340, Size: 4]
	UnitSpeciesGenerator* SpeciesGenerator;//[Offset: 0x344, Size: 4]
	FString LuaFilePath;//[Offset: 0x348, Size: 12]
	Pawn*[] AliveBots;//[Offset: 0x354, Size: 12]
	void Stop();// 0x1f3cb34
	Actor* SpawnUnit();// 0x1ed4438
	void Run();// 0x1edac58
	void RemoveAliveBot(Pawn* BotPawn);// 0x210be24
	GameLevelManagerComponent* GetGameLevelManager();// 0x210bdfc
	Pawn*[] GetAliveBots();// 0x210bd3c
	void AddAliveBot(Pawn* BotPawn);// 0x210bcc4

--------------------------------
Class: UnitTransformGenerator.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	SpawnerBase* GetSpawner();// 0x22b8278
	Transform Generate();// 0x22b8704

--------------------------------
Class: UnitSpeciesGenerator.Object
	FString LuaFilePath;//[Offset: 0x60, Size: 12]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	FString SpeciesConfigLuaPath;//[Offset: 0x70, Size: 12]
	void PostConfig(Actor* Actor);// 0x1fd9740
	SpawnerBase* GetSpawner();// 0x22b8278

--------------------------------
Class: OnlyActorCompManagerComponent.ActorComponent.Object
	<FString,OnlyActorComponent*> CacheComponents;//[Offset: 0xbc, Size: 60]
	OnlyActorComponent*[] CacheUpdateComponents;//[Offset: 0xf8, Size: 12]

--------------------------------
Class: OnlyActorComponent.ActorComponent.Object
	byte bCanEverUpdate;//[Offset: 0xbc, Size: 1]

--------------------------------
Class: AITargetInViewOffset
	Vector[] Offset;//[Offset: 0x0, Size: 12]
	Vector[] CrouchOffset;//[Offset: 0xc, Size: 12]
	Vector TargetLoc;//[Offset: 0x18, Size: 12]
	int CurrentOffsetIndex;//[Offset: 0x24, Size: 4]
	bool bTargetInViewDueToOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	enum TargetPawnState;//[Offset: 0x29, Size: 1]

--------------------------------
Class: AIShootingPoseOffsetInfo
	AIShootingPoseOffsetDetailInfo[] ShootingPoseShootPointOffsetArray;//[Offset: 0x0, Size: 12]
	float CrouchToStandHeightOffset;//[Offset: 0xc, Size: 4]
	float ProneToStandHeightOffset;//[Offset: 0x10, Size: 4]
	<enum,Vector> ShootingPoseShootPointOffsetMap;//[Offset: 0x18, Size: 60]

--------------------------------
Class: AIShootingPoseOffsetDetailInfo
	enum shootingPose;//[Offset: 0x0, Size: 1]
	Vector offsetInfo;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AIControllerCachedData
	STExtraBaseCharacter* ControlledPawn;//[Offset: 0x0, Size: 4]

--------------------------------
Class: AIShootMissInfo
	float MissMaxRangeTime;//[Offset: 0x0, Size: 4]
	float MissMinRangeTime;//[Offset: 0x4, Size: 4]
	float MissCDTime;//[Offset: 0x8, Size: 4]
	float MissResetTime;//[Offset: 0xc, Size: 4]
	float MissResetConfig;//[Offset: 0x10, Size: 4]
	bool bCanMissShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: AIConditionHearingComponent.ActorComponent.Object
	SoundShieldForAI* CurrentSoundShield;//[Offset: 0xbc, Size: 8]
	bool CanHearingInBox(Actor* TargetActor, Actor* SourceActor);// 0x1ec4dbc

--------------------------------
Class: SoundShieldForAI.Actor.Object
	Actor*[] PlayerPawns;//[Offset: 0x2fc, Size: 12]
	Actor*[] AIPawns;//[Offset: 0x308, Size: 12]
	int MaxCacheNum;//[Offset: 0x314, Size: 4]
	void OnPlayerPawnsOverlap(Actor* InActor, bool bEnter);// 0x210b89c
	void OnAIPawnsOverlap(Actor* InActor, bool bEnter);// 0x210b7d8
	bool InSameSoundShield(Actor* InAIPawn, Actor* InPlayerPawn);// 0x210b70c

--------------------------------
Class: AIHoleUpComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	float OccludeBuildingActorByRemoveTime;//[Offset: 0xfc, Size: 4]
	float OccludeBuildingActorInvalidDis;//[Offset: 0x100, Size: 4]
	float InvalidOccludeBuildingPosAgainCheckCD;//[Offset: 0x104, Size: 4]
	float OccludePosInvalidDis;//[Offset: 0x108, Size: 4]

--------------------------------
Class: AIAbilityComponent.OnlyActorComponent.ActorComponent.Object

--------------------------------
Class: AIBuildingComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	<int,int> CanBuildActorNums;//[Offset: 0xe4, Size: 60]
	float TotalCD;//[Offset: 0x120, Size: 4]
	float SoloCD;//[Offset: 0x124, Size: 4]

--------------------------------
Class: AIFeatureInfo
	float HP;//[Offset: 0x0, Size: 4]
	float DamageScale;//[Offset: 0x4, Size: 4]
	float TakeDamageScale;//[Offset: 0x8, Size: 4]
	int DropID;//[Offset: 0xc, Size: 4]
	float[] HitRates;//[Offset: 0x10, Size: 12]
	<int,float> ThrownUsingProbability;//[Offset: 0x1c, Size: 60]
	<float,float> EnemyHpHitRateMap;//[Offset: 0x58, Size: 60]
	<float,float> EnemyHpDamageRateMap;//[Offset: 0x94, Size: 60]
	bool bNeedNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bHasDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	Vector2D MissOnPurposeTimeRange;//[Offset: 0xd4, Size: 8]
	Vector2D OutViewMissOnPurposeTimeRange;//[Offset: 0xdc, Size: 8]
	float MissOnPurposeCD;//[Offset: 0xe4, Size: 4]
	float MissOnPurposeResetTime;//[Offset: 0xe8, Size: 4]
	float MissOnPurposeHitRate;//[Offset: 0xec, Size: 4]
	float NearDeathTargetStopFireTime;//[Offset: 0xf0, Size: 4]
	float NearDeathTargetFixedHitRate;//[Offset: 0xf4, Size: 4]
	bool bDoMissOnPurposeWhenNearDeathToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	float NearDeathTargetFixedDamageRate;//[Offset: 0xfc, Size: 4]

--------------------------------
Class: AIActingItem
	float StartSeconds;//[Offset: 0x0, Size: 4]
	float EndSeconds;//[Offset: 0x4, Size: 4]
	float DeadPercent;//[Offset: 0x8, Size: 4]
	int PlayerNumScale;//[Offset: 0xc, Size: 4]
	bool IsFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int[] WeaponIdList;//[Offset: 0x14, Size: 12]
	int FinalRestBotNum;//[Offset: 0x20, Size: 4]

--------------------------------
Class: AIBeginAttackEachOther
	float BeginAttackEachOtherTime;//[Offset: 0x0, Size: 4]
	float RightRatingSection;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DeliveryRatingConfig
	float DeliveryInterval;//[Offset: 0x0, Size: 4]
	float RightRatingSection;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIDeliveryAreaLimit
	Vector TopLeftVec;//[Offset: 0x0, Size: 12]
	Vector BottomRightVec;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DeliveryCondition
	DeliveryConditionCheck* CheckCnd;//[Offset: 0x0, Size: 4]

--------------------------------
Class: DeliveryConditionCheck.Object
	STExtraBaseCharacter* TargetPawn;//[Offset: 0x1c, Size: 4]
	bool CheckDeliveryForBP(STExtraBaseCharacter* InTargerPawn);// 0x1ecd880
	bool CheckDelivery(STExtraBaseCharacter* InTargetPawn);// 0x1f9a088

--------------------------------
Class: SpecialAIDeliveryNumContainer
	int TeammateNum;//[Offset: 0x0, Size: 4]
	SpecialAIDeliveryNum[] DeliverNumCfg;//[Offset: 0x4, Size: 12]

--------------------------------
Class: SpecialAIDeliveryNum
	int DeliveryNum;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: HotValueAttenuation
	float Corner;//[Offset: 0x0, Size: 4]
	float Center;//[Offset: 0x4, Size: 4]
	float UpDown;//[Offset: 0x8, Size: 4]

--------------------------------
Class: HotValueScale
	float Corner;//[Offset: 0x0, Size: 4]
	float Center;//[Offset: 0x4, Size: 4]
	float UpDown;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AIRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float SpecialRatingDamageScale;//[Offset: 0x4, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x8, Size: 4]
	float SpecialFiringAccuracyRadius;//[Offset: 0xc, Size: 4]
	int AIFeedLimit;//[Offset: 0x10, Size: 4]
	float SectionRightValue;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AIAttackAIRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	float SectionRightValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DeliveryPlayerConfig
	DeliveryItem[] DeliveryItem;//[Offset: 0x0, Size: 12]
	float RightRatingSection;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DeliveryItem
	int percent;//[Offset: 0x0, Size: 4]
	int DeliveryNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIAttackAnimalRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	float SectionRightValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AIActingBPAssit.Object
	bool IsSmokeGrenadeActive(Actor* pSmokeGrenade);// 0x2bb69b8
	bool IsGrenadeHasBeenThrowedOut(Actor* pGrenade);// 0x2bb69b8
	float GetRealTimeSeconds();// 0x1ec1a0c

--------------------------------
Class: AnimalAIController.BasicAIController.AIController.Controller.Actor.Object
	NewPathFollowingComponent* NewFollowingComponent;//[Offset: 0x520, Size: 4]
	float TurnVelocity;//[Offset: 0x524, Size: 4]
	float SetAirDropTargetInterval;//[Offset: 0x528, Size: 4]
	float IgnoreMoveCollisionTimeWhenBlocked;//[Offset: 0x52c, Size: 4]
	float IgnoreMoveCollisionSetInterval;//[Offset: 0x530, Size: 4]
	float DragOnGroundCheckInterval;//[Offset: 0x534, Size: 4]
	float DragOnGroundMaxOverGroundHeight;//[Offset: 0x538, Size: 4]
	float DragOnGroundMaxRayLen;//[Offset: 0x53c, Size: 4]
	float DragOnGroundMaxFloorThickness;//[Offset: 0x540, Size: 4]
	float DragOnGroundMaxSubsidenceDepth;//[Offset: 0x544, Size: 4]
	float DragOnGroundNavRandomRadius;//[Offset: 0x548, Size: 4]
	bool EnableUpdateRotatition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	Box[] FindMovePointLimitArea;//[Offset: 0x590, Size: 12]
	TickControlComponent* TickControlComp;//[Offset: 0x59c, Size: 4]
	void SetMoveTargetLoc(out const Vector TargetLoc);// 0x1ed75e0
	void SetCaughtOwner(Actor* CaughtOwner);// 0x1ed7560
	void RunBehaviorTreeWithIndex(int TreeIndex);// 0x1ed74e0
	void OnAirDropLandGroup(Actor* AirDropBoxActor, bool bIsInWater);// 0x1ed741c

--------------------------------
Class: ItemsBoxConfigDataAsset.DataAsset.Object
	DataTable* DataBase;//[Offset: 0x20, Size: 4]
	FString TablePath;//[Offset: 0x24, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] AirDropBoxGroupConfigs;//[Offset: 0x30, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] SuperAirDropBoxGroupConfigs;//[Offset: 0x3c, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] TreasureBoxGroupConfigs;//[Offset: 0x48, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] UAVAirDropBoxGroupConfigs;//[Offset: 0x54, Size: 12]
	AirDropBoxGenerateWrapperItemData[] GetUAVAirDropBoxGenerateDataList(int GroupIndex);// 0x2030964
	AirDropBoxGenerateWrapperItemData[] GetTreasureBoxGenerateDataList(FString GroupName);// 0x2030784
	AirDropBoxGenerateWrapperItemData[] GetTargetItemsDataFromTableByCategoryFilter(FString CategoryFilter);// 0x20305a4
	AirDropBoxGenerateWrapperItemData[] GetSuperAirDropBoxGenerateDataList();// 0x20304e4
	AirDropBoxGenerateWrapperItemData[] GetAirDropBoxGenerateDataList();// 0x2030424

--------------------------------
Class: ItemsBoxConfigDataAssetConfigGroup
	FString GroupName;//[Offset: 0x0, Size: 12]
	ItemsBoxConfigDataAssetConfigItem[] ConfigItems;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ItemsBoxConfigDataAssetConfigItem
	float ProbabilityPercent;//[Offset: 0x0, Size: 4]
	FString CategoryFilter;//[Offset: 0x4, Size: 12]

--------------------------------
Class: GameModeParam
	float Radius0;//[Offset: 0x0, Size: 4]
	float Radius1;//[Offset: 0x4, Size: 4]
	float Radius3;//[Offset: 0x8, Size: 4]
	bool bUsingPolygon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float Radius2;//[Offset: 0x10, Size: 4]
	Vector2D[] PolygonPoints;//[Offset: 0x14, Size: 12]
	float BlueCircleRadius;//[Offset: 0x20, Size: 4]
	Vector MapCenter;//[Offset: 0x24, Size: 12]
	float PlaneSpeed;//[Offset: 0x30, Size: 4]
	float PlaneHeight;//[Offset: 0x34, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x38, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x3c, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x40, Size: 4]
	bool bCrossCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	float FixedJumpPointRate;//[Offset: 0x48, Size: 4]

--------------------------------
Class: GameModeDataAsset.DataAsset.Object
	float[] Probabilities;//[Offset: 0x20, Size: 12]
	GameModeParam[] GameModeParams;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: MonsterProbeComponent.GameModeProbeComponent.ActorComponent.Object
	int TimeToSpawnPawn;//[Offset: 0xbc, Size: 4]
	SpawnGroupItemInfo[] SpawnGroupInfoList;//[Offset: 0xc0, Size: 12]
	<int,SpawnTableData> PawnTableData;//[Offset: 0xcc, Size: 60]
	void InitialItemTable();// 0x2055758

--------------------------------
Class: GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: SpawnGroupItemInfo
	int PawnGroupID;//[Offset: 0x0, Size: 4]
	int PawnID;//[Offset: 0x4, Size: 4]
	int PawnPercent;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpawnTableData
	int PawnID;//[Offset: 0x0, Size: 4]
	FString PathName;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AIWorldSoundManagerComponent.ActorComponent.Object
	<enum,SoundConfig> SoundConfig;//[Offset: 0xbc, Size: 60]
	enum[] HearSoundCharacterTypes;//[Offset: 0xf8, Size: 12]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x104, Size: 8]
	void ProduceSoundInPos(enum soundType, out const Vector pos, Actor* SourceActor);// 0x1ed4ecc
	void OnProjectileExplode(Actor* Projectile);// 0x1ed4e54

--------------------------------
Class: SoundConfig
	float TransDist;//[Offset: 0x0, Size: 4]
	bool bSetBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FName[] BlackboardNameList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: SeasonStatueBase.Actor.Object
	void SetStatueBaseInfo(out const StatueBaseParam Param, out const SeasonStatueData[] StatueInfo);// 0x20dde04

--------------------------------
Class: StatueBaseParam
	FString MatPath;//[Offset: 0x0, Size: 12]
	FString TeamFlag;//[Offset: 0xc, Size: 12]
	FString TeamName;//[Offset: 0x18, Size: 12]

--------------------------------
Class: GameModeState.Object
	float StateTime;//[Offset: 0x30, Size: 4]
	BattleRoyaleGameMode* OwningGameMode;//[Offset: 0x34, Size: 4]
	GameStateBase* OwningGameState;//[Offset: 0x38, Size: 4]
	void SetLeftTime(int InLeftTime);// 0x1ff3ac4
	void GotoNextState();// 0x1fb0074
	int64 GetLeftTime();// 0x1ff3a9c

--------------------------------
Class: EventReportComponent.ActorComponent.Object
	<byte,bool> EnabledCollectedEventDataEventIds;//[Offset: 0xbc, Size: 60]
	UAEGameMode* GameMode;//[Offset: 0xf8, Size: 4]
	<int,CollectedEvent_TabRes> CollectedEventTableMap;//[Offset: 0xfc, Size: 60]

--------------------------------
Class: CollectedEvent_TabRes
	int EventId;//[Offset: 0x0, Size: 4]
	bool bWeSeeNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: AIProbeComponent.GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: WorldLevelProbeComponent.GameModeProbeComponent.ActorComponent.Object
	class Actor[] IgnoreClassesNeverRemove;//[Offset: 0xbc, Size: 12]
	bool IsIgnoreLastCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	void OutSetWorldAlwaysVisible(int SetLoadType);// 0x231170c
	void OutSetLevelVisibleInfo(Vector[] Center, float[] VisibleRadius);// 0x2311498

--------------------------------
Class: AIGroupManagerComponent.ActorComponent.Object
	AnimalGroupRespawnConfig[] AnimalGroupRespawnConfig;//[Offset: 0xbc, Size: 12]
	AIActingComponent* AIActingComp;//[Offset: 0x140, Size: 8]

--------------------------------
Class: AnimalGroupRespawnConfig
	enum AnimalType;//[Offset: 0x0, Size: 1]
	AnimalGroupRespawnNumProbability[] AnimalGroupRespawnNumProbability;//[Offset: 0x4, Size: 12]
	float NoBlueCircleRadius;//[Offset: 0x10, Size: 4]
	float CheckPlayerRadius;//[Offset: 0x14, Size: 4]
	float EndRespawnTime;//[Offset: 0x18, Size: 4]
	int TryFindSpawnLocNum;//[Offset: 0x1c, Size: 4]
	FString[] ValidTraceActorIncludeName;//[Offset: 0x20, Size: 12]
	Vector AnimalGenerateOffset;//[Offset: 0x2c, Size: 12]
	class STAnimalCharacter* AnimalCharacterClass;//[Offset: 0x38, Size: 40]

--------------------------------
Class: AnimalGroupRespawnNumProbability
	uint32 AnimalNum;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STAnimalCharacter.STExtraSimpleCharacterBase.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	AnimalStateMutual[] AnimalStateMutuals;//[Offset: 0xccc, Size: 12]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0xcdc, Size: 4]
	InterpMovementComponent* InterpMovement;//[Offset: 0xce0, Size: 4]
	WidgetComponent* AnimalInfoWidget;//[Offset: 0xce4, Size: 4]
	Vector RelativeLocation;//[Offset: 0xce8, Size: 12]
	class UserWidget* WidgetClass;//[Offset: 0xcf4, Size: 4]
	bool bUseMediumRegionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf8, Size: 1]
	AnimalAnimListComponent* _AnimListComponent;//[Offset: 0xcfc, Size: 4]
	STAnimalAnimInstance* _AnimInstance;//[Offset: 0xd00, Size: 4]
	ProduceDropItemComponent* ProduceDropItemComponent;//[Offset: 0xd04, Size: 4]
	int AnimalGroupID;//[Offset: 0xd08, Size: 4]
	enum AnimalType;//[Offset: 0xd16, Size: 1]
	<enum,float> AnimalStateSpeeds;//[Offset: 0xd18, Size: 60]
	float HearRadius;//[Offset: 0xd54, Size: 4]
	SkeletalMesh*[] RandomMeshs;//[Offset: 0xd58, Size: 12]
	MaterialInterface*[] RandomMaterials;//[Offset: 0xd64, Size: 12]
	delegate CustomObjectEvent;//[Offset: 0xd70, Size: 12]
	ParticleSystem* FootPrintRes;//[Offset: 0xd7c, Size: 4]
	ParticleSystemComponent* FootPrintParticleSys;//[Offset: 0xd80, Size: 4]
	FName AttachedSocket;//[Offset: 0xd88, Size: 8]
	float MovementTickInterval;//[Offset: 0xd90, Size: 4]
	void ShowFootPrintEffect(bool IsEnabled);// 0x21148f8
	void SetExtendData(FString Key, int Value);// 0x2114754
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x2114684
	WeatherDetailStatus GetCurrentWeatherStatus();// 0x211463c
	void DisappearOnDeath();// 0x2114620
	void ClearOnDeath(Controller* EventInstigater, int DamageType);// 0x211455c
	void BeforeDestroyed();// 0x2114540

--------------------------------
Class: STExtraSimpleCharacterBase.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0xc18, Size: 4]
	float MinTimeLockTarget;//[Offset: 0xc1c, Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0xc20, Size: 4]
	float SensedRadius;//[Offset: 0xc24, Size: 4]
	float MinTimeLockHeardEnemy;//[Offset: 0xc28, Size: 4]
	float HeardRadius;//[Offset: 0xc2c, Size: 4]
	float DelayHideDuration;//[Offset: 0xc30, Size: 4]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc34, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc35, Size: 1]
	Vector HurtDir;//[Offset: 0xc38, Size: 12]
	float HurtDistance;//[Offset: 0xc44, Size: 4]
	float HurtResetDefaultTime;//[Offset: 0xc48, Size: 4]
	StateMutual[] StateMutuals;//[Offset: 0xc54, Size: 12]
	delegate StateEnterEvent;//[Offset: 0xc60, Size: 12]
	delegate StateLeaveEvent;//[Offset: 0xc6c, Size: 12]
	delegate OnDeath;//[Offset: 0xc8c, Size: 12]
	SimpleDamageRepData SimpleDamageRepData;//[Offset: 0xc98, Size: 24]
	int[] randomIndexes;//[Offset: 0xcb0, Size: 12]
	SimpleAnimListBaseComponent* AnimListComponent;//[Offset: 0xcbc, Size: 4]
	STExtraSimpleAnimInstanceBase* AnimInstance;//[Offset: 0xcc0, Size: 4]
	byte NetRelevantType;//[Offset: 0xcc4, Size: 1]
	void SetNetRelevantType(byte InType);// 0x2227a54
	void OnRep_SimpleDamageData();// 0x2227a40
	void DisappearOnDeath();// 0x2114620
	void CurrentStatesRemove(int State);// 0x22279c0
	void CurrentStatesAdd(int State);// 0x2227940
	void ClearOnDeath(Controller* EventInstigater, int DamageType);// 0x211455c
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x22276c4
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x22273dc
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2227160
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2226ee4
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2226c54
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x22269d8
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x222675c
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x22264d4
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x22261ec
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x2bb69b8
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x2bb69b8
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x2226078

--------------------------------
Class: AnimalStateMutual
	enum state1;//[Offset: 0x0, Size: 1]
	enum state2;//[Offset: 0x1, Size: 1]

--------------------------------
Class: InterpMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxMoveSpeed;//[Offset: 0x124, Size: 4]
	bool bUseDirectionAdjustVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 1]
	float ScalePower;//[Offset: 0x12c, Size: 4]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 1]
	float AvoidanceWeight;//[Offset: 0x134, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x138, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x13c, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x140, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x144, Size: 4]
	bool bHasRequestedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 1]
	Vector RequestedVelocity;//[Offset: 0x14c, Size: 12]
	Character* CharacterOwner;//[Offset: 0x158, Size: 4]
	int AvoidanceUID;//[Offset: 0x16c, Size: 4]

--------------------------------
Class: AnimalAnimListComponent.SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimalAnimData[] AnimalAnimDatas;//[Offset: 0x1e0, Size: 12]
	AnimalMoveAnimSpeed[] AnimalMoveAnimSpeeds;//[Offset: 0x1ec, Size: 12]

--------------------------------
Class: SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimDataPair[] AnimDataPairs;//[Offset: 0x174, Size: 12]
	CurveFloat* hitPoseAndDistanceCurve;//[Offset: 0x180, Size: 4]
	<int,float> moveAnimSpeed;//[Offset: 0x184, Size: 60]
	float PlayMoveDeathMinimumDist;//[Offset: 0x1c0, Size: 4]
	delegate OnAnimLoadedFinished;//[Offset: 0x1c4, Size: 12]
	void SortAnimations();// 0x20ee91c
	void RemoveChildComponent(UAEAnimListComponentBase* ChildComponent);// 0x1f62880
	void OnAsyncLoadingFinished(AsyncLoadAnimParams loadAnimParams);// 0x20ee698
	void AddChildComponent(UAEAnimListComponentBase* ChildComponent, int Layer);// 0x20ee5d4

--------------------------------
Class: AnimalAnimData
	enum PoseType;//[Offset: 0x0, Size: 4]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: AnimalMoveAnimSpeed
	enum PoseType;//[Offset: 0x0, Size: 4]
	float Speed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AnimDataPair
	int PoseTypeID;//[Offset: 0x0, Size: 4]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: AsyncLoadAnimParams

--------------------------------
Class: STAnimalAnimInstance.STExtraSimpleAnimInstanceBase.AnimInstance.Object
	bool b_Hit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	bool b_Moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d, Size: 1]
	bool b_Trot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32e, Size: 1]
	bool b_Running;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32f, Size: 1]
	float f_MoveRate;//[Offset: 0x330, Size: 4]
	Vector v_HitVector;//[Offset: 0x334, Size: 12]
	bool b_IsFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	AnimSequence* A_Idle;//[Offset: 0x344, Size: 4]
	AnimMontage* A_Idle_Arder;//[Offset: 0x348, Size: 4]
	AnimSequence* A_MoveAnim_Walk;//[Offset: 0x34c, Size: 4]
	AnimSequence* A_MoveAnim_Trot;//[Offset: 0x350, Size: 4]
	AnimSequence* A_MoveAnim_Run;//[Offset: 0x354, Size: 4]
	BlendSpace* A_HitAnim;//[Offset: 0x358, Size: 4]
	AnimMontage* A_DeadAnim;//[Offset: 0x35c, Size: 4]
	AnimMontage* A_FearAnim;//[Offset: 0x360, Size: 4]
	AnimMontage* A_CuteAnim;//[Offset: 0x364, Size: 4]
	void ResetAnimState();// 0x1ef18fc
	void OnPawnDeadEvent(STExtraSimpleCharacterBase* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, bool IsPointDamage);// 0x2113b30
	void OnLeaveState(int State);// 0x2113ab0
	void OnEnterState(int State);// 0x2113a30
	void OnAnimListLoadedFinished(AsyncLoadAnimParams loadAnimParams);// 0x21137a4
	void CacheAnimState(float DeltaSeconds);// 0x1ef529c
	void CacheAnimDataList(bool ForceRefreshVar);// 0x211371c

--------------------------------
Class: STExtraSimpleAnimInstanceBase.AnimInstance.Object
	STExtraSimpleCharacterBase* OwnerCharacter;//[Offset: 0x2ec, Size: 4]
	FString OwnerClassPath;//[Offset: 0x2fc, Size: 12]
	bool EnableAdjustFloorNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	Rotator AdjustFloorRot;//[Offset: 0x318, Size: 12]
	float AdjustFloorDelta;//[Offset: 0x324, Size: 4]
	void ResetAnimState();// 0x1ef18fc
	void OnPawnDeadEvent(STExtraSimpleCharacterBase* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, bool IsHeadShotDamage);// 0x2113b30
	void OnLeaveState(int State);// 0x2113ab0
	void OnEnterState(int State);// 0x2113a30
	void OnAnimListLoadedFinished(AsyncLoadAnimParams loadAnimParams);// 0x21137a4
	void CacheAnimState(float DeltaSeconds);// 0x1ef529c
	void CacheAnimDataList(bool ForceRefreshVar);// 0x211371c

--------------------------------
Class: StateMutual
	int state1;//[Offset: 0x0, Size: 4]
	int state2;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SimpleDamageRepData
	float Damage;//[Offset: 0x0, Size: 4]
	float CurrentHeath;//[Offset: 0x4, Size: 4]
	bool IsFatalHealthCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool IsHeadShotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	Pawn* DamageInstigatorPawn;//[Offset: 0xc, Size: 4]
	Pawn* DamageReceiver;//[Offset: 0x10, Size: 4]
	int NetCounter;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AnimalTeleportComponent.ActorComponent.Object
	bool bDeliverToInDoorPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	AnimalDeliverRatingConfig[] ChickDeliverConfig;//[Offset: 0xc0, Size: 12]
	AnimalDeliverRatingConfig[] DeerDeliverConfig;//[Offset: 0xcc, Size: 12]
	AnimalDeliverRatingConfig[] GoblinDeliverConfig;//[Offset: 0xd8, Size: 12]
	AnimalDeliverRatingConfig[] IceDeliverConfig;//[Offset: 0xe4, Size: 12]
	AnimalDeliverAreaLimit[] DeliveryAreaLimit;//[Offset: 0xf0, Size: 12]
	AIActingComponent* AIActingComp;//[Offset: 0xfc, Size: 8]
	AIGroupManagerComponent* AIGroupMgrComp;//[Offset: 0x104, Size: 8]
	AnimalDeliverConfiguration* GoblinDeliverConfiguration;//[Offset: 0x10c, Size: 4]
	AnimalDeliverConfiguration* IceDeliverConfiguration;//[Offset: 0x110, Size: 4]
	<STExtraPlayerCharacter*> DeliveredGoblinPlayers;//[Offset: 0x114, Size: 60]
	<STExtraPlayerCharacter*> DeliveredIcePlayers;//[Offset: 0x150, Size: 60]
	<enum,int> DeleverCountPerWave;//[Offset: 0x294, Size: 60]

--------------------------------
Class: AnimalDeliverRatingConfig
	float RightRatingSection;//[Offset: 0x0, Size: 4]
	uint32 DeliverGroupNumPerWave;//[Offset: 0x4, Size: 4]
	float DeliverBeginTime;//[Offset: 0x8, Size: 4]
	float DeliveryWaveInterval;//[Offset: 0xc, Size: 4]
	float DeliverEndTime;//[Offset: 0x10, Size: 4]
	uint32 FullFeedLimit;//[Offset: 0x14, Size: 4]
	float DeliverFreqInterval;//[Offset: 0x18, Size: 4]
	int DeliverNumEachFreq;//[Offset: 0x1c, Size: 4]
	<int,int> DeliverCountByPlayerNum;//[Offset: 0x20, Size: 60]

--------------------------------
Class: AnimalDeliverAreaLimit
	Vector TopLeft;//[Offset: 0x0, Size: 12]
	Vector BottomRight;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AnimalDeliverConfiguration.Object
	AnimalDeliverStrategy*[] TeamDeliverStrategies;//[Offset: 0x1c, Size: 12]
	AnimalDeliverStrategy*[] IndividualDeliverStrategies;//[Offset: 0x28, Size: 12]

--------------------------------
Class: AnimalDeliverStrategy.Object
	byte Priority;//[Offset: 0x1c, Size: 1]
	enum SortStrategy;//[Offset: 0x5c, Size: 1]
	enum SelectStrategy;//[Offset: 0x5d, Size: 1]

--------------------------------
Class: PlaneComponent.ActorComponent.Object
	int ClassicFlightNo;//[Offset: 0xbc, Size: 4]
	<int,PlaneData> PlaneDataMap;//[Offset: 0xc0, Size: 60]
	class Pawn* PlaneClass;//[Offset: 0xfc, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	bool bEnableClassic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 1]
	bool bSyncRouteAfterFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 1]
	PlayerController*[] CachedTotalPlayer;//[Offset: 0x104, Size: 12]
	AIController*[] CachedTotalAI;//[Offset: 0x110, Size: 12]
	int FlightTimes;//[Offset: 0x11c, Size: 4]
	int NotifyEndFlightDelayTime;//[Offset: 0x120, Size: 4]
	int CustomFlightTimes;//[Offset: 0x130, Size: 4]
	void StartFlight(int FlightNo);// 0x2093760
	void SetPlaneClassPath(FString PlaneClassPath);// 0x20936a4
	void SetFlight(int FlightNo, out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc, float PlaneSpeed, float PlaneHeight);// 0x2093450
	int SetCustomFlight(out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc, float PlaneSpeed, float PlaneHeight);// 0x2093234
	void NotifyEndFlight();// 0x2093220
	bool AddPlayerToFlight(PlayerController* PC, int FlightNo);// 0x209315c

--------------------------------
Class: PlaneData
	int FlightNo;//[Offset: 0x0, Size: 4]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Actor* ThePlane;//[Offset: 0x8, Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Vector PlaneVelocity;//[Offset: 0x10, Size: 12]
	Vector PlaneStartLoc;//[Offset: 0x1c, Size: 12]
	Vector PlaneEndLoc;//[Offset: 0x28, Size: 12]
	Vector2D CanJumpLoc;//[Offset: 0x34, Size: 8]
	Vector2D ForceJumpLoc;//[Offset: 0x3c, Size: 8]
	float PlaneHeight;//[Offset: 0x44, Size: 4]
	int TotalPlayerNum;//[Offset: 0x48, Size: 4]
	PlayerController*[] TotalPlayers;//[Offset: 0x4c, Size: 12]
	PlayerController*[] CurPlayers;//[Offset: 0x58, Size: 12]
	int TotalAINum;//[Offset: 0x64, Size: 4]
	AIController*[] TotalAIs;//[Offset: 0x68, Size: 12]
	int CurAINum;//[Offset: 0x74, Size: 4]
	float FixedJumpPointRate;//[Offset: 0x78, Size: 4]
	bool bCanFixedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]

--------------------------------
Class: PlayerRespawnComponent.ActorComponent.Object
	bool bUseWeaponScheme;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float DefaultPlayerRespawnTime;//[Offset: 0xc0, Size: 4]
	float DefaultRespawnInvincibleTime;//[Offset: 0xc4, Size: 4]
	enum RespawnPointType;//[Offset: 0xc8, Size: 1]
	bool RespawnKeepAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	int[] RespawnIgnoreKeepItemTypes;//[Offset: 0xcc, Size: 12]
	int[] RespawnIgnoreKeepItemIds;//[Offset: 0xd8, Size: 12]
	int[] RespawnNeedReplaceWeaponIds;//[Offset: 0xe4, Size: 12]
	<uint32,ReplaceWeaponDataMap> RespawnReplaceWeaponMap;//[Offset: 0xf0, Size: 60]
	<uint32,RespawnIgnoreItemType> PlayerRespawnIgnoreItemTypes;//[Offset: 0x12c, Size: 60]
	RespawnKeepAllItemData CustomRespawnItemData;//[Offset: 0x168, Size: 24]
	int[] DefaultWeaponList;//[Offset: 0x180, Size: 12]
	float bRestoreDataDelay;//[Offset: 0x18c, Size: 4]
	bool bRestoreDataDelayOnRespawnAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	bool bReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 1]
	delegate OnGlobalRespawnedDelegate;//[Offset: 0x198, Size: 16]
	BattleRoyaleGameModeBase* OwnerGameMode;//[Offset: 0x298, Size: 4]
	void SetRespawnInvincibleTime(float DefaultRespawnInvincibleTimeIn);// 0x20a2154
	void RespawnAllPlayer();// 0x20a2140
	void RemovePlayerRespawnTimer(uint32 PlayerKey, bool bAI);// 0x20a207c
	void PlayerDelayAddItem(uint32 PlayerKey, int ItemId);// 0x20a1fc0
	void OnCharacterStartFire(STExtraWeapon* _, STExtraBaseCharacter* Character);// 0x20a1f04
	bool IsContainPlayerTimer(uint32 PlayerKey);// 0x20a1e84
	void HandlePlayerDisuseItem(uint32 PlayerKey, ItemDefineID DefineID);// 0x20a1db4
	void HandleCacheWeapon(uint32 PlayerKey, STExtraWeapon* Weapon);// 0x20a1cf8
	int GetRespawnWeaponBulletNum(out const RespawnKeepAllItemData RespawnKeepAllItemData, int SlotType, int SpecificID);// 0x20a1ba0
	bool GetPlayerRespawnKeepAllItemData(uint32 PlayerKey, bool bAI, out RespawnKeepAllItemData OutRespawnKeepAllItemData, bool bKeepBullet);// 0x20a19ec
	void GenerateRespawnKeepItems(uint32 PlayerKey, bool bAI, out const RespawnKeepAllItemData RespawnKeepAllItemData, bool bForceKeepItems);// 0x20a1840
	void DealWithDelayAddItem(uint32 PlayerKey, bool bAddAll, bool bClearAll);// 0x20a172c
	void ClearDelayAddItems(uint32 PlayerKey);// 0x20a16b4
	void ChangeWeaponSchemeIndex(int InIndex);// 0x1ebef5c
	void AddPlayerRespawnIgnoreKeepItemType(uint32 PlayerKey, bool IsAdd, int itemType);// 0x20a15a8

--------------------------------
Class: ReplaceWeaponDataMap
	<byte,ReplaceWeaponData> ReplaceWeaponDataMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ReplaceWeaponData
	int WeaponId;//[Offset: 0x0, Size: 4]
	BattleItemData WeaponItemData;//[Offset: 0x8, Size: 160]
	BattleItemData[] WeaponAssociateItemDataList;//[Offset: 0xa8, Size: 12]

--------------------------------
Class: RespawnIgnoreItemType

--------------------------------
Class: RespawnKeepAllItemData
	RespawnKeepItemData[] ItemDatas;//[Offset: 0x0, Size: 12]
	RespawnKeepWeaponData[] WeaponDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: RespawnKeepItemData
	int ItemTypeID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	bool TotalNumLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: RespawnKeepWeaponData.RespawnKeepItemData
	byte WeaponSlot;//[Offset: 0x18, Size: 1]
	RespawnKeepItemData[] AttachmentDatas;//[Offset: 0x1c, Size: 12]
	int ClipBulletNum;//[Offset: 0x28, Size: 4]

--------------------------------
Class: RespawnItemConfig.DataAsset.Object
	RespawnItemMajorGroup[] MajorGroupList;//[Offset: 0x20, Size: 12]

--------------------------------
Class: RespawnItemMajorGroup
	int RandomTimes;//[Offset: 0x0, Size: 4]
	RespawnItemMinorGroup[] MinorGroupList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: RespawnItemMinorGroup
	int RandomWeight;//[Offset: 0x0, Size: 4]
	RespawnItem[] ItemList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: RespawnItem
	int ItemTableID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ShowVehicleComponent.ActorComponent.Object
	class Actor* VehicleSpotClass;//[Offset: 0xbc, Size: 4]
	float DropHeightOffset;//[Offset: 0xc0, Size: 4]
	float LeftTimeToDestroyVehicles;//[Offset: 0xc4, Size: 4]
	float TimerHzToDestroyVehicles;//[Offset: 0xc8, Size: 4]
	Actor*[] VehicleSpotActors;//[Offset: 0xcc, Size: 12]
	<uint32,Actor*> VehicleContainers;//[Offset: 0xf0, Size: 60]
	void ShowVehicleFor(uint32 InPlayerKey, FString InVehiclePath, FString InVehicleContainerPath, int InAvatarID);// 0x20edbe0
	void OnGameModeStateChanged(out const GameModeStateChangedParams InParams);// 0x20edb50
	void DestroyVehicleFor(uint32 InPlayerKey);// 0x20edad8

--------------------------------
Class: PlaneTypes
	int SeasonIdx;//[Offset: 0x0, Size: 4]
	FString PlaneClassFullPath;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ItemAttach
	int BaseItemID;//[Offset: 0x0, Size: 4]
	AddItemInfo[] AttachItemList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AddItemInfo
	int AddItemID;//[Offset: 0x0, Size: 4]
	int AddItemNum;//[Offset: 0x4, Size: 4]
	bool TotalNumLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: RespawnItemConfigInst
	int RandomWeight;//[Offset: 0x0, Size: 4]
	class RespawnItemConfig* RespawnItemConfigClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FakePlayerCustomComponent.ActorComponent.Object
	FString tableName;//[Offset: 0xbc, Size: 12]
	FString FakePlayerCampNameTableName;//[Offset: 0xc8, Size: 12]
	FString FakePlayerRandomNameTableName;//[Offset: 0xd4, Size: 12]
	<int,FakePlayerCustomRow> RowMap;//[Offset: 0xe0, Size: 60]
	<int,FString> FakePlayerCampNameMap;//[Offset: 0x11c, Size: 60]
	FString[] FakePlayerRandomNamePrefixArray;//[Offset: 0x158, Size: 12]
	FString[] FakePlayerRandomNameArray;//[Offset: 0x164, Size: 12]
	void InitRowDataMap();// 0x1fd7048
	void InitAIParam(int resID, out GameModeAIPlayerParams OutParam);// 0x1fd6f58
	FString GetControllerPath(int resID);// 0x1fd6e50

--------------------------------
Class: FakePlayerCustomRow
	int ID;//[Offset: 0x0, Size: 4]
	FString ControllerPath;//[Offset: 0x4, Size: 12]
	FString Name;//[Offset: 0x10, Size: 12]
	int gender;//[Offset: 0x1c, Size: 4]
	FString ItemStr;//[Offset: 0x20, Size: 12]
	GameModePlayerItem[] PlayerItems;//[Offset: 0x2c, Size: 12]
	int IsUseRandomName;//[Offset: 0x38, Size: 4]

--------------------------------
Class: DSTickRateOptimize
	float TickFrequency;//[Offset: 0x0, Size: 4]
	float NetConsiderFrequency;//[Offset: 0x4, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x8, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GroupPlayers
	uint32[] Players;//[Offset: 0x0, Size: 12]

--------------------------------
Class: PVSNetRelevantHelper.Object
	float MinJudgeDisquared;//[Offset: 0x11c, Size: 4]
	void UpdatePlayerCellMap(Character* Player);// 0x20c8e08

--------------------------------
Class: AIControllerList

--------------------------------
Class: AIPawnPoolItem
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x0, Size: 4]

--------------------------------
Class: RoomCustomParams
	int CircleSpeedMultiplicator;//[Offset: 0x0, Size: 4]
	bool bAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool bShowSkull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	bool bAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bGunRemoveBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	int BlueCircleDamageMultiplicator;//[Offset: 0xc, Size: 4]
	bool bUseFirstWhiteCircleDelayTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bUseFirstSafeZoneAppearTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bUseFirstWhiteCircleRadiusMultiplicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	int FirstWhiteCircleDelayTime;//[Offset: 0x14, Size: 4]
	int FirstSafeZoneAppearTime;//[Offset: 0x18, Size: 4]
	int FirstWhiteCircleRadiusMultiplicator;//[Offset: 0x1c, Size: 4]
	bool EnableRedZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	CustomCircleParams[] CustomCircleParamsList;//[Offset: 0x24, Size: 12]
	bool bFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: CustomCircleParams
	int Stage;//[Offset: 0x0, Size: 4]
	int DelayTime;//[Offset: 0x4, Size: 4]
	int SafeZoneAppeartime;//[Offset: 0x8, Size: 4]
	int LastTime;//[Offset: 0xc, Size: 4]
	int CircleDamage;//[Offset: 0x10, Size: 4]
	int BlueCircleRadius;//[Offset: 0x14, Size: 4]
	int WhiteCircleRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ReviveBattleUIComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x104, Size: 12]
	Vector[] ReviveTowerLocation;//[Offset: 0x110, Size: 12]
	bool bHasReviveTower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	void OnRep_ReviveTowerLocation();// 0x51d11a4

--------------------------------
Class: SmartBearerManager.Actor.Object
	BaseBearerUnit*[] AllBearerUnit;//[Offset: 0x2fc, Size: 12]
	BaseBearerUnit*[] WaitForInitUnit;//[Offset: 0x308, Size: 12]
	STExtraPetCharacter*[] WaitForAddPet;//[Offset: 0x38c, Size: 12]
	STExtraWeapon*[] WaitForAddWeapon;//[Offset: 0x3d4, Size: 12]
	void SetEnabled(bool Enable);// 0x2102150
	void SetBandWeaponDIYUnit(bool Enable);// 0x21020d0
	void SetBandPetUnit(bool Enable);// 0x2102050
	void SetBandOtherCharacterUnit(bool Enable);// 0x2101fd0
	void SetBandAdvanceVehicleUnit(bool Enable);// 0x2101f50
	void OnSwitchGameStatusEvent(FString Status);// 0x2101e94
	void OnPreMatchSuccess(int submode_id);// 0x2101e1c
	bool IsEnabled();// 0x2088704

--------------------------------
Class: BaseBearerUnit.Object

--------------------------------
Class: BP_LODMeshLandscape_C.MyLandscape.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* Fourmap_landscape_Fly;//[Offset: 0x420, Size: 4]

--------------------------------
Class: MyLandscape.Actor.Object
	RuntimeMeshComponent* Mesh;//[Offset: 0x2fc, Size: 4]
	MyLandscapeGeometry* LandscapeGeometry;//[Offset: 0x300, Size: 4]
	Material* LandscapeMat;//[Offset: 0x304, Size: 4]
	StaticMeshComponent* HighQualityMesh;//[Offset: 0x368, Size: 4]
	LandscapeGeometry_ExtendData* LandscapeGeometry_ExtendData;//[Offset: 0x36c, Size: 4]
	bool AutoLoadLandscapeMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	FString AutoLoadGeometryPath;//[Offset: 0x374, Size: 12]
	FString AutoLoadMaterialPath;//[Offset: 0x380, Size: 12]
	StaticMeshComponent* HighLODMesh;//[Offset: 0x38c, Size: 4]
	bool EditorLoadLandscapeMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	float HideHighLODOfZ;//[Offset: 0x394, Size: 4]
	float ChangeLongerDistanceOfZ;//[Offset: 0x398, Size: 4]
	float ChangeLongerDistanceScale;//[Offset: 0x39c, Size: 4]
	<FString> ChangeLongerDistanceLevels;//[Offset: 0x3a0, Size: 60]
	<StaticMeshActor*> HighMeshActorsOnFly;//[Offset: 0x3dc, Size: 60]
	Actor* ViewTarget;//[Offset: 0x41c, Size: 4]
	RuntimeMeshComponent* GetMeshComp();// 0x1fa6450
	void GameEventReconnect();// 0x20674e8
	void GameEventJump();// 0x20674d4
	void GameEventFlying();// 0x20674c0
	void GameEventFighting();// 0x20674ac
	void GameEventAvatarDisplay();// 0x2067498
	void AddHighMeshActorsOnFly(StaticMeshActor* Actor);// 0x2067420
	void AboutToSwitchViewTargetPlayer();// 0x206740c

--------------------------------
Class: MyLandscapeGeometry.DataAsset.Object
	Vector[] Vertex;//[Offset: 0x20, Size: 12]
	Vector[] Normals;//[Offset: 0x2c, Size: 12]
	Vector2D[] UV;//[Offset: 0x38, Size: 12]
	int[] Indices;//[Offset: 0x44, Size: 12]
	<IntPoint,int> ComponentIndexOffset;//[Offset: 0x50, Size: 60]
	int ComponentIndexCount;//[Offset: 0x8c, Size: 4]
	int ComponentVertexCount;//[Offset: 0x90, Size: 4]
	<FString,SubLevelComponentMapValue> SubLevelComponentMap;//[Offset: 0x94, Size: 60]
	StaticMesh* HighQualityMesh;//[Offset: 0xd0, Size: 40]
	float HighQualityMeshDestroyHight;//[Offset: 0xf8, Size: 4]

--------------------------------
Class: SubLevelComponentMapValue
	FString Name;//[Offset: 0x0, Size: 12]
	int[] IndexOffsetArray;//[Offset: 0xc, Size: 12]
	int[] VertexOffsetIndex;//[Offset: 0x18, Size: 12]
	int[] BorderIndex1;//[Offset: 0x24, Size: 12]
	int[] BorderIndex2;//[Offset: 0x30, Size: 12]
	int[] BorderIndex3;//[Offset: 0x3c, Size: 12]
	int[] BorderIndex4;//[Offset: 0x48, Size: 12]
	int[] UnderBorderIndex1;//[Offset: 0x54, Size: 12]
	int[] UnderBorderIndex2;//[Offset: 0x60, Size: 12]
	int[] UnderBorderIndex3;//[Offset: 0x6c, Size: 12]
	int[] UnderBorderIndex4;//[Offset: 0x78, Size: 12]
	int[] BorderIndicesBuffer1;//[Offset: 0x84, Size: 12]
	int[] BorderIndicesBuffer2;//[Offset: 0x90, Size: 12]
	int[] BorderIndicesBuffer3;//[Offset: 0x9c, Size: 12]
	int[] BorderIndicesBuffer4;//[Offset: 0xa8, Size: 12]
	FString Sibling1Name;//[Offset: 0xb4, Size: 12]
	FString Sibling2Name;//[Offset: 0xc0, Size: 12]
	FString Sibling3Name;//[Offset: 0xcc, Size: 12]
	FString Sibling4Name;//[Offset: 0xd8, Size: 12]
	int Sibling1Idx;//[Offset: 0xe4, Size: 4]
	int Sibling2Idx;//[Offset: 0xe8, Size: 4]
	int Sibling3Idx;//[Offset: 0xec, Size: 4]
	int Sibling4Idx;//[Offset: 0xf0, Size: 4]

--------------------------------
Class: LandscapeGeometry_ExtendData.DataAsset.Object
	<IntPoint,int> ComponentVertexIndexOffset;//[Offset: 0x20, Size: 60]

--------------------------------
Class: BP_ObjectPoolManager_AllMode_C.AObjectPoolManager.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0, Size: 4]

--------------------------------
Class: AObjectPoolManager.Actor.Object
	PoolPreloadObjectItem[] Preloads;//[Offset: 0x2fc, Size: 12]
	PoolPreloadClassItem[] PreloadClasses;//[Offset: 0x308, Size: 12]
	PoolPreloadObjectItem[] PreloadTblRes;//[Offset: 0x314, Size: 12]
	PoolPreloadTableConfigItem[] PreLoadConfigTable;//[Offset: 0x320, Size: 12]
	Object*[] PreLoadQuotes;//[Offset: 0x32c, Size: 12]
	UAEDataTable*[] LoadedTableArray;//[Offset: 0x3d4, Size: 12]
	void PreSpawnToPool(out const PoolPreloadObjectItem Item, out SoftObjectPath SoftObjectPath);// 0x1eda298
	void PreLocalSpawnToPool(out const PoolPreloadClassItem Item, out SoftObjectPath SoftObjectPath);// 0x1eda0fc
	void PreLoadObjectsFinish(PoolPreloadAysncLoadParams loadParams);// 0x1eda084
	void PreLoadClassesFinish();// 0x1eda070
	void OnOpenObjectPool();// 0x1eda05c

--------------------------------
Class: PoolPreloadObjectItem
	Object* Object;//[Offset: 0x0, Size: 40]
	bool IsSpawnToPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int PreloadNum;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PoolPreloadClassItem
	class Object* Object;//[Offset: 0x0, Size: 40]
	bool IsSpawnToPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int PreloadNum;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PoolPreloadTableConfigItem
	int LoadPriority;//[Offset: 0x0, Size: 4]
	FString CSVFilePath;//[Offset: 0x4, Size: 12]

--------------------------------
Class: PoolPreloadAysncLoadParams

--------------------------------
Class: BP_PoolManager_Sink_C.AObjectPoolManager.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0, Size: 4]

--------------------------------
Class: Skill_Punch_Fist_bp_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	bool TriggerFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	enum PawnState;//[Offset: 0x551, Size: 1]
	bool AutoEnterState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 1]
	bool IsAddHealTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 1]
	int CastFailTipsID;//[Offset: 0x554, Size: 4]
	bool IgnoreCanBePlayedCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	bool IgnoreConnectionCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x559, Size: 1]
	bool InteractiveSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55a, Size: 1]
	float CancelLockDuration;//[Offset: 0x55c, Size: 4]
	void StopSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x227cda4
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x227cce0
	void DelayLeaveStateForMelee(UTSkillManagerComponent* SkillManagerComponent);// 0x227cc68

--------------------------------
Class: UAEBaseSkill.UTSkill.Actor.Object
	delegate OnSkillCustomEvent;//[Offset: 0x544, Size: 12]
	bool OnEvent(UTSkillManagerComponent* Comp, byte TheEventType, int PhaseIndex);// 0x2276e00

--------------------------------
Class: Skill_Melee_Cowbar_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_Melee_Machete_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_Melee_Pan_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_Melee_Sickle_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_AdrenalineSyringe_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_Bandage_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_EnergyDrink_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_FirstAidKit_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_GasCan_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_MedKit_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_Painkiller_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_RapidAidbox_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_Grenade_Frag_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_Grenade_Molotov_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_Grenade_PoisonApple_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_Grenade_Smoke_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_Grenade_Stun_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_Grenade_Smoke_BP_2_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_ProjSpikeTrap_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_ParachuteLand_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_Grenade_Sticky_Bomb_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_FinishInteractAtOnce_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_Build_Shield_New_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_CarryBack_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_PutDown_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_Template_Grenade_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_Build_MVPStatue_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_Template_Loading_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_DC_Treasure_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_EmergencyCall_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void CheckAllowedLastPlacingTime(out bool bResult, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int CallFunc_FTrunc_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetCurCircleIndex_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x2bb69b8
	void CheckAllowedStartPlacingTime(out bool bResult, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int CallFunc_FTrunc_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetCurCircleIndex_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x2bb69b8
	void CheckOther(out bool bResult, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, UTSkillManagerComponent* CallFunc_GetSpecificSkillManager_ReturnValue, EmergencyCallActor*[] CallFunc_GetAllActorsOfClass_OutActors, Actor* CallFunc_GetOwner_ReturnValue, EmergencyCallActor* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, Actor* CallFunc_GetOwner_ReturnValue2, float CallFunc_Dist_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_FloatFloat_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2bb69b8
	void CanPlace(out bool bResult, Vector PlaceLocation, bool bCheckResult, float TraceRadius, float TraceAlpha, Vector TraceEndLoc, Vector TraceStartLoc, float MinRadius, float MaxRadius, Vector EndCheckLoc, Vector StartCheckLoc, int ___int_Array_Index_Variable, UAEBlackboardKeySelector K2Node_MakeStruct_UAEBlackboardKeySelector, Actor*[] ___object_Variable, int ___int_Variable, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool ___bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, byte[] K2Node_MakeArray_Array, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, byte[] K2Node_MakeArray_Array2, UAEBlackboard* CallFunc_GetSpecificBlackboard_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, UTSkillManagerComponent* CallFunc_GetSpecificSkillManager_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, PrimitiveComponent* CallFunc_GetMovementBase_ReturnValue, float CallFunc_GetScaledCapsuleHalfHeight_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, bool CallFunc_NotEqual_ByteByte_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Actor*[] ___object_Variable2, HitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, int ___int_Loop_Counter_Variable, PrimitiveComponent*[] CallFunc_SphereOverlapComponents_OutComponents, bool CallFunc_SphereOverlapComponents_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, PrimitiveComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, STExtraCharacter* K2Node_DynamicCast_AsSTExtra_Character, bool K2Node_DynamicCast_bSuccess2, float CallFunc_Lerp_ReturnValue, Vector CallFunc_VLerp_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, int CallFunc_FTrunc_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, float CallFunc_BreakVector_X5, float CallFunc_BreakVector_Y5, float CallFunc_BreakVector_Z5, float CallFunc_Divide_FloatFloat_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_DegTan_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue3, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue4, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue5, Vector CallFunc_Add_VectorVector_ReturnValue6);// 0x2bb69b8
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]
	float StartCheckDist;//[Offset: 0x57c, Size: 4]
	float StartCheckHeight;//[Offset: 0x580, Size: 4]
	float TraceDistance;//[Offset: 0x584, Size: 4]
	Vector TaceExtern;//[Offset: 0x588, Size: 12]
	Vector2D CircleIndexRange;//[Offset: 0x594, Size: 8]

--------------------------------
Class: EmergencyCallActor.UAERegionActor.Actor.Object
	FString LuaFilePath;//[Offset: 0x348, Size: 12]
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x354, Size: 60]
	SplineComponent* SplineComponent;//[Offset: 0x390, Size: 4]
	STExtraBaseCharacter*[] InteractingCharacters;//[Offset: 0x394, Size: 12]
	enum[] DisablePawnStates;//[Offset: 0x3a0, Size: 12]
	float ConnectPlayerRange;//[Offset: 0x3ac, Size: 4]
	SkeletalMesh* BagMesh;//[Offset: 0x3b0, Size: 4]
	AkAudioEvent* ConnectAkEvent;//[Offset: 0x3b4, Size: 4]
	AkAudioEvent* DisconnectAkEvent;//[Offset: 0x3b8, Size: 4]
	float CheckCollisionRadius;//[Offset: 0x3bc, Size: 4]
	float CheckCollisionDelayTime;//[Offset: 0x3c0, Size: 4]
	float ForceGCTime;//[Offset: 0x3c4, Size: 4]
	bool bHadGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	enum CurStateType;//[Offset: 0x3c9, Size: 1]
	delegate OnEmergencyCallStateTypeChange;//[Offset: 0x3cc, Size: 12]
	float ServerEnterStateTime;//[Offset: 0x3d8, Size: 4]
	float FirstStateUpdateTime;//[Offset: 0x3dc, Size: 4]
	float FlyingStateUpdateTime;//[Offset: 0x3e0, Size: 4]
	CurveFloat* BalloonHeightCurve;//[Offset: 0x3e4, Size: 4]
	float BalloonHeightCurveEndTime;//[Offset: 0x3e8, Size: 4]
	CurveVector* FlyingOffsetCurve;//[Offset: 0x3ec, Size: 4]
	FName[] RopeTopBones;//[Offset: 0x3f0, Size: 12]
	FName[] RopeBottomBones;//[Offset: 0x3fc, Size: 12]
	FName[] BagRingsName;//[Offset: 0x408, Size: 12]
	StaticMesh* RopeMesh;//[Offset: 0x414, Size: 4]
	FName RopeStartSocket;//[Offset: 0x418, Size: 8]
	FName RopeEndSocket;//[Offset: 0x420, Size: 8]
	float RopeLengthPerPiece;//[Offset: 0x428, Size: 4]
	AirplaneCharacter* AirPlane;//[Offset: 0x42c, Size: 4]
	class Pawn* PlaneClass;//[Offset: 0x430, Size: 4]
	float ExtensionCordLength;//[Offset: 0x434, Size: 4]
	float CircleModeJumpRadiusPercent;//[Offset: 0x438, Size: 4]
	float PlaneSpeed;//[Offset: 0x43c, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x440, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x444, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x448, Size: 4]
	SkeletalMeshComponent* ParabagSkeletalMeshComp;//[Offset: 0x44c, Size: 4]
	SkeletalMeshComponent* BalloonSkeletalMeshComp;//[Offset: 0x450, Size: 4]
	SplineMeshComponent*[] SplineMeshComponents;//[Offset: 0x454, Size: 12]
	SkeletalMeshComponent*[] BagSkeletalMeshComps;//[Offset: 0x460, Size: 12]
	bool WheatherCancelConnect(STExtraBaseCharacter* TargetCharcter);// 0x1fae470
	void UpdateSubBag();// 0x1ecd2f4
	void UpdateRope(float DeltaTime);// 0x1fae3f0
	void UpdateFunction(float DeltaTime);// 0x1fae370
	void UpdateFlyingOffset(float DeltaTime);// 0x1fae2f0
	void UpdateEmergencyCallBag(STExtraBaseCharacter* ConnectedCharacter, int SeatIdx, bool bAdd);// 0x1fae1e8
	void UpdateBoneVisible();// 0x1ecd2d8
	void UpdateBalloonLoc(float DeltaTime, bool bForceFinished);// 0x1fae11c
	void RemoveConnectedCharacter(STExtraBaseCharacter* ConnectedCharacter);// 0x1fae0a4
	void OnRep_InteractingCharacters();// 0x1fae090
	void OnRep_CurStateType(enum OldState);// 0x1fae018
	void OnCameraModeChange(byte CameraMode);// 0x1fadfa0
	void OnAvatarEquippedSucc(enum SlotType, bool IsEquipped, int InItemID);// 0x1fade94
	void HideSubBag(bool bNeedHidden, int Index, bool bApplyAll);// 0x2bb69b8
	void HideAllBackpack();// 0x1fade80
	float GetCurrentStateTime();// 0x1fade58
	AirplaneData GenerateAirplaneData(float AirPlaneHeight);// 0x1fadce0
	void DestroyRope();// 0x1fadccc
	void CheckCollision(float DeltaTime);// 0x1fadc4c
	void CheckAirplaneLoc();// 0x1fadc30
	void ChangeState(enum NewState);// 0x1fadbb8
	void CallAirPlane(AirplaneData PlaneData);// 0x1fad9c0
	void BreakAwayAll();// 0x2bb69b8
	void AddConnectedCharacter(STExtraBaseCharacter* ConnectedCharacter);// 0x1fad93c

--------------------------------
Class: AirplaneCharacter.Character.Pawn.Actor.Object
	FString LuaFilePath;//[Offset: 0x654, Size: 12]
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x660, Size: 60]
	AirplaneData MyFlyingData;//[Offset: 0x69c, Size: 108]
	delegate OnReachForceJumpRatioDelegate;//[Offset: 0x708, Size: 12]
	bool bOnlyVisibleToTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x714, Size: 1]
	bool bStopAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x715, Size: 1]
	bool bForceControllerRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x716, Size: 1]
	void SetStopAllowed(bool InStop);// 0x1ed2908
	void SetOwnFlyingData(AirplaneData InFlyingData);// 0x1ed2710
	void SetOnlyVisibleToTeam(bool bFlag);// 0x1ed2688
	bool IsStopAllowed();// 0x1ed2660
	void CheckAirplanePos(float DeltaTime);// 0x1ed25e8

--------------------------------
Class: AirplaneData
	float PlaneHeight;//[Offset: 0x0, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x4, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x8, Size: 4]
	float CloseParachuteHeight;//[Offset: 0xc, Size: 4]
	Vector DestinationCenter;//[Offset: 0x10, Size: 12]
	Vector PlaneVelocity;//[Offset: 0x1c, Size: 12]
	Vector PlaneStartLoc;//[Offset: 0x28, Size: 12]
	Vector PlaneEndLoc;//[Offset: 0x34, Size: 12]
	Vector2D CanJumpLoc;//[Offset: 0x40, Size: 8]
	Vector2D ForceJumpLoc;//[Offset: 0x48, Size: 8]
	int TotalPlayerNum;//[Offset: 0x50, Size: 4]
	PlayerController*[] TotalPlayers;//[Offset: 0x54, Size: 12]
	PlayerController*[] CurPlayers;//[Offset: 0x60, Size: 12]

--------------------------------
Class: Skill_Zipline_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_AI_Build_Shield_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_UseBike_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: Skill_UseBike_B_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	SceneComponent* DefaultSceneRoot;//[Offset: 0x578, Size: 4]

--------------------------------
Class: BP_PlayerRifleBullet_C.STExtraShootWeaponBulletBase.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* BulletMesh;//[Offset: 0x580, Size: 4]

--------------------------------
Class: BP_PlayerShotgunBullet_C.STExtraShootWeaponBulletBase.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* BulletMesh;//[Offset: 0x580, Size: 4]

--------------------------------
Class: BP_PlayerSniperBullet_C.STExtraShootWeaponBulletBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x580, Size: 4]
	void ActiveBulletParticle();// 0x2bb69b8
	void UserConstructionScript();// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void ResetParticle();// 0x2bb69b8
	void DelayAction();// 0x2bb69b8
	void ExecuteUbergraph_BP_PlayerSniperBullet(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x2bb69b8
	ParticleSystemComponent* P_Sniper_bullet_01;//[Offset: 0x584, Size: 4]
	StaticMeshComponent* BulletMesh;//[Offset: 0x588, Size: 4]
	float EffectFxDelayShowTime;//[Offset: 0x58c, Size: 4]
	TimerHandle DelayParticleTimer;//[Offset: 0x590, Size: 8]

--------------------------------
Class: BP_PlayerPawn_Sink_AI_C.BP_PlayerPawn_FM_C.BP_PlayerPawn_C.STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3574, Size: 4]
	void OptimizeTickOnLowDevice(bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetExactDeviceLevel_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2bb69b8
	void UserConstructionScript();// 0x2bb69b8
	void ReceiveBeginPlay();// 0x2bb69b8
	void LuaReceiveBeginPlay();// 0x2bb69b8
	void ExecuteUbergraph_BP_PlayerPawn_Sink_AI(int EntryPoint);// 0x2bb69b8
	float[] DistanceFactors;//[Offset: 0x3578, Size: 12]

--------------------------------
Class: BP_MZJ_2X_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_MZJ_2X;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_DJ_Mid_Q_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_DJ_Mid_Q;//[Offset: 0x690, Size: 4]

--------------------------------
Class: VH_CoupeRB_1_C.BP_CoupeRB_Base_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	BP_VehicleMusic_C* VehicleMusic;//[Offset: 0x11f8, Size: 4]

--------------------------------
Class: BP_CoupeRB_Base_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	void HandleSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIndex);// 0x2bb69b8
	void HandleMusicListChanged();// 0x2bb69b8
	void UserConstructionScript();// 0x2bb69b8
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersFR;//[Offset: 0x11f0, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0x11f4, Size: 4]

--------------------------------
Class: BP_VehicleMusic_C.VehicleMusicComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: VehicleMusicComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate OnMusicListChanged;//[Offset: 0x14c, Size: 12]
	delegate OnSongsLoaded;//[Offset: 0x158, Size: 12]
	delegate OnSongChanged;//[Offset: 0x164, Size: 12]
	int[] MusicList;//[Offset: 0x170, Size: 12]
	AkAudioEvent* AudioEventPause;//[Offset: 0x180, Size: 40]
	AkAudioEvent* AudioEventResume;//[Offset: 0x1a8, Size: 40]
	AkAudioEvent*[] ControlEvents;//[Offset: 0x1d0, Size: 12]
	<int,SongInfo> Songs;//[Offset: 0x1dc, Size: 60]
	<int,SongInfo> LoadingSongs;//[Offset: 0x218, Size: 60]
	int ServerSongID;//[Offset: 0x254, Size: 4]
	bool bServerPlayOrPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 1]
	STExtraVehicleBase* Vehicle;//[Offset: 0x264, Size: 4]
	void RequirePlaySong(int InSongID);// 0x22d1f88
	void RequirePlayOrPause(bool InPlay);// 0x22d1ec0
	void PrevSong();// 0x22d1eac
	void PlayOrPause();// 0x22d1e98
	void OnSongsLoadedDelegate__DelegateSignature();// 0x2bb69b8
	void OnSongChangedDelegate__DelegateSignature();// 0x2bb69b8
	void OnRep_PlayOrPause();// 0x22d1e84
	void OnRep_MusicList();// 0x22d1e70
	void OnMusicListChangedDelegate__DelegateSignature();// 0x2bb69b8
	void NextSong();// 0x22d1e5c
	bool IsPlaying();// 0x22d1e34
	void InitMusicList(out const int[] InMusicList);// 0x22d1d28
	void InitMusicData(out const LuaSongInfo[] InSongs);// 0x22d1c7c
	FString GetSongName(int InSongID);// 0x22d1b74
	bool CanPlayMusic();// 0x22d1b4c
	void CallbackLoadedSongs();// 0x22d1b38
	void CallbackLoadedPauseEvent();// 0x22d1b24

--------------------------------
Class: SongInfo
	int SongID;//[Offset: 0x0, Size: 4]
	FString SongName;//[Offset: 0x4, Size: 12]
	float SongDuration;//[Offset: 0x10, Size: 4]
	SoftObjectPath SongEvent;//[Offset: 0x18, Size: 24]
	AkAudioEvent* SongEventPtr;//[Offset: 0x30, Size: 4]

--------------------------------
Class: LuaSongInfo
	int SongID;//[Offset: 0x0, Size: 4]
	FString SongName;//[Offset: 0x4, Size: 12]
	float SongDuration;//[Offset: 0x10, Size: 4]
	FString SongEvent;//[Offset: 0x14, Size: 12]

--------------------------------
Class: UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	bool DefaultLoadAllAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	VehCharAnimData[] VehCharAnimDataList;//[Offset: 0x184, Size: 12]
	void OnIdleAnimListAsyncLoadingFinished();// 0x27d2134
	void OnAnimListAsyncLoadingFinished(AsyncLoadCharVehAnimParams LoadingParam);// 0x27d1ed0
	void ChangeAnimData(out const VehCharAnimData[] InAnimData);// 0x27d1e24

--------------------------------
Class: AsyncLoadCharVehAnimParams

--------------------------------
Class: VehicleDataMgr.Actor.Object
	STExtraVehicleBase*[] VehiclesDataMap;//[Offset: 0x2fc, Size: 12]
	STExtraVehicleBase*[] uavDataMap;//[Offset: 0x308, Size: 12]
	UAEDataTable* VehicleSpawnTable;//[Offset: 0x350, Size: 4]
	UAEDataTable* VehicleMaxHPTable;//[Offset: 0x354, Size: 4]
	UAEDataTable* CarMusicTable;//[Offset: 0x394, Size: 4]
	void UnRegisterVehicle(STExtraVehicleBase* Vehicle);// 0x22cfc4c
	void UnRegisterUAV(STExtraVehicleBase* uav);// 0x22cfbd4
	void RemoveNoFreezeOn(SceneComponent* Actor);// 0x22cfb5c
	void RegisterVehicle(STExtraVehicleBase* Vehicle);// 0x22cfae4
	void RegisterUAV(STExtraVehicleBase* uav);// 0x22cfa6c
	static VehicleDataMgr* GetInstance(World* World);// 0x22cf9f4
	void AddNoFreezeOn(SceneComponent* Actor);// 0x22cf97c

--------------------------------
Class: Bandage_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* StaticMesh;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_Ammo_556mm_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_Ammo_556mm;//[Offset: 0x690, Size: 4]

--------------------------------
Class: GoldenTokenWrapper_C.BP_MutilCount_PickUpWrapperActor_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x6d4, Size: 4]
	void UserConstructionScript();// 0x2bb69b8
	void LoadOtherThing();// 0x2bb69b8
	void ExecuteUbergraph_GoldenTokenWrapper(int EntryPoint, bool ___bool_True_if_break_was_hit_Variable, int ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int[] CallFunc_Map_Keys_Keys, int ___int_Loop_Counter_Variable, int CallFunc_Array_Get_Item, ParticleSystem* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2bb69b8
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x6d8, Size: 4]
	<int,ParticleSystem*> Count2Particle;//[Offset: 0x6dc, Size: 60]

--------------------------------
Class: BP_MutilCount_PickUpWrapperActor_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x690, Size: 4]
	void LoadMutiMesh(bool ___bool_True_if_break_was_hit_Variable, int ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, StaticMesh* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LoadDynamicMeshInst_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x2bb69b8
	void LoadOtherThing();// 0x2bb69b8
	void UserConstructionScript();// 0x2bb69b8
	void OnSpawned();// 0x2bb69b8
	void OnRep_Count();// 0x2bb69b8
	void ExecuteUbergraph_BP_MutilCount_PickUpWrapperActor(int EntryPoint);// 0x2bb69b8
	StaticMeshComponent* StaticMesh;//[Offset: 0x694, Size: 4]
	<int,StaticMesh*> Count2Mesh;//[Offset: 0x698, Size: 60]

--------------------------------
Class: BP_Ammo_9mm_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_Ammo_9mm;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_QK_Mid_FlashHider_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_QK_Mid_FlashHider;//[Offset: 0x690, Size: 4]

--------------------------------
Class: PickUp_BP_Bag_Lv1_B_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_QK_Small_ExtendedBarrelr_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_QK_Small_Suppressor;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_Ammo_762mm_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_Ammo_762mm;//[Offset: 0x690, Size: 4]

--------------------------------
Class: Pills_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_QK_Mid_Suppressor_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_QK_Mid_Suppressor;//[Offset: 0x690, Size: 4]

--------------------------------
Class: PickUp_BP_Helmet_Lv1_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_MachineGun_P90_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_P90;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_DJ_Mid_EQ_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_DJ_Mid_EQ;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_MachineGun_Uzi_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_Uzi;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_Rifle_M762_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* Mag;//[Offset: 0x690, Size: 4]
	StaticMeshComponent* SM_M762;//[Offset: 0x694, Size: 4]

--------------------------------
Class: BP_MZJ_3X_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_MZJ_3X;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_DJ_Mid_E_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_DJ_Mid_E;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_Ammo_45ACP_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_Ammo_45ACP;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_MachineGun_UMP9_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* Mag;//[Offset: 0x690, Size: 4]
	StaticMeshComponent* SM_UMP9;//[Offset: 0x694, Size: 4]

--------------------------------
Class: Drink_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_DJ_Large_EQ_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_DJ_Large_EQ;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_QT_Sniper_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_QT_A;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_Grenade_Shoulei_Weapon_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* M18;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_QK_Choke_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_QK_Choke;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_QK_Mid_Compensator_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_QK_Mid_Compensator;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_Ammo_12Guage_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_Ammo_12Guage;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_ShotGun_M1014_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_SPAS-12;//[Offset: 0x690, Size: 4]

--------------------------------
Class: Firstaid_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_Grenade_Smoke_Weapon_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* M18;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_QK_Large_Compensator_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_QK_Large_Compensator;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_QK_Sniper_Suppressor_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_QK_Sniper_Suppressor;//[Offset: 0x690, Size: 4]

--------------------------------
Class: PickUp_BP_Armor_Lv1_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_Grenade_Burn_Weapon_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* M18;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_QK_Large_Suppressor_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_QK_Large_Suppressor;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_QK_Large_FlashHider_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_QK_Large_FlashHider;//[Offset: 0x690, Size: 4]

--------------------------------
Class: PickUp_BP_Helmet_Lv2_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x690, Size: 4]

--------------------------------
Class: PickUp_BP_Bag_Lv1_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_ShotGun_S686_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_S686;//[Offset: 0x690, Size: 4]

--------------------------------
Class: PickUp_BP_Bag_Lv2_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x690, Size: 4]

--------------------------------
Class: PickUp_BP_Armor_Lv2_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_ZDD_Sniper_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_ZDD_Sniper;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_DJ_Large_E_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_DJ_Large_E;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_Rifle_M416_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* Mag;//[Offset: 0x690, Size: 4]
	StaticMeshComponent* ST_WEP_M416_Lod;//[Offset: 0x694, Size: 4]
	StaticMeshComponent* SM_M416;//[Offset: 0x698, Size: 4]

--------------------------------
Class: BP_Rifle_AKM_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* Mag;//[Offset: 0x690, Size: 4]
	StaticMeshComponent* SM_AKM;//[Offset: 0x694, Size: 4]

--------------------------------
Class: BP_Shield_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* SM_M4A1;//[Offset: 0x690, Size: 4]

--------------------------------
Class: BP_MachineGun_Vector_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x2bb69b8
	StaticMeshComponent* StaticMesh;//[Offset: 0x690, Size: 4]
	StaticMeshComponent* SM_Vector;//[Offset: 0x694, Size: 4]

--------------------------------
